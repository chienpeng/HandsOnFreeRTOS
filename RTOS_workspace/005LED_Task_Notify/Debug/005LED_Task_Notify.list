
005LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007854  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b9c  08007b9c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b9c  08007b9c  00017b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ba4  08007ba4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ba4  08007ba4  00017ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          000144a4  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144c0  200144c0  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159be  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003093  00000000  00000000  00035a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00038aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001248  00000000  00000000  00039e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002304a  00000000  00000000  0003b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000156ec  00000000  00000000  0005e102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7d36  00000000  00000000  000737ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b524  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052d0  00000000  00000000  0014b574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080079cc 	.word	0x080079cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080079cc 	.word	0x080079cc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012eec 	.word	0x20012eec

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fc8b 	bl	8000e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f8b5 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f91d 	bl	80007b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= ( 1<< 0);
 800057a:	4b47      	ldr	r3, [pc, #284]	; (8000698 <main+0x130>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a46      	ldr	r2, [pc, #280]	; (8000698 <main+0x130>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000586:	4845      	ldr	r0, [pc, #276]	; (800069c <main+0x134>)
 8000588:	f004 ff00 	bl	800538c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 fd28 	bl	8004fe0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &ledg_task_handle);
 8000590:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <main+0x138>)
 8000592:	9301      	str	r3, [sp, #4]
 8000594:	2303      	movs	r3, #3
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	22c8      	movs	r2, #200	; 0xc8
 800059c:	4941      	ldr	r1, [pc, #260]	; (80006a4 <main+0x13c>)
 800059e:	4842      	ldr	r0, [pc, #264]	; (80006a8 <main+0x140>)
 80005a0:	f002 fac6 	bl	8002b30 <xTaskCreate>
 80005a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d00a      	beq.n	80005c2 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b0:	f383 8811 	msr	BASEPRI, r3
 80005b4:	f3bf 8f6f 	isb	sy
 80005b8:	f3bf 8f4f 	dsb	sy
 80005bc:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005be:	bf00      	nop
 80005c0:	e7fe      	b.n	80005c0 <main+0x58>

  next_task_handle = ledg_task_handle;
 80005c2:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <main+0x138>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a39      	ldr	r2, [pc, #228]	; (80006ac <main+0x144>)
 80005c8:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &ledr_task_handle);
 80005ca:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <main+0x148>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2301      	movs	r3, #1
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	; 0xc8
 80005d6:	4937      	ldr	r1, [pc, #220]	; (80006b4 <main+0x14c>)
 80005d8:	4837      	ldr	r0, [pc, #220]	; (80006b8 <main+0x150>)
 80005da:	f002 faa9 	bl	8002b30 <xTaskCreate>
 80005de:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d00a      	beq.n	80005fc <main+0x94>
        __asm volatile
 80005e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ea:	f383 8811 	msr	BASEPRI, r3
 80005ee:	f3bf 8f6f 	isb	sy
 80005f2:	f3bf 8f4f 	dsb	sy
 80005f6:	60fb      	str	r3, [r7, #12]
    }
 80005f8:	bf00      	nop
 80005fa:	e7fe      	b.n	80005fa <main+0x92>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80005fc:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <main+0x154>)
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	2302      	movs	r3, #2
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2300      	movs	r3, #0
 8000606:	22c8      	movs	r2, #200	; 0xc8
 8000608:	492d      	ldr	r1, [pc, #180]	; (80006c0 <main+0x158>)
 800060a:	482e      	ldr	r0, [pc, #184]	; (80006c4 <main+0x15c>)
 800060c:	f002 fa90 	bl	8002b30 <xTaskCreate>
 8000610:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000612:	697b      	ldr	r3, [r7, #20]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d00a      	beq.n	800062e <main+0xc6>
        __asm volatile
 8000618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061c:	f383 8811 	msr	BASEPRI, r3
 8000620:	f3bf 8f6f 	isb	sy
 8000624:	f3bf 8f4f 	dsb	sy
 8000628:	60bb      	str	r3, [r7, #8]
    }
 800062a:	bf00      	nop
 800062c:	e7fe      	b.n	800062c <main+0xc4>

  status = xTaskCreate(button_handler, "Button_task", 200, NULL, 4, &btn_task_handle);
 800062e:	4b26      	ldr	r3, [pc, #152]	; (80006c8 <main+0x160>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <main+0x164>)
 800063c:	4824      	ldr	r0, [pc, #144]	; (80006d0 <main+0x168>)
 800063e:	f002 fa77 	bl	8002b30 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00a      	beq.n	8000660 <main+0xf8>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
    }
 800065c:	bf00      	nop
 800065e:	e7fe      	b.n	800065e <main+0xf6>

  status = xTaskCreate(suspend_handler, "Resume_suspend_task", 200, NULL, 4, &resumeSuspend_task_handle);
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <main+0x16c>)
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2304      	movs	r3, #4
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	22c8      	movs	r2, #200	; 0xc8
 800066c:	491a      	ldr	r1, [pc, #104]	; (80006d8 <main+0x170>)
 800066e:	481b      	ldr	r0, [pc, #108]	; (80006dc <main+0x174>)
 8000670:	f002 fa5e 	bl	8002b30 <xTaskCreate>
 8000674:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d00a      	beq.n	8000692 <main+0x12a>
        __asm volatile
 800067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000680:	f383 8811 	msr	BASEPRI, r3
 8000684:	f3bf 8f6f 	isb	sy
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	603b      	str	r3, [r7, #0]
    }
 800068e:	bf00      	nop
 8000690:	e7fe      	b.n	8000690 <main+0x128>

  vTaskStartScheduler();
 8000692:	f002 fd7f 	bl	8003194 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	e7fe      	b.n	8000696 <main+0x12e>
 8000698:	e0001000 	.word	0xe0001000
 800069c:	0007a120 	.word	0x0007a120
 80006a0:	20000038 	.word	0x20000038
 80006a4:	080079e4 	.word	0x080079e4
 80006a8:	08000a71 	.word	0x08000a71
 80006ac:	2000004c 	.word	0x2000004c
 80006b0:	20000040 	.word	0x20000040
 80006b4:	080079f4 	.word	0x080079f4
 80006b8:	08000ad9 	.word	0x08000ad9
 80006bc:	2000003c 	.word	0x2000003c
 80006c0:	08007a04 	.word	0x08007a04
 80006c4:	08000b41 	.word	0x08000b41
 80006c8:	20000044 	.word	0x20000044
 80006cc:	08007a14 	.word	0x08007a14
 80006d0:	08000ba9 	.word	0x08000ba9
 80006d4:	20000048 	.word	0x20000048
 80006d8:	08007a20 	.word	0x08007a20
 80006dc:	08000bf9 	.word	0x08000bf9

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b094      	sub	sp, #80	; 0x50
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f007 f964 	bl	80079bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000704:	2300      	movs	r3, #0
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemClock_Config+0xcc>)
 800070e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000712:	6413      	str	r3, [r2, #64]	; 0x40
 8000714:	4b25      	ldr	r3, [pc, #148]	; (80007ac <SystemClock_Config+0xcc>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xd0>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xd0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2302      	movs	r3, #2
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800074c:	2300      	movs	r3, #0
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000750:	2308      	movs	r3, #8
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000754:	23a8      	movs	r3, #168	; 0xa8
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000758:	2302      	movs	r3, #2
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800075c:	2307      	movs	r3, #7
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fe9b 	bl	80014a0 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000770:	f000 fa84 	bl	8000c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000778:	2302      	movs	r3, #2
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2105      	movs	r1, #5
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f8fc 	bl	8001990 <HAL_RCC_ClockConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079e:	f000 fa6d 	bl	8000c7c <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	3750      	adds	r7, #80	; 0x50
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4ba2      	ldr	r3, [pc, #648]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4aa1      	ldr	r2, [pc, #644]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0310 	orr.w	r3, r3, #16
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b9f      	ldr	r3, [pc, #636]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b9b      	ldr	r3, [pc, #620]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a9a      	ldr	r2, [pc, #616]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b98      	ldr	r3, [pc, #608]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b94      	ldr	r3, [pc, #592]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a93      	ldr	r2, [pc, #588]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b91      	ldr	r3, [pc, #580]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b8d      	ldr	r3, [pc, #564]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a8c      	ldr	r2, [pc, #560]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b8a      	ldr	r3, [pc, #552]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b86      	ldr	r3, [pc, #536]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a85      	ldr	r2, [pc, #532]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b83      	ldr	r3, [pc, #524]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b7f      	ldr	r3, [pc, #508]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a7e      	ldr	r2, [pc, #504]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000860:	f043 0308 	orr.w	r3, r3, #8
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b7c      	ldr	r3, [pc, #496]	; (8000a58 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0308 	and.w	r3, r3, #8
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2108      	movs	r1, #8
 8000876:	4879      	ldr	r0, [pc, #484]	; (8000a5c <MX_GPIO_Init+0x2a8>)
 8000878:	f000 fdde 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2101      	movs	r1, #1
 8000880:	4877      	ldr	r0, [pc, #476]	; (8000a60 <MX_GPIO_Init+0x2ac>)
 8000882:	f000 fdd9 	bl	8001438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000886:	2200      	movs	r2, #0
 8000888:	f24f 0110 	movw	r1, #61456	; 0xf010
 800088c:	4875      	ldr	r0, [pc, #468]	; (8000a64 <MX_GPIO_Init+0x2b0>)
 800088e:	f000 fdd3 	bl	8001438 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000892:	2308      	movs	r3, #8
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	486c      	ldr	r0, [pc, #432]	; (8000a5c <MX_GPIO_Init+0x2a8>)
 80008aa:	f000 fc11 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008ae:	2301      	movs	r3, #1
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4866      	ldr	r0, [pc, #408]	; (8000a60 <MX_GPIO_Init+0x2ac>)
 80008c6:	f000 fc03 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ca:	2308      	movs	r3, #8
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008da:	2305      	movs	r3, #5
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	485e      	ldr	r0, [pc, #376]	; (8000a60 <MX_GPIO_Init+0x2ac>)
 80008e6:	f000 fbf3 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	485a      	ldr	r0, [pc, #360]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000900:	f000 fbe6 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000904:	2310      	movs	r3, #16
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000914:	2306      	movs	r3, #6
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	4852      	ldr	r0, [pc, #328]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000920:	f000 fbd6 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000924:	23e0      	movs	r3, #224	; 0xe0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000934:	2305      	movs	r3, #5
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	484a      	ldr	r0, [pc, #296]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 8000940:	f000 fbc6 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000944:	2304      	movs	r3, #4
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4845      	ldr	r0, [pc, #276]	; (8000a6c <MX_GPIO_Init+0x2b8>)
 8000958:	f000 fbba 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800095c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096e:	2305      	movs	r3, #5
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	483c      	ldr	r0, [pc, #240]	; (8000a6c <MX_GPIO_Init+0x2b8>)
 800097a:	f000 fba9 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000982:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4833      	ldr	r0, [pc, #204]	; (8000a64 <MX_GPIO_Init+0x2b0>)
 8000998:	f000 fb9a 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800099c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4829      	ldr	r0, [pc, #164]	; (8000a60 <MX_GPIO_Init+0x2ac>)
 80009ba:	f000 fb89 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4825      	ldr	r0, [pc, #148]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80009d4:	f000 fb7c 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481c      	ldr	r0, [pc, #112]	; (8000a68 <MX_GPIO_Init+0x2b4>)
 80009f6:	f000 fb6b 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009fa:	2320      	movs	r3, #32
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4815      	ldr	r0, [pc, #84]	; (8000a64 <MX_GPIO_Init+0x2b0>)
 8000a0e:	f000 fb5f 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a18:	2312      	movs	r3, #18
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a24:	2304      	movs	r3, #4
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480f      	ldr	r0, [pc, #60]	; (8000a6c <MX_GPIO_Init+0x2b8>)
 8000a30:	f000 fb4e 	bl	80010d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4804      	ldr	r0, [pc, #16]	; (8000a5c <MX_GPIO_Init+0x2a8>)
 8000a4a:	f000 fb41 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	; 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40020800 	.word	0x40020800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40020400 	.word	0x40020400

08000a70 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <led_green_handler+0x58>)
 8000a7a:	f006 febf 	bl	80077fc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 8000a7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <led_green_handler+0x5c>)
 8000a84:	f000 fcf1 	bl	800146a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2300      	movs	r3, #0
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2000      	movs	r0, #0
 8000a96:	f003 f92f 	bl	8003cf8 <xTaskGenericNotifyWait>
 8000a9a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d1ea      	bne.n	8000a78 <led_green_handler+0x8>
		{
			vTaskSuspendAll();
 8000aa2:	f002 fbd9 	bl	8003258 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <led_green_handler+0x60>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <led_green_handler+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000aae:	f002 fbe1 	bl	8003274 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_GREEN_PIN, GPIO_PIN_SET);
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <led_green_handler+0x5c>)
 8000aba:	f000 fcbd 	bl	8001438 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f002 f9f6 	bl	8002eb0 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000ac4:	e7d8      	b.n	8000a78 <led_green_handler+0x8>
 8000ac6:	bf00      	nop
 8000ac8:	08007a34 	.word	0x08007a34
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	2000003c 	.word	0x2000003c
 8000ad4:	2000004c 	.word	0x2000004c

08000ad8 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <led_red_handler+0x58>)
 8000ae2:	f006 fe8b 	bl	80077fc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aea:	4812      	ldr	r0, [pc, #72]	; (8000b34 <led_red_handler+0x5c>)
 8000aec:	f000 fcbd 	bl	800146a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000af0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	2300      	movs	r3, #0
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f003 f8fb 	bl	8003cf8 <xTaskGenericNotifyWait>
 8000b02:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d1ea      	bne.n	8000ae0 <led_red_handler+0x8>
		{
			vTaskSuspendAll();
 8000b0a:	f002 fba5 	bl	8003258 <vTaskSuspendAll>
			next_task_handle = resumeSuspend_task_handle;
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <led_red_handler+0x60>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <led_red_handler+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b16:	f002 fbad 	bl	8003274 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_RED_PIN, GPIO_PIN_SET);
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4804      	ldr	r0, [pc, #16]	; (8000b34 <led_red_handler+0x5c>)
 8000b22:	f000 fc89 	bl	8001438 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f002 f9c2 	bl	8002eb0 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b2c:	e7d8      	b.n	8000ae0 <led_red_handler+0x8>
 8000b2e:	bf00      	nop
 8000b30:	08007a48 	.word	0x08007a48
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	20000048 	.word	0x20000048
 8000b3c:	2000004c 	.word	0x2000004c

08000b40 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b48:	4813      	ldr	r0, [pc, #76]	; (8000b98 <led_orange_handler+0x58>)
 8000b4a:	f006 fe57 	bl	80077fc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b52:	4812      	ldr	r0, [pc, #72]	; (8000b9c <led_orange_handler+0x5c>)
 8000b54:	f000 fc89 	bl	800146a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000b58:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000b5c:	9300      	str	r3, [sp, #0]
 8000b5e:	2300      	movs	r3, #0
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	2000      	movs	r0, #0
 8000b66:	f003 f8c7 	bl	8003cf8 <xTaskGenericNotifyWait>
 8000b6a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d1ea      	bne.n	8000b48 <led_orange_handler+0x8>
		{
			vTaskSuspendAll();
 8000b72:	f002 fb71 	bl	8003258 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <led_orange_handler+0x60>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <led_orange_handler+0x64>)
 8000b7c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b7e:	f002 fb79 	bl	8003274 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_ORANGE_PIN, GPIO_PIN_SET);
 8000b82:	2201      	movs	r2, #1
 8000b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <led_orange_handler+0x5c>)
 8000b8a:	f000 fc55 	bl	8001438 <HAL_GPIO_WritePin>
			vTaskSuspend(NULL);
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f002 f98e 	bl	8002eb0 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b94:	e7d8      	b.n	8000b48 <led_orange_handler+0x8>
 8000b96:	bf00      	nop
 8000b98:	08007a5c 	.word	0x08007a5c
 8000b9c:	40020c00 	.word	0x40020c00
 8000ba0:	20000040 	.word	0x20000040
 8000ba4:	2000004c 	.word	0x2000004c

08000ba8 <button_handler>:
		}
	}
}

static void button_handler(void* parameters)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <button_handler+0x48>)
 8000bbc:	f000 fc24 	bl	8001408 <HAL_GPIO_ReadPin>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73bb      	strb	r3, [r7, #14]

		if (btn_read)
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00b      	beq.n	8000be2 <button_handler+0x3a>
		{
			if(!prev_read)
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d108      	bne.n	8000be2 <button_handler+0x3a>
				xTaskNotify(next_task_handle, 0, eNoAction);
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <button_handler+0x4c>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	9300      	str	r3, [sp, #0]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f003 f913 	bl	8003e08 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000be6:	200a      	movs	r0, #10
 8000be8:	f002 f92a 	bl	8002e40 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bec:	e7e4      	b.n	8000bb8 <button_handler+0x10>
 8000bee:	bf00      	nop
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	2000004c 	.word	0x2000004c

08000bf8 <suspend_handler>:
	}
}

static void suspend_handler(void* parameters)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	while(1)
	{
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(10));
 8000c00:	230a      	movs	r3, #10
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	2300      	movs	r3, #0
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f003 f874 	bl	8003cf8 <xTaskGenericNotifyWait>
 8000c10:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d1f3      	bne.n	8000c00 <suspend_handler+0x8>
		{
			vTaskResume(ledg_task_handle);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <suspend_handler+0x50>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fa27 	bl	8003070 <vTaskResume>
			vTaskResume(ledo_task_handle);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <suspend_handler+0x54>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f002 fa22 	bl	8003070 <vTaskResume>
			vTaskResume(ledr_task_handle);
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <suspend_handler+0x58>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4618      	mov	r0, r3
 8000c32:	f002 fa1d 	bl	8003070 <vTaskResume>
			vTaskSuspendAll();
 8000c36:	f002 fb0f 	bl	8003258 <vTaskSuspendAll>
			next_task_handle = ledg_task_handle;
 8000c3a:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <suspend_handler+0x50>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <suspend_handler+0x5c>)
 8000c40:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000c42:	f002 fb17 	bl	8003274 <xTaskResumeAll>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(10));
 8000c46:	e7db      	b.n	8000c00 <suspend_handler+0x8>
 8000c48:	20000038 	.word	0x20000038
 8000c4c:	2000003c 	.word	0x2000003c
 8000c50:	20000040 	.word	0x20000040
 8000c54:	2000004c 	.word	0x2000004c

08000c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6a:	f000 f92f 	bl	8000ecc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40001000 	.word	0x40001000

08000c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c80:	b672      	cpsid	i
}
 8000c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x8>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	607b      	str	r3, [r7, #4]
 8000c92:	4b10      	ldr	r3, [pc, #64]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	4a08      	ldr	r2, [pc, #32]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_MspInit+0x4c>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cc6:	f003 fe07 	bl	80048d8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <HAL_InitTick+0xe4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <HAL_InitTick+0xe4>)
 8000cf2:	f043 0310 	orr.w	r3, r3, #16
 8000cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <HAL_InitTick+0xe4>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	f003 0310 	and.w	r3, r3, #16
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d04:	f107 0210 	add.w	r2, r7, #16
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 f84a 	bl	8001da8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d103      	bne.n	8000d26 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d1e:	f001 f82f 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8000d22:	6378      	str	r0, [r7, #52]	; 0x34
 8000d24:	e004      	b.n	8000d30 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d26:	f001 f82b 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <HAL_InitTick+0xe8>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	0c9b      	lsrs	r3, r3, #18
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_InitTick+0xf0>)
 8000d42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d64:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d66:	f001 f851 	bl	8001e0c <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d11b      	bne.n	8000db0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d78:	4812      	ldr	r0, [pc, #72]	; (8000dc4 <HAL_InitTick+0xec>)
 8000d7a:	f001 f8a1 	bl	8001ec0 <HAL_TIM_Base_Start_IT>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d111      	bne.n	8000db0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d8c:	2036      	movs	r0, #54	; 0x36
 8000d8e:	f000 f991 	bl	80010b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b0f      	cmp	r3, #15
 8000d96:	d808      	bhi.n	8000daa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2036      	movs	r0, #54	; 0x36
 8000d9e:	f000 f96d 	bl	800107c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_InitTick+0xf4>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e002      	b.n	8000db0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000db0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3738      	adds	r7, #56	; 0x38
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	431bde83 	.word	0x431bde83
 8000dc4:	20000050 	.word	0x20000050
 8000dc8:	40001000 	.word	0x40001000
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM6_DAC_IRQHandler+0x10>)
 8000e02:	f001 f8cd 	bl	8001fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000050 	.word	0x20000050

08000e10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <SystemInit+0x20>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <SystemInit+0x20>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ffd7 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f006 fd69 	bl	8007938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff fb7f 	bl	8000568 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000e78:	08007bac 	.word	0x08007bac
  ldr r2, =_sbss
 8000e7c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000e80:	200144c0 	.word	0x200144c0

08000e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <HAL_Init+0x40>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e98:	4b0b      	ldr	r3, [pc, #44]	; (8000ec8 <HAL_Init+0x40>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_Init+0x40>)
 8000e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ea2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea4:	4b08      	ldr	r3, [pc, #32]	; (8000ec8 <HAL_Init+0x40>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a07      	ldr	r2, [pc, #28]	; (8000ec8 <HAL_Init+0x40>)
 8000eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f8d8 	bl	8001066 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff ff0e 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ebc:	f7ff fee4 	bl	8000c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_IncTick+0x20>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	4a04      	ldr	r2, [pc, #16]	; (8000ef0 <HAL_IncTick+0x24>)
 8000ede:	6013      	str	r3, [r2, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000008 	.word	0x20000008
 8000ef0:	20000098 	.word	0x20000098

08000ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef8:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <HAL_GetTick+0x14>)
 8000efa:	681b      	ldr	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000098 	.word	0x20000098

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	db0b      	blt.n	8000f9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	f003 021f 	and.w	r2, r3, #31
 8000f88:	4907      	ldr	r1, [pc, #28]	; (8000fa8 <__NVIC_EnableIRQ+0x38>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	095b      	lsrs	r3, r3, #5
 8000f90:	2001      	movs	r0, #1
 8000f92:	fa00 f202 	lsl.w	r2, r0, r2
 8000f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff ff4c 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800108e:	f7ff ff61 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 8001092:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	6978      	ldr	r0, [r7, #20]
 800109a:	f7ff ffb1 	bl	8001000 <NVIC_EncodePriority>
 800109e:	4602      	mov	r2, r0
 80010a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff80 	bl	8000fac <__NVIC_SetPriority>
}
 80010ac:	bf00      	nop
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff ff54 	bl	8000f70 <__NVIC_EnableIRQ>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
 80010ea:	e16b      	b.n	80013c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010ec:	2201      	movs	r2, #1
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 815a 	bne.w	80013be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	2b01      	cmp	r3, #1
 8001114:	d005      	beq.n	8001122 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800111e:	2b02      	cmp	r3, #2
 8001120:	d130      	bne.n	8001184 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	2203      	movs	r2, #3
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 0201 	and.w	r2, r3, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	2b03      	cmp	r3, #3
 800118e:	d017      	beq.n	80011c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d123      	bne.n	8001214 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	f003 0307 	and.w	r3, r3, #7
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	691a      	ldr	r2, [r3, #16]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	08da      	lsrs	r2, r3, #3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3208      	adds	r2, #8
 800120e:	69b9      	ldr	r1, [r7, #24]
 8001210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0203 	and.w	r2, r3, #3
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001250:	2b00      	cmp	r3, #0
 8001252:	f000 80b4 	beq.w	80013be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b60      	ldr	r3, [pc, #384]	; (80013dc <HAL_GPIO_Init+0x30c>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a5f      	ldr	r2, [pc, #380]	; (80013dc <HAL_GPIO_Init+0x30c>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b5d      	ldr	r3, [pc, #372]	; (80013dc <HAL_GPIO_Init+0x30c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001272:	4a5b      	ldr	r2, [pc, #364]	; (80013e0 <HAL_GPIO_Init+0x310>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	220f      	movs	r2, #15
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a52      	ldr	r2, [pc, #328]	; (80013e4 <HAL_GPIO_Init+0x314>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d02b      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a51      	ldr	r2, [pc, #324]	; (80013e8 <HAL_GPIO_Init+0x318>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d025      	beq.n	80012f2 <HAL_GPIO_Init+0x222>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a50      	ldr	r2, [pc, #320]	; (80013ec <HAL_GPIO_Init+0x31c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d01f      	beq.n	80012ee <HAL_GPIO_Init+0x21e>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a4f      	ldr	r2, [pc, #316]	; (80013f0 <HAL_GPIO_Init+0x320>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d019      	beq.n	80012ea <HAL_GPIO_Init+0x21a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a4e      	ldr	r2, [pc, #312]	; (80013f4 <HAL_GPIO_Init+0x324>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d013      	beq.n	80012e6 <HAL_GPIO_Init+0x216>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a4d      	ldr	r2, [pc, #308]	; (80013f8 <HAL_GPIO_Init+0x328>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d00d      	beq.n	80012e2 <HAL_GPIO_Init+0x212>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_GPIO_Init+0x32c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0x20e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <HAL_GPIO_Init+0x330>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d101      	bne.n	80012da <HAL_GPIO_Init+0x20a>
 80012d6:	2307      	movs	r3, #7
 80012d8:	e00e      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012da:	2308      	movs	r3, #8
 80012dc:	e00c      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012de:	2306      	movs	r3, #6
 80012e0:	e00a      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e008      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ea:	2303      	movs	r3, #3
 80012ec:	e004      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <HAL_GPIO_Init+0x228>
 80012f6:	2300      	movs	r3, #0
 80012f8:	69fa      	ldr	r2, [r7, #28]
 80012fa:	f002 0203 	and.w	r2, r2, #3
 80012fe:	0092      	lsls	r2, r2, #2
 8001300:	4093      	lsls	r3, r2
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001308:	4935      	ldr	r1, [pc, #212]	; (80013e0 <HAL_GPIO_Init+0x310>)
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133a:	4a32      	ldr	r2, [pc, #200]	; (8001404 <HAL_GPIO_Init+0x334>)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d003      	beq.n	8001364 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001364:	4a27      	ldr	r2, [pc, #156]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <HAL_GPIO_Init+0x334>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800138e:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_GPIO_Init+0x334>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b8:	4a12      	ldr	r2, [pc, #72]	; (8001404 <HAL_GPIO_Init+0x334>)
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b0f      	cmp	r3, #15
 80013c8:	f67f ae90 	bls.w	80010ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40021400 	.word	0x40021400
 80013fc:	40021800 	.word	0x40021800
 8001400:	40021c00 	.word	0x40021c00
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d002      	beq.n	8001426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
 8001424:	e001      	b.n	800142a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	460b      	mov	r3, r1
 8001442:	807b      	strh	r3, [r7, #2]
 8001444:	4613      	mov	r3, r2
 8001446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001448:	787b      	ldrb	r3, [r7, #1]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800144e:	887a      	ldrh	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001454:	e003      	b.n	800145e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	041a      	lsls	r2, r3, #16
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	619a      	str	r2, [r3, #24]
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800146a:	b480      	push	{r7}
 800146c:	b085      	sub	sp, #20
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	460b      	mov	r3, r1
 8001474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800147c:	887a      	ldrh	r2, [r7, #2]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4013      	ands	r3, r2
 8001482:	041a      	lsls	r2, r3, #16
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	43d9      	mvns	r1, r3
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	400b      	ands	r3, r1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e267      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d075      	beq.n	80015aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014be:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d00c      	beq.n	80014e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b85      	ldr	r3, [pc, #532]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d112      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d6:	4b82      	ldr	r3, [pc, #520]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e2:	d10b      	bne.n	80014fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e4:	4b7e      	ldr	r3, [pc, #504]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d05b      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d157      	bne.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e242      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001504:	d106      	bne.n	8001514 <HAL_RCC_OscConfig+0x74>
 8001506:	4b76      	ldr	r3, [pc, #472]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a75      	ldr	r2, [pc, #468]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e01d      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800151c:	d10c      	bne.n	8001538 <HAL_RCC_OscConfig+0x98>
 800151e:	4b70      	ldr	r3, [pc, #448]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6f      	ldr	r2, [pc, #444]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a6c      	ldr	r2, [pc, #432]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e00b      	b.n	8001550 <HAL_RCC_OscConfig+0xb0>
 8001538:	4b69      	ldr	r3, [pc, #420]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a68      	ldr	r2, [pc, #416]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b66      	ldr	r3, [pc, #408]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a65      	ldr	r2, [pc, #404]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001558:	f7ff fccc 	bl	8000ef4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fcc8 	bl	8000ef4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	; 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e207      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0xc0>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcb8 	bl	8000ef4 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fcb4 	bl	8000ef4 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1f3      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	4b51      	ldr	r3, [pc, #324]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d063      	beq.n	800167e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015b6:	4b4a      	ldr	r3, [pc, #296]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d116      	bne.n	8001608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015da:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e1c7      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4937      	ldr	r1, [pc, #220]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001606:	e03a      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001612:	2201      	movs	r2, #1
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fc6d 	bl	8000ef4 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fc69 	bl	8000ef4 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1a8      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4925      	ldr	r1, [pc, #148]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]
 8001650:	e015      	b.n	800167e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001652:	4b24      	ldr	r3, [pc, #144]	; (80016e4 <HAL_RCC_OscConfig+0x244>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fc4c 	bl	8000ef4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001660:	f7ff fc48 	bl	8000ef4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e187      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	2b00      	cmp	r3, #0
 8001688:	d036      	beq.n	80016f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d016      	beq.n	80016c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001692:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <HAL_RCC_OscConfig+0x248>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fc2c 	bl	8000ef4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a0:	f7ff fc28 	bl	8000ef4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e167      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_RCC_OscConfig+0x240>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d0f0      	beq.n	80016a0 <HAL_RCC_OscConfig+0x200>
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_OscConfig+0x248>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff fc15 	bl	8000ef4 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016cc:	e00e      	b.n	80016ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc11 	bl	8000ef4 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d907      	bls.n	80016ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e150      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	42470000 	.word	0x42470000
 80016e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ec:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1ea      	bne.n	80016ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8097 	beq.w	8001834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800170a:	4b81      	ldr	r3, [pc, #516]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b7d      	ldr	r3, [pc, #500]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a7c      	ldr	r2, [pc, #496]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b7a      	ldr	r3, [pc, #488]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001732:	2301      	movs	r3, #1
 8001734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001736:	4b77      	ldr	r3, [pc, #476]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173e:	2b00      	cmp	r3, #0
 8001740:	d118      	bne.n	8001774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001742:	4b74      	ldr	r3, [pc, #464]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a73      	ldr	r2, [pc, #460]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 8001748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174e:	f7ff fbd1 	bl	8000ef4 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff fbcd 	bl	8000ef4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e10c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001768:	4b6a      	ldr	r3, [pc, #424]	; (8001914 <HAL_RCC_OscConfig+0x474>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x2ea>
 800177c:	4b64      	ldr	r3, [pc, #400]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a63      	ldr	r2, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	e01c      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b05      	cmp	r3, #5
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x30c>
 8001792:	4b5f      	ldr	r3, [pc, #380]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	4a5e      	ldr	r2, [pc, #376]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6713      	str	r3, [r2, #112]	; 0x70
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	4a5b      	ldr	r2, [pc, #364]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6713      	str	r3, [r2, #112]	; 0x70
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x324>
 80017ac:	4b58      	ldr	r3, [pc, #352]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a57      	ldr	r2, [pc, #348]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	4b55      	ldr	r3, [pc, #340]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017be:	f023 0304 	bic.w	r3, r3, #4
 80017c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d015      	beq.n	80017f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017cc:	f7ff fb92 	bl	8000ef4 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d2:	e00a      	b.n	80017ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb8e 	bl	8000ef4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e0cb      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ee      	beq.n	80017d4 <HAL_RCC_OscConfig+0x334>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff fb7c 	bl	8000ef4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fe:	e00a      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001800:	f7ff fb78 	bl	8000ef4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	f241 3288 	movw	r2, #5000	; 0x1388
 800180e:	4293      	cmp	r3, r2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e0b5      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001816:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ee      	bne.n	8001800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	4a38      	ldr	r2, [pc, #224]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001832:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 80a1 	beq.w	8001980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800183e:	4b34      	ldr	r3, [pc, #208]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d05c      	beq.n	8001904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d141      	bne.n	80018d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b31      	ldr	r3, [pc, #196]	; (8001918 <HAL_RCC_OscConfig+0x478>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb4c 	bl	8000ef4 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb48 	bl	8000ef4 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e087      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69da      	ldr	r2, [r3, #28]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	431a      	orrs	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	491b      	ldr	r1, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a8:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_RCC_OscConfig+0x478>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fb21 	bl	8000ef4 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff fb1d 	bl	8000ef4 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e05c      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x416>
 80018d4:	e054      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb0a 	bl	8000ef4 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fb06 	bl	8000ef4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e045      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x444>
 8001902:	e03d      	b.n	8001980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d107      	bne.n	800191c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e038      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000
 8001918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800191c:	4b1b      	ldr	r3, [pc, #108]	; (800198c <HAL_RCC_OscConfig+0x4ec>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d028      	beq.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d121      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d11a      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800194c:	4013      	ands	r3, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001954:	4293      	cmp	r3, r2
 8001956:	d111      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0cc      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019a4:	4b68      	ldr	r3, [pc, #416]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d90c      	bls.n	80019cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ba:	4b63      	ldr	r3, [pc, #396]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0b8      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019e4:	4b59      	ldr	r3, [pc, #356]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	494d      	ldr	r1, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d044      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d119      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e07f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e06f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e067      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4934      	ldr	r1, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a80:	f7ff fa38 	bl	8000ef4 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff fa34 	bl	8000ef4 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e04f      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d20c      	bcs.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e032      	b.n	8001b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	4916      	ldr	r1, [pc, #88]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d009      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	490e      	ldr	r1, [pc, #56]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b16:	f000 f821 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	490a      	ldr	r1, [pc, #40]	; (8001b50 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	5ccb      	ldrb	r3, [r1, r3]
 8001b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff f8ce 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	08007b48 	.word	0x08007b48
 8001b54:	20000000 	.word	0x20000000
 8001b58:	20000004 	.word	0x20000004

08001b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b60:	b094      	sub	sp, #80	; 0x50
 8001b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	647b      	str	r3, [r7, #68]	; 0x44
 8001b68:	2300      	movs	r3, #0
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b74:	4b79      	ldr	r3, [pc, #484]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d00d      	beq.n	8001b9c <HAL_RCC_GetSysClockFreq+0x40>
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	f200 80e1 	bhi.w	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x34>
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	d003      	beq.n	8001b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b8e:	e0db      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b73      	ldr	r3, [pc, #460]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b94:	e0db      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b96:	4b73      	ldr	r3, [pc, #460]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9a:	e0d8      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ba4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	099b      	lsrs	r3, r3, #6
 8001bb8:	2200      	movs	r2, #0
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bce:	4622      	mov	r2, r4
 8001bd0:	462b      	mov	r3, r5
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4621      	mov	r1, r4
 8001be8:	1a51      	subs	r1, r2, r1
 8001bea:	6139      	str	r1, [r7, #16]
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb63 0301 	sbc.w	r3, r3, r1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c00:	4659      	mov	r1, fp
 8001c02:	018b      	lsls	r3, r1, #6
 8001c04:	4651      	mov	r1, sl
 8001c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c0a:	4651      	mov	r1, sl
 8001c0c:	018a      	lsls	r2, r1, #6
 8001c0e:	4651      	mov	r1, sl
 8001c10:	ebb2 0801 	subs.w	r8, r2, r1
 8001c14:	4659      	mov	r1, fp
 8001c16:	eb63 0901 	sbc.w	r9, r3, r1
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	f04f 0300 	mov.w	r3, #0
 8001c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c2e:	4690      	mov	r8, r2
 8001c30:	4699      	mov	r9, r3
 8001c32:	4623      	mov	r3, r4
 8001c34:	eb18 0303 	adds.w	r3, r8, r3
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	eb49 0303 	adc.w	r3, r9, r3
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c4e:	4629      	mov	r1, r5
 8001c50:	024b      	lsls	r3, r1, #9
 8001c52:	4621      	mov	r1, r4
 8001c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c58:	4621      	mov	r1, r4
 8001c5a:	024a      	lsls	r2, r1, #9
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c62:	2200      	movs	r2, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c6c:	f7fe fafa 	bl	8000264 <__aeabi_uldivmod>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4613      	mov	r3, r2
 8001c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c78:	e058      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7a:	4b38      	ldr	r3, [pc, #224]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	099b      	lsrs	r3, r3, #6
 8001c80:	2200      	movs	r2, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	4611      	mov	r1, r2
 8001c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c8a:	623b      	str	r3, [r7, #32]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c94:	4642      	mov	r2, r8
 8001c96:	464b      	mov	r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0159      	lsls	r1, r3, #5
 8001ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca6:	0150      	lsls	r0, r2, #5
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4641      	mov	r1, r8
 8001cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8001cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	f04f 0300 	mov.w	r3, #0
 8001cdc:	00eb      	lsls	r3, r5, #3
 8001cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce2:	00e2      	lsls	r2, r4, #3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	461d      	mov	r5, r3
 8001ce8:	4643      	mov	r3, r8
 8001cea:	18e3      	adds	r3, r4, r3
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	464b      	mov	r3, r9
 8001cf0:	eb45 0303 	adc.w	r3, r5, r3
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d02:	4629      	mov	r1, r5
 8001d04:	028b      	lsls	r3, r1, #10
 8001d06:	4621      	mov	r1, r4
 8001d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d0c:	4621      	mov	r1, r4
 8001d0e:	028a      	lsls	r2, r1, #10
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d16:	2200      	movs	r2, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d20:	f7fe faa0 	bl	8000264 <__aeabi_uldivmod>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4613      	mov	r3, r2
 8001d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d2c:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	0c1b      	lsrs	r3, r3, #16
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	3301      	adds	r3, #1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3750      	adds	r7, #80	; 0x50
 8001d54:	46bd      	mov	sp, r7
 8001d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	00f42400 	.word	0x00f42400
 8001d64:	007a1200 	.word	0x007a1200

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d84:	f7ff fff0 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40023800 	.word	0x40023800
 8001da4:	08007b58 	.word	0x08007b58

08001da8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	220f      	movs	r2, #15
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 0203 	and.w	r2, r3, #3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_RCC_GetClockConfig+0x5c>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	08db      	lsrs	r3, r3, #3
 8001de2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dea:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <HAL_RCC_GetClockConfig+0x60>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0207 	and.w	r2, r3, #7
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e041      	b.n	8001ea2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f839 	bl	8001eaa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3304      	adds	r3, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f000 f9d8 	bl	8002200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d001      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e04e      	b.n	8001f76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d022      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d01d      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d018      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00e      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x80>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d111      	bne.n	8001f64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d010      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f62:	e007      	b.n	8001f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0201 	orr.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40010000 	.word	0x40010000
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800
 8001f90:	40000c00 	.word	0x40000c00
 8001f94:	40010400 	.word	0x40010400
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40001800 	.word	0x40001800

08001fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0202 	mvn.w	r2, #2
 8001fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8ee 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8e0 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8f1 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0204 	mvn.w	r2, #4
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8c4 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8b6 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8c7 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0208 	mvn.w	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2204      	movs	r2, #4
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f89a 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f88c 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f89d 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2208      	movs	r2, #8
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f870 	bl	80021c4 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f862 	bl	80021b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f873 	bl	80021d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fd9a 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f902 	bl	8002354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002168:	2b40      	cmp	r3, #64	; 0x40
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f838 	bl	80021ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b20      	cmp	r3, #32
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0220 	mvn.w	r2, #32
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f8cc 	bl	8002340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a40      	ldr	r2, [pc, #256]	; (8002314 <TIM_Base_SetConfig+0x114>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d013      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800221e:	d00f      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a3d      	ldr	r2, [pc, #244]	; (8002318 <TIM_Base_SetConfig+0x118>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a3c      	ldr	r2, [pc, #240]	; (800231c <TIM_Base_SetConfig+0x11c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a3b      	ldr	r2, [pc, #236]	; (8002320 <TIM_Base_SetConfig+0x120>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3a      	ldr	r2, [pc, #232]	; (8002324 <TIM_Base_SetConfig+0x124>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <TIM_Base_SetConfig+0x114>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d02b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002260:	d027      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <TIM_Base_SetConfig+0x118>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d023      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2b      	ldr	r2, [pc, #172]	; (800231c <TIM_Base_SetConfig+0x11c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a2a      	ldr	r2, [pc, #168]	; (8002320 <TIM_Base_SetConfig+0x120>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d01b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a29      	ldr	r2, [pc, #164]	; (8002324 <TIM_Base_SetConfig+0x124>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d017      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a28      	ldr	r2, [pc, #160]	; (8002328 <TIM_Base_SetConfig+0x128>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a27      	ldr	r2, [pc, #156]	; (800232c <TIM_Base_SetConfig+0x12c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00f      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <TIM_Base_SetConfig+0x130>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00b      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a25      	ldr	r2, [pc, #148]	; (8002334 <TIM_Base_SetConfig+0x134>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a24      	ldr	r2, [pc, #144]	; (8002338 <TIM_Base_SetConfig+0x138>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a23      	ldr	r2, [pc, #140]	; (800233c <TIM_Base_SetConfig+0x13c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d108      	bne.n	80022c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a0a      	ldr	r2, [pc, #40]	; (8002314 <TIM_Base_SetConfig+0x114>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d003      	beq.n	80022f8 <TIM_Base_SetConfig+0xf8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <TIM_Base_SetConfig+0x124>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d103      	bne.n	8002300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	615a      	str	r2, [r3, #20]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40010000 	.word	0x40010000
 8002318:	40000400 	.word	0x40000400
 800231c:	40000800 	.word	0x40000800
 8002320:	40000c00 	.word	0x40000c00
 8002324:	40010400 	.word	0x40010400
 8002328:	40014000 	.word	0x40014000
 800232c:	40014400 	.word	0x40014400
 8002330:	40014800 	.word	0x40014800
 8002334:	40001800 	.word	0x40001800
 8002338:	40001c00 	.word	0x40001c00
 800233c:	40002000 	.word	0x40002000

08002340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f103 0208 	add.w	r2, r3, #8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f04f 32ff 	mov.w	r2, #4294967295
 8002380:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f103 0208 	add.w	r2, r3, #8
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f103 0208 	add.w	r2, r3, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023c2:	b480      	push	{r7}
 80023c4:	b085      	sub	sp, #20
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1c5a      	adds	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d103      	bne.n	800242a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e00c      	b.n	8002444 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3308      	adds	r3, #8
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	e002      	b.n	8002438 <vListInsert+0x2e>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	429a      	cmp	r2, r3
 8002442:	d2f6      	bcs.n	8002432 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	601a      	str	r2, [r3, #0]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6892      	ldr	r2, [r2, #8]
 8002492:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6852      	ldr	r2, [r2, #4]
 800249c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d103      	bne.n	80024b0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	1e5a      	subs	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <xQueueGenericReset+0x2e>
        __asm volatile
 80024e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ec:	f383 8811 	msr	BASEPRI, r3
 80024f0:	f3bf 8f6f 	isb	sy
 80024f4:	f3bf 8f4f 	dsb	sy
 80024f8:	60fb      	str	r3, [r7, #12]
    }
 80024fa:	bf00      	nop
 80024fc:	e7fe      	b.n	80024fc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d05d      	beq.n	80025c0 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002508:	2b00      	cmp	r3, #0
 800250a:	d059      	beq.n	80025c0 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002514:	2100      	movs	r1, #0
 8002516:	fba3 2302 	umull	r2, r3, r3, r2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <xQueueGenericReset+0x50>
 800251e:	2101      	movs	r1, #1
 8002520:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d14c      	bne.n	80025c0 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002526:	f002 fa55 	bl	80049d4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	6939      	ldr	r1, [r7, #16]
 8002534:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	441a      	add	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2200      	movs	r2, #0
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	3b01      	subs	r3, #1
 8002558:	6939      	ldr	r1, [r7, #16]
 800255a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	441a      	add	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d114      	bne.n	80025a6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01a      	beq.n	80025ba <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	3310      	adds	r3, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f985 	bl	8003898 <xTaskRemoveFromEventList>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002594:	4b15      	ldr	r3, [pc, #84]	; (80025ec <xQueueGenericReset+0x11c>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	e009      	b.n	80025ba <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	3310      	adds	r3, #16
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fedc 	bl	8002368 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	3324      	adds	r3, #36	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fed7 	bl	8002368 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80025ba:	f002 fa3b 	bl	8004a34 <vPortExitCritical>
 80025be:	e001      	b.n	80025c4 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10a      	bne.n	80025e0 <xQueueGenericReset+0x110>
        __asm volatile
 80025ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ce:	f383 8811 	msr	BASEPRI, r3
 80025d2:	f3bf 8f6f 	isb	sy
 80025d6:	f3bf 8f4f 	dsb	sy
 80025da:	60bb      	str	r3, [r7, #8]
    }
 80025dc:	bf00      	nop
 80025de:	e7fe      	b.n	80025de <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025e0:	697b      	ldr	r3, [r7, #20]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000ed04 	.word	0xe000ed04

080025f0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d02e      	beq.n	8002666 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002608:	2100      	movs	r1, #0
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	fba3 2302 	umull	r2, r3, r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d000      	beq.n	8002618 <xQueueGenericCreate+0x28>
 8002616:	2101      	movs	r1, #1
 8002618:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d123      	bne.n	8002666 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002626:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800262a:	d81c      	bhi.n	8002666 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	fb02 f303 	mul.w	r3, r2, r3
 8002634:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3350      	adds	r3, #80	; 0x50
 800263a:	4618      	mov	r0, r3
 800263c:	f002 faf6 	bl	8004c2c <pvPortMalloc>
 8002640:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01c      	beq.n	8002682 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3350      	adds	r3, #80	; 0x50
 8002650:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002652:	79fa      	ldrb	r2, [r7, #7]
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f814 	bl	800268c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002664:	e00d      	b.n	8002682 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10a      	bne.n	8002682 <xQueueGenericCreate+0x92>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	613b      	str	r3, [r7, #16]
    }
 800267e:	bf00      	nop
 8002680:	e7fe      	b.n	8002680 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002682:	69fb      	ldr	r3, [r7, #28]
    }
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e002      	b.n	80026ae <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026ba:	2101      	movs	r1, #1
 80026bc:	69b8      	ldr	r0, [r7, #24]
 80026be:	f7ff ff07 	bl	80024d0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	68f9      	ldr	r1, [r7, #12]
 80026d0:	2073      	movs	r0, #115	; 0x73
 80026d2:	f004 fa0f 	bl	8006af4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026d6:	bf00      	nop
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026e0:	b590      	push	{r4, r7, lr}
 80026e2:	b08f      	sub	sp, #60	; 0x3c
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10a      	bne.n	8002710 <xQueueReceive+0x30>
        __asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	623b      	str	r3, [r7, #32]
    }
 800270c:	bf00      	nop
 800270e:	e7fe      	b.n	800270e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <xQueueReceive+0x3e>
 8002716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <xQueueReceive+0x42>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueReceive+0x44>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueReceive+0x5e>
        __asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	61fb      	str	r3, [r7, #28]
    }
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800273e:	f001 fabd 	bl	8003cbc <xTaskGetSchedulerState>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d102      	bne.n	800274e <xQueueReceive+0x6e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <xQueueReceive+0x72>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <xQueueReceive+0x74>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10a      	bne.n	800276e <xQueueReceive+0x8e>
        __asm volatile
 8002758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800275c:	f383 8811 	msr	BASEPRI, r3
 8002760:	f3bf 8f6f 	isb	sy
 8002764:	f3bf 8f4f 	dsb	sy
 8002768:	61bb      	str	r3, [r7, #24]
    }
 800276a:	bf00      	nop
 800276c:	e7fe      	b.n	800276c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800276e:	f002 f931 	bl	80049d4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d02f      	beq.n	80027de <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002782:	f000 f8bd 	bl	8002900 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	4618      	mov	r0, r3
 800278a:	f004 ff41 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 800278e:	4604      	mov	r4, r0
 8002790:	2000      	movs	r0, #0
 8002792:	f004 ff3d 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 8002796:	4602      	mov	r2, r0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2101      	movs	r1, #1
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	4621      	mov	r1, r4
 80027a0:	205c      	movs	r0, #92	; 0x5c
 80027a2:	f004 fa1d 	bl	8006be0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1e5a      	subs	r2, r3, #1
 80027aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00f      	beq.n	80027d6 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	3310      	adds	r3, #16
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 f86c 	bl	8003898 <xTaskRemoveFromEventList>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027c6:	4b4d      	ldr	r3, [pc, #308]	; (80028fc <xQueueReceive+0x21c>)
 80027c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027d6:	f002 f92d 	bl	8004a34 <vPortExitCritical>
                return pdPASS;
 80027da:	2301      	movs	r3, #1
 80027dc:	e08a      	b.n	80028f4 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d113      	bne.n	800280c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027e4:	f002 f926 	bl	8004a34 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 ff10 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 80027f0:	4604      	mov	r4, r0
 80027f2:	2000      	movs	r0, #0
 80027f4:	f004 ff0c 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2101      	movs	r1, #1
 80027fe:	9100      	str	r1, [sp, #0]
 8002800:	4621      	mov	r1, r4
 8002802:	205c      	movs	r0, #92	; 0x5c
 8002804:	f004 f9ec 	bl	8006be0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002808:	2300      	movs	r3, #0
 800280a:	e073      	b.n	80028f4 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	4618      	mov	r0, r3
 8002818:	f001 f916 	bl	8003a48 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800281c:	2301      	movs	r3, #1
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002820:	f002 f908 	bl	8004a34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002824:	f000 fd18 	bl	8003258 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002828:	f002 f8d4 	bl	80049d4 <vPortEnterCritical>
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002832:	b25b      	sxtb	r3, r3
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d103      	bne.n	8002842 <xQueueReceive+0x162>
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002848:	b25b      	sxtb	r3, r3
 800284a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284e:	d103      	bne.n	8002858 <xQueueReceive+0x178>
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002858:	f002 f8ec 	bl	8004a34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800285c:	1d3a      	adds	r2, r7, #4
 800285e:	f107 0310 	add.w	r3, r7, #16
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f905 	bl	8003a74 <xTaskCheckForTimeOut>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d124      	bne.n	80028ba <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002872:	f000 f8bd 	bl	80029f0 <prvIsQueueEmpty>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d018      	beq.n	80028ae <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800287c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287e:	3324      	adds	r3, #36	; 0x24
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f000 ff9b 	bl	80037c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800288a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800288c:	f000 f85e 	bl	800294c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002890:	f000 fcf0 	bl	8003274 <xTaskResumeAll>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f47f af69 	bne.w	800276e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800289c:	4b17      	ldr	r3, [pc, #92]	; (80028fc <xQueueReceive+0x21c>)
 800289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	e75f      	b.n	800276e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b0:	f000 f84c 	bl	800294c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028b4:	f000 fcde 	bl	8003274 <xTaskResumeAll>
 80028b8:	e759      	b.n	800276e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028bc:	f000 f846 	bl	800294c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028c0:	f000 fcd8 	bl	8003274 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c6:	f000 f893 	bl	80029f0 <prvIsQueueEmpty>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f43f af4e 	beq.w	800276e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	4618      	mov	r0, r3
 80028d6:	f004 fe9b 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 80028da:	4604      	mov	r4, r0
 80028dc:	2000      	movs	r0, #0
 80028de:	f004 fe97 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 80028e2:	4602      	mov	r2, r0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2101      	movs	r1, #1
 80028e8:	9100      	str	r1, [sp, #0]
 80028ea:	4621      	mov	r1, r4
 80028ec:	205c      	movs	r0, #92	; 0x5c
 80028ee:	f004 f977 	bl	8006be0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80028f2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3734      	adds	r7, #52	; 0x34
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	e000ed04 	.word	0xe000ed04

08002900 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	2b00      	cmp	r3, #0
 8002910:	d018      	beq.n	8002944 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	441a      	add	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	d303      	bcc.n	8002934 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68d9      	ldr	r1, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	461a      	mov	r2, r3
 800293e:	6838      	ldr	r0, [r7, #0]
 8002940:	f005 f82e 	bl	80079a0 <memcpy>
    }
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002954:	f002 f83e 	bl	80049d4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800295e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002960:	e011      	b.n	8002986 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d012      	beq.n	8002990 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3324      	adds	r3, #36	; 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f000 ff92 	bl	8003898 <xTaskRemoveFromEventList>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800297a:	f001 f8e1 	bl	8003b40 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	3b01      	subs	r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	2b00      	cmp	r3, #0
 800298c:	dce9      	bgt.n	8002962 <prvUnlockQueue+0x16>
 800298e:	e000      	b.n	8002992 <prvUnlockQueue+0x46>
                    break;
 8002990:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	22ff      	movs	r2, #255	; 0xff
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800299a:	f002 f84b 	bl	8004a34 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800299e:	f002 f819 	bl	80049d4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029a8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029aa:	e011      	b.n	80029d0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d012      	beq.n	80029da <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3310      	adds	r3, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 ff6d 	bl	8003898 <xTaskRemoveFromEventList>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80029c4:	f001 f8bc 	bl	8003b40 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029c8:	7bbb      	ldrb	r3, [r7, #14]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	dce9      	bgt.n	80029ac <prvUnlockQueue+0x60>
 80029d8:	e000      	b.n	80029dc <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80029da:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80029e4:	f002 f826 	bl	8004a34 <vPortExitCritical>
}
 80029e8:	bf00      	nop
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029f8:	f001 ffec 	bl	80049d4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a04:	2301      	movs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e001      	b.n	8002a0e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a0e:	f002 f811 	bl	8004a34 <vPortExitCritical>

    return xReturn;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	60fb      	str	r3, [r7, #12]
    }
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d024      	beq.n	8002a96 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	e01e      	b.n	8002a90 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <vQueueAddToRegistry+0xa8>)
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d105      	bne.n	8002a6e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4a17      	ldr	r2, [pc, #92]	; (8002ac4 <vQueueAddToRegistry+0xa8>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
                    break;
 8002a6c:	e013      	b.n	8002a96 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <vQueueAddToRegistry+0x6e>
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <vQueueAddToRegistry+0xa8>)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d104      	bne.n	8002a8a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <vQueueAddToRegistry+0xa8>)
 8002a86:	4413      	add	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2b07      	cmp	r3, #7
 8002a94:	d9dd      	bls.n	8002a52 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00f      	beq.n	8002abc <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 fdb0 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2071      	movs	r0, #113	; 0x71
 8002ab8:	f003 ffc2 	bl	8006a40 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002abc:	bf00      	nop
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	2000009c 	.word	0x2000009c

08002ac8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ad8:	f001 ff7c 	bl	80049d4 <vPortEnterCritical>
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d103      	bne.n	8002af2 <vQueueWaitForMessageRestricted+0x2a>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afe:	d103      	bne.n	8002b08 <vQueueWaitForMessageRestricted+0x40>
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b08:	f001 ff94 	bl	8004a34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	3324      	adds	r3, #36	; 0x24
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fe73 	bl	8003808 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b22:	6978      	ldr	r0, [r7, #20]
 8002b24:	f7ff ff12 	bl	800294c <prvUnlockQueue>
    }
 8002b28:	bf00      	nop
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af04      	add	r7, sp, #16
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 f871 	bl	8004c2c <pvPortMalloc>
 8002b4a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d013      	beq.n	8002b7a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b52:	2058      	movs	r0, #88	; 0x58
 8002b54:	f002 f86a 	bl	8004c2c <pvPortMalloc>
 8002b58:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b60:	2258      	movs	r2, #88	; 0x58
 8002b62:	2100      	movs	r1, #0
 8002b64:	69f8      	ldr	r0, [r7, #28]
 8002b66:	f004 ff29 	bl	80079bc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b70:	e005      	b.n	8002b7e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b72:	6978      	ldr	r0, [r7, #20]
 8002b74:	f002 f914 	bl	8004da0 <vPortFree>
 8002b78:	e001      	b.n	8002b7e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d013      	beq.n	8002bac <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b84:	88fa      	ldrh	r2, [r7, #6]
 8002b86:	2300      	movs	r3, #0
 8002b88:	9303      	str	r3, [sp, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	9302      	str	r3, [sp, #8]
 8002b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68b9      	ldr	r1, [r7, #8]
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f80e 	bl	8002bbc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ba0:	69f8      	ldr	r0, [r7, #28]
 8002ba2:	f000 f899 	bl	8002cd8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e002      	b.n	8002bb2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bac:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bb2:	69bb      	ldr	r3, [r7, #24]
    }
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	21a5      	movs	r1, #165	; 0xa5
 8002bd6:	f004 fef1 	bl	80079bc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002be4:	3b01      	subs	r3, #1
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	f023 0307 	bic.w	r3, r3, #7
 8002bf2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	617b      	str	r3, [r7, #20]
    }
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01e      	beq.n	8002c58 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	e012      	b.n	8002c46 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	7819      	ldrb	r1, [r3, #0]
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3334      	adds	r3, #52	; 0x34
 8002c30:	460a      	mov	r2, r1
 8002c32:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	4413      	add	r3, r2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d006      	beq.n	8002c4e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	3301      	adds	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d9e9      	bls.n	8002c20 <prvInitialiseNewTask+0x64>
 8002c4c:	e000      	b.n	8002c50 <prvInitialiseNewTask+0x94>
            {
                break;
 8002c4e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d90a      	bls.n	8002c74 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	613b      	str	r3, [r7, #16]
    }
 8002c70:	bf00      	nop
 8002c72:	e7fe      	b.n	8002c72 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d901      	bls.n	8002c7e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c88:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb8a 	bl	80023a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	3318      	adds	r3, #24
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fb85 	bl	80023a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	f1c3 0205 	rsb	r2, r3, #5
 8002caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	69b8      	ldr	r0, [r7, #24]
 8002cba:	f001 fcdd 	bl	8004678 <pxPortInitialiseStack>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002cd8:	b5b0      	push	{r4, r5, r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ce0:	f001 fe78 	bl	80049d4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ce4:	4b4f      	ldr	r3, [pc, #316]	; (8002e24 <prvAddNewTaskToReadyList+0x14c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a4e      	ldr	r2, [pc, #312]	; (8002e24 <prvAddNewTaskToReadyList+0x14c>)
 8002cec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002cee:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <prvAddNewTaskToReadyList+0x150>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d109      	bne.n	8002d0a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002cf6:	4a4c      	ldr	r2, [pc, #304]	; (8002e28 <prvAddNewTaskToReadyList+0x150>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cfc:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <prvAddNewTaskToReadyList+0x14c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d110      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d04:	f000 ff40 	bl	8003b88 <prvInitialiseTaskLists>
 8002d08:	e00d      	b.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d0a:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <prvAddNewTaskToReadyList+0x154>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <prvAddNewTaskToReadyList+0x150>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d802      	bhi.n	8002d26 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d20:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <prvAddNewTaskToReadyList+0x150>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d26:	4b42      	ldr	r3, [pc, #264]	; (8002e30 <prvAddNewTaskToReadyList+0x158>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	4a40      	ldr	r2, [pc, #256]	; (8002e30 <prvAddNewTaskToReadyList+0x158>)
 8002d2e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d30:	4b3f      	ldr	r3, [pc, #252]	; (8002e30 <prvAddNewTaskToReadyList+0x158>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d016      	beq.n	8002d6c <prvAddNewTaskToReadyList+0x94>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fb3f 	bl	80073c4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	461d      	mov	r5, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	1ae3      	subs	r3, r4, r3
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	462b      	mov	r3, r5
 8002d68:	f002 f9dc 	bl	8005124 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fbac 	bl	80074cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <prvAddNewTaskToReadyList+0x15c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	4a2c      	ldr	r2, [pc, #176]	; (8002e34 <prvAddNewTaskToReadyList+0x15c>)
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8a:	492b      	ldr	r1, [pc, #172]	; (8002e38 <prvAddNewTaskToReadyList+0x160>)
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	3304      	adds	r3, #4
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	3204      	adds	r2, #4
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	1d1a      	adds	r2, r3, #4
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <prvAddNewTaskToReadyList+0x160>)
 8002dca:	441a      	add	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	615a      	str	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4918      	ldr	r1, [pc, #96]	; (8002e38 <prvAddNewTaskToReadyList+0x160>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	4814      	ldr	r0, [pc, #80]	; (8002e38 <prvAddNewTaskToReadyList+0x160>)
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4403      	add	r3, r0
 8002df0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002df2:	f001 fe1f 	bl	8004a34 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002df6:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <prvAddNewTaskToReadyList+0x154>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00e      	beq.n	8002e1c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <prvAddNewTaskToReadyList+0x150>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d207      	bcs.n	8002e1c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <prvAddNewTaskToReadyList+0x164>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e1c:	bf00      	nop
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bdb0      	pop	{r4, r5, r7, pc}
 8002e24:	200001b4 	.word	0x200001b4
 8002e28:	200000dc 	.word	0x200000dc
 8002e2c:	200001c0 	.word	0x200001c0
 8002e30:	200001d0 	.word	0x200001d0
 8002e34:	200001bc 	.word	0x200001bc
 8002e38:	200000e0 	.word	0x200000e0
 8002e3c:	e000ed04 	.word	0xe000ed04

08002e40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d01b      	beq.n	8002e8a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <vTaskDelay+0x68>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00a      	beq.n	8002e70 <vTaskDelay+0x30>
        __asm volatile
 8002e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5e:	f383 8811 	msr	BASEPRI, r3
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	60bb      	str	r3, [r7, #8]
    }
 8002e6c:	bf00      	nop
 8002e6e:	e7fe      	b.n	8002e6e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002e70:	f000 f9f2 	bl	8003258 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	2023      	movs	r0, #35	; 0x23
 8002e78:	f003 fda6 	bl	80069c8 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f001 f8f6 	bl	8004070 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002e84:	f000 f9f6 	bl	8003274 <xTaskResumeAll>
 8002e88:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d107      	bne.n	8002ea0 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <vTaskDelay+0x6c>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	200001dc 	.word	0x200001dc
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002eb8:	f001 fd8c 	bl	80049d4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d102      	bne.n	8002ec8 <vTaskSuspend+0x18>
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <vTaskSuspend+0x13c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e000      	b.n	8002eca <vTaskSuspend+0x1a>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f004 fb9e 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	2029      	movs	r0, #41	; 0x29
 8002eda:	f003 fd75 	bl	80069c8 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff faca 	bl	800247c <uxListRemove>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d115      	bne.n	8002f1a <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef2:	493f      	ldr	r1, [pc, #252]	; (8002ff0 <vTaskSuspend+0x140>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <vTaskSuspend+0x6a>
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	2201      	movs	r2, #1
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <vTaskSuspend+0x144>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4013      	ands	r3, r2
 8002f16:	4a37      	ldr	r2, [pc, #220]	; (8002ff4 <vTaskSuspend+0x144>)
 8002f18:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	3318      	adds	r3, #24
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff faa8 	bl	800247c <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	211b      	movs	r1, #27
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 fb0d 	bl	8007550 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	3304      	adds	r3, #4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	482e      	ldr	r0, [pc, #184]	; (8002ff8 <vTaskSuspend+0x148>)
 8002f3e:	f7ff fa40 	bl	80023c2 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e010      	b.n	8002f6a <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3354      	adds	r3, #84	; 0x54
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3354      	adds	r3, #84	; 0x54
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3301      	adds	r3, #1
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	ddeb      	ble.n	8002f48 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8002f70:	f001 fd60 	bl	8004a34 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <vTaskSuspend+0x14c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8002f7c:	f001 fd2a 	bl	80049d4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8002f80:	f000 fe80 	bl	8003c84 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8002f84:	f001 fd56 	bl	8004a34 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8002f88:	4b18      	ldr	r3, [pc, #96]	; (8002fec <vTaskSuspend+0x13c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d127      	bne.n	8002fe2 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <vTaskSuspend+0x14c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d017      	beq.n	8002fca <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <vTaskSuspend+0x150>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <vTaskSuspend+0x108>
        __asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	60fb      	str	r3, [r7, #12]
    }
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8002fb8:	4b12      	ldr	r3, [pc, #72]	; (8003004 <vTaskSuspend+0x154>)
 8002fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002fc8:	e00b      	b.n	8002fe2 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <vTaskSuspend+0x148>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <vTaskSuspend+0x158>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d103      	bne.n	8002fde <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <vTaskSuspend+0x13c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
    }
 8002fdc:	e001      	b.n	8002fe2 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 8002fde:	f000 fb85 	bl	80036ec <vTaskSwitchContext>
    }
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	200000dc 	.word	0x200000dc
 8002ff0:	200000e0 	.word	0x200000e0
 8002ff4:	200001bc 	.word	0x200001bc
 8002ff8:	200001a0 	.word	0x200001a0
 8002ffc:	200001c0 	.word	0x200001c0
 8003000:	200001dc 	.word	0x200001dc
 8003004:	e000ed04 	.word	0xe000ed04
 8003008:	200001b4 	.word	0x200001b4

0800300c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60fb      	str	r3, [r7, #12]
    }
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <prvTaskIsTaskSuspended+0x5c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10a      	bne.n	8003058 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <prvTaskIsTaskSuspended+0x60>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d005      	beq.n	8003058 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003058:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800305a:	4618      	mov	r0, r3
 800305c:	371c      	adds	r7, #28
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200001a0 	.word	0x200001a0
 800306c:	20000174 	.word	0x20000174

08003070 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <vTaskResume+0x28>
        __asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	60fb      	str	r3, [r7, #12]
    }
 8003094:	bf00      	nop
 8003096:	e7fe      	b.n	8003096 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003098:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <vTaskResume+0x114>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d06c      	beq.n	800317c <vTaskResume+0x10c>
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d069      	beq.n	800317c <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 80030a8:	f001 fc94 	bl	80049d4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f7ff ffad 	bl	800300c <prvTaskIsTaskSuspended>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05f      	beq.n	8003178 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f004 faa8 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 80030c0:	4603      	mov	r3, r0
 80030c2:	4619      	mov	r1, r3
 80030c4:	202a      	movs	r0, #42	; 0x2a
 80030c6:	f003 fc7f 	bl	80069c8 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3304      	adds	r3, #4
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff f9d4 	bl	800247c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f9f8 	bl	80074cc <SEGGER_SYSVIEW_OnTaskStartReady>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	2201      	movs	r2, #1
 80030e2:	409a      	lsls	r2, r3
 80030e4:	4b28      	ldr	r3, [pc, #160]	; (8003188 <vTaskResume+0x118>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	4a27      	ldr	r2, [pc, #156]	; (8003188 <vTaskResume+0x118>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4926      	ldr	r1, [pc, #152]	; (800318c <vTaskResume+0x11c>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3304      	adds	r3, #4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	60da      	str	r2, [r3, #12]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	3204      	adds	r2, #4
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1d1a      	adds	r2, r3, #4
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4a16      	ldr	r2, [pc, #88]	; (800318c <vTaskResume+0x11c>)
 8003132:	441a      	add	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	615a      	str	r2, [r3, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800313c:	4913      	ldr	r1, [pc, #76]	; (800318c <vTaskResume+0x11c>)
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	1c59      	adds	r1, r3, #1
 800314c:	480f      	ldr	r0, [pc, #60]	; (800318c <vTaskResume+0x11c>)
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4403      	add	r3, r0
 8003158:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	4b09      	ldr	r3, [pc, #36]	; (8003184 <vTaskResume+0x114>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	429a      	cmp	r2, r3
 8003166:	d307      	bcc.n	8003178 <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <vTaskResume+0x120>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003178:	f001 fc5c 	bl	8004a34 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800317c:	bf00      	nop
 800317e:	3718      	adds	r7, #24
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	200000dc 	.word	0x200000dc
 8003188:	200001bc 	.word	0x200001bc
 800318c:	200000e0 	.word	0x200000e0
 8003190:	e000ed04 	.word	0xe000ed04

08003194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <vTaskStartScheduler+0xa4>)
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2300      	movs	r3, #0
 80031a4:	2282      	movs	r2, #130	; 0x82
 80031a6:	4925      	ldr	r1, [pc, #148]	; (800323c <vTaskStartScheduler+0xa8>)
 80031a8:	4825      	ldr	r0, [pc, #148]	; (8003240 <vTaskStartScheduler+0xac>)
 80031aa:	f7ff fcc1 	bl	8002b30 <xTaskCreate>
 80031ae:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80031b6:	f000 ffdb 	bl	8004170 <xTimerCreateTimerTask>
 80031ba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d124      	bne.n	800320c <vTaskStartScheduler+0x78>
        __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60bb      	str	r3, [r7, #8]
    }
 80031d4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80031d6:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <vTaskStartScheduler+0xb0>)
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031de:	4b1a      	ldr	r3, [pc, #104]	; (8003248 <vTaskStartScheduler+0xb4>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <vTaskStartScheduler+0xb8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031ea:	4b19      	ldr	r3, [pc, #100]	; (8003250 <vTaskStartScheduler+0xbc>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b12      	ldr	r3, [pc, #72]	; (8003238 <vTaskStartScheduler+0xa4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d102      	bne.n	80031fc <vTaskStartScheduler+0x68>
 80031f6:	f004 f8c9 	bl	800738c <SEGGER_SYSVIEW_OnIdle>
 80031fa:	e004      	b.n	8003206 <vTaskStartScheduler+0x72>
 80031fc:	4b14      	ldr	r3, [pc, #80]	; (8003250 <vTaskStartScheduler+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f004 f921 	bl	8007448 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003206:	f001 fac5 	bl	8004794 <xPortStartScheduler>
 800320a:	e00e      	b.n	800322a <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d10a      	bne.n	800322a <vTaskStartScheduler+0x96>
        __asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	607b      	str	r3, [r7, #4]
    }
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <vTaskStartScheduler+0xc0>)
 800322c:	681b      	ldr	r3, [r3, #0]
}
 800322e:	bf00      	nop
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200001d8 	.word	0x200001d8
 800323c:	08007a70 	.word	0x08007a70
 8003240:	08003b59 	.word	0x08003b59
 8003244:	200001d4 	.word	0x200001d4
 8003248:	200001c0 	.word	0x200001c0
 800324c:	200001b8 	.word	0x200001b8
 8003250:	200000dc 	.word	0x200000dc
 8003254:	2000000c 	.word	0x2000000c

08003258 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <vTaskSuspendAll+0x18>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a03      	ldr	r2, [pc, #12]	; (8003270 <vTaskSuspendAll+0x18>)
 8003264:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	200001dc 	.word	0x200001dc

08003274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003282:	4b73      	ldr	r3, [pc, #460]	; (8003450 <xTaskResumeAll+0x1dc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <xTaskResumeAll+0x2c>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	607b      	str	r3, [r7, #4]
    }
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032a0:	f001 fb98 	bl	80049d4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <xTaskResumeAll+0x1dc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	4a69      	ldr	r2, [pc, #420]	; (8003450 <xTaskResumeAll+0x1dc>)
 80032ac:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ae:	4b68      	ldr	r3, [pc, #416]	; (8003450 <xTaskResumeAll+0x1dc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f040 80c4 	bne.w	8003440 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032b8:	4b66      	ldr	r3, [pc, #408]	; (8003454 <xTaskResumeAll+0x1e0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80bf 	beq.w	8003440 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032c2:	e08e      	b.n	80033e2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c4:	4b64      	ldr	r3, [pc, #400]	; (8003458 <xTaskResumeAll+0x1e4>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	6a12      	ldr	r2, [r2, #32]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	69d2      	ldr	r2, [r2, #28]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3318      	adds	r3, #24
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d103      	bne.n	80032fa <xTaskResumeAll+0x86>
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	6a1a      	ldr	r2, [r3, #32]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	2200      	movs	r2, #0
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1e5a      	subs	r2, r3, #1
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	68d2      	ldr	r2, [r2, #12]
 8003318:	609a      	str	r2, [r3, #8]
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3304      	adds	r3, #4
 800332c:	429a      	cmp	r2, r3
 800332e:	d103      	bne.n	8003338 <xTaskResumeAll+0xc4>
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	1e5a      	subs	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4618      	mov	r0, r3
 800334c:	f004 f8be 	bl	80074cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	4b40      	ldr	r3, [pc, #256]	; (800345c <xTaskResumeAll+0x1e8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4313      	orrs	r3, r2
 800335e:	4a3f      	ldr	r2, [pc, #252]	; (800345c <xTaskResumeAll+0x1e8>)
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	493e      	ldr	r1, [pc, #248]	; (8003460 <xTaskResumeAll+0x1ec>)
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3304      	adds	r3, #4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	3204      	adds	r2, #4
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <xTaskResumeAll+0x1ec>)
 80033a6:	441a      	add	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	615a      	str	r2, [r3, #20]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	492b      	ldr	r1, [pc, #172]	; (8003460 <xTaskResumeAll+0x1ec>)
 80033b2:	4613      	mov	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	4827      	ldr	r0, [pc, #156]	; (8003460 <xTaskResumeAll+0x1ec>)
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4403      	add	r3, r0
 80033cc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <xTaskResumeAll+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <xTaskResumeAll+0x1f4>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <xTaskResumeAll+0x1e4>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f47f af6c 	bne.w	80032c4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80033f2:	f000 fc47 	bl	8003c84 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <xTaskResumeAll+0x1f8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d010      	beq.n	8003424 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003402:	f000 f859 	bl	80034b8 <xTaskIncrementTick>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d002      	beq.n	8003412 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800340c:	4b16      	ldr	r3, [pc, #88]	; (8003468 <xTaskResumeAll+0x1f4>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3b01      	subs	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f1      	bne.n	8003402 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <xTaskResumeAll+0x1f8>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <xTaskResumeAll+0x1f4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d009      	beq.n	8003440 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800342c:	2301      	movs	r3, #1
 800342e:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <xTaskResumeAll+0x1fc>)
 8003432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003440:	f001 faf8 	bl	8004a34 <vPortExitCritical>

    return xAlreadyYielded;
 8003444:	69bb      	ldr	r3, [r7, #24]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200001dc 	.word	0x200001dc
 8003454:	200001b4 	.word	0x200001b4
 8003458:	20000174 	.word	0x20000174
 800345c:	200001bc 	.word	0x200001bc
 8003460:	200000e0 	.word	0x200000e0
 8003464:	200000dc 	.word	0x200000dc
 8003468:	200001c8 	.word	0x200001c8
 800346c:	200001c4 	.word	0x200001c4
 8003470:	e000ed04 	.word	0xe000ed04

08003474 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <xTaskGetTickCount+0x1c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003480:	687b      	ldr	r3, [r7, #4]
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	200001b8 	.word	0x200001b8

08003494 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800349a:	f001 fb87 	bl	8004bac <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800349e:	2300      	movs	r3, #0
 80034a0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034a2:	4b04      	ldr	r3, [pc, #16]	; (80034b4 <xTaskGetTickCountFromISR+0x20>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80034a8:	683b      	ldr	r3, [r7, #0]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200001b8 	.word	0x200001b8

080034b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034c2:	4b7f      	ldr	r3, [pc, #508]	; (80036c0 <xTaskIncrementTick+0x208>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 80f0 	bne.w	80036ac <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034cc:	4b7d      	ldr	r3, [pc, #500]	; (80036c4 <xTaskIncrementTick+0x20c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80034d4:	4a7b      	ldr	r2, [pc, #492]	; (80036c4 <xTaskIncrementTick+0x20c>)
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d120      	bne.n	8003522 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80034e0:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <xTaskIncrementTick+0x210>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <xTaskIncrementTick+0x48>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	607b      	str	r3, [r7, #4]
    }
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <xTaskIncrementTick+0x46>
 8003500:	4b71      	ldr	r3, [pc, #452]	; (80036c8 <xTaskIncrementTick+0x210>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	4b71      	ldr	r3, [pc, #452]	; (80036cc <xTaskIncrementTick+0x214>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a6f      	ldr	r2, [pc, #444]	; (80036c8 <xTaskIncrementTick+0x210>)
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4a6f      	ldr	r2, [pc, #444]	; (80036cc <xTaskIncrementTick+0x214>)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b6e      	ldr	r3, [pc, #440]	; (80036d0 <xTaskIncrementTick+0x218>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a6d      	ldr	r2, [pc, #436]	; (80036d0 <xTaskIncrementTick+0x218>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	f000 fbb1 	bl	8003c84 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003522:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <xTaskIncrementTick+0x21c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6a3a      	ldr	r2, [r7, #32]
 8003528:	429a      	cmp	r2, r3
 800352a:	f0c0 80aa 	bcc.w	8003682 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800352e:	4b66      	ldr	r3, [pc, #408]	; (80036c8 <xTaskIncrementTick+0x210>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d104      	bne.n	8003542 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003538:	4b66      	ldr	r3, [pc, #408]	; (80036d4 <xTaskIncrementTick+0x21c>)
 800353a:	f04f 32ff 	mov.w	r2, #4294967295
 800353e:	601a      	str	r2, [r3, #0]
                    break;
 8003540:	e09f      	b.n	8003682 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003542:	4b61      	ldr	r3, [pc, #388]	; (80036c8 <xTaskIncrementTick+0x210>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003552:	6a3a      	ldr	r2, [r7, #32]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	d203      	bcs.n	8003562 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800355a:	4a5e      	ldr	r2, [pc, #376]	; (80036d4 <xTaskIncrementTick+0x21c>)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003560:	e08f      	b.n	8003682 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	68d2      	ldr	r2, [r2, #12]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	6892      	ldr	r2, [r2, #8]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	3304      	adds	r3, #4
 8003584:	429a      	cmp	r2, r3
 8003586:	d103      	bne.n	8003590 <xTaskIncrementTick+0xd8>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2200      	movs	r2, #0
 8003594:	615a      	str	r2, [r3, #20]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01e      	beq.n	80035e6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	6a12      	ldr	r2, [r2, #32]
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	69d2      	ldr	r2, [r2, #28]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	3318      	adds	r3, #24
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d103      	bne.n	80035d6 <xTaskIncrementTick+0x11e>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	6a1a      	ldr	r2, [r3, #32]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	2200      	movs	r2, #0
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f003 ff6f 	bl	80074cc <SEGGER_SYSVIEW_OnTaskStartReady>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	2201      	movs	r2, #1
 80035f4:	409a      	lsls	r2, r3
 80035f6:	4b38      	ldr	r3, [pc, #224]	; (80036d8 <xTaskIncrementTick+0x220>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	4a36      	ldr	r2, [pc, #216]	; (80036d8 <xTaskIncrementTick+0x220>)
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003604:	4935      	ldr	r1, [pc, #212]	; (80036dc <xTaskIncrementTick+0x224>)
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3304      	adds	r3, #4
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	3204      	adds	r2, #4
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1d1a      	adds	r2, r3, #4
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363a:	4613      	mov	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4a26      	ldr	r2, [pc, #152]	; (80036dc <xTaskIncrementTick+0x224>)
 8003644:	441a      	add	r2, r3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	615a      	str	r2, [r3, #20]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364e:	4923      	ldr	r1, [pc, #140]	; (80036dc <xTaskIncrementTick+0x224>)
 8003650:	4613      	mov	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	1c59      	adds	r1, r3, #1
 800365e:	481f      	ldr	r0, [pc, #124]	; (80036dc <xTaskIncrementTick+0x224>)
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4403      	add	r3, r0
 800366a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003670:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <xTaskIncrementTick+0x228>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	429a      	cmp	r2, r3
 8003678:	f67f af59 	bls.w	800352e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003680:	e755      	b.n	800352e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003682:	4b17      	ldr	r3, [pc, #92]	; (80036e0 <xTaskIncrementTick+0x228>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003688:	4914      	ldr	r1, [pc, #80]	; (80036dc <xTaskIncrementTick+0x224>)
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d901      	bls.n	800369e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800369a:	2301      	movs	r3, #1
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800369e:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <xTaskIncrementTick+0x22c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d007      	beq.n	80036b6 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80036a6:	2301      	movs	r3, #1
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
 80036aa:	e004      	b.n	80036b6 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <xTaskIncrementTick+0x230>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	4a0d      	ldr	r2, [pc, #52]	; (80036e8 <xTaskIncrementTick+0x230>)
 80036b4:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3728      	adds	r7, #40	; 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200001dc 	.word	0x200001dc
 80036c4:	200001b8 	.word	0x200001b8
 80036c8:	2000016c 	.word	0x2000016c
 80036cc:	20000170 	.word	0x20000170
 80036d0:	200001cc 	.word	0x200001cc
 80036d4:	200001d4 	.word	0x200001d4
 80036d8:	200001bc 	.word	0x200001bc
 80036dc:	200000e0 	.word	0x200000e0
 80036e0:	200000dc 	.word	0x200000dc
 80036e4:	200001c8 	.word	0x200001c8
 80036e8:	200001c4 	.word	0x200001c4

080036ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <vTaskSwitchContext+0xbc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80036fa:	4b2c      	ldr	r3, [pc, #176]	; (80037ac <vTaskSwitchContext+0xc0>)
 80036fc:	2201      	movs	r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003700:	e04d      	b.n	800379e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003702:	4b2a      	ldr	r3, [pc, #168]	; (80037ac <vTaskSwitchContext+0xc0>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003708:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <vTaskSwitchContext+0xc4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	fab3 f383 	clz	r3, r3
 8003714:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003716:	7afb      	ldrb	r3, [r7, #11]
 8003718:	f1c3 031f 	rsb	r3, r3, #31
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	4925      	ldr	r1, [pc, #148]	; (80037b4 <vTaskSwitchContext+0xc8>)
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10a      	bne.n	8003748 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003736:	f383 8811 	msr	BASEPRI, r3
 800373a:	f3bf 8f6f 	isb	sy
 800373e:	f3bf 8f4f 	dsb	sy
 8003742:	607b      	str	r3, [r7, #4]
    }
 8003744:	bf00      	nop
 8003746:	e7fe      	b.n	8003746 <vTaskSwitchContext+0x5a>
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <vTaskSwitchContext+0xc8>)
 8003754:	4413      	add	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	3308      	adds	r3, #8
 800376a:	429a      	cmp	r2, r3
 800376c:	d104      	bne.n	8003778 <vTaskSwitchContext+0x8c>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <vTaskSwitchContext+0xcc>)
 8003780:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003782:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <vTaskSwitchContext+0xcc>)
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	4b0d      	ldr	r3, [pc, #52]	; (80037bc <vTaskSwitchContext+0xd0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d102      	bne.n	8003794 <vTaskSwitchContext+0xa8>
 800378e:	f003 fdfd 	bl	800738c <SEGGER_SYSVIEW_OnIdle>
}
 8003792:	e004      	b.n	800379e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003794:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <vTaskSwitchContext+0xcc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f003 fe55 	bl	8007448 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200001dc 	.word	0x200001dc
 80037ac:	200001c8 	.word	0x200001c8
 80037b0:	200001bc 	.word	0x200001bc
 80037b4:	200000e0 	.word	0x200000e0
 80037b8:	200000dc 	.word	0x200000dc
 80037bc:	200001d8 	.word	0x200001d8

080037c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	60fb      	str	r3, [r7, #12]
    }
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037e6:	4b07      	ldr	r3, [pc, #28]	; (8003804 <vTaskPlaceOnEventList+0x44>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3318      	adds	r3, #24
 80037ec:	4619      	mov	r1, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f7fe fe0b 	bl	800240a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037f4:	2101      	movs	r1, #1
 80037f6:	6838      	ldr	r0, [r7, #0]
 80037f8:	f000 fc3a 	bl	8004070 <prvAddCurrentTaskToDelayedList>
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	200000dc 	.word	0x200000dc

08003808 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	613b      	str	r3, [r7, #16]
    }
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	61da      	str	r2, [r3, #28]
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	6892      	ldr	r2, [r2, #8]
 8003846:	621a      	str	r2, [r3, #32]
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <vTaskPlaceOnEventListRestricted+0x8c>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	3218      	adds	r2, #24
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f103 0218 	add.w	r2, r3, #24
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
 800387c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800387e:	2024      	movs	r0, #36	; 0x24
 8003880:	f003 f884 	bl	800698c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	68b8      	ldr	r0, [r7, #8]
 8003888:	f000 fbf2 	bl	8004070 <prvAddCurrentTaskToDelayedList>
    }
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	200000dc 	.word	0x200000dc

08003898 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60fb      	str	r3, [r7, #12]
    }
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	6a3a      	ldr	r2, [r7, #32]
 80038d0:	6a12      	ldr	r2, [r2, #32]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	6a3a      	ldr	r2, [r7, #32]
 80038da:	69d2      	ldr	r2, [r2, #28]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	3318      	adds	r3, #24
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d103      	bne.n	80038f2 <xTaskRemoveFromEventList+0x5a>
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	2200      	movs	r2, #0
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1e5a      	subs	r2, r3, #1
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003902:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <xTaskRemoveFromEventList+0x198>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d162      	bne.n	80039d0 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	6a3a      	ldr	r2, [r7, #32]
 8003916:	68d2      	ldr	r2, [r2, #12]
 8003918:	609a      	str	r2, [r3, #8]
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	685a      	ldr	r2, [r3, #4]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	3304      	adds	r3, #4
 800392c:	429a      	cmp	r2, r3
 800392e:	d103      	bne.n	8003938 <xTaskRemoveFromEventList+0xa0>
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	68da      	ldr	r2, [r3, #12]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	1e5a      	subs	r2, r3, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fdbe 	bl	80074cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	2201      	movs	r2, #1
 8003956:	409a      	lsls	r2, r3
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <xTaskRemoveFromEventList+0x19c>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4313      	orrs	r3, r2
 800395e:	4a35      	ldr	r2, [pc, #212]	; (8003a34 <xTaskRemoveFromEventList+0x19c>)
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	4934      	ldr	r1, [pc, #208]	; (8003a38 <xTaskRemoveFromEventList+0x1a0>)
 8003968:	4613      	mov	r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3304      	adds	r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	613b      	str	r3, [r7, #16]
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	6a3a      	ldr	r2, [r7, #32]
 800398c:	3204      	adds	r2, #4
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <xTaskRemoveFromEventList+0x1a0>)
 80039a6:	441a      	add	r2, r3
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	615a      	str	r2, [r3, #20]
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4921      	ldr	r1, [pc, #132]	; (8003a38 <xTaskRemoveFromEventList+0x1a0>)
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	1c59      	adds	r1, r3, #1
 80039c0:	481d      	ldr	r0, [pc, #116]	; (8003a38 <xTaskRemoveFromEventList+0x1a0>)
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4403      	add	r3, r0
 80039cc:	6019      	str	r1, [r3, #0]
 80039ce:	e01b      	b.n	8003a08 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <xTaskRemoveFromEventList+0x1a4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	61da      	str	r2, [r3, #28]
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	621a      	str	r2, [r3, #32]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	3218      	adds	r2, #24
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f103 0218 	add.w	r2, r3, #24
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	609a      	str	r2, [r3, #8]
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <xTaskRemoveFromEventList+0x1a4>)
 80039fc:	629a      	str	r2, [r3, #40]	; 0x28
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <xTaskRemoveFromEventList+0x1a4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <xTaskRemoveFromEventList+0x1a4>)
 8003a06:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <xTaskRemoveFromEventList+0x1a8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d905      	bls.n	8003a22 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <xTaskRemoveFromEventList+0x1ac>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	e001      	b.n	8003a26 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3728      	adds	r7, #40	; 0x28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	200001dc 	.word	0x200001dc
 8003a34:	200001bc 	.word	0x200001bc
 8003a38:	200000e0 	.word	0x200000e0
 8003a3c:	20000174 	.word	0x20000174
 8003a40:	200000dc 	.word	0x200000dc
 8003a44:	200001c8 	.word	0x200001c8

08003a48 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <vTaskInternalSetTimeOutState+0x24>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <vTaskInternalSetTimeOutState+0x28>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	200001cc 	.word	0x200001cc
 8003a70:	200001b8 	.word	0x200001b8

08003a74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	613b      	str	r3, [r7, #16]
    }
 8003a96:	bf00      	nop
 8003a98:	e7fe      	b.n	8003a98 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	60fb      	str	r3, [r7, #12]
    }
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ab6:	f000 ff8d 	bl	80049d4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003aba:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <xTaskCheckForTimeOut+0xc4>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d102      	bne.n	8003ada <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e026      	b.n	8003b28 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4b17      	ldr	r3, [pc, #92]	; (8003b3c <xTaskCheckForTimeOut+0xc8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d00a      	beq.n	8003afc <xTaskCheckForTimeOut+0x88>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d305      	bcc.n	8003afc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003af0:	2301      	movs	r3, #1
 8003af2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e015      	b.n	8003b28 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d20b      	bcs.n	8003b1e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	1ad2      	subs	r2, r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ff98 	bl	8003a48 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61fb      	str	r3, [r7, #28]
 8003b1c:	e004      	b.n	8003b28 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b28:	f000 ff84 	bl	8004a34 <vPortExitCritical>

    return xReturn;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200001b8 	.word	0x200001b8
 8003b3c:	200001cc 	.word	0x200001cc

08003b40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <vTaskMissedYield+0x14>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	200001c8 	.word	0x200001c8

08003b58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b60:	f000 f852 	bl	8003c08 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b64:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <prvIdleTask+0x28>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d9f9      	bls.n	8003b60 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <prvIdleTask+0x2c>)
 8003b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f3bf 8f4f 	dsb	sy
 8003b78:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b7c:	e7f0      	b.n	8003b60 <prvIdleTask+0x8>
 8003b7e:	bf00      	nop
 8003b80:	200000e0 	.word	0x200000e0
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	e00c      	b.n	8003bae <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <prvInitialiseTaskLists+0x60>)
 8003ba0:	4413      	add	r3, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fbe0 	bl	8002368 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3301      	adds	r3, #1
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d9ef      	bls.n	8003b94 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bb4:	480d      	ldr	r0, [pc, #52]	; (8003bec <prvInitialiseTaskLists+0x64>)
 8003bb6:	f7fe fbd7 	bl	8002368 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bba:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <prvInitialiseTaskLists+0x68>)
 8003bbc:	f7fe fbd4 	bl	8002368 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003bc0:	480c      	ldr	r0, [pc, #48]	; (8003bf4 <prvInitialiseTaskLists+0x6c>)
 8003bc2:	f7fe fbd1 	bl	8002368 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003bc6:	480c      	ldr	r0, [pc, #48]	; (8003bf8 <prvInitialiseTaskLists+0x70>)
 8003bc8:	f7fe fbce 	bl	8002368 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003bcc:	480b      	ldr	r0, [pc, #44]	; (8003bfc <prvInitialiseTaskLists+0x74>)
 8003bce:	f7fe fbcb 	bl	8002368 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <prvInitialiseTaskLists+0x78>)
 8003bd4:	4a05      	ldr	r2, [pc, #20]	; (8003bec <prvInitialiseTaskLists+0x64>)
 8003bd6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <prvInitialiseTaskLists+0x7c>)
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <prvInitialiseTaskLists+0x68>)
 8003bdc:	601a      	str	r2, [r3, #0]
}
 8003bde:	bf00      	nop
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	200000e0 	.word	0x200000e0
 8003bec:	20000144 	.word	0x20000144
 8003bf0:	20000158 	.word	0x20000158
 8003bf4:	20000174 	.word	0x20000174
 8003bf8:	20000188 	.word	0x20000188
 8003bfc:	200001a0 	.word	0x200001a0
 8003c00:	2000016c 	.word	0x2000016c
 8003c04:	20000170 	.word	0x20000170

08003c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c0e:	e019      	b.n	8003c44 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c10:	f000 fee0 	bl	80049d4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <prvCheckTasksWaitingTermination+0x50>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fc2b 	bl	800247c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <prvCheckTasksWaitingTermination+0x54>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	4a0b      	ldr	r2, [pc, #44]	; (8003c5c <prvCheckTasksWaitingTermination+0x54>)
 8003c2e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003c30:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <prvCheckTasksWaitingTermination+0x58>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	4a0a      	ldr	r2, [pc, #40]	; (8003c60 <prvCheckTasksWaitingTermination+0x58>)
 8003c38:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003c3a:	f000 fefb 	bl	8004a34 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f810 	bl	8003c64 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <prvCheckTasksWaitingTermination+0x58>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e1      	bne.n	8003c10 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c4c:	bf00      	nop
 8003c4e:	bf00      	nop
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000188 	.word	0x20000188
 8003c5c:	200001b4 	.word	0x200001b4
 8003c60:	2000019c 	.word	0x2000019c

08003c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4618      	mov	r0, r3
 8003c72:	f001 f895 	bl	8004da0 <vPortFree>
            vPortFree( pxTCB );
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f001 f892 	bl	8004da0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c7c:	bf00      	nop
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <prvResetNextTaskUnblockTime+0x30>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d104      	bne.n	8003c9c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <prvResetNextTaskUnblockTime+0x34>)
 8003c94:	f04f 32ff 	mov.w	r2, #4294967295
 8003c98:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003c9a:	e005      	b.n	8003ca8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003c9c:	4b05      	ldr	r3, [pc, #20]	; (8003cb4 <prvResetNextTaskUnblockTime+0x30>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a04      	ldr	r2, [pc, #16]	; (8003cb8 <prvResetNextTaskUnblockTime+0x34>)
 8003ca6:	6013      	str	r3, [r2, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2000016c 	.word	0x2000016c
 8003cb8:	200001d4 	.word	0x200001d4

08003cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <xTaskGetSchedulerState+0x34>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d102      	bne.n	8003cd0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	607b      	str	r3, [r7, #4]
 8003cce:	e008      	b.n	8003ce2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <xTaskGetSchedulerState+0x38>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d102      	bne.n	8003cde <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	607b      	str	r3, [r7, #4]
 8003cdc:	e001      	b.n	8003ce2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003ce2:	687b      	ldr	r3, [r7, #4]
    }
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	200001c0 	.word	0x200001c0
 8003cf4:	200001dc 	.word	0x200001dc

08003cf8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af02      	add	r7, sp, #8
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	613b      	str	r3, [r7, #16]
    }
 8003d1e:	bf00      	nop
 8003d20:	e7fe      	b.n	8003d20 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003d22:	f000 fe57 	bl	80049d4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003d26:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3354      	adds	r3, #84	; 0x54
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d022      	beq.n	8003d7e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003d38:	4b31      	ldr	r3, [pc, #196]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	3214      	adds	r2, #20
 8003d40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	43d2      	mvns	r2, r2
 8003d48:	4011      	ands	r1, r2
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	3214      	adds	r2, #20
 8003d4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003d52:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	3354      	adds	r3, #84	; 0x54
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00b      	beq.n	8003d7e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d66:	2101      	movs	r1, #1
 8003d68:	6a38      	ldr	r0, [r7, #32]
 8003d6a:	f000 f981 	bl	8004070 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <xTaskGenericNotifyWait+0x10c>)
 8003d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d7e:	f000 fe59 	bl	8004a34 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003d82:	f000 fe27 	bl	80049d4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	2040      	movs	r0, #64	; 0x40
 8003d94:	f002 ff24 	bl	8006be0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	3214      	adds	r2, #20
 8003da6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4413      	add	r3, r2
 8003db6:	3354      	adds	r3, #84	; 0x54
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d002      	beq.n	8003dc6 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e00e      	b.n	8003de4 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	3214      	adds	r2, #20
 8003dce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	43d2      	mvns	r2, r2
 8003dd6:	4011      	ands	r1, r2
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	3214      	adds	r2, #20
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <xTaskGenericNotifyWait+0x108>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4413      	add	r3, r2
 8003dec:	3354      	adds	r3, #84	; 0x54
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003df2:	f000 fe1f 	bl	8004a34 <vPortExitCritical>

        return xReturn;
 8003df6:	697b      	ldr	r3, [r7, #20]
    }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200000dc 	.word	0x200000dc
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b090      	sub	sp, #64	; 0x40
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003e16:	2301      	movs	r3, #1
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	623b      	str	r3, [r7, #32]
    }
 8003e32:	bf00      	nop
 8003e34:	e7fe      	b.n	8003e34 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10a      	bne.n	8003e52 <xTaskGenericNotify+0x4a>
        __asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
    }
 8003e4e:	bf00      	nop
 8003e50:	e7fe      	b.n	8003e50 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003e56:	f000 fdbd 	bl	80049d4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d006      	beq.n	8003e6e <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	3214      	adds	r2, #20
 8003e66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e6c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	4413      	add	r3, r2
 8003e74:	3354      	adds	r3, #84	; 0x54
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4413      	add	r3, r2
 8003e82:	3354      	adds	r3, #84	; 0x54
 8003e84:	2202      	movs	r2, #2
 8003e86:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d83b      	bhi.n	8003f06 <xTaskGenericNotify+0xfe>
 8003e8e:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <xTaskGenericNotify+0x8c>)
 8003e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e94:	08003f25 	.word	0x08003f25
 8003e98:	08003ea9 	.word	0x08003ea9
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003edd 	.word	0x08003edd
 8003ea4:	08003eeb 	.word	0x08003eeb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	3214      	adds	r2, #20
 8003eae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	ea42 0103 	orr.w	r1, r2, r3
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	3214      	adds	r2, #20
 8003ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ec2:	e032      	b.n	8003f2a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	3214      	adds	r2, #20
 8003eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	3214      	adds	r2, #20
 8003ed6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003eda:	e026      	b.n	8003f2a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	3214      	adds	r2, #20
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ee8:	e01f      	b.n	8003f2a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003eea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d006      	beq.n	8003f00 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	3214      	adds	r2, #20
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003efe:	e014      	b.n	8003f2a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003f04:	e011      	b.n	8003f2a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003f06:	4b55      	ldr	r3, [pc, #340]	; (800405c <xTaskGenericNotify+0x254>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <xTaskGenericNotify+0x120>
        __asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	61bb      	str	r3, [r7, #24]
    }
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <xTaskGenericNotify+0x11a>
                    break;
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <xTaskGenericNotify+0x122>

                    break;
 8003f28:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fb6f 	bl	8007610 <SEGGER_SYSVIEW_ShrinkId>
 8003f32:	4601      	mov	r1, r0
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	203e      	movs	r0, #62	; 0x3e
 8003f40:	f002 fe4e 	bl	8006be0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d17f      	bne.n	800404c <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f58:	68d2      	ldr	r2, [r2, #12]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	6892      	ldr	r2, [r2, #8]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d103      	bne.n	8003f7a <xTaskGenericNotify+0x172>
 8003f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	605a      	str	r2, [r3, #4]
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	615a      	str	r2, [r3, #20]
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f88:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f003 fa9d 	bl	80074cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	2201      	movs	r2, #1
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	4b31      	ldr	r3, [pc, #196]	; (8004060 <xTaskGenericNotify+0x258>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	4a2f      	ldr	r2, [pc, #188]	; (8004060 <xTaskGenericNotify+0x258>)
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa8:	492e      	ldr	r1, [pc, #184]	; (8004064 <xTaskGenericNotify+0x25c>)
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	60da      	str	r2, [r3, #12]
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fce:	3204      	adds	r2, #4
 8003fd0:	605a      	str	r2, [r3, #4]
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	1d1a      	adds	r2, r3, #4
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <xTaskGenericNotify+0x25c>)
 8003fe8:	441a      	add	r2, r3
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	615a      	str	r2, [r3, #20]
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	491c      	ldr	r1, [pc, #112]	; (8004064 <xTaskGenericNotify+0x25c>)
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	1c59      	adds	r1, r3, #1
 8004002:	4818      	ldr	r0, [pc, #96]	; (8004064 <xTaskGenericNotify+0x25c>)
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4403      	add	r3, r0
 800400e:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00a      	beq.n	800402e <xTaskGenericNotify+0x226>
        __asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	617b      	str	r3, [r7, #20]
    }
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <xTaskGenericNotify+0x260>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	429a      	cmp	r2, r3
 800403a:	d907      	bls.n	800404c <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <xTaskGenericNotify+0x264>)
 800403e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800404c:	f000 fcf2 	bl	8004a34 <vPortExitCritical>

        return xReturn;
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8004052:	4618      	mov	r0, r3
 8004054:	3738      	adds	r7, #56	; 0x38
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200001b8 	.word	0x200001b8
 8004060:	200001bc 	.word	0x200001bc
 8004064:	200000e0 	.word	0x200000e0
 8004068:	200000dc 	.word	0x200000dc
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800407a:	4b36      	ldr	r3, [pc, #216]	; (8004154 <prvAddCurrentTaskToDelayedList+0xe4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004080:	4b35      	ldr	r3, [pc, #212]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe f9f8 	bl	800247c <uxListRemove>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004092:	4b31      	ldr	r3, [pc, #196]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	2201      	movs	r2, #1
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	43da      	mvns	r2, r3
 80040a0:	4b2e      	ldr	r3, [pc, #184]	; (800415c <prvAddCurrentTaskToDelayedList+0xec>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4013      	ands	r3, r2
 80040a6:	4a2d      	ldr	r2, [pc, #180]	; (800415c <prvAddCurrentTaskToDelayedList+0xec>)
 80040a8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d124      	bne.n	80040fc <prvAddCurrentTaskToDelayedList+0x8c>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d021      	beq.n	80040fc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b8:	4b29      	ldr	r3, [pc, #164]	; (8004160 <prvAddCurrentTaskToDelayedList+0xf0>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	609a      	str	r2, [r3, #8]
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	6892      	ldr	r2, [r2, #8]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	4b21      	ldr	r3, [pc, #132]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	3204      	adds	r2, #4
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	609a      	str	r2, [r3, #8]
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <prvAddCurrentTaskToDelayedList+0xf0>)
 80040ec:	615a      	str	r2, [r3, #20]
 80040ee:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <prvAddCurrentTaskToDelayedList+0xf0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	3301      	adds	r3, #1
 80040f4:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <prvAddCurrentTaskToDelayedList+0xf0>)
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80040fa:	e026      	b.n	800414a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4413      	add	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	429a      	cmp	r2, r3
 8004112:	d209      	bcs.n	8004128 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	3304      	adds	r3, #4
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f7fe f972 	bl	800240a <vListInsert>
}
 8004126:	e010      	b.n	800414a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <prvAddCurrentTaskToDelayedList+0xf8>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <prvAddCurrentTaskToDelayedList+0xe8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7fe f968 	bl	800240a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <prvAddCurrentTaskToDelayedList+0xfc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	429a      	cmp	r2, r3
 8004142:	d202      	bcs.n	800414a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <prvAddCurrentTaskToDelayedList+0xfc>)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6013      	str	r3, [r2, #0]
}
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200001b8 	.word	0x200001b8
 8004158:	200000dc 	.word	0x200000dc
 800415c:	200001bc 	.word	0x200001bc
 8004160:	200001a0 	.word	0x200001a0
 8004164:	20000170 	.word	0x20000170
 8004168:	2000016c 	.word	0x2000016c
 800416c:	200001d4 	.word	0x200001d4

08004170 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8004176:	2300      	movs	r3, #0
 8004178:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800417a:	f000 fa47 	bl	800460c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800417e:	4b11      	ldr	r3, [pc, #68]	; (80041c4 <xTimerCreateTimerTask+0x54>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <xTimerCreateTimerTask+0x58>)
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	2302      	movs	r3, #2
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2300      	movs	r3, #0
 8004190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004194:	490d      	ldr	r1, [pc, #52]	; (80041cc <xTimerCreateTimerTask+0x5c>)
 8004196:	480e      	ldr	r0, [pc, #56]	; (80041d0 <xTimerCreateTimerTask+0x60>)
 8004198:	f7fe fcca 	bl	8002b30 <xTaskCreate>
 800419c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	603b      	str	r3, [r7, #0]
    }
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80041ba:	687b      	ldr	r3, [r7, #4]
    }
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000210 	.word	0x20000210
 80041c8:	20000214 	.word	0x20000214
 80041cc:	08007a78 	.word	0x08007a78
 80041d0:	08004279 	.word	0x08004279

080041d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041e0:	e008      	b.n	80041f4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	4413      	add	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	699a      	ldr	r2, [r3, #24]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	18d1      	adds	r1, r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f8dd 	bl	80043c0 <prvInsertTimerInActiveList>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1ea      	bne.n	80041e2 <prvReloadTimer+0xe>
        }
    }
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <prvProcessExpiredTimer+0x5c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3304      	adds	r3, #4
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe f923 	bl	800247c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f7ff ffc3 	bl	80041d4 <prvReloadTimer>
 800424e:	e008      	b.n	8004262 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004256:	f023 0301 	bic.w	r3, r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	68f8      	ldr	r0, [r7, #12]
 8004268:	4798      	blx	r3
    }
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000208 	.word	0x20000208

08004278 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004280:	f107 0308 	add.w	r3, r7, #8
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f857 	bl	8004338 <prvGetNextExpireTime>
 800428a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4619      	mov	r1, r3
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f000 f803 	bl	800429c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004296:	f000 f8d5 	bl	8004444 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800429a:	e7f1      	b.n	8004280 <prvTimerTask+0x8>

0800429c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80042a6:	f7fe ffd7 	bl	8003258 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f866 	bl	8004380 <prvSampleTimeNow>
 80042b4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d130      	bne.n	800431e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <prvProcessTimerOrBlockTask+0x3c>
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d806      	bhi.n	80042d8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80042ca:	f7fe ffd3 	bl	8003274 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042ce:	68f9      	ldr	r1, [r7, #12]
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff ffa1 	bl	8004218 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80042d6:	e024      	b.n	8004322 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d008      	beq.n	80042f0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <prvProcessTimerOrBlockTask+0x90>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <prvProcessTimerOrBlockTask+0x50>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <prvProcessTimerOrBlockTask+0x52>
 80042ec:	2300      	movs	r3, #0
 80042ee:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042f0:	4b0f      	ldr	r3, [pc, #60]	; (8004330 <prvProcessTimerOrBlockTask+0x94>)
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	4619      	mov	r1, r3
 80042fe:	f7fe fbe3 	bl	8002ac8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004302:	f7fe ffb7 	bl	8003274 <xTaskResumeAll>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <prvProcessTimerOrBlockTask+0x98>)
 800430e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	f3bf 8f6f 	isb	sy
    }
 800431c:	e001      	b.n	8004322 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800431e:	f7fe ffa9 	bl	8003274 <xTaskResumeAll>
    }
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2000020c 	.word	0x2000020c
 8004330:	20000210 	.word	0x20000210
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <prvGetNextExpireTime+0x44>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <prvGetNextExpireTime+0x16>
 800434a:	2201      	movs	r2, #1
 800434c:	e000      	b.n	8004350 <prvGetNextExpireTime+0x18>
 800434e:	2200      	movs	r2, #0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800435c:	4b07      	ldr	r3, [pc, #28]	; (800437c <prvGetNextExpireTime+0x44>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e001      	b.n	800436c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800436c:	68fb      	ldr	r3, [r7, #12]
    }
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	20000208 	.word	0x20000208

08004380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004388:	f7ff f874 	bl	8003474 <xTaskGetTickCount>
 800438c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800438e:	4b0b      	ldr	r3, [pc, #44]	; (80043bc <prvSampleTimeNow+0x3c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	429a      	cmp	r2, r3
 8004396:	d205      	bcs.n	80043a4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004398:	f000 f912 	bl	80045c0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e002      	b.n	80043aa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80043aa:	4a04      	ldr	r2, [pc, #16]	; (80043bc <prvSampleTimeNow+0x3c>)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80043b0:	68fb      	ldr	r3, [r7, #12]
    }
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	20000218 	.word	0x20000218

080043c0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
 80043cc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d812      	bhi.n	800440c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	1ad2      	subs	r2, r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80043f4:	2301      	movs	r3, #1
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e01b      	b.n	8004432 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043fa:	4b10      	ldr	r3, [pc, #64]	; (800443c <prvInsertTimerInActiveList+0x7c>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7fe f800 	bl	800240a <vListInsert>
 800440a:	e012      	b.n	8004432 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d206      	bcs.n	8004422 <prvInsertTimerInActiveList+0x62>
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e007      	b.n	8004432 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <prvInsertTimerInActiveList+0x80>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3304      	adds	r3, #4
 800442a:	4619      	mov	r1, r3
 800442c:	4610      	mov	r0, r2
 800442e:	f7fd ffec 	bl	800240a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004432:	697b      	ldr	r3, [r7, #20]
    }
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	2000020c 	.word	0x2000020c
 8004440:	20000208 	.word	0x20000208

08004444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800444a:	e0a6      	b.n	800459a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	f2c0 80a2 	blt.w	8004598 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe f809 	bl	800247c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800446a:	1d3b      	adds	r3, r7, #4
 800446c:	4618      	mov	r0, r3
 800446e:	f7ff ff87 	bl	8004380 <prvSampleTimeNow>
 8004472:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3b01      	subs	r3, #1
 8004478:	2b08      	cmp	r3, #8
 800447a:	f200 808e 	bhi.w	800459a <prvProcessReceivedCommands+0x156>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <prvProcessReceivedCommands+0x40>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044a9 	.word	0x080044a9
 8004488:	080044a9 	.word	0x080044a9
 800448c:	08004511 	.word	0x08004511
 8004490:	08004525 	.word	0x08004525
 8004494:	0800456f 	.word	0x0800456f
 8004498:	080044a9 	.word	0x080044a9
 800449c:	080044a9 	.word	0x080044a9
 80044a0:	08004511 	.word	0x08004511
 80044a4:	08004525 	.word	0x08004525
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	18d1      	adds	r1, r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	69f8      	ldr	r0, [r7, #28]
 80044c8:	f7ff ff7a 	bl	80043c0 <prvInsertTimerInActiveList>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d063      	beq.n	800459a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d009      	beq.n	80044f4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	4413      	add	r3, r2
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4619      	mov	r1, r3
 80044ec:	69f8      	ldr	r0, [r7, #28]
 80044ee:	f7ff fe71 	bl	80041d4 <prvReloadTimer>
 80044f2:	e008      	b.n	8004506 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044fa:	f023 0301 	bic.w	r3, r3, #1
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	69f8      	ldr	r0, [r7, #28]
 800450c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800450e:	e044      	b.n	800459a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004516:	f023 0301 	bic.w	r3, r3, #1
 800451a:	b2da      	uxtb	r2, r3
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004522:	e03a      	b.n	800459a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	617b      	str	r3, [r7, #20]
    }
 8004556:	bf00      	nop
 8004558:	e7fe      	b.n	8004558 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	699a      	ldr	r2, [r3, #24]
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	18d1      	adds	r1, r2, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	69f8      	ldr	r0, [r7, #28]
 8004568:	f7ff ff2a 	bl	80043c0 <prvInsertTimerInActiveList>
                        break;
 800456c:	e015      	b.n	800459a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d103      	bne.n	8004584 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800457c:	69f8      	ldr	r0, [r7, #28]
 800457e:	f000 fc0f 	bl	8004da0 <vPortFree>
 8004582:	e00a      	b.n	800459a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800458a:	f023 0301 	bic.w	r3, r3, #1
 800458e:	b2da      	uxtb	r2, r3
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004596:	e000      	b.n	800459a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004598:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <prvProcessReceivedCommands+0x178>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f107 0108 	add.w	r1, r7, #8
 80045a2:	2200      	movs	r2, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7fe f89b 	bl	80026e0 <xQueueReceive>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f af4d 	bne.w	800444c <prvProcessReceivedCommands+0x8>
        }
    }
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000210 	.word	0x20000210

080045c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045c6:	e009      	b.n	80045dc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <prvSwitchTimerLists+0x44>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80045d2:	f04f 31ff 	mov.w	r1, #4294967295
 80045d6:	6838      	ldr	r0, [r7, #0]
 80045d8:	f7ff fe1e 	bl	8004218 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <prvSwitchTimerLists+0x44>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <prvSwitchTimerLists+0x44>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <prvSwitchTimerLists+0x48>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a04      	ldr	r2, [pc, #16]	; (8004604 <prvSwitchTimerLists+0x44>)
 80045f2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80045f4:	4a04      	ldr	r2, [pc, #16]	; (8004608 <prvSwitchTimerLists+0x48>)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6013      	str	r3, [r2, #0]
    }
 80045fa:	bf00      	nop
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000208 	.word	0x20000208
 8004608:	2000020c 	.word	0x2000020c

0800460c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004610:	f000 f9e0 	bl	80049d4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <prvCheckForValidListAndQueue+0x54>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11d      	bne.n	8004658 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800461c:	4811      	ldr	r0, [pc, #68]	; (8004664 <prvCheckForValidListAndQueue+0x58>)
 800461e:	f7fd fea3 	bl	8002368 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004622:	4811      	ldr	r0, [pc, #68]	; (8004668 <prvCheckForValidListAndQueue+0x5c>)
 8004624:	f7fd fea0 	bl	8002368 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004628:	4b10      	ldr	r3, [pc, #64]	; (800466c <prvCheckForValidListAndQueue+0x60>)
 800462a:	4a0e      	ldr	r2, [pc, #56]	; (8004664 <prvCheckForValidListAndQueue+0x58>)
 800462c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <prvCheckForValidListAndQueue+0x64>)
 8004630:	4a0d      	ldr	r2, [pc, #52]	; (8004668 <prvCheckForValidListAndQueue+0x5c>)
 8004632:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004634:	2200      	movs	r2, #0
 8004636:	210c      	movs	r1, #12
 8004638:	200a      	movs	r0, #10
 800463a:	f7fd ffd9 	bl	80025f0 <xQueueGenericCreate>
 800463e:	4603      	mov	r3, r0
 8004640:	4a07      	ldr	r2, [pc, #28]	; (8004660 <prvCheckForValidListAndQueue+0x54>)
 8004642:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004644:	4b06      	ldr	r3, [pc, #24]	; (8004660 <prvCheckForValidListAndQueue+0x54>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800464c:	4b04      	ldr	r3, [pc, #16]	; (8004660 <prvCheckForValidListAndQueue+0x54>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4908      	ldr	r1, [pc, #32]	; (8004674 <prvCheckForValidListAndQueue+0x68>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe f9e2 	bl	8002a1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004658:	f000 f9ec 	bl	8004a34 <vPortExitCritical>
    }
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20000210 	.word	0x20000210
 8004664:	200001e0 	.word	0x200001e0
 8004668:	200001f4 	.word	0x200001f4
 800466c:	20000208 	.word	0x20000208
 8004670:	2000020c 	.word	0x2000020c
 8004674:	08007a80 	.word	0x08007a80

08004678 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	3b04      	subs	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004690:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b04      	subs	r3, #4
 8004696:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f023 0201 	bic.w	r2, r3, #1
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3b04      	subs	r3, #4
 80046a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80046a8:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <pxPortInitialiseStack+0x64>)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3b14      	subs	r3, #20
 80046b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3b04      	subs	r3, #4
 80046be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f06f 0202 	mvn.w	r2, #2
 80046c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b20      	subs	r3, #32
 80046cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	080046e1 	.word	0x080046e1

080046e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <prvTaskExitError+0x54>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d00a      	beq.n	800470a <prvTaskExitError+0x2a>
        __asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	60fb      	str	r3, [r7, #12]
    }
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <prvTaskExitError+0x28>
        __asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60bb      	str	r3, [r7, #8]
    }
 800471c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800471e:	bf00      	nop
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0fc      	beq.n	8004720 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004726:	bf00      	nop
 8004728:	bf00      	nop
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr
 8004734:	20000010 	.word	0x20000010
	...

08004740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <pxCurrentTCBConst2>)
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474a:	f380 8809 	msr	PSP, r0
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8811 	msr	BASEPRI, r0
 800475a:	4770      	bx	lr
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst2>:
 8004760:	200000dc 	.word	0x200000dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004768:	4808      	ldr	r0, [pc, #32]	; (800478c <prvPortStartFirstTask+0x24>)
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f380 8808 	msr	MSP, r0
 8004772:	f04f 0000 	mov.w	r0, #0
 8004776:	f380 8814 	msr	CONTROL, r0
 800477a:	b662      	cpsie	i
 800477c:	b661      	cpsie	f
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	df00      	svc	0
 8004788:	bf00      	nop
 800478a:	0000      	.short	0x0000
 800478c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop

08004794 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800479a:	4b46      	ldr	r3, [pc, #280]	; (80048b4 <xPortStartScheduler+0x120>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a46      	ldr	r2, [pc, #280]	; (80048b8 <xPortStartScheduler+0x124>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10a      	bne.n	80047ba <xPortStartScheduler+0x26>
        __asm volatile
 80047a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a8:	f383 8811 	msr	BASEPRI, r3
 80047ac:	f3bf 8f6f 	isb	sy
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	613b      	str	r3, [r7, #16]
    }
 80047b6:	bf00      	nop
 80047b8:	e7fe      	b.n	80047b8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047ba:	4b3e      	ldr	r3, [pc, #248]	; (80048b4 <xPortStartScheduler+0x120>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a3f      	ldr	r2, [pc, #252]	; (80048bc <xPortStartScheduler+0x128>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10a      	bne.n	80047da <xPortStartScheduler+0x46>
        __asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
    }
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <xPortStartScheduler+0x12c>)
 80047dc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	22ff      	movs	r2, #255	; 0xff
 80047ea:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <xPortStartScheduler+0x130>)
 8004800:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004802:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <xPortStartScheduler+0x134>)
 8004804:	2207      	movs	r2, #7
 8004806:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004808:	e009      	b.n	800481e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800480a:	4b2f      	ldr	r3, [pc, #188]	; (80048c8 <xPortStartScheduler+0x134>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3b01      	subs	r3, #1
 8004810:	4a2d      	ldr	r2, [pc, #180]	; (80048c8 <xPortStartScheduler+0x134>)
 8004812:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	b2db      	uxtb	r3, r3
 800481c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004826:	2b80      	cmp	r3, #128	; 0x80
 8004828:	d0ef      	beq.n	800480a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800482a:	4b27      	ldr	r3, [pc, #156]	; (80048c8 <xPortStartScheduler+0x134>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f1c3 0307 	rsb	r3, r3, #7
 8004832:	2b04      	cmp	r3, #4
 8004834:	d00a      	beq.n	800484c <xPortStartScheduler+0xb8>
        __asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	60bb      	str	r3, [r7, #8]
    }
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <xPortStartScheduler+0x134>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <xPortStartScheduler+0x134>)
 8004854:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004856:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <xPortStartScheduler+0x134>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <xPortStartScheduler+0x134>)
 8004860:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800486a:	4b18      	ldr	r3, [pc, #96]	; (80048cc <xPortStartScheduler+0x138>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a17      	ldr	r2, [pc, #92]	; (80048cc <xPortStartScheduler+0x138>)
 8004870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004874:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004876:	4b15      	ldr	r3, [pc, #84]	; (80048cc <xPortStartScheduler+0x138>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <xPortStartScheduler+0x138>)
 800487c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004880:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004882:	f000 f963 	bl	8004b4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <xPortStartScheduler+0x13c>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800488c:	f000 f982 	bl	8004b94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004890:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <xPortStartScheduler+0x140>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a0f      	ldr	r2, [pc, #60]	; (80048d4 <xPortStartScheduler+0x140>)
 8004896:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800489a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800489c:	f7ff ff64 	bl	8004768 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80048a0:	f7fe ff24 	bl	80036ec <vTaskSwitchContext>
    prvTaskExitError();
 80048a4:	f7ff ff1c 	bl	80046e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	e000ed00 	.word	0xe000ed00
 80048b8:	410fc271 	.word	0x410fc271
 80048bc:	410fc270 	.word	0x410fc270
 80048c0:	e000e400 	.word	0xe000e400
 80048c4:	2000021c 	.word	0x2000021c
 80048c8:	20000220 	.word	0x20000220
 80048cc:	e000ed20 	.word	0xe000ed20
 80048d0:	20000010 	.word	0x20000010
 80048d4:	e000ef34 	.word	0xe000ef34

080048d8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048de:	4b37      	ldr	r3, [pc, #220]	; (80049bc <vInitPrioGroupValue+0xe4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a37      	ldr	r2, [pc, #220]	; (80049c0 <vInitPrioGroupValue+0xe8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d10a      	bne.n	80048fe <vInitPrioGroupValue+0x26>
        __asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	613b      	str	r3, [r7, #16]
    }
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048fe:	4b2f      	ldr	r3, [pc, #188]	; (80049bc <vInitPrioGroupValue+0xe4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <vInitPrioGroupValue+0xec>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d10a      	bne.n	800491e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490c:	f383 8811 	msr	BASEPRI, r3
 8004910:	f3bf 8f6f 	isb	sy
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	60fb      	str	r3, [r7, #12]
    }
 800491a:	bf00      	nop
 800491c:	e7fe      	b.n	800491c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800491e:	4b2a      	ldr	r3, [pc, #168]	; (80049c8 <vInitPrioGroupValue+0xf0>)
 8004920:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	b2db      	uxtb	r3, r3
 8004928:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	22ff      	movs	r2, #255	; 0xff
 800492e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004940:	b2da      	uxtb	r2, r3
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <vInitPrioGroupValue+0xf4>)
 8004944:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004946:	4b22      	ldr	r3, [pc, #136]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 8004948:	2207      	movs	r2, #7
 800494a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800494c:	e009      	b.n	8004962 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3b01      	subs	r3, #1
 8004954:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 8004956:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	b2db      	uxtb	r3, r3
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b80      	cmp	r3, #128	; 0x80
 800496c:	d0ef      	beq.n	800494e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800496e:	4b18      	ldr	r3, [pc, #96]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1c3 0307 	rsb	r3, r3, #7
 8004976:	2b04      	cmp	r3, #4
 8004978:	d00a      	beq.n	8004990 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	60bb      	str	r3, [r7, #8]
    }
 800498c:	bf00      	nop
 800498e:	e7fe      	b.n	800498e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004990:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	4a0e      	ldr	r2, [pc, #56]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 8004998:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800499a:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049a2:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <vInitPrioGroupValue+0xf8>)
 80049a4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80049ae:	bf00      	nop
 80049b0:	371c      	adds	r7, #28
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	e000ed00 	.word	0xe000ed00
 80049c0:	410fc271 	.word	0x410fc271
 80049c4:	410fc270 	.word	0x410fc270
 80049c8:	e000e400 	.word	0xe000e400
 80049cc:	2000021c 	.word	0x2000021c
 80049d0:	20000220 	.word	0x20000220

080049d4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
        __asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	607b      	str	r3, [r7, #4]
    }
 80049ec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <vPortEnterCritical+0x58>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a0d      	ldr	r2, [pc, #52]	; (8004a2c <vPortEnterCritical+0x58>)
 80049f6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80049f8:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <vPortEnterCritical+0x58>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10f      	bne.n	8004a20 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a00:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <vPortEnterCritical+0x5c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <vPortEnterCritical+0x4c>
        __asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	603b      	str	r3, [r7, #0]
    }
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <vPortEnterCritical+0x4a>
    }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000010 	.word	0x20000010
 8004a30:	e000ed04 	.word	0xe000ed04

08004a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004a3a:	4b12      	ldr	r3, [pc, #72]	; (8004a84 <vPortExitCritical+0x50>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d10a      	bne.n	8004a58 <vPortExitCritical+0x24>
        __asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	607b      	str	r3, [r7, #4]
    }
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <vPortExitCritical+0x50>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	4a09      	ldr	r2, [pc, #36]	; (8004a84 <vPortExitCritical+0x50>)
 8004a60:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004a62:	4b08      	ldr	r3, [pc, #32]	; (8004a84 <vPortExitCritical+0x50>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <vPortExitCritical+0x42>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004a74:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000010 	.word	0x20000010
	...

08004a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a90:	f3ef 8009 	mrs	r0, PSP
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <pxCurrentTCBConst>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f01e 0f10 	tst.w	lr, #16
 8004aa0:	bf08      	it	eq
 8004aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aaa:	6010      	str	r0, [r2, #0]
 8004aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ab4:	f380 8811 	msr	BASEPRI, r0
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f7fe fe14 	bl	80036ec <vTaskSwitchContext>
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f380 8811 	msr	BASEPRI, r0
 8004acc:	bc09      	pop	{r0, r3}
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad6:	f01e 0f10 	tst.w	lr, #16
 8004ada:	bf08      	it	eq
 8004adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ae0:	f380 8809 	msr	PSP, r0
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst>:
 8004af0:	200000dc 	.word	0x200000dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
        __asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
    }
 8004b10:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004b12:	f002 fbc1 	bl	8007298 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004b16:	f7fe fccf 	bl	80034b8 <xTaskIncrementTick>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d006      	beq.n	8004b2e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004b20:	f002 fc18 	bl	8007354 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b24:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <SysTick_Handler+0x50>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e001      	b.n	8004b32 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004b2e:	f002 fbf5 	bl	800731c <SEGGER_SYSVIEW_RecordExitISR>
 8004b32:	2300      	movs	r3, #0
 8004b34:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f383 8811 	msr	BASEPRI, r3
    }
 8004b3c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <vPortSetupTimerInterrupt+0x38>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5c:	4b0a      	ldr	r3, [pc, #40]	; (8004b88 <vPortSetupTimerInterrupt+0x3c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a0a      	ldr	r2, [pc, #40]	; (8004b8c <vPortSetupTimerInterrupt+0x40>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	099b      	lsrs	r3, r3, #6
 8004b68:	4a09      	ldr	r2, [pc, #36]	; (8004b90 <vPortSetupTimerInterrupt+0x44>)
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <vPortSetupTimerInterrupt+0x34>)
 8004b70:	2207      	movs	r2, #7
 8004b72:	601a      	str	r2, [r3, #0]
}
 8004b74:	bf00      	nop
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	e000e010 	.word	0xe000e010
 8004b84:	e000e018 	.word	0xe000e018
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	10624dd3 	.word	0x10624dd3
 8004b90:	e000e014 	.word	0xe000e014

08004b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ba4 <vPortEnableVFP+0x10>
 8004b98:	6801      	ldr	r1, [r0, #0]
 8004b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b9e:	6001      	str	r1, [r0, #0]
 8004ba0:	4770      	bx	lr
 8004ba2:	0000      	.short	0x0000
 8004ba4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop

08004bac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004bb2:	f3ef 8305 	mrs	r3, IPSR
 8004bb6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d914      	bls.n	8004be8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bbe:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <vPortValidateInterruptPriority+0x70>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bc8:	4b15      	ldr	r3, [pc, #84]	; (8004c20 <vPortValidateInterruptPriority+0x74>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	7afa      	ldrb	r2, [r7, #11]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20a      	bcs.n	8004be8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	607b      	str	r3, [r7, #4]
    }
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004be8:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <vPortValidateInterruptPriority+0x78>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bf0:	4b0d      	ldr	r3, [pc, #52]	; (8004c28 <vPortValidateInterruptPriority+0x7c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d90a      	bls.n	8004c0e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	603b      	str	r3, [r7, #0]
    }
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <vPortValidateInterruptPriority+0x60>
    }
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	e000e3f0 	.word	0xe000e3f0
 8004c20:	2000021c 	.word	0x2000021c
 8004c24:	e000ed0c 	.word	0xe000ed0c
 8004c28:	20000220 	.word	0x20000220

08004c2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b08a      	sub	sp, #40	; 0x28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004c38:	f7fe fb0e 	bl	8003258 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <pvPortMalloc+0x160>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004c44:	f000 f908 	bl	8004e58 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004c4e:	2208      	movs	r2, #8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	3308      	adds	r3, #8
 8004c5a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d804      	bhi.n	8004c70 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	e001      	b.n	8004c74 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	db70      	blt.n	8004d5c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d06d      	beq.n	8004d5c <pvPortMalloc+0x130>
 8004c80:	4b43      	ldr	r3, [pc, #268]	; (8004d90 <pvPortMalloc+0x164>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d868      	bhi.n	8004d5c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004c8a:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <pvPortMalloc+0x168>)
 8004c8c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <pvPortMalloc+0x168>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c94:	e004      	b.n	8004ca0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d903      	bls.n	8004cb2 <pvPortMalloc+0x86>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f1      	bne.n	8004c96 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004cb2:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <pvPortMalloc+0x160>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d04f      	beq.n	8004d5c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4413      	add	r3, r2
 8004cc4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad2      	subs	r2, r2, r3
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d91f      	bls.n	8004d1e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00a      	beq.n	8004d06 <pvPortMalloc+0xda>
        __asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
    }
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	1ad2      	subs	r2, r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d18:	6978      	ldr	r0, [r7, #20]
 8004d1a:	f000 f8f9 	bl	8004f10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d1e:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <pvPortMalloc+0x164>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <pvPortMalloc+0x164>)
 8004d2a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d2c:	4b18      	ldr	r3, [pc, #96]	; (8004d90 <pvPortMalloc+0x164>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <pvPortMalloc+0x16c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d203      	bcs.n	8004d40 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <pvPortMalloc+0x164>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a16      	ldr	r2, [pc, #88]	; (8004d98 <pvPortMalloc+0x16c>)
 8004d3e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <pvPortMalloc+0x170>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <pvPortMalloc+0x170>)
 8004d5a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004d5c:	f7fe fa8a 	bl	8003274 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <pvPortMalloc+0x154>
        __asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	60fb      	str	r3, [r7, #12]
    }
 8004d7c:	bf00      	nop
 8004d7e:	e7fe      	b.n	8004d7e <pvPortMalloc+0x152>
    return pvReturn;
 8004d80:	69fb      	ldr	r3, [r7, #28]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20012e2c 	.word	0x20012e2c
 8004d90:	20012e30 	.word	0x20012e30
 8004d94:	20012e24 	.word	0x20012e24
 8004d98:	20012e34 	.word	0x20012e34
 8004d9c:	20012e38 	.word	0x20012e38

08004da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d049      	beq.n	8004e46 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004db2:	2308      	movs	r3, #8
 8004db4:	425b      	negs	r3, r3
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db0a      	blt.n	8004dde <vPortFree+0x3e>
        __asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60fb      	str	r3, [r7, #12]
    }
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <vPortFree+0x5c>
        __asm volatile
 8004de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dea:	f383 8811 	msr	BASEPRI, r3
 8004dee:	f3bf 8f6f 	isb	sy
 8004df2:	f3bf 8f4f 	dsb	sy
 8004df6:	60bb      	str	r3, [r7, #8]
    }
 8004df8:	bf00      	nop
 8004dfa:	e7fe      	b.n	8004dfa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	0fdb      	lsrs	r3, r3, #31
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01c      	beq.n	8004e46 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d118      	bne.n	8004e46 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004e20:	f7fe fa1a 	bl	8003258 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <vPortFree+0xb0>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <vPortFree+0xb0>)
 8004e30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e32:	6938      	ldr	r0, [r7, #16]
 8004e34:	f000 f86c 	bl	8004f10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <vPortFree+0xb4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	4a05      	ldr	r2, [pc, #20]	; (8004e54 <vPortFree+0xb4>)
 8004e40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004e42:	f7fe fa17 	bl	8003274 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004e46:	bf00      	nop
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20012e30 	.word	0x20012e30
 8004e54:	20012e3c 	.word	0x20012e3c

08004e58 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e5e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004e62:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004e64:	4b25      	ldr	r3, [pc, #148]	; (8004efc <prvHeapInit+0xa4>)
 8004e66:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f003 0307 	and.w	r3, r3, #7
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3307      	adds	r3, #7
 8004e76:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	4a1d      	ldr	r2, [pc, #116]	; (8004efc <prvHeapInit+0xa4>)
 8004e88:	4413      	add	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e90:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <prvHeapInit+0xa8>)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004e96:	4b1a      	ldr	r3, [pc, #104]	; (8004f00 <prvHeapInit+0xa8>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1a9b      	subs	r3, r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0307 	bic.w	r3, r3, #7
 8004eb2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <prvHeapInit+0xac>)
 8004eb8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004eba:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <prvHeapInit+0xac>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ec2:	4b10      	ldr	r3, [pc, #64]	; (8004f04 <prvHeapInit+0xac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	1ad2      	subs	r2, r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <prvHeapInit+0xac>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <prvHeapInit+0xb0>)
 8004ee6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a07      	ldr	r2, [pc, #28]	; (8004f0c <prvHeapInit+0xb4>)
 8004eee:	6013      	str	r3, [r2, #0]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	20000224 	.word	0x20000224
 8004f00:	20012e24 	.word	0x20012e24
 8004f04:	20012e2c 	.word	0x20012e2c
 8004f08:	20012e34 	.word	0x20012e34
 8004f0c:	20012e30 	.word	0x20012e30

08004f10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f18:	4b28      	ldr	r3, [pc, #160]	; (8004fbc <prvInsertBlockIntoFreeList+0xac>)
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e002      	b.n	8004f24 <prvInsertBlockIntoFreeList+0x14>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d8f7      	bhi.n	8004f1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d108      	bne.n	8004f52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	441a      	add	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d118      	bne.n	8004f98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d00d      	beq.n	8004f8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	441a      	add	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e008      	b.n	8004fa0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <prvInsertBlockIntoFreeList+0xb0>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e003      	b.n	8004fa0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d002      	beq.n	8004fae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	20012e24 	.word	0x20012e24
 8004fc0:	20012e2c 	.word	0x20012e2c

08004fc4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004fc8:	4803      	ldr	r0, [pc, #12]	; (8004fd8 <_cbSendSystemDesc+0x14>)
 8004fca:	f002 f90f 	bl	80071ec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004fce:	4803      	ldr	r0, [pc, #12]	; (8004fdc <_cbSendSystemDesc+0x18>)
 8004fd0:	f002 f90c 	bl	80071ec <SEGGER_SYSVIEW_SendSysDesc>
}
 8004fd4:	bf00      	nop
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	08007a88 	.word	0x08007a88
 8004fdc:	08007ac4 	.word	0x08007ac4

08004fe0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004fe4:	4b06      	ldr	r3, [pc, #24]	; (8005000 <SEGGER_SYSVIEW_Conf+0x20>)
 8004fe6:	6818      	ldr	r0, [r3, #0]
 8004fe8:	4b05      	ldr	r3, [pc, #20]	; (8005000 <SEGGER_SYSVIEW_Conf+0x20>)
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <SEGGER_SYSVIEW_Conf+0x24>)
 8004fee:	4a06      	ldr	r2, [pc, #24]	; (8005008 <SEGGER_SYSVIEW_Conf+0x28>)
 8004ff0:	f001 fc78 	bl	80068e4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ff4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ff8:	f001 fcb8 	bl	800696c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ffc:	bf00      	nop
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000000 	.word	0x20000000
 8005004:	08004fc5 	.word	0x08004fc5
 8005008:	08007b60 	.word	0x08007b60

0800500c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800500c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800500e:	b085      	sub	sp, #20
 8005010:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005012:	2300      	movs	r3, #0
 8005014:	607b      	str	r3, [r7, #4]
 8005016:	e033      	b.n	8005080 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005018:	491e      	ldr	r1, [pc, #120]	; (8005094 <_cbSendTaskList+0x88>)
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	6818      	ldr	r0, [r3, #0]
 8005028:	491a      	ldr	r1, [pc, #104]	; (8005094 <_cbSendTaskList+0x88>)
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3304      	adds	r3, #4
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	4c16      	ldr	r4, [pc, #88]	; (8005094 <_cbSendTaskList+0x88>)
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4423      	add	r3, r4
 8005048:	3308      	adds	r3, #8
 800504a:	681c      	ldr	r4, [r3, #0]
 800504c:	4d11      	ldr	r5, [pc, #68]	; (8005094 <_cbSendTaskList+0x88>)
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	442b      	add	r3, r5
 800505a:	330c      	adds	r3, #12
 800505c:	681d      	ldr	r5, [r3, #0]
 800505e:	4e0d      	ldr	r6, [pc, #52]	; (8005094 <_cbSendTaskList+0x88>)
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	4613      	mov	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4433      	add	r3, r6
 800506c:	3310      	adds	r3, #16
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	462b      	mov	r3, r5
 8005074:	4622      	mov	r2, r4
 8005076:	f000 f8bd 	bl	80051f4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3301      	adds	r3, #1
 800507e:	607b      	str	r3, [r7, #4]
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <_cbSendTaskList+0x8c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d3c6      	bcc.n	8005018 <_cbSendTaskList+0xc>
  }
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005094:	20012e40 	.word	0x20012e40
 8005098:	20012ee0 	.word	0x20012ee0

0800509c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80050a4:	f7fe f9f6 	bl	8003494 <xTaskGetTickCountFromISR>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2200      	movs	r2, #0
 80050ac:	469a      	mov	sl, r3
 80050ae:	4693      	mov	fp, r2
 80050b0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80050b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	f04f 0a00 	mov.w	sl, #0
 80050c0:	f04f 0b00 	mov.w	fp, #0
 80050c4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80050c8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80050cc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80050d0:	4652      	mov	r2, sl
 80050d2:	465b      	mov	r3, fp
 80050d4:	1a14      	subs	r4, r2, r0
 80050d6:	eb63 0501 	sbc.w	r5, r3, r1
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	00ab      	lsls	r3, r5, #2
 80050e4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80050e8:	00a2      	lsls	r2, r4, #2
 80050ea:	4614      	mov	r4, r2
 80050ec:	461d      	mov	r5, r3
 80050ee:	eb14 0800 	adds.w	r8, r4, r0
 80050f2:	eb45 0901 	adc.w	r9, r5, r1
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	f04f 0300 	mov.w	r3, #0
 80050fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800510a:	4690      	mov	r8, r2
 800510c:	4699      	mov	r9, r3
 800510e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8005112:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005124 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005132:	2205      	movs	r2, #5
 8005134:	492b      	ldr	r1, [pc, #172]	; (80051e4 <SYSVIEW_AddTask+0xc0>)
 8005136:	68b8      	ldr	r0, [r7, #8]
 8005138:	f002 fc22 	bl	8007980 <memcmp>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04b      	beq.n	80051da <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005142:	4b29      	ldr	r3, [pc, #164]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b07      	cmp	r3, #7
 8005148:	d903      	bls.n	8005152 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800514a:	4828      	ldr	r0, [pc, #160]	; (80051ec <SYSVIEW_AddTask+0xc8>)
 800514c:	f002 fb6a 	bl	8007824 <SEGGER_SYSVIEW_Warn>
    return;
 8005150:	e044      	b.n	80051dc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005152:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4926      	ldr	r1, [pc, #152]	; (80051f0 <SYSVIEW_AddTask+0xcc>)
 8005158:	4613      	mov	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8005166:	4b20      	ldr	r3, [pc, #128]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4921      	ldr	r1, [pc, #132]	; (80051f0 <SYSVIEW_AddTask+0xcc>)
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	440b      	add	r3, r1
 8005176:	3304      	adds	r3, #4
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800517c:	4b1a      	ldr	r3, [pc, #104]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	491b      	ldr	r1, [pc, #108]	; (80051f0 <SYSVIEW_AddTask+0xcc>)
 8005182:	4613      	mov	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3308      	adds	r3, #8
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4916      	ldr	r1, [pc, #88]	; (80051f0 <SYSVIEW_AddTask+0xcc>)
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	330c      	adds	r3, #12
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4910      	ldr	r1, [pc, #64]	; (80051f0 <SYSVIEW_AddTask+0xcc>)
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	3310      	adds	r3, #16
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <SYSVIEW_AddTask+0xc4>)
 80051c6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f80e 	bl	80051f4 <SYSVIEW_SendTaskInfo>
 80051d8:	e000      	b.n	80051dc <SYSVIEW_AddTask+0xb8>
    return;
 80051da:	bf00      	nop

}
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	08007ad4 	.word	0x08007ad4
 80051e8:	20012ee0 	.word	0x20012ee0
 80051ec:	08007adc 	.word	0x08007adc
 80051f0:	20012e40 	.word	0x20012e40

080051f4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005202:	f107 0314 	add.w	r3, r7, #20
 8005206:	2214      	movs	r2, #20
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fbd6 	bl	80079bc <memset>
  TaskInfo.TaskID     = TaskID;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4618      	mov	r0, r3
 800522a:	f001 fee7 	bl	8006ffc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800522e:	bf00      	nop
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <__NVIC_EnableIRQ>:
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	4603      	mov	r3, r0
 8005240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005246:	2b00      	cmp	r3, #0
 8005248:	db0b      	blt.n	8005262 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800524a:	79fb      	ldrb	r3, [r7, #7]
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	4907      	ldr	r1, [pc, #28]	; (8005270 <__NVIC_EnableIRQ+0x38>)
 8005252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	2001      	movs	r0, #1
 800525a:	fa00 f202 	lsl.w	r2, r0, r2
 800525e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000e100 	.word	0xe000e100

08005274 <__NVIC_SetPriority>:
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	6039      	str	r1, [r7, #0]
 800527e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005284:	2b00      	cmp	r3, #0
 8005286:	db0a      	blt.n	800529e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	b2da      	uxtb	r2, r3
 800528c:	490c      	ldr	r1, [pc, #48]	; (80052c0 <__NVIC_SetPriority+0x4c>)
 800528e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005292:	0112      	lsls	r2, r2, #4
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	440b      	add	r3, r1
 8005298:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800529c:	e00a      	b.n	80052b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	4908      	ldr	r1, [pc, #32]	; (80052c4 <__NVIC_SetPriority+0x50>)
 80052a4:	79fb      	ldrb	r3, [r7, #7]
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	3b04      	subs	r3, #4
 80052ac:	0112      	lsls	r2, r2, #4
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	440b      	add	r3, r1
 80052b2:	761a      	strb	r2, [r3, #24]
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	e000e100 	.word	0xe000e100
 80052c4:	e000ed00 	.word	0xe000ed00

080052c8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80052ce:	f002 fb05 	bl	80078dc <SEGGER_SYSVIEW_IsStarted>
 80052d2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80052da:	f001 fd13 	bl	8006d04 <SEGGER_SYSVIEW_Start>
  }
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
	...

080052e8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <_cbOnUARTRx+0x3c>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	d806      	bhi.n	8005308 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80052fa:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <_cbOnUARTRx+0x3c>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	b2da      	uxtb	r2, r3
 8005302:	4b08      	ldr	r3, [pc, #32]	; (8005324 <_cbOnUARTRx+0x3c>)
 8005304:	701a      	strb	r2, [r3, #0]
    goto Done;
 8005306:	e009      	b.n	800531c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005308:	f7ff ffde 	bl	80052c8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <_cbOnUARTRx+0x3c>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	1dfb      	adds	r3, r7, #7
 8005314:	2201      	movs	r2, #1
 8005316:	4619      	mov	r1, r3
 8005318:	f000 fb9c 	bl	8005a54 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800531c:	bf00      	nop
}
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20000014 	.word	0x20000014

08005328 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005330:	4b14      	ldr	r3, [pc, #80]	; (8005384 <_cbOnUARTTx+0x5c>)
 8005332:	785b      	ldrb	r3, [r3, #1]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d80f      	bhi.n	8005358 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005338:	4b12      	ldr	r3, [pc, #72]	; (8005384 <_cbOnUARTTx+0x5c>)
 800533a:	785b      	ldrb	r3, [r3, #1]
 800533c:	461a      	mov	r2, r3
 800533e:	4b12      	ldr	r3, [pc, #72]	; (8005388 <_cbOnUARTTx+0x60>)
 8005340:	5c9a      	ldrb	r2, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005346:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <_cbOnUARTTx+0x5c>)
 8005348:	785b      	ldrb	r3, [r3, #1]
 800534a:	3301      	adds	r3, #1
 800534c:	b2da      	uxtb	r2, r3
 800534e:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <_cbOnUARTTx+0x5c>)
 8005350:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005352:	2301      	movs	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005356:	e00f      	b.n	8005378 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <_cbOnUARTTx+0x5c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa1b 	bl	800579c <SEGGER_RTT_ReadUpBufferNoLock>
 8005366:	4603      	mov	r3, r0
 8005368:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	da02      	bge.n	8005376 <_cbOnUARTTx+0x4e>
    r = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	e000      	b.n	8005378 <_cbOnUARTTx+0x50>
  }
Done:
 8005376:	bf00      	nop
  return r;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000014 	.word	0x20000014
 8005388:	08007b68 	.word	0x08007b68

0800538c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005394:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <SEGGER_UART_init+0x1c>)
 8005396:	4905      	ldr	r1, [pc, #20]	; (80053ac <SEGGER_UART_init+0x20>)
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f863 	bl	8005464 <HIF_UART_Init>
}
 800539e:	bf00      	nop
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	080052e9 	.word	0x080052e9
 80053ac:	08005329 	.word	0x08005329

080053b0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80053b6:	4b1e      	ldr	r3, [pc, #120]	; (8005430 <USART2_IRQHandler+0x80>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d011      	beq.n	80053ea <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80053c6:	4b1b      	ldr	r3, [pc, #108]	; (8005434 <USART2_IRQHandler+0x84>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 030b 	and.w	r3, r3, #11
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d108      	bne.n	80053ea <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80053d8:	4b17      	ldr	r3, [pc, #92]	; (8005438 <USART2_IRQHandler+0x88>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80053e0:	4b15      	ldr	r3, [pc, #84]	; (8005438 <USART2_IRQHandler+0x88>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	79fa      	ldrb	r2, [r7, #7]
 80053e6:	4610      	mov	r0, r2
 80053e8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01a      	beq.n	800542a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <USART2_IRQHandler+0x8c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <USART2_IRQHandler+0x8c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	1dfa      	adds	r2, r7, #7
 8005402:	4610      	mov	r0, r2
 8005404:	4798      	blx	r3
 8005406:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <USART2_IRQHandler+0x90>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a0b      	ldr	r2, [pc, #44]	; (8005440 <USART2_IRQHandler+0x90>)
 8005414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e006      	b.n	800542a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800541c:	4b04      	ldr	r3, [pc, #16]	; (8005430 <USART2_IRQHandler+0x80>)
 800541e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005420:	79fa      	ldrb	r2, [r7, #7]
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <USART2_IRQHandler+0x84>)
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	e000      	b.n	800542a <USART2_IRQHandler+0x7a>
      return;
 8005428:	bf00      	nop
    }
  }
}
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40004400 	.word	0x40004400
 8005434:	40004404 	.word	0x40004404
 8005438:	20012ee4 	.word	0x20012ee4
 800543c:	20012ee8 	.word	0x20012ee8
 8005440:	4000440c 	.word	0x4000440c

08005444 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a04      	ldr	r2, [pc, #16]	; (8005460 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800544e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	4000440c 	.word	0x4000440c

08005464 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005470:	4b2e      	ldr	r3, [pc, #184]	; (800552c <HIF_UART_Init+0xc8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2d      	ldr	r2, [pc, #180]	; (800552c <HIF_UART_Init+0xc8>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800547c:	4b2c      	ldr	r3, [pc, #176]	; (8005530 <HIF_UART_Init+0xcc>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <HIF_UART_Init+0xcc>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005488:	4b2a      	ldr	r3, [pc, #168]	; (8005534 <HIF_UART_Init+0xd0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005494:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800549c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800549e:	4a25      	ldr	r2, [pc, #148]	; (8005534 <HIF_UART_Init+0xd0>)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <HIF_UART_Init+0xd4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80054b8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80054ba:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <HIF_UART_Init+0xd4>)
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80054c0:	4b1e      	ldr	r3, [pc, #120]	; (800553c <HIF_UART_Init+0xd8>)
 80054c2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80054c6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <HIF_UART_Init+0xdc>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80054ce:	4b1d      	ldr	r3, [pc, #116]	; (8005544 <HIF_UART_Init+0xe0>)
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80054da:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HIF_UART_Init+0xe4>)
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e2:	3301      	adds	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	085b      	lsrs	r3, r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d302      	bcc.n	80054fa <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80054f4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80054f8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	4a11      	ldr	r2, [pc, #68]	; (800554c <HIF_UART_Init+0xe8>)
 8005506:	b29b      	uxth	r3, r3
 8005508:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800550a:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HIF_UART_Init+0xec>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005510:	4a10      	ldr	r2, [pc, #64]	; (8005554 <HIF_UART_Init+0xf0>)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005516:	2106      	movs	r1, #6
 8005518:	2026      	movs	r0, #38	; 0x26
 800551a:	f7ff feab 	bl	8005274 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800551e:	2026      	movs	r0, #38	; 0x26
 8005520:	f7ff fe8a 	bl	8005238 <__NVIC_EnableIRQ>
}
 8005524:	bf00      	nop
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40023840 	.word	0x40023840
 8005530:	40023830 	.word	0x40023830
 8005534:	40020020 	.word	0x40020020
 8005538:	40020000 	.word	0x40020000
 800553c:	4000440c 	.word	0x4000440c
 8005540:	40004410 	.word	0x40004410
 8005544:	40004414 	.word	0x40004414
 8005548:	0501bd00 	.word	0x0501bd00
 800554c:	40004408 	.word	0x40004408
 8005550:	20012ee4 	.word	0x20012ee4
 8005554:	20012ee8 	.word	0x20012ee8

08005558 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800555e:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <_DoInit+0xa0>)
 8005560:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005562:	22a8      	movs	r2, #168	; 0xa8
 8005564:	2100      	movs	r1, #0
 8005566:	6838      	ldr	r0, [r7, #0]
 8005568:	f002 fa28 	bl	80079bc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2203      	movs	r2, #3
 8005570:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2203      	movs	r2, #3
 8005576:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4a20      	ldr	r2, [pc, #128]	; (80055fc <_DoInit+0xa4>)
 800557c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	4a1f      	ldr	r2, [pc, #124]	; (8005600 <_DoInit+0xa8>)
 8005582:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2200      	movs	r2, #0
 8005590:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2200      	movs	r2, #0
 8005596:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2200      	movs	r2, #0
 800559c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	4a16      	ldr	r2, [pc, #88]	; (80055fc <_DoInit+0xa4>)
 80055a2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	4a17      	ldr	r2, [pc, #92]	; (8005604 <_DoInit+0xac>)
 80055a8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2210      	movs	r2, #16
 80055ae:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2200      	movs	r2, #0
 80055b4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2200      	movs	r2, #0
 80055ba:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80055c2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80055c6:	2300      	movs	r3, #0
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	e00c      	b.n	80055e6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f1c3 030f 	rsb	r3, r3, #15
 80055d2:	4a0d      	ldr	r2, [pc, #52]	; (8005608 <_DoInit+0xb0>)
 80055d4:	5cd1      	ldrb	r1, [r2, r3]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4413      	add	r3, r2
 80055dc:	460a      	mov	r2, r1
 80055de:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3301      	adds	r3, #1
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b0f      	cmp	r3, #15
 80055ea:	d9ef      	bls.n	80055cc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80055ec:	f3bf 8f5f 	dmb	sy
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20012eec 	.word	0x20012eec
 80055fc:	08007b2c 	.word	0x08007b2c
 8005600:	20012f94 	.word	0x20012f94
 8005604:	20013394 	.word	0x20013394
 8005608:	08007b6c 	.word	0x08007b6c

0800560c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b08a      	sub	sp, #40	; 0x28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005618:	2300      	movs	r3, #0
 800561a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	429a      	cmp	r2, r3
 800562e:	d905      	bls.n	800563c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	e007      	b.n	800564c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	69b9      	ldr	r1, [r7, #24]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	1acb      	subs	r3, r1, r3
 8005646:	4413      	add	r3, r2
 8005648:	3b01      	subs	r3, #1
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	4293      	cmp	r3, r2
 8005658:	bf28      	it	cs
 800565a:	4613      	movcs	r3, r2
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800565e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4293      	cmp	r3, r2
 8005664:	bf28      	it	cs
 8005666:	4613      	movcs	r3, r2
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	4413      	add	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	6978      	ldr	r0, [r7, #20]
 800567a:	f002 f991 	bl	80079a0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800567e:	6a3a      	ldr	r2, [r7, #32]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	4413      	add	r3, r2
 8005684:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568a:	4413      	add	r3, r2
 800568c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	4413      	add	r3, r2
 800569c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d101      	bne.n	80056ac <_WriteBlocking+0xa0>
      WrOff = 0u;
 80056a8:	2300      	movs	r3, #0
 80056aa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056ac:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1b2      	bne.n	8005622 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80056bc:	6a3b      	ldr	r3, [r7, #32]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3728      	adds	r7, #40	; 0x28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b088      	sub	sp, #32
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d911      	bls.n	800570e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	4413      	add	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	6938      	ldr	r0, [r7, #16]
 80056fa:	f002 f951 	bl	80079a0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056fe:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005702:	69fa      	ldr	r2, [r7, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	441a      	add	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800570c:	e01f      	b.n	800574e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	4413      	add	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	6938      	ldr	r0, [r7, #16]
 8005722:	f002 f93d 	bl	80079a0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	4413      	add	r3, r2
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4619      	mov	r1, r3
 800573e:	6938      	ldr	r0, [r7, #16]
 8005740:	f002 f92e 	bl	80079a0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005744:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	60da      	str	r2, [r3, #12]
}
 800574e:	bf00      	nop
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	429a      	cmp	r2, r3
 8005770:	d808      	bhi.n	8005784 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad2      	subs	r2, r2, r3
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	4413      	add	r3, r2
 800577e:	3b01      	subs	r3, #1
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	e004      	b.n	800578e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	; 0x30
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80057a8:	4b3e      	ldr	r3, [pc, #248]	; (80058a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80057aa:	623b      	str	r3, [r7, #32]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b53      	cmp	r3, #83	; 0x53
 80057b4:	d001      	beq.n	80057ba <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80057b6:	f7ff fecf 	bl	8005558 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4a37      	ldr	r2, [pc, #220]	; (80058a4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80057c8:	4413      	add	r3, r2
 80057ca:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057dc:	2300      	movs	r3, #0
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d92b      	bls.n	8005840 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4293      	cmp	r3, r2
 80057f8:	bf28      	it	cs
 80057fa:	4613      	movcs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	4413      	add	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	6939      	ldr	r1, [r7, #16]
 800580c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800580e:	f002 f8c7 	bl	80079a0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800581a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	4413      	add	r3, r2
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	4413      	add	r3, r2
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005838:	429a      	cmp	r2, r3
 800583a:	d101      	bne.n	8005840 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800583c:	2300      	movs	r3, #0
 800583e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4293      	cmp	r3, r2
 800584e:	bf28      	it	cs
 8005850:	4613      	movcs	r3, r2
 8005852:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d019      	beq.n	800588e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	4413      	add	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	6939      	ldr	r1, [r7, #16]
 8005868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800586a:	f002 f899 	bl	80079a0 <memcpy>
    NumBytesRead += NumBytesRem;
 800586e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	4413      	add	r3, r2
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	4413      	add	r3, r2
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d002      	beq.n	800589a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005898:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800589a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800589c:	4618      	mov	r0, r3
 800589e:	3730      	adds	r7, #48	; 0x30
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	20012eec 	.word	0x20012eec

080058a8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08c      	sub	sp, #48	; 0x30
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80058b4:	4b3e      	ldr	r3, [pc, #248]	; (80059b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80058b6:	623b      	str	r3, [r7, #32]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b53      	cmp	r3, #83	; 0x53
 80058c0:	d001      	beq.n	80058c6 <SEGGER_RTT_ReadNoLock+0x1e>
 80058c2:	f7ff fe49 	bl	8005558 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4613      	mov	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	3360      	adds	r3, #96	; 0x60
 80058d2:	4a37      	ldr	r2, [pc, #220]	; (80059b0 <SEGGER_RTT_ReadNoLock+0x108>)
 80058d4:	4413      	add	r3, r2
 80058d6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80058e8:	2300      	movs	r3, #0
 80058ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80058ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d92b      	bls.n	800594c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4293      	cmp	r3, r2
 8005904:	bf28      	it	cs
 8005906:	4613      	movcs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005910:	4413      	add	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	6939      	ldr	r1, [r7, #16]
 8005918:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800591a:	f002 f841 	bl	80079a0 <memcpy>
    NumBytesRead += NumBytesRem;
 800591e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	4413      	add	r3, r2
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005944:	429a      	cmp	r2, r3
 8005946:	d101      	bne.n	800594c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005948:	2300      	movs	r3, #0
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4293      	cmp	r3, r2
 800595a:	bf28      	it	cs
 800595c:	4613      	movcs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d019      	beq.n	800599a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	4413      	add	r3, r2
 800596e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	6939      	ldr	r1, [r7, #16]
 8005974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005976:	f002 f813 	bl	80079a0 <memcpy>
    NumBytesRead += NumBytesRem;
 800597a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	4413      	add	r3, r2
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	4413      	add	r3, r2
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	4413      	add	r3, r2
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80059a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3730      	adds	r7, #48	; 0x30
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20012eec 	.word	0x20012eec

080059b4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	3360      	adds	r3, #96	; 0x60
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80059d2:	4413      	add	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	695b      	ldr	r3, [r3, #20]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d029      	beq.n	8005a32 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d82e      	bhi.n	8005a40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d013      	beq.n	8005a12 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80059ea:	e029      	b.n	8005a40 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80059ec:	6978      	ldr	r0, [r7, #20]
 80059ee:	f7ff feb2 	bl	8005756 <_GetAvailWriteSpace>
 80059f2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d202      	bcs.n	8005a02 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80059fc:	2300      	movs	r3, #0
 80059fe:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005a00:	e021      	b.n	8005a46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	69b9      	ldr	r1, [r7, #24]
 8005a0a:	6978      	ldr	r0, [r7, #20]
 8005a0c:	f7ff fe5b 	bl	80056c6 <_WriteNoCheck>
    break;
 8005a10:	e019      	b.n	8005a46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005a12:	6978      	ldr	r0, [r7, #20]
 8005a14:	f7ff fe9f 	bl	8005756 <_GetAvailWriteSpace>
 8005a18:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	bf28      	it	cs
 8005a22:	4613      	movcs	r3, r2
 8005a24:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	6978      	ldr	r0, [r7, #20]
 8005a2c:	f7ff fe4b 	bl	80056c6 <_WriteNoCheck>
    break;
 8005a30:	e009      	b.n	8005a46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	69b9      	ldr	r1, [r7, #24]
 8005a36:	6978      	ldr	r0, [r7, #20]
 8005a38:	f7ff fde8 	bl	800560c <_WriteBlocking>
 8005a3c:	61f8      	str	r0, [r7, #28]
    break;
 8005a3e:	e002      	b.n	8005a46 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
    break;
 8005a44:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005a46:	69fb      	ldr	r3, [r7, #28]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20012eec 	.word	0x20012eec

08005a54 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005a60:	4b0e      	ldr	r3, [pc, #56]	; (8005a9c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b53      	cmp	r3, #83	; 0x53
 8005a6c:	d001      	beq.n	8005a72 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005a6e:	f7ff fd73 	bl	8005558 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a72:	f3ef 8311 	mrs	r3, BASEPRI
 8005a76:	f04f 0120 	mov.w	r1, #32
 8005a7a:	f381 8811 	msr	BASEPRI, r1
 8005a7e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	68b9      	ldr	r1, [r7, #8]
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f7ff ff95 	bl	80059b4 <SEGGER_RTT_WriteDownBufferNoLock>
 8005a8a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a92:	697b      	ldr	r3, [r7, #20]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20012eec 	.word	0x20012eec

08005aa0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b088      	sub	sp, #32
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005aae:	4b3d      	ldr	r3, [pc, #244]	; (8005ba4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b53      	cmp	r3, #83	; 0x53
 8005aba:	d001      	beq.n	8005ac0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005abc:	f7ff fd4c 	bl	8005558 <_DoInit>
  SEGGER_RTT_LOCK();
 8005ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac4:	f04f 0120 	mov.w	r1, #32
 8005ac8:	f381 8811 	msr	BASEPRI, r1
 8005acc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ace:	4b35      	ldr	r3, [pc, #212]	; (8005ba4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005ad0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	4613      	mov	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	440b      	add	r3, r1
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d008      	beq.n	8005b00 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	3301      	adds	r3, #1
 8005af2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	dbeb      	blt.n	8005ad6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005afe:	e000      	b.n	8005b02 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005b00:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	da3f      	bge.n	8005b8c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005b0c:	6939      	ldr	r1, [r7, #16]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1c5a      	adds	r2, r3, #1
 8005b12:	4613      	mov	r3, r2
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	4413      	add	r3, r2
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	440b      	add	r3, r1
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b20:	6939      	ldr	r1, [r7, #16]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	1c5a      	adds	r2, r3, #1
 8005b26:	4613      	mov	r3, r2
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	4413      	add	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	440b      	add	r3, r1
 8005b30:	3304      	adds	r3, #4
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005b36:	6939      	ldr	r1, [r7, #16]
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	3320      	adds	r3, #32
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005b4a:	6939      	ldr	r1, [r7, #16]
 8005b4c:	69fa      	ldr	r2, [r7, #28]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	005b      	lsls	r3, r3, #1
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	440b      	add	r3, r1
 8005b58:	3328      	adds	r3, #40	; 0x28
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005b5e:	6939      	ldr	r1, [r7, #16]
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	4613      	mov	r3, r2
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	4413      	add	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	440b      	add	r3, r1
 8005b6c:	3324      	adds	r3, #36	; 0x24
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005b72:	6939      	ldr	r1, [r7, #16]
 8005b74:	69fa      	ldr	r2, [r7, #28]
 8005b76:	4613      	mov	r3, r2
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	4413      	add	r3, r2
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	440b      	add	r3, r1
 8005b80:	332c      	adds	r3, #44	; 0x2c
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b86:	f3bf 8f5f 	dmb	sy
 8005b8a:	e002      	b.n	8005b92 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b90:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b98:	69fb      	ldr	r3, [r7, #28]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20012eec 	.word	0x20012eec

08005ba8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08a      	sub	sp, #40	; 0x28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005bb6:	4b21      	ldr	r3, [pc, #132]	; (8005c3c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005bb8:	623b      	str	r3, [r7, #32]
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b53      	cmp	r3, #83	; 0x53
 8005bc2:	d001      	beq.n	8005bc8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005bc4:	f7ff fcc8 	bl	8005558 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005bc8:	4b1c      	ldr	r3, [pc, #112]	; (8005c3c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005bca:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d82c      	bhi.n	8005c2c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005bd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005bd6:	f04f 0120 	mov.w	r1, #32
 8005bda:	f381 8811 	msr	BASEPRI, r1
 8005bde:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	3360      	adds	r3, #96	; 0x60
 8005bec:	69fa      	ldr	r2, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00e      	beq.n	8005c16 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2200      	movs	r2, #0
 8005c14:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005c1c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2a:	e002      	b.n	8005c32 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3728      	adds	r7, #40	; 0x28
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20012eec 	.word	0x20012eec

08005c40 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	60fa      	str	r2, [r7, #12]
 8005c56:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b80      	cmp	r3, #128	; 0x80
 8005c5c:	d90a      	bls.n	8005c74 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005c5e:	2380      	movs	r3, #128	; 0x80
 8005c60:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005c62:	e007      	b.n	8005c74 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	1c53      	adds	r3, r2, #1
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1c59      	adds	r1, r3, #1
 8005c6e:	60f9      	str	r1, [r7, #12]
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	1e5a      	subs	r2, r3, #1
 8005c78:	607a      	str	r2, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <_EncodeStr+0x46>
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1ee      	bne.n	8005c64 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005c92:	68fb      	ldr	r3, [r7, #12]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3307      	adds	r3, #7
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cbe:	4b35      	ldr	r3, [pc, #212]	; (8005d94 <_HandleIncomingPacket+0xdc>)
 8005cc0:	7e1b      	ldrb	r3, [r3, #24]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	1cfb      	adds	r3, r7, #3
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f7ff fded 	bl	80058a8 <SEGGER_RTT_ReadNoLock>
 8005cce:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d052      	beq.n	8005d7c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d031      	beq.n	8005d40 <_HandleIncomingPacket+0x88>
 8005cdc:	2b80      	cmp	r3, #128	; 0x80
 8005cde:	dc40      	bgt.n	8005d62 <_HandleIncomingPacket+0xaa>
 8005ce0:	2b07      	cmp	r3, #7
 8005ce2:	dc15      	bgt.n	8005d10 <_HandleIncomingPacket+0x58>
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dd3c      	ble.n	8005d62 <_HandleIncomingPacket+0xaa>
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d839      	bhi.n	8005d62 <_HandleIncomingPacket+0xaa>
 8005cee:	a201      	add	r2, pc, #4	; (adr r2, 8005cf4 <_HandleIncomingPacket+0x3c>)
 8005cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf4:	08005d17 	.word	0x08005d17
 8005cf8:	08005d1d 	.word	0x08005d1d
 8005cfc:	08005d23 	.word	0x08005d23
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d2f 	.word	0x08005d2f
 8005d08:	08005d35 	.word	0x08005d35
 8005d0c:	08005d3b 	.word	0x08005d3b
 8005d10:	2b7f      	cmp	r3, #127	; 0x7f
 8005d12:	d035      	beq.n	8005d80 <_HandleIncomingPacket+0xc8>
 8005d14:	e025      	b.n	8005d62 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005d16:	f000 fff5 	bl	8006d04 <SEGGER_SYSVIEW_Start>
      break;
 8005d1a:	e036      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005d1c:	f001 f8ae 	bl	8006e7c <SEGGER_SYSVIEW_Stop>
      break;
 8005d20:	e033      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005d22:	f001 fa87 	bl	8007234 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005d26:	e030      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005d28:	f001 fa4c 	bl	80071c4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005d2c:	e02d      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005d2e:	f001 f8cb 	bl	8006ec8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005d32:	e02a      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005d34:	f001 fd24 	bl	8007780 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d38:	e027      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d3a:	f001 fd03 	bl	8007744 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d3e:	e024      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d40:	4b14      	ldr	r3, [pc, #80]	; (8005d94 <_HandleIncomingPacket+0xdc>)
 8005d42:	7e1b      	ldrb	r3, [r3, #24]
 8005d44:	4618      	mov	r0, r3
 8005d46:	1cfb      	adds	r3, r7, #3
 8005d48:	2201      	movs	r2, #1
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	f7ff fdac 	bl	80058a8 <SEGGER_RTT_ReadNoLock>
 8005d50:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d015      	beq.n	8005d84 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fc68 	bl	8007630 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d60:	e010      	b.n	8005d84 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d62:	78fb      	ldrb	r3, [r7, #3]
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da0e      	bge.n	8005d88 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d6a:	4b0a      	ldr	r3, [pc, #40]	; (8005d94 <_HandleIncomingPacket+0xdc>)
 8005d6c:	7e1b      	ldrb	r3, [r3, #24]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	1cfb      	adds	r3, r7, #3
 8005d72:	2201      	movs	r2, #1
 8005d74:	4619      	mov	r1, r3
 8005d76:	f7ff fd97 	bl	80058a8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d7a:	e005      	b.n	8005d88 <_HandleIncomingPacket+0xd0>
    }
  }
 8005d7c:	bf00      	nop
 8005d7e:	e004      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
      break;
 8005d80:	bf00      	nop
 8005d82:	e002      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
      break;
 8005d84:	bf00      	nop
 8005d86:	e000      	b.n	8005d8a <_HandleIncomingPacket+0xd2>
      break;
 8005d88:	bf00      	nop
}
 8005d8a:	bf00      	nop
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	200143ac 	.word	0x200143ac

08005d98 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08c      	sub	sp, #48	; 0x30
 8005d9c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005d9e:	2301      	movs	r3, #1
 8005da0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005da2:	1d3b      	adds	r3, r7, #4
 8005da4:	3301      	adds	r3, #1
 8005da6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dac:	4b32      	ldr	r3, [pc, #200]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005db2:	e00b      	b.n	8005dcc <_TrySendOverflowPacket+0x34>
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	1c59      	adds	r1, r3, #1
 8005dbc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dbe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd0:	d8f0      	bhi.n	8005db4 <_TrySendOverflowPacket+0x1c>
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	1c5a      	adds	r2, r3, #1
 8005dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005de2:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <_TrySendOverflowPacket+0xe4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005de8:	4b23      	ldr	r3, [pc, #140]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	69ba      	ldr	r2, [r7, #24]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	e00b      	b.n	8005e14 <_TrySendOverflowPacket+0x7c>
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	6279      	str	r1, [r7, #36]	; 0x24
 8005e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	09db      	lsrs	r3, r3, #7
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	6a3b      	ldr	r3, [r7, #32]
 8005e16:	2b7f      	cmp	r3, #127	; 0x7f
 8005e18:	d8f0      	bhi.n	8005dfc <_TrySendOverflowPacket+0x64>
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e20:	6a3a      	ldr	r2, [r7, #32]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	4618      	mov	r0, r3
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	f7fa f9c8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e40:	4603      	mov	r3, r0
 8005e42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005e44:	f7ff fafe 	bl	8005444 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e54:	4b08      	ldr	r3, [pc, #32]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005e5e:	701a      	strb	r2, [r3, #0]
 8005e60:	e004      	b.n	8005e6c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	3301      	adds	r3, #1
 8005e68:	4a03      	ldr	r2, [pc, #12]	; (8005e78 <_TrySendOverflowPacket+0xe0>)
 8005e6a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e6c:	693b      	ldr	r3, [r7, #16]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3730      	adds	r7, #48	; 0x30
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200143ac 	.word	0x200143ac
 8005e7c:	e0001004 	.word	0xe0001004

08005e80 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e8c:	4b96      	ldr	r3, [pc, #600]	; (80060e8 <_SendPacket+0x268>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d010      	beq.n	8005eb6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005e94:	4b94      	ldr	r3, [pc, #592]	; (80060e8 <_SendPacket+0x268>)
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 8130 	beq.w	80060fe <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005e9e:	4b92      	ldr	r3, [pc, #584]	; (80060e8 <_SendPacket+0x268>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d109      	bne.n	8005eba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005ea6:	f7ff ff77 	bl	8005d98 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005eaa:	4b8f      	ldr	r3, [pc, #572]	; (80060e8 <_SendPacket+0x268>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	f040 8127 	bne.w	8006102 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005eb4:	e001      	b.n	8005eba <_SendPacket+0x3a>
    goto Send;
 8005eb6:	bf00      	nop
 8005eb8:	e000      	b.n	8005ebc <_SendPacket+0x3c>
Send:
 8005eba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b1f      	cmp	r3, #31
 8005ec0:	d809      	bhi.n	8005ed6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ec2:	4b89      	ldr	r3, [pc, #548]	; (80060e8 <_SendPacket+0x268>)
 8005ec4:	69da      	ldr	r2, [r3, #28]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f040 8118 	bne.w	8006106 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b17      	cmp	r3, #23
 8005eda:	d807      	bhi.n	8005eec <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	e0c4      	b.n	8006076 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef8:	d912      	bls.n	8005f20 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	09da      	lsrs	r2, r3, #7
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	3a01      	subs	r2, #1
 8005f12:	60fa      	str	r2, [r7, #12]
 8005f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e006      	b.n	8005f2e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b7e      	cmp	r3, #126	; 0x7e
 8005f32:	d807      	bhi.n	8005f44 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	3b01      	subs	r3, #1
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	b2da      	uxtb	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	e098      	b.n	8006076 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4a:	d212      	bcs.n	8005f72 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	09da      	lsrs	r2, r3, #7
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
 8005f56:	b2d2      	uxtb	r2, r2
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	3a01      	subs	r2, #1
 8005f64:	60fa      	str	r2, [r7, #12]
 8005f66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e081      	b.n	8006076 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f78:	d21d      	bcs.n	8005fb6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0b9a      	lsrs	r2, r3, #14
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	09db      	lsrs	r3, r3, #7
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	3a01      	subs	r2, #1
 8005f94:	60fa      	str	r2, [r7, #12]
 8005f96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	3a01      	subs	r2, #1
 8005fa8:	60fa      	str	r2, [r7, #12]
 8005faa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	e05f      	b.n	8006076 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fbc:	d228      	bcs.n	8006010 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0d5a      	lsrs	r2, r3, #21
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	0b9b      	lsrs	r3, r3, #14
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	3a01      	subs	r2, #1
 8005fd8:	60fa      	str	r2, [r7, #12]
 8005fda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	09db      	lsrs	r3, r3, #7
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	3a01      	subs	r2, #1
 8005fee:	60fa      	str	r2, [r7, #12]
 8005ff0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	3a01      	subs	r2, #1
 8006002:	60fa      	str	r2, [r7, #12]
 8006004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006008:	b2da      	uxtb	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	e032      	b.n	8006076 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0f1a      	lsrs	r2, r3, #28
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3b01      	subs	r3, #1
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	b2d2      	uxtb	r2, r2
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	0d5b      	lsrs	r3, r3, #21
 8006024:	b2db      	uxtb	r3, r3
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	3a01      	subs	r2, #1
 800602a:	60fa      	str	r2, [r7, #12]
 800602c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006030:	b2da      	uxtb	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	0b9b      	lsrs	r3, r3, #14
 800603a:	b2db      	uxtb	r3, r3
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	3a01      	subs	r2, #1
 8006040:	60fa      	str	r2, [r7, #12]
 8006042:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	b2db      	uxtb	r3, r3
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	3a01      	subs	r2, #1
 8006056:	60fa      	str	r2, [r7, #12]
 8006058:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	b2db      	uxtb	r3, r3
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	3a01      	subs	r2, #1
 800606a:	60fa      	str	r2, [r7, #12]
 800606c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006070:	b2da      	uxtb	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <_SendPacket+0x26c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800607c:	4b1a      	ldr	r3, [pc, #104]	; (80060e8 <_SendPacket+0x268>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	623b      	str	r3, [r7, #32]
 800608e:	e00b      	b.n	80060a8 <_SendPacket+0x228>
 8006090:	6a3b      	ldr	r3, [r7, #32]
 8006092:	b2da      	uxtb	r2, r3
 8006094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006096:	1c59      	adds	r1, r3, #1
 8006098:	6279      	str	r1, [r7, #36]	; 0x24
 800609a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609e:	b2d2      	uxtb	r2, r2
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	09db      	lsrs	r3, r3, #7
 80060a6:	623b      	str	r3, [r7, #32]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	2b7f      	cmp	r3, #127	; 0x7f
 80060ac:	d8f0      	bhi.n	8006090 <_SendPacket+0x210>
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	627a      	str	r2, [r7, #36]	; 0x24
 80060b4:	6a3a      	ldr	r2, [r7, #32]
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80060be:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <_SendPacket+0x268>)
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	4618      	mov	r0, r3
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	461a      	mov	r2, r3
 80060cc:	68f9      	ldr	r1, [r7, #12]
 80060ce:	f7fa f87f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80060d2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80060d4:	f7ff f9b6 	bl	8005444 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80060de:	4a02      	ldr	r2, [pc, #8]	; (80060e8 <_SendPacket+0x268>)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	60d3      	str	r3, [r2, #12]
 80060e4:	e010      	b.n	8006108 <_SendPacket+0x288>
 80060e6:	bf00      	nop
 80060e8:	200143ac 	.word	0x200143ac
 80060ec:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <_SendPacket+0x2d8>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	4b17      	ldr	r3, [pc, #92]	; (8006158 <_SendPacket+0x2d8>)
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e004      	b.n	8006108 <_SendPacket+0x288>
    goto SendDone;
 80060fe:	bf00      	nop
 8006100:	e002      	b.n	8006108 <_SendPacket+0x288>
      goto SendDone;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <_SendPacket+0x288>
      goto SendDone;
 8006106:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006108:	4b13      	ldr	r3, [pc, #76]	; (8006158 <_SendPacket+0x2d8>)
 800610a:	7e1b      	ldrb	r3, [r3, #24]
 800610c:	4619      	mov	r1, r3
 800610e:	4a13      	ldr	r2, [pc, #76]	; (800615c <_SendPacket+0x2dc>)
 8006110:	460b      	mov	r3, r1
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	440b      	add	r3, r1
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4413      	add	r3, r2
 800611a:	336c      	adds	r3, #108	; 0x6c
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <_SendPacket+0x2d8>)
 8006120:	7e1b      	ldrb	r3, [r3, #24]
 8006122:	4618      	mov	r0, r3
 8006124:	490d      	ldr	r1, [pc, #52]	; (800615c <_SendPacket+0x2dc>)
 8006126:	4603      	mov	r3, r0
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	4403      	add	r3, r0
 800612c:	00db      	lsls	r3, r3, #3
 800612e:	440b      	add	r3, r1
 8006130:	3370      	adds	r3, #112	; 0x70
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d00b      	beq.n	8006150 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006138:	4b07      	ldr	r3, [pc, #28]	; (8006158 <_SendPacket+0x2d8>)
 800613a:	789b      	ldrb	r3, [r3, #2]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006140:	4b05      	ldr	r3, [pc, #20]	; (8006158 <_SendPacket+0x2d8>)
 8006142:	2201      	movs	r2, #1
 8006144:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006146:	f7ff fdb7 	bl	8005cb8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800614a:	4b03      	ldr	r3, [pc, #12]	; (8006158 <_SendPacket+0x2d8>)
 800614c:	2200      	movs	r2, #0
 800614e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006150:	bf00      	nop
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	200143ac 	.word	0x200143ac
 800615c:	20012eec 	.word	0x20012eec

08006160 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	3301      	adds	r3, #1
 8006176:	2b80      	cmp	r3, #128	; 0x80
 8006178:	d80a      	bhi.n	8006190 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	1c59      	adds	r1, r3, #1
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	6051      	str	r1, [r2, #4]
 8006184:	78fa      	ldrb	r2, [r7, #3]
 8006186:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	2b80      	cmp	r3, #128	; 0x80
 8006196:	d15a      	bne.n	800624e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	e00b      	b.n	80061d2 <_StoreChar+0x72>
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	6279      	str	r1, [r7, #36]	; 0x24
 80061c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2b7f      	cmp	r3, #127	; 0x7f
 80061d6:	d8f0      	bhi.n	80061ba <_StoreChar+0x5a>
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	627a      	str	r2, [r7, #36]	; 0x24
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	2300      	movs	r3, #0
 80061ee:	61bb      	str	r3, [r7, #24]
 80061f0:	e00b      	b.n	800620a <_StoreChar+0xaa>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	61f9      	str	r1, [r7, #28]
 80061fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	61bb      	str	r3, [r7, #24]
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b7f      	cmp	r3, #127	; 0x7f
 800620e:	d8f0      	bhi.n	80061f2 <_StoreChar+0x92>
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	61fa      	str	r2, [r7, #28]
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	221a      	movs	r2, #26
 8006226:	6939      	ldr	r1, [r7, #16]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fe29 	bl	8005e80 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fd34 	bl	8005ca0 <_PreparePacket>
 8006238:	4602      	mov	r2, r0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	611a      	str	r2, [r3, #16]
  }
}
 800624e:	bf00      	nop
 8006250:	3728      	adds	r7, #40	; 0x28
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800626a:	2301      	movs	r3, #1
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800626e:	2301      	movs	r3, #1
 8006270:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006272:	e007      	b.n	8006284 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8006274:	6a3a      	ldr	r2, [r7, #32]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	fbb2 f3f3 	udiv	r3, r2, r3
 800627c:	623b      	str	r3, [r7, #32]
    Width++;
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3301      	adds	r3, #1
 8006282:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8006284:	6a3a      	ldr	r2, [r7, #32]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d2f3      	bcs.n	8006274 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	429a      	cmp	r2, r3
 8006292:	d901      	bls.n	8006298 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11f      	bne.n	80062e2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80062a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01c      	beq.n	80062e2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80062a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d005      	beq.n	80062be <_PrintUnsigned+0x66>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d102      	bne.n	80062be <_PrintUnsigned+0x66>
        c = '0';
 80062b8:	2330      	movs	r3, #48	; 0x30
 80062ba:	76fb      	strb	r3, [r7, #27]
 80062bc:	e001      	b.n	80062c2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80062be:	2320      	movs	r3, #32
 80062c0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062c2:	e007      	b.n	80062d4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80062c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c6:	3b01      	subs	r3, #1
 80062c8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80062ca:	7efb      	ldrb	r3, [r7, #27]
 80062cc:	4619      	mov	r1, r3
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff46 	bl	8006160 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <_PrintUnsigned+0x8a>
 80062da:	69fa      	ldr	r2, [r7, #28]
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3f0      	bcc.n	80062c4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d903      	bls.n	80062f0 <_PrintUnsigned+0x98>
      NumDigits--;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	603b      	str	r3, [r7, #0]
 80062ee:	e009      	b.n	8006304 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d200      	bcs.n	8006304 <_PrintUnsigned+0xac>
        break;
 8006302:	e005      	b.n	8006310 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	fb02 f303 	mul.w	r3, r2, r3
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800630e:	e7e8      	b.n	80062e2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	fbb2 f3f3 	udiv	r3, r2, r3
 8006318:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631e:	fb02 f303 	mul.w	r3, r2, r3
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006328:	4a15      	ldr	r2, [pc, #84]	; (8006380 <_PrintUnsigned+0x128>)
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	4413      	add	r3, r2
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4619      	mov	r1, r3
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f7ff ff14 	bl	8006160 <_StoreChar>
    Digit /= Base;
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e3      	bne.n	8006310 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d011      	beq.n	8006376 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00e      	beq.n	8006376 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006358:	e006      	b.n	8006368 <_PrintUnsigned+0x110>
        FieldWidth--;
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	3b01      	subs	r3, #1
 800635e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006360:	2120      	movs	r1, #32
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fefc 	bl	8006160 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <_PrintUnsigned+0x11e>
 800636e:	69fa      	ldr	r2, [r7, #28]
 8006370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006372:	429a      	cmp	r2, r3
 8006374:	d3f1      	bcc.n	800635a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006376:	bf00      	nop
 8006378:	3728      	adds	r7, #40	; 0x28
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	08007b8c 	.word	0x08007b8c

08006384 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb8      	it	lt
 8006398:	425b      	neglt	r3, r3
 800639a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800639c:	2301      	movs	r3, #1
 800639e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80063a0:	e007      	b.n	80063b2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80063aa:	613b      	str	r3, [r7, #16]
    Width++;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	3301      	adds	r3, #1
 80063b0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	daf3      	bge.n	80063a2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d901      	bls.n	80063c6 <_PrintInt+0x42>
    Width = NumDigits;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <_PrintInt+0x5e>
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db04      	blt.n	80063dc <_PrintInt+0x58>
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <_PrintInt+0x5e>
    FieldWidth--;
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	3b01      	subs	r3, #1
 80063e0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <_PrintInt+0x6e>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <_PrintInt+0x9c>
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d111      	bne.n	8006420 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00e      	beq.n	8006420 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006402:	e006      	b.n	8006412 <_PrintInt+0x8e>
        FieldWidth--;
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	3b01      	subs	r3, #1
 8006408:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800640a:	2120      	movs	r1, #32
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7ff fea7 	bl	8006160 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d003      	beq.n	8006420 <_PrintInt+0x9c>
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	6a3b      	ldr	r3, [r7, #32]
 800641c:	429a      	cmp	r2, r3
 800641e:	d3f1      	bcc.n	8006404 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da07      	bge.n	8006436 <_PrintInt+0xb2>
    v = -v;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	425b      	negs	r3, r3
 800642a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800642c:	212d      	movs	r1, #45	; 0x2d
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7ff fe96 	bl	8006160 <_StoreChar>
 8006434:	e008      	b.n	8006448 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d003      	beq.n	8006448 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006440:	212b      	movs	r1, #43	; 0x2b
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f7ff fe8c 	bl	8006160 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d019      	beq.n	8006486 <_PrintInt+0x102>
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d114      	bne.n	8006486 <_PrintInt+0x102>
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d111      	bne.n	8006486 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00e      	beq.n	8006486 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006468:	e006      	b.n	8006478 <_PrintInt+0xf4>
        FieldWidth--;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	3b01      	subs	r3, #1
 800646e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006470:	2130      	movs	r1, #48	; 0x30
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff fe74 	bl	8006160 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <_PrintInt+0x102>
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	6a3b      	ldr	r3, [r7, #32]
 8006482:	429a      	cmp	r2, r3
 8006484:	d3f1      	bcc.n	800646a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8006486:	68b9      	ldr	r1, [r7, #8]
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	9300      	str	r3, [sp, #0]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff fedf 	bl	8006258 <_PrintUnsigned>
}
 800649a:	bf00      	nop
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
	...

080064a4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b098      	sub	sp, #96	; 0x60
 80064a8:	af02      	add	r7, sp, #8
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064b0:	f3ef 8311 	mrs	r3, BASEPRI
 80064b4:	f04f 0120 	mov.w	r1, #32
 80064b8:	f381 8811 	msr	BASEPRI, r1
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064be:	48b7      	ldr	r0, [pc, #732]	; (800679c <_VPrintTarget+0x2f8>)
 80064c0:	f7ff fbee 	bl	8005ca0 <_PreparePacket>
 80064c4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80064c6:	4bb5      	ldr	r3, [pc, #724]	; (800679c <_VPrintTarget+0x2f8>)
 80064c8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	3301      	adds	r3, #1
 80064d6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80064ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 81a8 	beq.w	8006844 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80064f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064f8:	2b25      	cmp	r3, #37	; 0x25
 80064fa:	f040 8195 	bne.w	8006828 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80064fe:	2300      	movs	r3, #0
 8006500:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006502:	2301      	movs	r3, #1
 8006504:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800650e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006512:	3b23      	subs	r3, #35	; 0x23
 8006514:	2b0d      	cmp	r3, #13
 8006516:	d83f      	bhi.n	8006598 <_VPrintTarget+0xf4>
 8006518:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <_VPrintTarget+0x7c>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	08006589 	.word	0x08006589
 8006524:	08006599 	.word	0x08006599
 8006528:	08006599 	.word	0x08006599
 800652c:	08006599 	.word	0x08006599
 8006530:	08006599 	.word	0x08006599
 8006534:	08006599 	.word	0x08006599
 8006538:	08006599 	.word	0x08006599
 800653c:	08006599 	.word	0x08006599
 8006540:	08006579 	.word	0x08006579
 8006544:	08006599 	.word	0x08006599
 8006548:	08006559 	.word	0x08006559
 800654c:	08006599 	.word	0x08006599
 8006550:	08006599 	.word	0x08006599
 8006554:	08006569 	.word	0x08006569
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e01a      	b.n	800659e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656a:	f043 0302 	orr.w	r3, r3, #2
 800656e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	e012      	b.n	800659e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657a:	f043 0304 	orr.w	r3, r3, #4
 800657e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3301      	adds	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
 8006586:	e00a      	b.n	800659e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658a:	f043 0308 	orr.w	r3, r3, #8
 800658e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	e002      	b.n	800659e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006598:	2300      	movs	r3, #0
 800659a:	653b      	str	r3, [r7, #80]	; 0x50
 800659c:	bf00      	nop
        }
      } while (v);
 800659e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1b0      	bne.n	8006506 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80065a4:	2300      	movs	r3, #0
 80065a6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80065b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065b4:	2b2f      	cmp	r3, #47	; 0x2f
 80065b6:	d912      	bls.n	80065de <_VPrintTarget+0x13a>
 80065b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065bc:	2b39      	cmp	r3, #57	; 0x39
 80065be:	d80e      	bhi.n	80065de <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80065c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	461a      	mov	r2, r3
 80065d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065d6:	4413      	add	r3, r2
 80065d8:	3b30      	subs	r3, #48	; 0x30
 80065da:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80065dc:	e7e4      	b.n	80065a8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80065de:	2300      	movs	r3, #0
 80065e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80065ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80065ee:	2b2e      	cmp	r3, #46	; 0x2e
 80065f0:	d11d      	bne.n	800662e <_VPrintTarget+0x18a>
        sFormat++;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	3301      	adds	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006604:	2b2f      	cmp	r3, #47	; 0x2f
 8006606:	d912      	bls.n	800662e <_VPrintTarget+0x18a>
 8006608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800660c:	2b39      	cmp	r3, #57	; 0x39
 800660e:	d80e      	bhi.n	800662e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3301      	adds	r3, #1
 8006614:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	461a      	mov	r2, r3
 8006622:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006626:	4413      	add	r3, r2
 8006628:	3b30      	subs	r3, #48	; 0x30
 800662a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800662c:	e7e4      	b.n	80065f8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006636:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800663a:	2b6c      	cmp	r3, #108	; 0x6c
 800663c:	d003      	beq.n	8006646 <_VPrintTarget+0x1a2>
 800663e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006642:	2b68      	cmp	r3, #104	; 0x68
 8006644:	d107      	bne.n	8006656 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006654:	e7ef      	b.n	8006636 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006656:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800665a:	2b25      	cmp	r3, #37	; 0x25
 800665c:	f000 80d8 	beq.w	8006810 <_VPrintTarget+0x36c>
 8006660:	2b25      	cmp	r3, #37	; 0x25
 8006662:	f2c0 80dc 	blt.w	800681e <_VPrintTarget+0x37a>
 8006666:	2b78      	cmp	r3, #120	; 0x78
 8006668:	f300 80d9 	bgt.w	800681e <_VPrintTarget+0x37a>
 800666c:	2b58      	cmp	r3, #88	; 0x58
 800666e:	f2c0 80d6 	blt.w	800681e <_VPrintTarget+0x37a>
 8006672:	3b58      	subs	r3, #88	; 0x58
 8006674:	2b20      	cmp	r3, #32
 8006676:	f200 80d2 	bhi.w	800681e <_VPrintTarget+0x37a>
 800667a:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <_VPrintTarget+0x1dc>)
 800667c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006680:	08006777 	.word	0x08006777
 8006684:	0800681f 	.word	0x0800681f
 8006688:	0800681f 	.word	0x0800681f
 800668c:	0800681f 	.word	0x0800681f
 8006690:	0800681f 	.word	0x0800681f
 8006694:	0800681f 	.word	0x0800681f
 8006698:	0800681f 	.word	0x0800681f
 800669c:	0800681f 	.word	0x0800681f
 80066a0:	0800681f 	.word	0x0800681f
 80066a4:	0800681f 	.word	0x0800681f
 80066a8:	0800681f 	.word	0x0800681f
 80066ac:	08006705 	.word	0x08006705
 80066b0:	0800672b 	.word	0x0800672b
 80066b4:	0800681f 	.word	0x0800681f
 80066b8:	0800681f 	.word	0x0800681f
 80066bc:	0800681f 	.word	0x0800681f
 80066c0:	0800681f 	.word	0x0800681f
 80066c4:	0800681f 	.word	0x0800681f
 80066c8:	0800681f 	.word	0x0800681f
 80066cc:	0800681f 	.word	0x0800681f
 80066d0:	0800681f 	.word	0x0800681f
 80066d4:	0800681f 	.word	0x0800681f
 80066d8:	0800681f 	.word	0x0800681f
 80066dc:	0800681f 	.word	0x0800681f
 80066e0:	080067eb 	.word	0x080067eb
 80066e4:	0800681f 	.word	0x0800681f
 80066e8:	0800681f 	.word	0x0800681f
 80066ec:	080067a1 	.word	0x080067a1
 80066f0:	0800681f 	.word	0x0800681f
 80066f4:	08006751 	.word	0x08006751
 80066f8:	0800681f 	.word	0x0800681f
 80066fc:	0800681f 	.word	0x0800681f
 8006700:	08006777 	.word	0x08006777
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	1d19      	adds	r1, r3, #4
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8006718:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800671c:	f107 0310 	add.w	r3, r7, #16
 8006720:	4611      	mov	r1, r2
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fd1c 	bl	8006160 <_StoreChar>
        break;
 8006728:	e07a      	b.n	8006820 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	1d19      	adds	r1, r3, #4
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6011      	str	r1, [r2, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006738:	f107 0010 	add.w	r0, r7, #16
 800673c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006746:	220a      	movs	r2, #10
 8006748:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800674a:	f7ff fe1b 	bl	8006384 <_PrintInt>
        break;
 800674e:	e067      	b.n	8006820 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	1d19      	adds	r1, r3, #4
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6011      	str	r1, [r2, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800675e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006760:	f107 0010 	add.w	r0, r7, #16
 8006764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676e:	220a      	movs	r2, #10
 8006770:	f7ff fd72 	bl	8006258 <_PrintUnsigned>
        break;
 8006774:	e054      	b.n	8006820 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	1d19      	adds	r1, r3, #4
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6011      	str	r1, [r2, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006784:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006786:	f107 0010 	add.w	r0, r7, #16
 800678a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	2210      	movs	r2, #16
 8006796:	f7ff fd5f 	bl	8006258 <_PrintUnsigned>
        break;
 800679a:	e041      	b.n	8006820 <_VPrintTarget+0x37c>
 800679c:	200143dc 	.word	0x200143dc
      case 's':
        s = va_arg(*pParamList, const char*);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	1d19      	adds	r1, r3, #4
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	6011      	str	r1, [r2, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 80067ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <_VPrintTarget+0x314>
          s = "(null)";
 80067b4:	4b4a      	ldr	r3, [pc, #296]	; (80068e0 <_VPrintTarget+0x43c>)
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 80067b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 80067c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c2:	3301      	adds	r3, #1
 80067c4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 80067c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80067ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80067d2:	f107 0310 	add.w	r3, r7, #16
 80067d6:	4611      	mov	r1, r2
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fcc1 	bl	8006160 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	2b7f      	cmp	r3, #127	; 0x7f
 80067e2:	d9e9      	bls.n	80067b8 <_VPrintTarget+0x314>
        break;
 80067e4:	e01c      	b.n	8006820 <_VPrintTarget+0x37c>
            break;
 80067e6:	bf00      	nop
        break;
 80067e8:	e01a      	b.n	8006820 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	1d19      	adds	r1, r3, #4
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6011      	str	r1, [r2, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80067f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80067fa:	f107 0010 	add.w	r0, r7, #16
 80067fe:	2300      	movs	r3, #0
 8006800:	9301      	str	r3, [sp, #4]
 8006802:	2308      	movs	r3, #8
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	2308      	movs	r3, #8
 8006808:	2210      	movs	r2, #16
 800680a:	f7ff fd25 	bl	8006258 <_PrintUnsigned>
        break;
 800680e:	e007      	b.n	8006820 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006810:	f107 0310 	add.w	r3, r7, #16
 8006814:	2125      	movs	r1, #37	; 0x25
 8006816:	4618      	mov	r0, r3
 8006818:	f7ff fca2 	bl	8006160 <_StoreChar>
        break;
 800681c:	e000      	b.n	8006820 <_VPrintTarget+0x37c>
      default:
        break;
 800681e:	bf00      	nop
      }
      sFormat++;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3301      	adds	r3, #1
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	e007      	b.n	8006838 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006828:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fc94 	bl	8006160 <_StoreChar>
    }
  } while (*sFormat);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	f47f ae4d 	bne.w	80064dc <_VPrintTarget+0x38>
 8006842:	e000      	b.n	8006846 <_VPrintTarget+0x3a2>
      break;
 8006844:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d041      	beq.n	80068d0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	63bb      	str	r3, [r7, #56]	; 0x38
 800685c:	e00b      	b.n	8006876 <_VPrintTarget+0x3d2>
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	b2da      	uxtb	r2, r3
 8006862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006864:	1c59      	adds	r1, r3, #1
 8006866:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006868:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	09db      	lsrs	r3, r3, #7
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	2b7f      	cmp	r3, #127	; 0x7f
 800687a:	d8f0      	bhi.n	800685e <_VPrintTarget+0x3ba>
 800687c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
 8006890:	2300      	movs	r3, #0
 8006892:	633b      	str	r3, [r7, #48]	; 0x30
 8006894:	e00b      	b.n	80068ae <_VPrintTarget+0x40a>
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	b2da      	uxtb	r2, r3
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	1c59      	adds	r1, r3, #1
 800689e:	6379      	str	r1, [r7, #52]	; 0x34
 80068a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	09db      	lsrs	r3, r3, #7
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b7f      	cmp	r3, #127	; 0x7f
 80068b2:	d8f0      	bhi.n	8006896 <_VPrintTarget+0x3f2>
 80068b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	637a      	str	r2, [r7, #52]	; 0x34
 80068ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	6979      	ldr	r1, [r7, #20]
 80068c8:	221a      	movs	r2, #26
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fad8 	bl	8005e80 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80068d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80068d6:	bf00      	nop
 80068d8:	3758      	adds	r7, #88	; 0x58
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	08007b38 	.word	0x08007b38

080068e4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af02      	add	r7, sp, #8
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80068f2:	2300      	movs	r3, #0
 80068f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068f8:	4917      	ldr	r1, [pc, #92]	; (8006958 <SEGGER_SYSVIEW_Init+0x74>)
 80068fa:	4818      	ldr	r0, [pc, #96]	; (800695c <SEGGER_SYSVIEW_Init+0x78>)
 80068fc:	f7ff f8d0 	bl	8005aa0 <SEGGER_RTT_AllocUpBuffer>
 8006900:	4603      	mov	r3, r0
 8006902:	b2da      	uxtb	r2, r3
 8006904:	4b16      	ldr	r3, [pc, #88]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006906:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 800690a:	785a      	ldrb	r2, [r3, #1]
 800690c:	4b14      	ldr	r3, [pc, #80]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 800690e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006910:	4b13      	ldr	r3, [pc, #76]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006912:	7e1b      	ldrb	r3, [r3, #24]
 8006914:	4618      	mov	r0, r3
 8006916:	2300      	movs	r3, #0
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	2308      	movs	r3, #8
 800691c:	4a11      	ldr	r2, [pc, #68]	; (8006964 <SEGGER_SYSVIEW_Init+0x80>)
 800691e:	490f      	ldr	r1, [pc, #60]	; (800695c <SEGGER_SYSVIEW_Init+0x78>)
 8006920:	f7ff f942 	bl	8005ba8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006926:	2200      	movs	r2, #0
 8006928:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <SEGGER_SYSVIEW_Init+0x84>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a0c      	ldr	r2, [pc, #48]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006930:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006932:	4a0b      	ldr	r2, [pc, #44]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006938:	4a09      	ldr	r2, [pc, #36]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800693e:	4a08      	ldr	r2, [pc, #32]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006944:	4a06      	ldr	r2, [pc, #24]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800694a:	4b05      	ldr	r3, [pc, #20]	; (8006960 <SEGGER_SYSVIEW_Init+0x7c>)
 800694c:	2200      	movs	r2, #0
 800694e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200133a4 	.word	0x200133a4
 800695c:	08007b40 	.word	0x08007b40
 8006960:	200143ac 	.word	0x200143ac
 8006964:	200143a4 	.word	0x200143a4
 8006968:	e0001004 	.word	0xe0001004

0800696c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006974:	4a04      	ldr	r2, [pc, #16]	; (8006988 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6113      	str	r3, [r2, #16]
}
 800697a:	bf00      	nop
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	200143ac 	.word	0x200143ac

0800698c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006994:	f3ef 8311 	mrs	r3, BASEPRI
 8006998:	f04f 0120 	mov.w	r1, #32
 800699c:	f381 8811 	msr	BASEPRI, r1
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	4808      	ldr	r0, [pc, #32]	; (80069c4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80069a4:	f7ff f97c 	bl	8005ca0 <_PreparePacket>
 80069a8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	68b8      	ldr	r0, [r7, #8]
 80069b0:	f7ff fa66 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f383 8811 	msr	BASEPRI, r3
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200143dc 	.word	0x200143dc

080069c8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069d2:	f3ef 8311 	mrs	r3, BASEPRI
 80069d6:	f04f 0120 	mov.w	r1, #32
 80069da:	f381 8811 	msr	BASEPRI, r1
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	4816      	ldr	r0, [pc, #88]	; (8006a3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80069e2:	f7ff f95d 	bl	8005ca0 <_PreparePacket>
 80069e6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	61bb      	str	r3, [r7, #24]
 80069f4:	e00b      	b.n	8006a0e <SEGGER_SYSVIEW_RecordU32+0x46>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	b2da      	uxtb	r2, r3
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	61f9      	str	r1, [r7, #28]
 8006a00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	09db      	lsrs	r3, r3, #7
 8006a0c:	61bb      	str	r3, [r7, #24]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b7f      	cmp	r3, #127	; 0x7f
 8006a12:	d8f0      	bhi.n	80069f6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	1c5a      	adds	r2, r3, #1
 8006a18:	61fa      	str	r2, [r7, #28]
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	b2d2      	uxtb	r2, r2
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6938      	ldr	r0, [r7, #16]
 8006a2a:	f7ff fa29 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
 8006a36:	3720      	adds	r7, #32
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	200143dc 	.word	0x200143dc

08006a40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08c      	sub	sp, #48	; 0x30
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a50:	f04f 0120 	mov.w	r1, #32
 8006a54:	f381 8811 	msr	BASEPRI, r1
 8006a58:	61fb      	str	r3, [r7, #28]
 8006a5a:	4825      	ldr	r0, [pc, #148]	; (8006af0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006a5c:	f7ff f920 	bl	8005ca0 <_PreparePacket>
 8006a60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a6e:	e00b      	b.n	8006a88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	1c59      	adds	r1, r3, #1
 8006a78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	701a      	strb	r2, [r3, #0]
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	09db      	lsrs	r3, r3, #7
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8c:	d8f0      	bhi.n	8006a70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	623b      	str	r3, [r7, #32]
 8006aa6:	e00b      	b.n	8006ac0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	6279      	str	r1, [r7, #36]	; 0x24
 8006ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	09db      	lsrs	r3, r3, #7
 8006abe:	623b      	str	r3, [r7, #32]
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac4:	d8f0      	bhi.n	8006aa8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	627a      	str	r2, [r7, #36]	; 0x24
 8006acc:	6a3a      	ldr	r2, [r7, #32]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	6979      	ldr	r1, [r7, #20]
 8006ada:	69b8      	ldr	r0, [r7, #24]
 8006adc:	f7ff f9d0 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f383 8811 	msr	BASEPRI, r3
}
 8006ae6:	bf00      	nop
 8006ae8:	3730      	adds	r7, #48	; 0x30
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200143dc 	.word	0x200143dc

08006af4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b02:	f3ef 8311 	mrs	r3, BASEPRI
 8006b06:	f04f 0120 	mov.w	r1, #32
 8006b0a:	f381 8811 	msr	BASEPRI, r1
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	4832      	ldr	r0, [pc, #200]	; (8006bdc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006b12:	f7ff f8c5 	bl	8005ca0 <_PreparePacket>
 8006b16:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	633b      	str	r3, [r7, #48]	; 0x30
 8006b24:	e00b      	b.n	8006b3e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b2c:	1c59      	adds	r1, r3, #1
 8006b2e:	6379      	str	r1, [r7, #52]	; 0x34
 8006b30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3a:	09db      	lsrs	r3, r3, #7
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2b7f      	cmp	r3, #127	; 0x7f
 8006b42:	d8f0      	bhi.n	8006b26 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	1c5a      	adds	r2, r3, #1
 8006b48:	637a      	str	r2, [r7, #52]	; 0x34
 8006b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5c:	e00b      	b.n	8006b76 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b64:	1c59      	adds	r1, r3, #1
 8006b66:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	09db      	lsrs	r3, r3, #7
 8006b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7a:	d8f0      	bhi.n	8006b5e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b84:	b2d2      	uxtb	r2, r2
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	623b      	str	r3, [r7, #32]
 8006b94:	e00b      	b.n	8006bae <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1c59      	adds	r1, r3, #1
 8006b9e:	6279      	str	r1, [r7, #36]	; 0x24
 8006ba0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	09db      	lsrs	r3, r3, #7
 8006bac:	623b      	str	r3, [r7, #32]
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb2:	d8f0      	bhi.n	8006b96 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	1c5a      	adds	r2, r3, #1
 8006bb8:	627a      	str	r2, [r7, #36]	; 0x24
 8006bba:	6a3a      	ldr	r2, [r7, #32]
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006bc4:	68fa      	ldr	r2, [r7, #12]
 8006bc6:	6979      	ldr	r1, [r7, #20]
 8006bc8:	69b8      	ldr	r0, [r7, #24]
 8006bca:	f7ff f959 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f383 8811 	msr	BASEPRI, r3
}
 8006bd4:	bf00      	nop
 8006bd6:	3738      	adds	r7, #56	; 0x38
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	200143dc 	.word	0x200143dc

08006be0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b090      	sub	sp, #64	; 0x40
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bee:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf2:	f04f 0120 	mov.w	r1, #32
 8006bf6:	f381 8811 	msr	BASEPRI, r1
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	4840      	ldr	r0, [pc, #256]	; (8006d00 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006bfe:	f7ff f84f 	bl	8005ca0 <_PreparePacket>
 8006c02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c10:	e00b      	b.n	8006c2a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c18:	1c59      	adds	r1, r3, #1
 8006c1a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	09db      	lsrs	r3, r3, #7
 8006c28:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2e:	d8f0      	bhi.n	8006c12 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	633b      	str	r3, [r7, #48]	; 0x30
 8006c48:	e00b      	b.n	8006c62 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	1c59      	adds	r1, r3, #1
 8006c52:	6379      	str	r1, [r7, #52]	; 0x34
 8006c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c58:	b2d2      	uxtb	r2, r2
 8006c5a:	701a      	strb	r2, [r3, #0]
 8006c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5e:	09db      	lsrs	r3, r3, #7
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b7f      	cmp	r3, #127	; 0x7f
 8006c66:	d8f0      	bhi.n	8006c4a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	637a      	str	r2, [r7, #52]	; 0x34
 8006c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c80:	e00b      	b.n	8006c9a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c88:	1c59      	adds	r1, r3, #1
 8006c8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	09db      	lsrs	r3, r3, #7
 8006c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c9e:	d8f0      	bhi.n	8006c82 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb6:	623b      	str	r3, [r7, #32]
 8006cb8:	e00b      	b.n	8006cd2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	6279      	str	r1, [r7, #36]	; 0x24
 8006cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	623b      	str	r3, [r7, #32]
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d8f0      	bhi.n	8006cba <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	627a      	str	r2, [r7, #36]	; 0x24
 8006cde:	6a3a      	ldr	r2, [r7, #32]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	6979      	ldr	r1, [r7, #20]
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f7ff f8c7 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
}
 8006cf8:	bf00      	nop
 8006cfa:	3740      	adds	r7, #64	; 0x40
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200143dc 	.word	0x200143dc

08006d04 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08c      	sub	sp, #48	; 0x30
 8006d08:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006d0a:	4b59      	ldr	r3, [pc, #356]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006d10:	f3ef 8311 	mrs	r3, BASEPRI
 8006d14:	f04f 0120 	mov.w	r1, #32
 8006d18:	f381 8811 	msr	BASEPRI, r1
 8006d1c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006d1e:	4b54      	ldr	r3, [pc, #336]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d20:	785b      	ldrb	r3, [r3, #1]
 8006d22:	220a      	movs	r2, #10
 8006d24:	4953      	ldr	r1, [pc, #332]	; (8006e74 <SEGGER_SYSVIEW_Start+0x170>)
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7f9 fa52 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006d32:	f7fe fb87 	bl	8005444 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006d36:	200a      	movs	r0, #10
 8006d38:	f7ff fe28 	bl	800698c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d3c:	f3ef 8311 	mrs	r3, BASEPRI
 8006d40:	f04f 0120 	mov.w	r1, #32
 8006d44:	f381 8811 	msr	BASEPRI, r1
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	484b      	ldr	r0, [pc, #300]	; (8006e78 <SEGGER_SYSVIEW_Start+0x174>)
 8006d4c:	f7fe ffa8 	bl	8005ca0 <_PreparePacket>
 8006d50:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5a:	4b45      	ldr	r3, [pc, #276]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d60:	e00b      	b.n	8006d7a <SEGGER_SYSVIEW_Start+0x76>
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d70:	b2d2      	uxtb	r2, r2
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	09db      	lsrs	r3, r3, #7
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d7e:	d8f0      	bhi.n	8006d62 <SEGGER_SYSVIEW_Start+0x5e>
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d88:	b2d2      	uxtb	r2, r2
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
 8006d94:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	623b      	str	r3, [r7, #32]
 8006d9a:	e00b      	b.n	8006db4 <SEGGER_SYSVIEW_Start+0xb0>
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	b2da      	uxtb	r2, r3
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	1c59      	adds	r1, r3, #1
 8006da4:	6279      	str	r1, [r7, #36]	; 0x24
 8006da6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	09db      	lsrs	r3, r3, #7
 8006db2:	623b      	str	r3, [r7, #32]
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2b7f      	cmp	r3, #127	; 0x7f
 8006db8:	d8f0      	bhi.n	8006d9c <SEGGER_SYSVIEW_Start+0x98>
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	1c5a      	adds	r2, r3, #1
 8006dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8006dc0:	6a3a      	ldr	r2, [r7, #32]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	61fb      	str	r3, [r7, #28]
 8006dce:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e00b      	b.n	8006dee <SEGGER_SYSVIEW_Start+0xea>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	b2da      	uxtb	r2, r3
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	1c59      	adds	r1, r3, #1
 8006dde:	61f9      	str	r1, [r7, #28]
 8006de0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de4:	b2d2      	uxtb	r2, r2
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	09db      	lsrs	r3, r3, #7
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b7f      	cmp	r3, #127	; 0x7f
 8006df2:	d8f0      	bhi.n	8006dd6 <SEGGER_SYSVIEW_Start+0xd2>
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	61fa      	str	r2, [r7, #28]
 8006dfa:	69ba      	ldr	r2, [r7, #24]
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	e00b      	b.n	8006e26 <SEGGER_SYSVIEW_Start+0x122>
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	6179      	str	r1, [r7, #20]
 8006e18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	09db      	lsrs	r3, r3, #7
 8006e24:	613b      	str	r3, [r7, #16]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b7f      	cmp	r3, #127	; 0x7f
 8006e2a:	d8f0      	bhi.n	8006e0e <SEGGER_SYSVIEW_Start+0x10a>
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	1c5a      	adds	r2, r3, #1
 8006e30:	617a      	str	r2, [r7, #20]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e3c:	2218      	movs	r2, #24
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7ff f81d 	bl	8005e80 <_SendPacket>
      RECORD_END();
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e4c:	4b08      	ldr	r3, [pc, #32]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d002      	beq.n	8006e5a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006e54:	4b06      	ldr	r3, [pc, #24]	; (8006e70 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e58:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006e5a:	f000 f9eb 	bl	8007234 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006e5e:	f000 f9b1 	bl	80071c4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006e62:	f000 fc8d 	bl	8007780 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006e66:	bf00      	nop
 8006e68:	3730      	adds	r7, #48	; 0x30
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	200143ac 	.word	0x200143ac
 8006e74:	08007b80 	.word	0x08007b80
 8006e78:	200143dc 	.word	0x200143dc

08006e7c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006e82:	f3ef 8311 	mrs	r3, BASEPRI
 8006e86:	f04f 0120 	mov.w	r1, #32
 8006e8a:	f381 8811 	msr	BASEPRI, r1
 8006e8e:	607b      	str	r3, [r7, #4]
 8006e90:	480b      	ldr	r0, [pc, #44]	; (8006ec0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006e92:	f7fe ff05 	bl	8005ca0 <_PreparePacket>
 8006e96:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006e98:	4b0a      	ldr	r3, [pc, #40]	; (8006ec4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d007      	beq.n	8006eb0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006ea0:	220b      	movs	r2, #11
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6838      	ldr	r0, [r7, #0]
 8006ea6:	f7fe ffeb 	bl	8005e80 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f383 8811 	msr	BASEPRI, r3
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	200143dc 	.word	0x200143dc
 8006ec4:	200143ac 	.word	0x200143ac

08006ec8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08c      	sub	sp, #48	; 0x30
 8006ecc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006ece:	f3ef 8311 	mrs	r3, BASEPRI
 8006ed2:	f04f 0120 	mov.w	r1, #32
 8006ed6:	f381 8811 	msr	BASEPRI, r1
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	4845      	ldr	r0, [pc, #276]	; (8006ff4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006ede:	f7fe fedf 	bl	8005ca0 <_PreparePacket>
 8006ee2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eec:	4b42      	ldr	r3, [pc, #264]	; (8006ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef2:	e00b      	b.n	8006f0c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	1c59      	adds	r1, r3, #1
 8006efc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006efe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f08:	09db      	lsrs	r3, r3, #7
 8006f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f10:	d8f0      	bhi.n	8006ef4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	4b34      	ldr	r3, [pc, #208]	; (8006ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	623b      	str	r3, [r7, #32]
 8006f2c:	e00b      	b.n	8006f46 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	1c59      	adds	r1, r3, #1
 8006f36:	6279      	str	r1, [r7, #36]	; 0x24
 8006f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f3c:	b2d2      	uxtb	r2, r2
 8006f3e:	701a      	strb	r2, [r3, #0]
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	09db      	lsrs	r3, r3, #7
 8006f44:	623b      	str	r3, [r7, #32]
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	2b7f      	cmp	r3, #127	; 0x7f
 8006f4a:	d8f0      	bhi.n	8006f2e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	627a      	str	r2, [r7, #36]	; 0x24
 8006f52:	6a3a      	ldr	r2, [r7, #32]
 8006f54:	b2d2      	uxtb	r2, r2
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	61fb      	str	r3, [r7, #28]
 8006f60:	4b25      	ldr	r3, [pc, #148]	; (8006ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e00b      	b.n	8006f80 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	61f9      	str	r1, [r7, #28]
 8006f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	09db      	lsrs	r3, r3, #7
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b7f      	cmp	r3, #127	; 0x7f
 8006f84:	d8f0      	bhi.n	8006f68 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	61fa      	str	r2, [r7, #28]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	613b      	str	r3, [r7, #16]
 8006f9e:	e00b      	b.n	8006fb8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	1c59      	adds	r1, r3, #1
 8006fa8:	6179      	str	r1, [r7, #20]
 8006faa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	09db      	lsrs	r3, r3, #7
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	2b7f      	cmp	r3, #127	; 0x7f
 8006fbc:	d8f0      	bhi.n	8006fa0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	1c5a      	adds	r2, r3, #1
 8006fc2:	617a      	str	r2, [r7, #20]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	701a      	strb	r2, [r3, #0]
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006fce:	2218      	movs	r2, #24
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	68b8      	ldr	r0, [r7, #8]
 8006fd4:	f7fe ff54 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006fde:	4b06      	ldr	r3, [pc, #24]	; (8006ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006fe6:	4b04      	ldr	r3, [pc, #16]	; (8006ff8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	4798      	blx	r3
  }
}
 8006fec:	bf00      	nop
 8006fee:	3730      	adds	r7, #48	; 0x30
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	200143dc 	.word	0x200143dc
 8006ff8:	200143ac 	.word	0x200143ac

08006ffc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b092      	sub	sp, #72	; 0x48
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007004:	f3ef 8311 	mrs	r3, BASEPRI
 8007008:	f04f 0120 	mov.w	r1, #32
 800700c:	f381 8811 	msr	BASEPRI, r1
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	486a      	ldr	r0, [pc, #424]	; (80071bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007014:	f7fe fe44 	bl	8005ca0 <_PreparePacket>
 8007018:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	647b      	str	r3, [r7, #68]	; 0x44
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b66      	ldr	r3, [pc, #408]	; (80071c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	643b      	str	r3, [r7, #64]	; 0x40
 800702e:	e00b      	b.n	8007048 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007032:	b2da      	uxtb	r2, r3
 8007034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007036:	1c59      	adds	r1, r3, #1
 8007038:	6479      	str	r1, [r7, #68]	; 0x44
 800703a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007044:	09db      	lsrs	r3, r3, #7
 8007046:	643b      	str	r3, [r7, #64]	; 0x40
 8007048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800704a:	2b7f      	cmp	r3, #127	; 0x7f
 800704c:	d8f0      	bhi.n	8007030 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800704e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	647a      	str	r2, [r7, #68]	; 0x44
 8007054:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007056:	b2d2      	uxtb	r2, r2
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800705c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	63bb      	str	r3, [r7, #56]	; 0x38
 8007068:	e00b      	b.n	8007082 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	b2da      	uxtb	r2, r3
 800706e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007070:	1c59      	adds	r1, r3, #1
 8007072:	63f9      	str	r1, [r7, #60]	; 0x3c
 8007074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	701a      	strb	r2, [r3, #0]
 800707c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707e:	09db      	lsrs	r3, r3, #7
 8007080:	63bb      	str	r3, [r7, #56]	; 0x38
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b7f      	cmp	r3, #127	; 0x7f
 8007086:	d8f0      	bhi.n	800706a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8007088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800708e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007090:	b2d2      	uxtb	r2, r2
 8007092:	701a      	strb	r2, [r3, #0]
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007096:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	4619      	mov	r1, r3
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f7fe fdcd 	bl	8005c40 <_EncodeStr>
 80070a6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80070a8:	2209      	movs	r2, #9
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	6938      	ldr	r0, [r7, #16]
 80070ae:	f7fe fee7 	bl	8005e80 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	4b40      	ldr	r3, [pc, #256]	; (80071c0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	633b      	str	r3, [r7, #48]	; 0x30
 80070c6:	e00b      	b.n	80070e0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	b2da      	uxtb	r2, r3
 80070cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ce:	1c59      	adds	r1, r3, #1
 80070d0:	6379      	str	r1, [r7, #52]	; 0x34
 80070d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d6:	b2d2      	uxtb	r2, r2
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	09db      	lsrs	r3, r3, #7
 80070de:	633b      	str	r3, [r7, #48]	; 0x30
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	2b7f      	cmp	r3, #127	; 0x7f
 80070e4:	d8f0      	bhi.n	80070c8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	1c5a      	adds	r2, r3, #1
 80070ea:	637a      	str	r2, [r7, #52]	; 0x34
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007100:	e00b      	b.n	800711a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	b2da      	uxtb	r2, r3
 8007106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007108:	1c59      	adds	r1, r3, #1
 800710a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800710c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	09db      	lsrs	r3, r3, #7
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
 800711a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800711c:	2b7f      	cmp	r3, #127	; 0x7f
 800711e:	d8f0      	bhi.n	8007102 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007122:	1c5a      	adds	r2, r3, #1
 8007124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	627b      	str	r3, [r7, #36]	; 0x24
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	623b      	str	r3, [r7, #32]
 800713a:	e00b      	b.n	8007154 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	6279      	str	r1, [r7, #36]	; 0x24
 8007146:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	6a3b      	ldr	r3, [r7, #32]
 8007150:	09db      	lsrs	r3, r3, #7
 8007152:	623b      	str	r3, [r7, #32]
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b7f      	cmp	r3, #127	; 0x7f
 8007158:	d8f0      	bhi.n	800713c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	627a      	str	r2, [r7, #36]	; 0x24
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	b2d2      	uxtb	r2, r2
 8007164:	701a      	strb	r2, [r3, #0]
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	2300      	movs	r3, #0
 8007170:	61bb      	str	r3, [r7, #24]
 8007172:	e00b      	b.n	800718c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	b2da      	uxtb	r2, r3
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	61f9      	str	r1, [r7, #28]
 800717e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	09db      	lsrs	r3, r3, #7
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	2b7f      	cmp	r3, #127	; 0x7f
 8007190:	d8f0      	bhi.n	8007174 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	61fa      	str	r2, [r7, #28]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80071a2:	2215      	movs	r2, #21
 80071a4:	68f9      	ldr	r1, [r7, #12]
 80071a6:	6938      	ldr	r0, [r7, #16]
 80071a8:	f7fe fe6a 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f383 8811 	msr	BASEPRI, r3
}
 80071b2:	bf00      	nop
 80071b4:	3748      	adds	r7, #72	; 0x48
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	200143dc 	.word	0x200143dc
 80071c0:	200143ac 	.word	0x200143ac

080071c4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80071d0:	4b05      	ldr	r3, [pc, #20]	; (80071e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80071da:	4b03      	ldr	r3, [pc, #12]	; (80071e8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4798      	blx	r3
  }
}
 80071e2:	bf00      	nop
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200143ac 	.word	0x200143ac

080071ec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071f4:	f3ef 8311 	mrs	r3, BASEPRI
 80071f8:	f04f 0120 	mov.w	r1, #32
 80071fc:	f381 8811 	msr	BASEPRI, r1
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	480b      	ldr	r0, [pc, #44]	; (8007230 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007204:	f7fe fd4c 	bl	8005ca0 <_PreparePacket>
 8007208:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800720a:	2280      	movs	r2, #128	; 0x80
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	6938      	ldr	r0, [r7, #16]
 8007210:	f7fe fd16 	bl	8005c40 <_EncodeStr>
 8007214:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007216:	220e      	movs	r2, #14
 8007218:	68f9      	ldr	r1, [r7, #12]
 800721a:	6938      	ldr	r0, [r7, #16]
 800721c:	f7fe fe30 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	f383 8811 	msr	BASEPRI, r3
}
 8007226:	bf00      	nop
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	200143dc 	.word	0x200143dc

08007234 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007234:	b590      	push	{r4, r7, lr}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800723a:	4b15      	ldr	r3, [pc, #84]	; (8007290 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d01a      	beq.n	8007278 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007242:	4b13      	ldr	r3, [pc, #76]	; (8007290 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d015      	beq.n	8007278 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800724c:	4b10      	ldr	r3, [pc, #64]	; (8007290 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4798      	blx	r3
 8007254:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007258:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800725a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800725e:	f04f 0200 	mov.w	r2, #0
 8007262:	f04f 0300 	mov.w	r3, #0
 8007266:	000a      	movs	r2, r1
 8007268:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800726a:	4613      	mov	r3, r2
 800726c:	461a      	mov	r2, r3
 800726e:	4621      	mov	r1, r4
 8007270:	200d      	movs	r0, #13
 8007272:	f7ff fbe5 	bl	8006a40 <SEGGER_SYSVIEW_RecordU32x2>
 8007276:	e006      	b.n	8007286 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4619      	mov	r1, r3
 800727e:	200c      	movs	r0, #12
 8007280:	f7ff fba2 	bl	80069c8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	bd90      	pop	{r4, r7, pc}
 800728e:	bf00      	nop
 8007290:	200143ac 	.word	0x200143ac
 8007294:	e0001004 	.word	0xe0001004

08007298 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800729e:	f3ef 8311 	mrs	r3, BASEPRI
 80072a2:	f04f 0120 	mov.w	r1, #32
 80072a6:	f381 8811 	msr	BASEPRI, r1
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	4819      	ldr	r0, [pc, #100]	; (8007314 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80072ae:	f7fe fcf7 	bl	8005ca0 <_PreparePacket>
 80072b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80072b8:	4b17      	ldr	r3, [pc, #92]	; (8007318 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	613b      	str	r3, [r7, #16]
 80072ca:	e00b      	b.n	80072e4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	1c59      	adds	r1, r3, #1
 80072d4:	6179      	str	r1, [r7, #20]
 80072d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072da:	b2d2      	uxtb	r2, r2
 80072dc:	701a      	strb	r2, [r3, #0]
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	09db      	lsrs	r3, r3, #7
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	2b7f      	cmp	r3, #127	; 0x7f
 80072e8:	d8f0      	bhi.n	80072cc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	617a      	str	r2, [r7, #20]
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	b2d2      	uxtb	r2, r2
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80072fa:	2202      	movs	r2, #2
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	68b8      	ldr	r0, [r7, #8]
 8007300:	f7fe fdbe 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f383 8811 	msr	BASEPRI, r3
}
 800730a:	bf00      	nop
 800730c:	3718      	adds	r7, #24
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	200143dc 	.word	0x200143dc
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007322:	f3ef 8311 	mrs	r3, BASEPRI
 8007326:	f04f 0120 	mov.w	r1, #32
 800732a:	f381 8811 	msr	BASEPRI, r1
 800732e:	607b      	str	r3, [r7, #4]
 8007330:	4807      	ldr	r0, [pc, #28]	; (8007350 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007332:	f7fe fcb5 	bl	8005ca0 <_PreparePacket>
 8007336:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007338:	2203      	movs	r2, #3
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6838      	ldr	r0, [r7, #0]
 800733e:	f7fe fd9f 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f383 8811 	msr	BASEPRI, r3
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	200143dc 	.word	0x200143dc

08007354 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800735a:	f3ef 8311 	mrs	r3, BASEPRI
 800735e:	f04f 0120 	mov.w	r1, #32
 8007362:	f381 8811 	msr	BASEPRI, r1
 8007366:	607b      	str	r3, [r7, #4]
 8007368:	4807      	ldr	r0, [pc, #28]	; (8007388 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800736a:	f7fe fc99 	bl	8005ca0 <_PreparePacket>
 800736e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007370:	2212      	movs	r2, #18
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6838      	ldr	r0, [r7, #0]
 8007376:	f7fe fd83 	bl	8005e80 <_SendPacket>
  RECORD_END();
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f383 8811 	msr	BASEPRI, r3
}
 8007380:	bf00      	nop
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	200143dc 	.word	0x200143dc

0800738c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007392:	f3ef 8311 	mrs	r3, BASEPRI
 8007396:	f04f 0120 	mov.w	r1, #32
 800739a:	f381 8811 	msr	BASEPRI, r1
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	4807      	ldr	r0, [pc, #28]	; (80073c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80073a2:	f7fe fc7d 	bl	8005ca0 <_PreparePacket>
 80073a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80073a8:	2211      	movs	r2, #17
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6838      	ldr	r0, [r7, #0]
 80073ae:	f7fe fd67 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f383 8811 	msr	BASEPRI, r3
}
 80073b8:	bf00      	nop
 80073ba:	3708      	adds	r7, #8
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	200143dc 	.word	0x200143dc

080073c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b088      	sub	sp, #32
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073cc:	f3ef 8311 	mrs	r3, BASEPRI
 80073d0:	f04f 0120 	mov.w	r1, #32
 80073d4:	f381 8811 	msr	BASEPRI, r1
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	4819      	ldr	r0, [pc, #100]	; (8007440 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80073dc:	f7fe fc60 	bl	8005ca0 <_PreparePacket>
 80073e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80073e6:	4b17      	ldr	r3, [pc, #92]	; (8007444 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	61fb      	str	r3, [r7, #28]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	61bb      	str	r3, [r7, #24]
 80073f8:	e00b      	b.n	8007412 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	1c59      	adds	r1, r3, #1
 8007402:	61f9      	str	r1, [r7, #28]
 8007404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007408:	b2d2      	uxtb	r2, r2
 800740a:	701a      	strb	r2, [r3, #0]
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	09db      	lsrs	r3, r3, #7
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b7f      	cmp	r3, #127	; 0x7f
 8007416:	d8f0      	bhi.n	80073fa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	61fa      	str	r2, [r7, #28]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007428:	2208      	movs	r2, #8
 800742a:	68f9      	ldr	r1, [r7, #12]
 800742c:	6938      	ldr	r0, [r7, #16]
 800742e:	f7fe fd27 	bl	8005e80 <_SendPacket>
  RECORD_END();
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f383 8811 	msr	BASEPRI, r3
}
 8007438:	bf00      	nop
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	200143dc 	.word	0x200143dc
 8007444:	200143ac 	.word	0x200143ac

08007448 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b088      	sub	sp, #32
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007450:	f3ef 8311 	mrs	r3, BASEPRI
 8007454:	f04f 0120 	mov.w	r1, #32
 8007458:	f381 8811 	msr	BASEPRI, r1
 800745c:	617b      	str	r3, [r7, #20]
 800745e:	4819      	ldr	r0, [pc, #100]	; (80074c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007460:	f7fe fc1e 	bl	8005ca0 <_PreparePacket>
 8007464:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800746a:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	61bb      	str	r3, [r7, #24]
 800747c:	e00b      	b.n	8007496 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	1c59      	adds	r1, r3, #1
 8007486:	61f9      	str	r1, [r7, #28]
 8007488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	09db      	lsrs	r3, r3, #7
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	2b7f      	cmp	r3, #127	; 0x7f
 800749a:	d8f0      	bhi.n	800747e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	61fa      	str	r2, [r7, #28]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80074ac:	2204      	movs	r2, #4
 80074ae:	68f9      	ldr	r1, [r7, #12]
 80074b0:	6938      	ldr	r0, [r7, #16]
 80074b2:	f7fe fce5 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f383 8811 	msr	BASEPRI, r3
}
 80074bc:	bf00      	nop
 80074be:	3720      	adds	r7, #32
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	200143dc 	.word	0x200143dc
 80074c8:	200143ac 	.word	0x200143ac

080074cc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b088      	sub	sp, #32
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80074d4:	f3ef 8311 	mrs	r3, BASEPRI
 80074d8:	f04f 0120 	mov.w	r1, #32
 80074dc:	f381 8811 	msr	BASEPRI, r1
 80074e0:	617b      	str	r3, [r7, #20]
 80074e2:	4819      	ldr	r0, [pc, #100]	; (8007548 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80074e4:	f7fe fbdc 	bl	8005ca0 <_PreparePacket>
 80074e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80074ee:	4b17      	ldr	r3, [pc, #92]	; (800754c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	61fb      	str	r3, [r7, #28]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	61bb      	str	r3, [r7, #24]
 8007500:	e00b      	b.n	800751a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	b2da      	uxtb	r2, r3
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	1c59      	adds	r1, r3, #1
 800750a:	61f9      	str	r1, [r7, #28]
 800750c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	09db      	lsrs	r3, r3, #7
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b7f      	cmp	r3, #127	; 0x7f
 800751e:	d8f0      	bhi.n	8007502 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	61fa      	str	r2, [r7, #28]
 8007526:	69ba      	ldr	r2, [r7, #24]
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007530:	2206      	movs	r2, #6
 8007532:	68f9      	ldr	r1, [r7, #12]
 8007534:	6938      	ldr	r0, [r7, #16]
 8007536:	f7fe fca3 	bl	8005e80 <_SendPacket>
  RECORD_END();
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f383 8811 	msr	BASEPRI, r3
}
 8007540:	bf00      	nop
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	200143dc 	.word	0x200143dc
 800754c:	200143ac 	.word	0x200143ac

08007550 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800755a:	f3ef 8311 	mrs	r3, BASEPRI
 800755e:	f04f 0120 	mov.w	r1, #32
 8007562:	f381 8811 	msr	BASEPRI, r1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	4827      	ldr	r0, [pc, #156]	; (8007608 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800756a:	f7fe fb99 	bl	8005ca0 <_PreparePacket>
 800756e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007574:	4b25      	ldr	r3, [pc, #148]	; (800760c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	e00b      	b.n	80075a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	b2da      	uxtb	r2, r3
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	1c59      	adds	r1, r3, #1
 8007590:	6279      	str	r1, [r7, #36]	; 0x24
 8007592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007596:	b2d2      	uxtb	r2, r2
 8007598:	701a      	strb	r2, [r3, #0]
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	09db      	lsrs	r3, r3, #7
 800759e:	623b      	str	r3, [r7, #32]
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b7f      	cmp	r3, #127	; 0x7f
 80075a4:	d8f0      	bhi.n	8007588 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80075a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	627a      	str	r2, [r7, #36]	; 0x24
 80075ac:	6a3a      	ldr	r2, [r7, #32]
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e00b      	b.n	80075d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	1c59      	adds	r1, r3, #1
 80075c8:	61f9      	str	r1, [r7, #28]
 80075ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075ce:	b2d2      	uxtb	r2, r2
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	09db      	lsrs	r3, r3, #7
 80075d6:	61bb      	str	r3, [r7, #24]
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b7f      	cmp	r3, #127	; 0x7f
 80075dc:	d8f0      	bhi.n	80075c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80075de:	69fb      	ldr	r3, [r7, #28]
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	61fa      	str	r2, [r7, #28]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	b2d2      	uxtb	r2, r2
 80075e8:	701a      	strb	r2, [r3, #0]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80075ee:	2207      	movs	r2, #7
 80075f0:	68f9      	ldr	r1, [r7, #12]
 80075f2:	6938      	ldr	r0, [r7, #16]
 80075f4:	f7fe fc44 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
 8007600:	3728      	adds	r7, #40	; 0x28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	200143dc 	.word	0x200143dc
 800760c:	200143ac 	.word	0x200143ac

08007610 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007618:	4b04      	ldr	r3, [pc, #16]	; (800762c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	1ad3      	subs	r3, r2, r3
}
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	200143ac 	.word	0x200143ac

08007630 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	; 0x30
 8007634:	af00      	add	r7, sp, #0
 8007636:	4603      	mov	r3, r0
 8007638:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800763a:	4b40      	ldr	r3, [pc, #256]	; (800773c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d077      	beq.n	8007732 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007642:	4b3e      	ldr	r3, [pc, #248]	; (800773c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007648:	2300      	movs	r3, #0
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28
 800764c:	e008      	b.n	8007660 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d007      	beq.n	800766a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	3301      	adds	r3, #1
 800765e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007660:	79fb      	ldrb	r3, [r7, #7]
 8007662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007664:	429a      	cmp	r2, r3
 8007666:	d3f2      	bcc.n	800764e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007668:	e000      	b.n	800766c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800766a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d055      	beq.n	800771e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007672:	f3ef 8311 	mrs	r3, BASEPRI
 8007676:	f04f 0120 	mov.w	r1, #32
 800767a:	f381 8811 	msr	BASEPRI, r1
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	482f      	ldr	r0, [pc, #188]	; (8007740 <SEGGER_SYSVIEW_SendModule+0x110>)
 8007682:	f7fe fb0d 	bl	8005ca0 <_PreparePacket>
 8007686:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	627b      	str	r3, [r7, #36]	; 0x24
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	623b      	str	r3, [r7, #32]
 8007694:	e00b      	b.n	80076ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8007696:	6a3b      	ldr	r3, [r7, #32]
 8007698:	b2da      	uxtb	r2, r3
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	1c59      	adds	r1, r3, #1
 800769e:	6279      	str	r1, [r7, #36]	; 0x24
 80076a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076a4:	b2d2      	uxtb	r2, r2
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	09db      	lsrs	r3, r3, #7
 80076ac:	623b      	str	r3, [r7, #32]
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	2b7f      	cmp	r3, #127	; 0x7f
 80076b2:	d8f0      	bhi.n	8007696 <SEGGER_SYSVIEW_SendModule+0x66>
 80076b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	627a      	str	r2, [r7, #36]	; 0x24
 80076ba:	6a3a      	ldr	r2, [r7, #32]
 80076bc:	b2d2      	uxtb	r2, r2
 80076be:	701a      	strb	r2, [r3, #0]
 80076c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	e00b      	b.n	80076e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	1c59      	adds	r1, r3, #1
 80076d8:	61f9      	str	r1, [r7, #28]
 80076da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076de:	b2d2      	uxtb	r2, r2
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	09db      	lsrs	r3, r3, #7
 80076e6:	61bb      	str	r3, [r7, #24]
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b7f      	cmp	r3, #127	; 0x7f
 80076ec:	d8f0      	bhi.n	80076d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	61fa      	str	r2, [r7, #28]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2280      	movs	r2, #128	; 0x80
 8007704:	4619      	mov	r1, r3
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7fe fa9a 	bl	8005c40 <_EncodeStr>
 800770c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800770e:	2216      	movs	r2, #22
 8007710:	68f9      	ldr	r1, [r7, #12]
 8007712:	6938      	ldr	r0, [r7, #16]
 8007714:	f7fe fbb4 	bl	8005e80 <_SendPacket>
      RECORD_END();
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <SEGGER_SYSVIEW_SendModule+0x102>
 8007724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4798      	blx	r3
    }
  }
}
 8007732:	bf00      	nop
 8007734:	3730      	adds	r7, #48	; 0x30
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200143d4 	.word	0x200143d4
 8007740:	200143dc 	.word	0x200143dc

08007744 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800774a:	4b0c      	ldr	r3, [pc, #48]	; (800777c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d00f      	beq.n	8007772 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f2      	bne.n	8007758 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200143d4 	.word	0x200143d4

08007780 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007786:	f3ef 8311 	mrs	r3, BASEPRI
 800778a:	f04f 0120 	mov.w	r1, #32
 800778e:	f381 8811 	msr	BASEPRI, r1
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	4817      	ldr	r0, [pc, #92]	; (80077f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007796:	f7fe fa83 	bl	8005ca0 <_PreparePacket>
 800779a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	613b      	str	r3, [r7, #16]
 80077aa:	e00b      	b.n	80077c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	1c59      	adds	r1, r3, #1
 80077b4:	6179      	str	r1, [r7, #20]
 80077b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077ba:	b2d2      	uxtb	r2, r2
 80077bc:	701a      	strb	r2, [r3, #0]
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	09db      	lsrs	r3, r3, #7
 80077c2:	613b      	str	r3, [r7, #16]
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	2b7f      	cmp	r3, #127	; 0x7f
 80077c8:	d8f0      	bhi.n	80077ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	1c5a      	adds	r2, r3, #1
 80077ce:	617a      	str	r2, [r7, #20]
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80077da:	221b      	movs	r2, #27
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	68b8      	ldr	r0, [r7, #8]
 80077e0:	f7fe fb4e 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f383 8811 	msr	BASEPRI, r3
}
 80077ea:	bf00      	nop
 80077ec:	3718      	adds	r7, #24
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	200143dc 	.word	0x200143dc
 80077f8:	200143d8 	.word	0x200143d8

080077fc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80077fc:	b40f      	push	{r0, r1, r2, r3}
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007804:	f107 0314 	add.w	r3, r7, #20
 8007808:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800780a:	1d3b      	adds	r3, r7, #4
 800780c:	461a      	mov	r2, r3
 800780e:	2100      	movs	r1, #0
 8007810:	6938      	ldr	r0, [r7, #16]
 8007812:	f7fe fe47 	bl	80064a4 <_VPrintTarget>
  va_end(ParamList);
}
 8007816:	bf00      	nop
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007820:	b004      	add	sp, #16
 8007822:	4770      	bx	lr

08007824 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800782c:	f3ef 8311 	mrs	r3, BASEPRI
 8007830:	f04f 0120 	mov.w	r1, #32
 8007834:	f381 8811 	msr	BASEPRI, r1
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	4827      	ldr	r0, [pc, #156]	; (80078d8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800783c:	f7fe fa30 	bl	8005ca0 <_PreparePacket>
 8007840:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007842:	2280      	movs	r2, #128	; 0x80
 8007844:	6879      	ldr	r1, [r7, #4]
 8007846:	6938      	ldr	r0, [r7, #16]
 8007848:	f7fe f9fa 	bl	8005c40 <_EncodeStr>
 800784c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
 8007852:	2301      	movs	r3, #1
 8007854:	623b      	str	r3, [r7, #32]
 8007856:	e00b      	b.n	8007870 <SEGGER_SYSVIEW_Warn+0x4c>
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	b2da      	uxtb	r2, r3
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	1c59      	adds	r1, r3, #1
 8007860:	6279      	str	r1, [r7, #36]	; 0x24
 8007862:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	09db      	lsrs	r3, r3, #7
 800786e:	623b      	str	r3, [r7, #32]
 8007870:	6a3b      	ldr	r3, [r7, #32]
 8007872:	2b7f      	cmp	r3, #127	; 0x7f
 8007874:	d8f0      	bhi.n	8007858 <SEGGER_SYSVIEW_Warn+0x34>
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	1c5a      	adds	r2, r3, #1
 800787a:	627a      	str	r2, [r7, #36]	; 0x24
 800787c:	6a3a      	ldr	r2, [r7, #32]
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	2300      	movs	r3, #0
 800788c:	61bb      	str	r3, [r7, #24]
 800788e:	e00b      	b.n	80078a8 <SEGGER_SYSVIEW_Warn+0x84>
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	b2da      	uxtb	r2, r3
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	1c59      	adds	r1, r3, #1
 8007898:	61f9      	str	r1, [r7, #28]
 800789a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	09db      	lsrs	r3, r3, #7
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b7f      	cmp	r3, #127	; 0x7f
 80078ac:	d8f0      	bhi.n	8007890 <SEGGER_SYSVIEW_Warn+0x6c>
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	61fa      	str	r2, [r7, #28]
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	701a      	strb	r2, [r3, #0]
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80078be:	221a      	movs	r2, #26
 80078c0:	68f9      	ldr	r1, [r7, #12]
 80078c2:	6938      	ldr	r0, [r7, #16]
 80078c4:	f7fe fadc 	bl	8005e80 <_SendPacket>
  RECORD_END();
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f383 8811 	msr	BASEPRI, r3
}
 80078ce:	bf00      	nop
 80078d0:	3728      	adds	r7, #40	; 0x28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200143dc 	.word	0x200143dc

080078dc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80078e0:	4b13      	ldr	r3, [pc, #76]	; (8007930 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80078e2:	7e1b      	ldrb	r3, [r3, #24]
 80078e4:	4619      	mov	r1, r3
 80078e6:	4a13      	ldr	r2, [pc, #76]	; (8007934 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80078e8:	460b      	mov	r3, r1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	440b      	add	r3, r1
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	336c      	adds	r3, #108	; 0x6c
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80078f8:	7e1b      	ldrb	r3, [r3, #24]
 80078fa:	4618      	mov	r0, r3
 80078fc:	490d      	ldr	r1, [pc, #52]	; (8007934 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80078fe:	4603      	mov	r3, r0
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	4403      	add	r3, r0
 8007904:	00db      	lsls	r3, r3, #3
 8007906:	440b      	add	r3, r1
 8007908:	3370      	adds	r3, #112	; 0x70
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d00b      	beq.n	8007928 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007912:	789b      	ldrb	r3, [r3, #2]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d107      	bne.n	8007928 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800791a:	2201      	movs	r2, #1
 800791c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800791e:	f7fe f9cb 	bl	8005cb8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007924:	2200      	movs	r2, #0
 8007926:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007928:	4b01      	ldr	r3, [pc, #4]	; (8007930 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800792a:	781b      	ldrb	r3, [r3, #0]
}
 800792c:	4618      	mov	r0, r3
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200143ac 	.word	0x200143ac
 8007934:	20012eec 	.word	0x20012eec

08007938 <__libc_init_array>:
 8007938:	b570      	push	{r4, r5, r6, lr}
 800793a:	4d0d      	ldr	r5, [pc, #52]	; (8007970 <__libc_init_array+0x38>)
 800793c:	4c0d      	ldr	r4, [pc, #52]	; (8007974 <__libc_init_array+0x3c>)
 800793e:	1b64      	subs	r4, r4, r5
 8007940:	10a4      	asrs	r4, r4, #2
 8007942:	2600      	movs	r6, #0
 8007944:	42a6      	cmp	r6, r4
 8007946:	d109      	bne.n	800795c <__libc_init_array+0x24>
 8007948:	4d0b      	ldr	r5, [pc, #44]	; (8007978 <__libc_init_array+0x40>)
 800794a:	4c0c      	ldr	r4, [pc, #48]	; (800797c <__libc_init_array+0x44>)
 800794c:	f000 f83e 	bl	80079cc <_init>
 8007950:	1b64      	subs	r4, r4, r5
 8007952:	10a4      	asrs	r4, r4, #2
 8007954:	2600      	movs	r6, #0
 8007956:	42a6      	cmp	r6, r4
 8007958:	d105      	bne.n	8007966 <__libc_init_array+0x2e>
 800795a:	bd70      	pop	{r4, r5, r6, pc}
 800795c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007960:	4798      	blx	r3
 8007962:	3601      	adds	r6, #1
 8007964:	e7ee      	b.n	8007944 <__libc_init_array+0xc>
 8007966:	f855 3b04 	ldr.w	r3, [r5], #4
 800796a:	4798      	blx	r3
 800796c:	3601      	adds	r6, #1
 800796e:	e7f2      	b.n	8007956 <__libc_init_array+0x1e>
 8007970:	08007ba4 	.word	0x08007ba4
 8007974:	08007ba4 	.word	0x08007ba4
 8007978:	08007ba4 	.word	0x08007ba4
 800797c:	08007ba8 	.word	0x08007ba8

08007980 <memcmp>:
 8007980:	b510      	push	{r4, lr}
 8007982:	3901      	subs	r1, #1
 8007984:	4402      	add	r2, r0
 8007986:	4290      	cmp	r0, r2
 8007988:	d101      	bne.n	800798e <memcmp+0xe>
 800798a:	2000      	movs	r0, #0
 800798c:	e005      	b.n	800799a <memcmp+0x1a>
 800798e:	7803      	ldrb	r3, [r0, #0]
 8007990:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007994:	42a3      	cmp	r3, r4
 8007996:	d001      	beq.n	800799c <memcmp+0x1c>
 8007998:	1b18      	subs	r0, r3, r4
 800799a:	bd10      	pop	{r4, pc}
 800799c:	3001      	adds	r0, #1
 800799e:	e7f2      	b.n	8007986 <memcmp+0x6>

080079a0 <memcpy>:
 80079a0:	440a      	add	r2, r1
 80079a2:	4291      	cmp	r1, r2
 80079a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079a8:	d100      	bne.n	80079ac <memcpy+0xc>
 80079aa:	4770      	bx	lr
 80079ac:	b510      	push	{r4, lr}
 80079ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079b6:	4291      	cmp	r1, r2
 80079b8:	d1f9      	bne.n	80079ae <memcpy+0xe>
 80079ba:	bd10      	pop	{r4, pc}

080079bc <memset>:
 80079bc:	4402      	add	r2, r0
 80079be:	4603      	mov	r3, r0
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d100      	bne.n	80079c6 <memset+0xa>
 80079c4:	4770      	bx	lr
 80079c6:	f803 1b01 	strb.w	r1, [r3], #1
 80079ca:	e7f9      	b.n	80079c0 <memset+0x4>

080079cc <_init>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	bf00      	nop
 80079d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d2:	bc08      	pop	{r3}
 80079d4:	469e      	mov	lr, r3
 80079d6:	4770      	bx	lr

080079d8 <_fini>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr
