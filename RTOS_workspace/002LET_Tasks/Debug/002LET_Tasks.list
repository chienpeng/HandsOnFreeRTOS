
002LET_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ea4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071cc  080071cc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071d4  080071d4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071d8  080071d8  000171d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080071dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001448c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001577d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000303c  00000000  00000000  000357c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  00038808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  00039bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000230ff  00000000  00000000  0003ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000158a9  00000000  00000000  0005deff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7cb7  00000000  00000000  000737a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b45f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005290  00000000  00000000  0014b4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800701c 	.word	0x0800701c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	0800701c 	.word	0x0800701c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb91 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= ( 1<< 0);
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <main+0xc8>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000586:	482b      	ldr	r0, [pc, #172]	; (8000634 <main+0xcc>)
 8000588:	f004 fa88 	bl	8004a9c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 f8b0 	bl	80046f0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f002 f9b3 	bl	800290c <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f002 f999 	bl	800290c <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f002 f980 	bl	800290c <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  vTaskStartScheduler();
 800062a:	f002 faf7 	bl	8002c1c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	e0001000 	.word	0xe0001000
 8000634:	0007a120 	.word	0x0007a120
 8000638:	08007034 	.word	0x08007034
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08007044 	.word	0x08007044
 8000644:	08000a0d 	.word	0x08000a0d
 8000648:	08007054 	.word	0x08007054
 800064c:	08000a39 	.word	0x08000a39

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fcd4 	bl	800700c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdf5 	bl	80012c4 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9d2 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f856 	bl	80017b4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9bb 	bl	8000a88 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd38 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd33 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd2d 	bl	800125c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb83 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb75 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb65 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb58 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb48 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb38 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb2c 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb1b 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fb0c 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fafb 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 faee 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 fadd 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fad1 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 fac0 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 fab3 	bl	8000f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e8:	4806      	ldr	r0, [pc, #24]	; (8000a04 <led_green_handler+0x24>)
 80009ea:	f006 fa2f 	bl	8006e4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <led_green_handler+0x28>)
 80009f4:	f000 fc4b 	bl	800128e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009fc:	f000 f98c 	bl	8000d18 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a00:	e7f2      	b.n	80009e8 <led_green_handler+0x8>
 8000a02:	bf00      	nop
 8000a04:	08007064 	.word	0x08007064
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a14:	4806      	ldr	r0, [pc, #24]	; (8000a30 <led_red_handler+0x24>)
 8000a16:	f006 fa19 	bl	8006e4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <led_red_handler+0x28>)
 8000a20:	f000 fc35 	bl	800128e <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a24:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000a28:	f000 f976 	bl	8000d18 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a2c:	e7f2      	b.n	8000a14 <led_red_handler+0x8>
 8000a2e:	bf00      	nop
 8000a30:	08007078 	.word	0x08007078
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a40:	4806      	ldr	r0, [pc, #24]	; (8000a5c <led_orange_handler+0x24>)
 8000a42:	f006 fa03 	bl	8006e4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <led_orange_handler+0x28>)
 8000a4c:	f000 fc1f 	bl	800128e <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a50:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a54:	f000 f960 	bl	8000d18 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a58:	e7f2      	b.n	8000a40 <led_orange_handler+0x8>
 8000a5a:	bf00      	nop
 8000a5c:	0800708c 	.word	0x0800708c
 8000a60:	40020c00 	.word	0x40020c00

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 f92f 	bl	8000cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ad2:	f003 fa89 	bl	8003fe8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_InitTick+0xe4>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_InitTick+0xe4>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_InitTick+0xe4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 f856 	bl	8001bcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2a:	f001 f83b 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000b2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b30:	e004      	b.n	8000b3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b32:	f001 f837 	bl	8001ba4 <HAL_RCC_GetPCLK1Freq>
 8000b36:	4603      	mov	r3, r0
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3e:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_InitTick+0xe8>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	3b01      	subs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_InitTick+0xf0>)
 8000b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b70:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b72:	f001 f85d 	bl	8001c30 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d11b      	bne.n	8000bbc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <HAL_InitTick+0xec>)
 8000b86:	f001 f8ad 	bl	8001ce4 <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d111      	bne.n	8000bbc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	; 0x36
 8000b9a:	f000 f9b5 	bl	8000f08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d808      	bhi.n	8000bb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f000 f991 	bl	8000ed0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0xf4>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e002      	b.n	8000bbc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	20000038 	.word	0x20000038
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	20000004 	.word	0x20000004

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM6_DAC_IRQHandler+0x10>)
 8000c0e:	f001 f8d9 	bl	8001dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000038 	.word	0x20000038

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c5c:	4c0b      	ldr	r4, [pc, #44]	; (8000c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6a:	f7ff ffd7 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f006 f98b 	bl	8006f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fc79 	bl	8000568 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c84:	080071dc 	.word	0x080071dc
  ldr r2, =_sbss
 8000c88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c8c:	200144a8 	.word	0x200144a8

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f8fc 	bl	8000eba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ff0e 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fee4 	bl	8000a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_IncTick+0x20>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x24>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <HAL_IncTick+0x24>)
 8000cea:	6013      	str	r3, [r2, #0]
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000080 	.word	0x20000080

08000d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GetTick+0x14>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000080 	.word	0x20000080

08000d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d20:	f7ff ffee 	bl	8000d00 <HAL_GetTick>
 8000d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d30:	d005      	beq.n	8000d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_Delay+0x44>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	461a      	mov	r2, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d3e:	bf00      	nop
 8000d40:	f7ff ffde 	bl	8000d00 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d8f7      	bhi.n	8000d40 <HAL_Delay+0x28>
  {
  }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008

08000d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d92:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	60d3      	str	r3, [r2, #12]
}
 8000d98:	bf00      	nop
 8000d9a:	3714      	adds	r7, #20
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	0a1b      	lsrs	r3, r3, #8
 8000db2:	f003 0307 	and.w	r3, r3, #7
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	db0b      	blt.n	8000dee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f003 021f 	and.w	r2, r3, #31
 8000ddc:	4907      	ldr	r1, [pc, #28]	; (8000dfc <__NVIC_EnableIRQ+0x38>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	095b      	lsrs	r3, r3, #5
 8000de4:	2001      	movs	r0, #1
 8000de6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dee:	bf00      	nop
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff4c 	bl	8000d60 <__NVIC_SetPriorityGrouping>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
 8000edc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee2:	f7ff ff61 	bl	8000da8 <__NVIC_GetPriorityGrouping>
 8000ee6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	6978      	ldr	r0, [r7, #20]
 8000eee:	f7ff ffb1 	bl	8000e54 <NVIC_EncodePriority>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff80 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff54 	bl	8000dc4 <__NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f32:	2300      	movs	r3, #0
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
 8000f3e:	e16b      	b.n	8001218 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f40:	2201      	movs	r2, #1
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	697a      	ldr	r2, [r7, #20]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	f040 815a 	bne.w	8001212 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d005      	beq.n	8000f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d130      	bne.n	8000fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	f003 0201 	and.w	r2, r3, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d017      	beq.n	8001014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	69b9      	ldr	r1, [r7, #24]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80b4 	beq.w	8001212 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b60      	ldr	r3, [pc, #384]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a5f      	ldr	r2, [pc, #380]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b5d      	ldr	r3, [pc, #372]	; (8001230 <HAL_GPIO_Init+0x30c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010c6:	4a5b      	ldr	r2, [pc, #364]	; (8001234 <HAL_GPIO_Init+0x310>)
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0303 	and.w	r3, r3, #3
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	220f      	movs	r2, #15
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a52      	ldr	r2, [pc, #328]	; (8001238 <HAL_GPIO_Init+0x314>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d02b      	beq.n	800114a <HAL_GPIO_Init+0x226>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a51      	ldr	r2, [pc, #324]	; (800123c <HAL_GPIO_Init+0x318>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d025      	beq.n	8001146 <HAL_GPIO_Init+0x222>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a50      	ldr	r2, [pc, #320]	; (8001240 <HAL_GPIO_Init+0x31c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d01f      	beq.n	8001142 <HAL_GPIO_Init+0x21e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4f      	ldr	r2, [pc, #316]	; (8001244 <HAL_GPIO_Init+0x320>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d019      	beq.n	800113e <HAL_GPIO_Init+0x21a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4e      	ldr	r2, [pc, #312]	; (8001248 <HAL_GPIO_Init+0x324>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0x216>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4d      	ldr	r2, [pc, #308]	; (800124c <HAL_GPIO_Init+0x328>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d00d      	beq.n	8001136 <HAL_GPIO_Init+0x212>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4c      	ldr	r2, [pc, #304]	; (8001250 <HAL_GPIO_Init+0x32c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d007      	beq.n	8001132 <HAL_GPIO_Init+0x20e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_GPIO_Init+0x330>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d101      	bne.n	800112e <HAL_GPIO_Init+0x20a>
 800112a:	2307      	movs	r3, #7
 800112c:	e00e      	b.n	800114c <HAL_GPIO_Init+0x228>
 800112e:	2308      	movs	r3, #8
 8001130:	e00c      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001132:	2306      	movs	r3, #6
 8001134:	e00a      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001136:	2305      	movs	r3, #5
 8001138:	e008      	b.n	800114c <HAL_GPIO_Init+0x228>
 800113a:	2304      	movs	r3, #4
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x228>
 800113e:	2303      	movs	r3, #3
 8001140:	e004      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001142:	2302      	movs	r3, #2
 8001144:	e002      	b.n	800114c <HAL_GPIO_Init+0x228>
 8001146:	2301      	movs	r3, #1
 8001148:	e000      	b.n	800114c <HAL_GPIO_Init+0x228>
 800114a:	2300      	movs	r3, #0
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	f002 0203 	and.w	r2, r2, #3
 8001152:	0092      	lsls	r2, r2, #2
 8001154:	4093      	lsls	r3, r2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4313      	orrs	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800115c:	4935      	ldr	r1, [pc, #212]	; (8001234 <HAL_GPIO_Init+0x310>)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	3302      	adds	r3, #2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116a:	4b3b      	ldr	r3, [pc, #236]	; (8001258 <HAL_GPIO_Init+0x334>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <HAL_GPIO_Init+0x334>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_GPIO_Init+0x334>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011be:	4b26      	ldr	r3, [pc, #152]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e8:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <HAL_GPIO_Init+0x334>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800120c:	4a12      	ldr	r2, [pc, #72]	; (8001258 <HAL_GPIO_Init+0x334>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3301      	adds	r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	2b0f      	cmp	r3, #15
 800121c:	f67f ae90 	bls.w	8000f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40013800 	.word	0x40013800
 8001238:	40020000 	.word	0x40020000
 800123c:	40020400 	.word	0x40020400
 8001240:	40020800 	.word	0x40020800
 8001244:	40020c00 	.word	0x40020c00
 8001248:	40021000 	.word	0x40021000
 800124c:	40021400 	.word	0x40021400
 8001250:	40021800 	.word	0x40021800
 8001254:	40021c00 	.word	0x40021c00
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128e:	b480      	push	{r7}
 8001290:	b085      	sub	sp, #20
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	695b      	ldr	r3, [r3, #20]
 800129e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4013      	ands	r3, r2
 80012a6:	041a      	lsls	r2, r3, #16
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43d9      	mvns	r1, r3
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	400b      	ands	r3, r1
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	619a      	str	r2, [r3, #24]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
	...

080012c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e267      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d075      	beq.n	80013ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d00c      	beq.n	8001308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ee:	4b85      	ldr	r3, [pc, #532]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d112      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b82      	ldr	r3, [pc, #520]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001306:	d10b      	bne.n	8001320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d05b      	beq.n	80013cc <HAL_RCC_OscConfig+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d157      	bne.n	80013cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e242      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001328:	d106      	bne.n	8001338 <HAL_RCC_OscConfig+0x74>
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a75      	ldr	r2, [pc, #468]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0x98>
 8001342:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xb0>
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a68      	ldr	r2, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fcc0 	bl	8000d00 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fcbc 	bl	8000d00 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e207      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5b      	ldr	r3, [pc, #364]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xc0>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fcac 	bl	8000d00 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fca8 	bl	8000d00 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1f3      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0xe8>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013da:	4b4a      	ldr	r3, [pc, #296]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b44      	ldr	r3, [pc, #272]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c7      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143a:	f7ff fc61 	bl	8000d00 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fc5d 	bl	8000d00 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a8      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b28      	ldr	r3, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4925      	ldr	r1, [pc, #148]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <HAL_RCC_OscConfig+0x244>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc40 	bl	8000d00 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc3c 	bl	8000d00 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e187      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d036      	beq.n	800151c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d016      	beq.n	80014e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014bc:	f7ff fc20 	bl	8000d00 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc1c 	bl	8000d00 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e167      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x240>)
 80014d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x200>
 80014e2:	e01b      	b.n	800151c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <HAL_RCC_OscConfig+0x248>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff fc09 	bl	8000d00 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	e00e      	b.n	8001510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc05 	bl	8000d00 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d907      	bls.n	8001510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e150      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001504:	40023800 	.word	0x40023800
 8001508:	42470000 	.word	0x42470000
 800150c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001510:	4b88      	ldr	r3, [pc, #544]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1ea      	bne.n	80014f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 8097 	beq.w	8001658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b81      	ldr	r3, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10f      	bne.n	800155a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	4b7d      	ldr	r3, [pc, #500]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a7c      	ldr	r2, [pc, #496]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b7a      	ldr	r3, [pc, #488]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001556:	2301      	movs	r3, #1
 8001558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155a:	4b77      	ldr	r3, [pc, #476]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001562:	2b00      	cmp	r3, #0
 8001564:	d118      	bne.n	8001598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001566:	4b74      	ldr	r3, [pc, #464]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a73      	ldr	r2, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001572:	f7ff fbc5 	bl	8000d00 <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157a:	f7ff fbc1 	bl	8000d00 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e10c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x474>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d106      	bne.n	80015ae <HAL_RCC_OscConfig+0x2ea>
 80015a0:	4b64      	ldr	r3, [pc, #400]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a4:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6713      	str	r3, [r2, #112]	; 0x70
 80015ac:	e01c      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	2b05      	cmp	r3, #5
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x30c>
 80015b6:	4b5f      	ldr	r3, [pc, #380]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a5e      	ldr	r2, [pc, #376]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0x324>
 80015d0:	4b58      	ldr	r3, [pc, #352]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d4:	4a57      	ldr	r2, [pc, #348]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015d6:	f023 0301 	bic.w	r3, r3, #1
 80015da:	6713      	str	r3, [r2, #112]	; 0x70
 80015dc:	4b55      	ldr	r3, [pc, #340]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a54      	ldr	r2, [pc, #336]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d015      	beq.n	800161c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fb86 	bl	8000d00 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f6:	e00a      	b.n	800160e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f8:	f7ff fb82 	bl	8000d00 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e0cb      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800160e:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0ee      	beq.n	80015f8 <HAL_RCC_OscConfig+0x334>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fb70 	bl	8000d00 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001622:	e00a      	b.n	800163a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001624:	f7ff fb6c 	bl	8000d00 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b5      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800163a:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ee      	bne.n	8001624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001646:	7dfb      	ldrb	r3, [r7, #23]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	4a38      	ldr	r2, [pc, #224]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a1 	beq.w	80017a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b08      	cmp	r3, #8
 800166c:	d05c      	beq.n	8001728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d141      	bne.n	80016fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b31      	ldr	r3, [pc, #196]	; (800173c <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb40 	bl	8000d00 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb3c 	bl	8000d00 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e087      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69da      	ldr	r2, [r3, #28]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	085b      	lsrs	r3, r3, #1
 80016ba:	3b01      	subs	r3, #1
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fb15 	bl	8000d00 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff fb11 	bl	8000d00 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e05c      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x416>
 80016f8:	e054      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_RCC_OscConfig+0x478>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7ff fafe 	bl	8000d00 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fafa 	bl	8000d00 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e045      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x470>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x444>
 8001726:	e03d      	b.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e038      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
 8001734:	40023800 	.word	0x40023800
 8001738:	40007000 	.word	0x40007000
 800173c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_RCC_OscConfig+0x4ec>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d028      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d121      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001766:	429a      	cmp	r2, r3
 8001768:	d11a      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001778:	4293      	cmp	r3, r2
 800177a:	d111      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	085b      	lsrs	r3, r3, #1
 8001788:	3b01      	subs	r3, #1
 800178a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0cc      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c8:	4b68      	ldr	r3, [pc, #416]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d90c      	bls.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b63      	ldr	r3, [pc, #396]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0b8      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d020      	beq.n	800183e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0304 	and.w	r3, r3, #4
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001808:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001820:	4b53      	ldr	r3, [pc, #332]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4a52      	ldr	r2, [pc, #328]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800182a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800182c:	4b50      	ldr	r3, [pc, #320]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	494d      	ldr	r1, [pc, #308]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	4313      	orrs	r3, r2
 800183c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d044      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001852:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e07f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d003      	beq.n	8001872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	2b03      	cmp	r3, #3
 8001870:	d107      	bne.n	8001882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b3f      	ldr	r3, [pc, #252]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e067      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001892:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f023 0203 	bic.w	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	4934      	ldr	r1, [pc, #208]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018a4:	f7ff fa2c 	bl	8000d00 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	e00a      	b.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ac:	f7ff fa28 	bl	8000d00 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04f      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 020c 	and.w	r2, r3, #12
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d1eb      	bne.n	80018ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d4:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d20c      	bcs.n	80018fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e032      	b.n	8001962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	4916      	ldr	r1, [pc, #88]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	4313      	orrs	r3, r2
 8001918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	2b00      	cmp	r3, #0
 8001924:	d009      	beq.n	800193a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	490e      	ldr	r1, [pc, #56]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800193a:	f000 f821 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 800193e:	4602      	mov	r2, r0
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	091b      	lsrs	r3, r3, #4
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	490a      	ldr	r1, [pc, #40]	; (8001974 <HAL_RCC_ClockConfig+0x1c0>)
 800194c:	5ccb      	ldrb	r3, [r1, r3]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	4a09      	ldr	r2, [pc, #36]	; (8001978 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff f8c2 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023c00 	.word	0x40023c00
 8001970:	40023800 	.word	0x40023800
 8001974:	08007178 	.word	0x08007178
 8001978:	20000000 	.word	0x20000000
 800197c:	20000004 	.word	0x20000004

08001980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001984:	b094      	sub	sp, #80	; 0x50
 8001986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
 800198c:	2300      	movs	r3, #0
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001998:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d00d      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x40>
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	f200 80e1 	bhi.w	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d002      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d003      	beq.n	80019ba <HAL_RCC_GetSysClockFreq+0x3a>
 80019b2:	e0db      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019b4:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019b8:	e0db      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ba:	4b73      	ldr	r3, [pc, #460]	; (8001b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80019bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019be:	e0d8      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019c0:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ca:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	099b      	lsrs	r3, r3, #6
 80019dc:	2200      	movs	r2, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
 80019e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ea:	2300      	movs	r3, #0
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
 80019ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	f04f 0000 	mov.w	r0, #0
 80019fa:	f04f 0100 	mov.w	r1, #0
 80019fe:	0159      	lsls	r1, r3, #5
 8001a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a04:	0150      	lsls	r0, r2, #5
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	1a51      	subs	r1, r2, r1
 8001a0e:	6139      	str	r1, [r7, #16]
 8001a10:	4629      	mov	r1, r5
 8001a12:	eb63 0301 	sbc.w	r3, r3, r1
 8001a16:	617b      	str	r3, [r7, #20]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a24:	4659      	mov	r1, fp
 8001a26:	018b      	lsls	r3, r1, #6
 8001a28:	4651      	mov	r1, sl
 8001a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a2e:	4651      	mov	r1, sl
 8001a30:	018a      	lsls	r2, r1, #6
 8001a32:	4651      	mov	r1, sl
 8001a34:	ebb2 0801 	subs.w	r8, r2, r1
 8001a38:	4659      	mov	r1, fp
 8001a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	f04f 0300 	mov.w	r3, #0
 8001a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a52:	4690      	mov	r8, r2
 8001a54:	4699      	mov	r9, r3
 8001a56:	4623      	mov	r3, r4
 8001a58:	eb18 0303 	adds.w	r3, r8, r3
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	462b      	mov	r3, r5
 8001a60:	eb49 0303 	adc.w	r3, r9, r3
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a72:	4629      	mov	r1, r5
 8001a74:	024b      	lsls	r3, r1, #9
 8001a76:	4621      	mov	r1, r4
 8001a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	024a      	lsls	r2, r1, #9
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a86:	2200      	movs	r2, #0
 8001a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a90:	f7fe fbe8 	bl	8000264 <__aeabi_uldivmod>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	e058      	b.n	8001b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	099b      	lsrs	r3, r3, #6
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ab8:	4642      	mov	r2, r8
 8001aba:	464b      	mov	r3, r9
 8001abc:	f04f 0000 	mov.w	r0, #0
 8001ac0:	f04f 0100 	mov.w	r1, #0
 8001ac4:	0159      	lsls	r1, r3, #5
 8001ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aca:	0150      	lsls	r0, r2, #5
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad6:	4649      	mov	r1, r9
 8001ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001af0:	ebb2 040a 	subs.w	r4, r2, sl
 8001af4:	eb63 050b 	sbc.w	r5, r3, fp
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	00eb      	lsls	r3, r5, #3
 8001b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b06:	00e2      	lsls	r2, r4, #3
 8001b08:	4614      	mov	r4, r2
 8001b0a:	461d      	mov	r5, r3
 8001b0c:	4643      	mov	r3, r8
 8001b0e:	18e3      	adds	r3, r4, r3
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	464b      	mov	r3, r9
 8001b14:	eb45 0303 	adc.w	r3, r5, r3
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b26:	4629      	mov	r1, r5
 8001b28:	028b      	lsls	r3, r1, #10
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b30:	4621      	mov	r1, r4
 8001b32:	028a      	lsls	r2, r1, #10
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	61fa      	str	r2, [r7, #28]
 8001b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b44:	f7fe fb8e 	bl	8000264 <__aeabi_uldivmod>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	0c1b      	lsrs	r3, r3, #16
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6a:	e002      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3750      	adds	r7, #80	; 0x50
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	00f42400 	.word	0x00f42400
 8001b88:	007a1200 	.word	0x007a1200

08001b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20000000 	.word	0x20000000

08001ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ba8:	f7ff fff0 	bl	8001b8c <HAL_RCC_GetHCLKFreq>
 8001bac:	4602      	mov	r2, r0
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0a9b      	lsrs	r3, r3, #10
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4903      	ldr	r1, [pc, #12]	; (8001bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bba:	5ccb      	ldrb	r3, [r1, r3]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08007188 	.word	0x08007188

08001bcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	220f      	movs	r2, #15
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001be8:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_RCC_GetClockConfig+0x60>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0207 	and.w	r2, r3, #7
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	601a      	str	r2, [r3, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40023c00 	.word	0x40023c00

08001c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e041      	b.n	8001cc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f839 	bl	8001cce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f000 f9d8 	bl	8002024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d001      	beq.n	8001cfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e04e      	b.n	8001d9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a23      	ldr	r2, [pc, #140]	; (8001da8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d022      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d26:	d01d      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_TIM_Base_Start_IT+0xc8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d018      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a1c      	ldr	r2, [pc, #112]	; (8001db4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00e      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d009      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_TIM_Base_Start_IT+0xd8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d004      	beq.n	8001d64 <HAL_TIM_Base_Start_IT+0x80>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d111      	bne.n	8001d88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d010      	beq.n	8001d98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d86:	e007      	b.n	8001d98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40000400 	.word	0x40000400
 8001db0:	40000800 	.word	0x40000800
 8001db4:	40000c00 	.word	0x40000c00
 8001db8:	40010400 	.word	0x40010400
 8001dbc:	40014000 	.word	0x40014000
 8001dc0:	40001800 	.word	0x40001800

08001dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0202 	mvn.w	r2, #2
 8001df0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ee 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8e0 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8f1 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0204 	mvn.w	r2, #4
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f8c4 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f8b6 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f8c7 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d122      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d11b      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0208 	mvn.w	r2, #8
 8001e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f89a 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f88c 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f89d 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d122      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b10      	cmp	r3, #16
 8001ee2:	d11b      	bne.n	8001f1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0210 	mvn.w	r2, #16
 8001eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f870 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001f08:	e005      	b.n	8001f16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f862 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f873 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d10e      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0201 	mvn.w	r2, #1
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fd8e 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f52:	2b80      	cmp	r3, #128	; 0x80
 8001f54:	d10e      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f60:	2b80      	cmp	r3, #128	; 0x80
 8001f62:	d107      	bne.n	8001f74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f902 	bl	8002178 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7e:	2b40      	cmp	r3, #64	; 0x40
 8001f80:	d10e      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8c:	2b40      	cmp	r3, #64	; 0x40
 8001f8e:	d107      	bne.n	8001fa0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f838 	bl	8002010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d10e      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	f003 0320 	and.w	r3, r3, #32
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d107      	bne.n	8001fcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0220 	mvn.w	r2, #32
 8001fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8cc 	bl	8002164 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a40      	ldr	r2, [pc, #256]	; (8002138 <TIM_Base_SetConfig+0x114>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002042:	d00f      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3d      	ldr	r2, [pc, #244]	; (800213c <TIM_Base_SetConfig+0x118>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00b      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <TIM_Base_SetConfig+0x11c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <TIM_Base_SetConfig+0x120>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <TIM_Base_SetConfig+0x124>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <TIM_Base_SetConfig+0x114>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d027      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <TIM_Base_SetConfig+0x118>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d023      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <TIM_Base_SetConfig+0x11c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <TIM_Base_SetConfig+0x120>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <TIM_Base_SetConfig+0x124>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <TIM_Base_SetConfig+0x128>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <TIM_Base_SetConfig+0x12c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <TIM_Base_SetConfig+0x130>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <TIM_Base_SetConfig+0x134>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <TIM_Base_SetConfig+0x138>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <TIM_Base_SetConfig+0x13c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <TIM_Base_SetConfig+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0xf8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <TIM_Base_SetConfig+0x124>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40010400 	.word	0x40010400
 800214c:	40014000 	.word	0x40014000
 8002150:	40014400 	.word	0x40014400
 8002154:	40014800 	.word	0x40014800
 8002158:	40001800 	.word	0x40001800
 800215c:	40001c00 	.word	0x40001c00
 8002160:	40002000 	.word	0x40002000

08002164 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0208 	add.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 0208 	add.w	r2, r3, #8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d103      	bne.n	8002206 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e00c      	b.n	8002220 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3308      	adds	r3, #8
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e002      	b.n	8002214 <vListInsert+0x2e>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	60fb      	str	r3, [r7, #12]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d2f6      	bcs.n	800220e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6852      	ldr	r2, [r2, #4]
 8002278:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d103      	bne.n	800228c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1e5a      	subs	r2, r3, #1
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80022b6:	2301      	movs	r3, #1
 80022b8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <xQueueGenericReset+0x2e>
        __asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	60fb      	str	r3, [r7, #12]
    }
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05d      	beq.n	800239c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d059      	beq.n	800239c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f0:	2100      	movs	r1, #0
 80022f2:	fba3 2302 	umull	r2, r3, r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d000      	beq.n	80022fc <xQueueGenericReset+0x50>
 80022fa:	2101      	movs	r1, #1
 80022fc:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d14c      	bne.n	800239c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8002302:	f001 feef 	bl	80040e4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	6939      	ldr	r1, [r7, #16]
 8002310:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	441a      	add	r2, r3
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2200      	movs	r2, #0
 8002320:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	3b01      	subs	r3, #1
 8002334:	6939      	ldr	r1, [r7, #16]
 8002336:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002338:	fb01 f303 	mul.w	r3, r1, r3
 800233c:	441a      	add	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	22ff      	movs	r2, #255	; 0xff
 8002346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d114      	bne.n	8002382 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01a      	beq.n	8002396 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	3310      	adds	r3, #16
 8002364:	4618      	mov	r0, r3
 8002366:	f000 ffdb 	bl	8003320 <xTaskRemoveFromEventList>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <xQueueGenericReset+0x11c>)
 8002372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f3bf 8f4f 	dsb	sy
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	e009      	b.n	8002396 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	3310      	adds	r3, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff00 	bl	800218c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	3324      	adds	r3, #36	; 0x24
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fefb 	bl	800218c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002396:	f001 fed5 	bl	8004144 <vPortExitCritical>
 800239a:	e001      	b.n	80023a0 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <xQueueGenericReset+0x110>
        __asm volatile
 80023a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023aa:	f383 8811 	msr	BASEPRI, r3
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	60bb      	str	r3, [r7, #8]
    }
 80023b8:	bf00      	nop
 80023ba:	e7fe      	b.n	80023ba <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80023bc:	697b      	ldr	r3, [r7, #20]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	4613      	mov	r3, r2
 80023d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d02e      	beq.n	8002442 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023e4:	2100      	movs	r1, #0
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	fba3 2302 	umull	r2, r3, r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d000      	beq.n	80023f4 <xQueueGenericCreate+0x28>
 80023f2:	2101      	movs	r1, #1
 80023f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d123      	bne.n	8002442 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002402:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002406:	d81c      	bhi.n	8002442 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	fb02 f303 	mul.w	r3, r2, r3
 8002410:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	3350      	adds	r3, #80	; 0x50
 8002416:	4618      	mov	r0, r3
 8002418:	f001 ff90 	bl	800433c <pvPortMalloc>
 800241c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d01c      	beq.n	800245e <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3350      	adds	r3, #80	; 0x50
 800242c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800242e:	79fa      	ldrb	r2, [r7, #7]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	4613      	mov	r3, r2
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f814 	bl	8002468 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002440:	e00d      	b.n	800245e <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <xQueueGenericCreate+0x92>
        __asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	613b      	str	r3, [r7, #16]
    }
 800245a:	bf00      	nop
 800245c:	e7fe      	b.n	800245c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800245e:	69fb      	ldr	r3, [r7, #28]
    }
 8002460:	4618      	mov	r0, r3
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	e002      	b.n	800248a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002496:	2101      	movs	r1, #1
 8002498:	69b8      	ldr	r0, [r7, #24]
 800249a:	f7ff ff07 	bl	80022ac <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	68f9      	ldr	r1, [r7, #12]
 80024ac:	2073      	movs	r0, #115	; 0x73
 80024ae:	f003 fea9 	bl	8006204 <SEGGER_SYSVIEW_RecordU32x3>
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b08f      	sub	sp, #60	; 0x3c
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <xQueueReceive+0x30>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	623b      	str	r3, [r7, #32]
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <xQueueReceive+0x3e>
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <xQueueReceive+0x42>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <xQueueReceive+0x44>
 80024fe:	2300      	movs	r3, #0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <xQueueReceive+0x5e>
        __asm volatile
 8002504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002508:	f383 8811 	msr	BASEPRI, r3
 800250c:	f3bf 8f6f 	isb	sy
 8002510:	f3bf 8f4f 	dsb	sy
 8002514:	61fb      	str	r3, [r7, #28]
    }
 8002516:	bf00      	nop
 8002518:	e7fe      	b.n	8002518 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800251a:	f001 f913 	bl	8003744 <xTaskGetSchedulerState>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <xQueueReceive+0x6e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <xQueueReceive+0x72>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <xQueueReceive+0x74>
 800252e:	2300      	movs	r3, #0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10a      	bne.n	800254a <xQueueReceive+0x8e>
        __asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	61bb      	str	r3, [r7, #24]
    }
 8002546:	bf00      	nop
 8002548:	e7fe      	b.n	8002548 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800254a:	f001 fdcb 	bl	80040e4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	2b00      	cmp	r3, #0
 8002558:	d02f      	beq.n	80025ba <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800255a:	68b9      	ldr	r1, [r7, #8]
 800255c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255e:	f000 f8bd 	bl	80026dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fb7b 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 800256a:	4604      	mov	r4, r0
 800256c:	2000      	movs	r0, #0
 800256e:	f004 fb77 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 8002572:	4602      	mov	r2, r0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2101      	movs	r1, #1
 8002578:	9100      	str	r1, [sp, #0]
 800257a:	4621      	mov	r1, r4
 800257c:	205c      	movs	r0, #92	; 0x5c
 800257e:	f003 feb7 	bl	80062f0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	1e5a      	subs	r2, r3, #1
 8002586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002588:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00f      	beq.n	80025b2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	3310      	adds	r3, #16
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fec2 	bl	8003320 <xTaskRemoveFromEventList>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d007      	beq.n	80025b2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80025a2:	4b4d      	ldr	r3, [pc, #308]	; (80026d8 <xQueueReceive+0x21c>)
 80025a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	f3bf 8f4f 	dsb	sy
 80025ae:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80025b2:	f001 fdc7 	bl	8004144 <vPortExitCritical>
                return pdPASS;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e08a      	b.n	80026d0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d113      	bne.n	80025e8 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025c0:	f001 fdc0 	bl	8004144 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 fb4a 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 80025cc:	4604      	mov	r4, r0
 80025ce:	2000      	movs	r0, #0
 80025d0:	f004 fb46 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 80025d4:	4602      	mov	r2, r0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2101      	movs	r1, #1
 80025da:	9100      	str	r1, [sp, #0]
 80025dc:	4621      	mov	r1, r4
 80025de:	205c      	movs	r0, #92	; 0x5c
 80025e0:	f003 fe86 	bl	80062f0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e073      	b.n	80026d0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025ee:	f107 0310 	add.w	r3, r7, #16
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 ff6c 	bl	80034d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025f8:	2301      	movs	r3, #1
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025fc:	f001 fda2 	bl	8004144 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002600:	f000 fb6e 	bl	8002ce0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002604:	f001 fd6e 	bl	80040e4 <vPortEnterCritical>
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800260e:	b25b      	sxtb	r3, r3
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d103      	bne.n	800261e <xQueueReceive+0x162>
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002624:	b25b      	sxtb	r3, r3
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d103      	bne.n	8002634 <xQueueReceive+0x178>
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002634:	f001 fd86 	bl	8004144 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002638:	1d3a      	adds	r2, r7, #4
 800263a:	f107 0310 	add.w	r3, r7, #16
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f000 ff5b 	bl	80034fc <xTaskCheckForTimeOut>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d124      	bne.n	8002696 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800264c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264e:	f000 f8bd 	bl	80027cc <prvIsQueueEmpty>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265a:	3324      	adds	r3, #36	; 0x24
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fdf1 	bl	8003248 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002668:	f000 f85e 	bl	8002728 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800266c:	f000 fb46 	bl	8002cfc <xTaskResumeAll>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f af69 	bne.w	800254a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <xQueueReceive+0x21c>)
 800267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	f3bf 8f6f 	isb	sy
 8002688:	e75f      	b.n	800254a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800268a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800268c:	f000 f84c 	bl	8002728 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002690:	f000 fb34 	bl	8002cfc <xTaskResumeAll>
 8002694:	e759      	b.n	800254a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002698:	f000 f846 	bl	8002728 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800269c:	f000 fb2e 	bl	8002cfc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026a2:	f000 f893 	bl	80027cc <prvIsQueueEmpty>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f43f af4e 	beq.w	800254a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	4618      	mov	r0, r3
 80026b2:	f004 fad5 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 80026b6:	4604      	mov	r4, r0
 80026b8:	2000      	movs	r0, #0
 80026ba:	f004 fad1 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 80026be:	4602      	mov	r2, r0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2101      	movs	r1, #1
 80026c4:	9100      	str	r1, [sp, #0]
 80026c6:	4621      	mov	r1, r4
 80026c8:	205c      	movs	r0, #92	; 0x5c
 80026ca:	f003 fe11 	bl	80062f0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80026ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3734      	adds	r7, #52	; 0x34
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd90      	pop	{r4, r7, pc}
 80026d8:	e000ed04 	.word	0xe000ed04

080026dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	441a      	add	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d303      	bcc.n	8002710 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68d9      	ldr	r1, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	461a      	mov	r2, r3
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	f004 fc68 	bl	8006ff0 <memcpy>
    }
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002730:	f001 fcd8 	bl	80040e4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800273a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800273c:	e011      	b.n	8002762 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	2b00      	cmp	r3, #0
 8002744:	d012      	beq.n	800276c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3324      	adds	r3, #36	; 0x24
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fde8 	bl	8003320 <xTaskRemoveFromEventList>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002756:	f000 ff37 	bl	80035c8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	3b01      	subs	r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	dce9      	bgt.n	800273e <prvUnlockQueue+0x16>
 800276a:	e000      	b.n	800276e <prvUnlockQueue+0x46>
                    break;
 800276c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	22ff      	movs	r2, #255	; 0xff
 8002772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002776:	f001 fce5 	bl	8004144 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800277a:	f001 fcb3 	bl	80040e4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002784:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002786:	e011      	b.n	80027ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d012      	beq.n	80027b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3310      	adds	r3, #16
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fdc3 	bl	8003320 <xTaskRemoveFromEventList>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80027a0:	f000 ff12 	bl	80035c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80027a4:	7bbb      	ldrb	r3, [r7, #14]
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	dce9      	bgt.n	8002788 <prvUnlockQueue+0x60>
 80027b4:	e000      	b.n	80027b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80027b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	22ff      	movs	r2, #255	; 0xff
 80027bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80027c0:	f001 fcc0 	bl	8004144 <vPortExitCritical>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027d4:	f001 fc86 	bl	80040e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027e0:	2301      	movs	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e001      	b.n	80027ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027ea:	f001 fcab 	bl	8004144 <vPortExitCritical>

    return xReturn;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10a      	bne.n	8002822 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002810:	f383 8811 	msr	BASEPRI, r3
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	60fb      	str	r3, [r7, #12]
    }
 800281e:	bf00      	nop
 8002820:	e7fe      	b.n	8002820 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d024      	beq.n	8002872 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	e01e      	b.n	800286c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800282e:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <vQueueAddToRegistry+0xa8>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	4413      	add	r3, r2
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	429a      	cmp	r2, r3
 800283c:	d105      	bne.n	800284a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4a17      	ldr	r2, [pc, #92]	; (80028a0 <vQueueAddToRegistry+0xa8>)
 8002844:	4413      	add	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
                    break;
 8002848:	e013      	b.n	8002872 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <vQueueAddToRegistry+0x6e>
 8002850:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <vQueueAddToRegistry+0xa8>)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <vQueueAddToRegistry+0xa8>)
 8002862:	4413      	add	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3301      	adds	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b07      	cmp	r3, #7
 8002870:	d9dd      	bls.n	800282e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00f      	beq.n	8002898 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4618      	mov	r0, r3
 8002888:	f004 f9ea 	bl	8006c60 <SEGGER_SYSVIEW_ShrinkId>
 800288c:	4601      	mov	r1, r0
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	2071      	movs	r0, #113	; 0x71
 8002894:	f003 fc5c 	bl	8006150 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000084 	.word	0x20000084

080028a4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80028b4:	f001 fc16 	bl	80040e4 <vPortEnterCritical>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d103      	bne.n	80028ce <vQueueWaitForMessageRestricted+0x2a>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d103      	bne.n	80028e4 <vQueueWaitForMessageRestricted+0x40>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e4:	f001 fc2e 	bl	8004144 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d106      	bne.n	80028fe <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3324      	adds	r3, #36	; 0x24
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fcc9 	bl	8003290 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff12 	bl	8002728 <prvUnlockQueue>
    }
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af04      	add	r7, sp, #16
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4618      	mov	r0, r3
 8002922:	f001 fd0b 	bl	800433c <pvPortMalloc>
 8002926:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d013      	beq.n	8002956 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800292e:	2058      	movs	r0, #88	; 0x58
 8002930:	f001 fd04 	bl	800433c <pvPortMalloc>
 8002934:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800293c:	2258      	movs	r2, #88	; 0x58
 800293e:	2100      	movs	r1, #0
 8002940:	69f8      	ldr	r0, [r7, #28]
 8002942:	f004 fb63 	bl	800700c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
 800294c:	e005      	b.n	800295a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f001 fdae 	bl	80044b0 <vPortFree>
 8002954:	e001      	b.n	800295a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002960:	88fa      	ldrh	r2, [r7, #6]
 8002962:	2300      	movs	r3, #0
 8002964:	9303      	str	r3, [sp, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	9302      	str	r3, [sp, #8]
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 f80e 	bl	8002998 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800297c:	69f8      	ldr	r0, [r7, #28]
 800297e:	f000 f899 	bl	8002ab4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002982:	2301      	movs	r3, #1
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	e002      	b.n	800298e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295
 800298c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800298e:	69bb      	ldr	r3, [r7, #24]
    }
 8002990:	4618      	mov	r0, r3
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	461a      	mov	r2, r3
 80029b0:	21a5      	movs	r1, #165	; 0xa5
 80029b2:	f004 fb2b 	bl	800700c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029c0:	3b01      	subs	r3, #1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f023 0307 	bic.w	r3, r3, #7
 80029ce:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00a      	beq.n	80029f0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80029da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029de:	f383 8811 	msr	BASEPRI, r3
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	617b      	str	r3, [r7, #20]
    }
 80029ec:	bf00      	nop
 80029ee:	e7fe      	b.n	80029ee <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01e      	beq.n	8002a34 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
 80029fa:	e012      	b.n	8002a22 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	7819      	ldrb	r1, [r3, #0]
 8002a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	4413      	add	r3, r2
 8002a0a:	3334      	adds	r3, #52	; 0x34
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	2b09      	cmp	r3, #9
 8002a26:	d9e9      	bls.n	80029fc <prvInitialiseNewTask+0x64>
 8002a28:	e000      	b.n	8002a2c <prvInitialiseNewTask+0x94>
            {
                break;
 8002a2a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	d90a      	bls.n	8002a50 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	613b      	str	r3, [r7, #16]
    }
 8002a4c:	bf00      	nop
 8002a4e:	e7fe      	b.n	8002a4e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d901      	bls.n	8002a5a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a56:	2304      	movs	r3, #4
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a5e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a64:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	3304      	adds	r3, #4
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fbae 	bl	80021cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a72:	3318      	adds	r3, #24
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fba9 	bl	80021cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a7e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	f1c3 0205 	rsb	r2, r3, #5
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	68f9      	ldr	r1, [r7, #12]
 8002a94:	69b8      	ldr	r0, [r7, #24]
 8002a96:	f001 f977 	bl	8003d88 <pxPortInitialiseStack>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aaa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002aac:	bf00      	nop
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002ab4:	b5b0      	push	{r4, r5, r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002abc:	f001 fb12 	bl	80040e4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ac0:	4b4f      	ldr	r3, [pc, #316]	; (8002c00 <prvAddNewTaskToReadyList+0x14c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <prvAddNewTaskToReadyList+0x14c>)
 8002ac8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002aca:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <prvAddNewTaskToReadyList+0x150>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002ad2:	4a4c      	ldr	r2, [pc, #304]	; (8002c04 <prvAddNewTaskToReadyList+0x150>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <prvAddNewTaskToReadyList+0x14c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d110      	bne.n	8002b02 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ae0:	f000 fd96 	bl	8003610 <prvInitialiseTaskLists>
 8002ae4:	e00d      	b.n	8002b02 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ae6:	4b48      	ldr	r3, [pc, #288]	; (8002c08 <prvAddNewTaskToReadyList+0x154>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d109      	bne.n	8002b02 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aee:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <prvAddNewTaskToReadyList+0x150>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d802      	bhi.n	8002b02 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002afc:	4a41      	ldr	r2, [pc, #260]	; (8002c04 <prvAddNewTaskToReadyList+0x150>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b02:	4b42      	ldr	r3, [pc, #264]	; (8002c0c <prvAddNewTaskToReadyList+0x158>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	4a40      	ldr	r2, [pc, #256]	; (8002c0c <prvAddNewTaskToReadyList+0x158>)
 8002b0a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b0c:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <prvAddNewTaskToReadyList+0x158>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d016      	beq.n	8002b48 <prvAddNewTaskToReadyList+0x94>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 ffd9 	bl	8006ad4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	461d      	mov	r5, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	461c      	mov	r4, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	1ae3      	subs	r3, r4, r3
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	462b      	mov	r3, r5
 8002b44:	f001 fe76 	bl	8004834 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 f846 	bl	8006bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b54:	2201      	movs	r2, #1
 8002b56:	409a      	lsls	r2, r3
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <prvAddNewTaskToReadyList+0x15c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	4a2c      	ldr	r2, [pc, #176]	; (8002c10 <prvAddNewTaskToReadyList+0x15c>)
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b66:	492b      	ldr	r1, [pc, #172]	; (8002c14 <prvAddNewTaskToReadyList+0x160>)
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	3304      	adds	r3, #4
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	3204      	adds	r2, #4
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1d1a      	adds	r2, r3, #4
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4a1b      	ldr	r2, [pc, #108]	; (8002c14 <prvAddNewTaskToReadyList+0x160>)
 8002ba6:	441a      	add	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	4918      	ldr	r1, [pc, #96]	; (8002c14 <prvAddNewTaskToReadyList+0x160>)
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1c59      	adds	r1, r3, #1
 8002bc0:	4814      	ldr	r0, [pc, #80]	; (8002c14 <prvAddNewTaskToReadyList+0x160>)
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4403      	add	r3, r0
 8002bcc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002bce:	f001 fab9 	bl	8004144 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bd2:	4b0d      	ldr	r3, [pc, #52]	; (8002c08 <prvAddNewTaskToReadyList+0x154>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00e      	beq.n	8002bf8 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <prvAddNewTaskToReadyList+0x150>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d207      	bcs.n	8002bf8 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <prvAddNewTaskToReadyList+0x164>)
 8002bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bf8:	bf00      	nop
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8002c00:	2000019c 	.word	0x2000019c
 8002c04:	200000c4 	.word	0x200000c4
 8002c08:	200001a8 	.word	0x200001a8
 8002c0c:	200001b8 	.word	0x200001b8
 8002c10:	200001a4 	.word	0x200001a4
 8002c14:	200000c8 	.word	0x200000c8
 8002c18:	e000ed04 	.word	0xe000ed04

08002c1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <vTaskStartScheduler+0xa4>)
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	2300      	movs	r3, #0
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2282      	movs	r2, #130	; 0x82
 8002c2e:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <vTaskStartScheduler+0xa8>)
 8002c30:	4825      	ldr	r0, [pc, #148]	; (8002cc8 <vTaskStartScheduler+0xac>)
 8002c32:	f7ff fe6b 	bl	800290c <xTaskCreate>
 8002c36:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d102      	bne.n	8002c44 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002c3e:	f000 fe1f 	bl	8003880 <xTimerCreateTimerTask>
 8002c42:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d124      	bne.n	8002c94 <vTaskStartScheduler+0x78>
        __asm volatile
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	60bb      	str	r3, [r7, #8]
    }
 8002c5c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <vTaskStartScheduler+0xb0>)
 8002c60:	f04f 32ff 	mov.w	r2, #4294967295
 8002c64:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <vTaskStartScheduler+0xb4>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002c6c:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <vTaskStartScheduler+0xb8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <vTaskStartScheduler+0xbc>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <vTaskStartScheduler+0xa4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d102      	bne.n	8002c84 <vTaskStartScheduler+0x68>
 8002c7e:	f003 ff0d 	bl	8006a9c <SEGGER_SYSVIEW_OnIdle>
 8002c82:	e004      	b.n	8002c8e <vTaskStartScheduler+0x72>
 8002c84:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <vTaskStartScheduler+0xbc>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 ff65 	bl	8006b58 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002c8e:	f001 f909 	bl	8003ea4 <xPortStartScheduler>
 8002c92:	e00e      	b.n	8002cb2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d10a      	bne.n	8002cb2 <vTaskStartScheduler+0x96>
        __asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	607b      	str	r3, [r7, #4]
    }
 8002cae:	bf00      	nop
 8002cb0:	e7fe      	b.n	8002cb0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <vTaskStartScheduler+0xc0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200001c0 	.word	0x200001c0
 8002cc4:	080070a0 	.word	0x080070a0
 8002cc8:	080035e1 	.word	0x080035e1
 8002ccc:	200001bc 	.word	0x200001bc
 8002cd0:	200001a8 	.word	0x200001a8
 8002cd4:	200001a0 	.word	0x200001a0
 8002cd8:	200000c4 	.word	0x200000c4
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <vTaskSuspendAll+0x18>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <vTaskSuspendAll+0x18>)
 8002cec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	200001c4 	.word	0x200001c4

08002cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d0a:	4b73      	ldr	r3, [pc, #460]	; (8002ed8 <xTaskResumeAll+0x1dc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10a      	bne.n	8002d28 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	607b      	str	r3, [r7, #4]
    }
 8002d24:	bf00      	nop
 8002d26:	e7fe      	b.n	8002d26 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d28:	f001 f9dc 	bl	80040e4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <xTaskResumeAll+0x1dc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	4a69      	ldr	r2, [pc, #420]	; (8002ed8 <xTaskResumeAll+0x1dc>)
 8002d34:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d36:	4b68      	ldr	r3, [pc, #416]	; (8002ed8 <xTaskResumeAll+0x1dc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80c4 	bne.w	8002ec8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <xTaskResumeAll+0x1e0>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80bf 	beq.w	8002ec8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d4a:	e08e      	b.n	8002e6a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4c:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <xTaskResumeAll+0x1e4>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	6a12      	ldr	r2, [r2, #32]
 8002d62:	609a      	str	r2, [r3, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	69d2      	ldr	r2, [r2, #28]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3318      	adds	r3, #24
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d103      	bne.n	8002d82 <xTaskResumeAll+0x86>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	6a1a      	ldr	r2, [r3, #32]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2200      	movs	r2, #0
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	1e5a      	subs	r2, r3, #1
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	68d2      	ldr	r2, [r2, #12]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	6892      	ldr	r2, [r2, #8]
 8002daa:	605a      	str	r2, [r3, #4]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	3304      	adds	r3, #4
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d103      	bne.n	8002dc0 <xTaskResumeAll+0xc4>
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	615a      	str	r2, [r3, #20]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 ff02 	bl	8006bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	2201      	movs	r2, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <xTaskResumeAll+0x1e8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	4a3f      	ldr	r2, [pc, #252]	; (8002ee4 <xTaskResumeAll+0x1e8>)
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dee:	493e      	ldr	r1, [pc, #248]	; (8002ee8 <xTaskResumeAll+0x1ec>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	68ba      	ldr	r2, [r7, #8]
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	69fa      	ldr	r2, [r7, #28]
 8002e14:	3204      	adds	r2, #4
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	1d1a      	adds	r2, r3, #4
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4a2e      	ldr	r2, [pc, #184]	; (8002ee8 <xTaskResumeAll+0x1ec>)
 8002e2e:	441a      	add	r2, r3
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	615a      	str	r2, [r3, #20]
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	492b      	ldr	r1, [pc, #172]	; (8002ee8 <xTaskResumeAll+0x1ec>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	4827      	ldr	r0, [pc, #156]	; (8002ee8 <xTaskResumeAll+0x1ec>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4403      	add	r3, r0
 8002e54:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5a:	4b24      	ldr	r3, [pc, #144]	; (8002eec <xTaskResumeAll+0x1f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d302      	bcc.n	8002e6a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002e64:	4b22      	ldr	r3, [pc, #136]	; (8002ef0 <xTaskResumeAll+0x1f4>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <xTaskResumeAll+0x1e4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f47f af6c 	bne.w	8002d4c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002e7a:	f000 fc47 	bl	800370c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <xTaskResumeAll+0x1f8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d010      	beq.n	8002eac <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002e8a:	f000 f859 	bl	8002f40 <xTaskIncrementTick>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002e94:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <xTaskResumeAll+0x1f4>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f1      	bne.n	8002e8a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ea6:	4b13      	ldr	r3, [pc, #76]	; (8002ef4 <xTaskResumeAll+0x1f8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <xTaskResumeAll+0x1f4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d009      	beq.n	8002ec8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <xTaskResumeAll+0x1fc>)
 8002eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ec8:	f001 f93c 	bl	8004144 <vPortExitCritical>

    return xAlreadyYielded;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3720      	adds	r7, #32
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200001c4 	.word	0x200001c4
 8002edc:	2000019c 	.word	0x2000019c
 8002ee0:	2000015c 	.word	0x2000015c
 8002ee4:	200001a4 	.word	0x200001a4
 8002ee8:	200000c8 	.word	0x200000c8
 8002eec:	200000c4 	.word	0x200000c4
 8002ef0:	200001b0 	.word	0x200001b0
 8002ef4:	200001ac 	.word	0x200001ac
 8002ef8:	e000ed04 	.word	0xe000ed04

08002efc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f02:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <xTaskGetTickCount+0x1c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f08:	687b      	ldr	r3, [r7, #4]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	200001a0 	.word	0x200001a0

08002f1c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f22:	f001 f9cb 	bl	80042bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <xTaskGetTickCountFromISR+0x20>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f30:	683b      	ldr	r3, [r7, #0]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	200001a0 	.word	0x200001a0

08002f40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f4a:	4b7f      	ldr	r3, [pc, #508]	; (8003148 <xTaskIncrementTick+0x208>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f040 80f0 	bne.w	8003134 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f54:	4b7d      	ldr	r3, [pc, #500]	; (800314c <xTaskIncrementTick+0x20c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f5c:	4a7b      	ldr	r2, [pc, #492]	; (800314c <xTaskIncrementTick+0x20c>)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f62:	6a3b      	ldr	r3, [r7, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d120      	bne.n	8002faa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f68:	4b79      	ldr	r3, [pc, #484]	; (8003150 <xTaskIncrementTick+0x210>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <xTaskIncrementTick+0x48>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	607b      	str	r3, [r7, #4]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <xTaskIncrementTick+0x46>
 8002f88:	4b71      	ldr	r3, [pc, #452]	; (8003150 <xTaskIncrementTick+0x210>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	4b71      	ldr	r3, [pc, #452]	; (8003154 <xTaskIncrementTick+0x214>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6f      	ldr	r2, [pc, #444]	; (8003150 <xTaskIncrementTick+0x210>)
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	4a6f      	ldr	r2, [pc, #444]	; (8003154 <xTaskIncrementTick+0x214>)
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b6e      	ldr	r3, [pc, #440]	; (8003158 <xTaskIncrementTick+0x218>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	4a6d      	ldr	r2, [pc, #436]	; (8003158 <xTaskIncrementTick+0x218>)
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	f000 fbb1 	bl	800370c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002faa:	4b6c      	ldr	r3, [pc, #432]	; (800315c <xTaskIncrementTick+0x21c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a3a      	ldr	r2, [r7, #32]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	f0c0 80aa 	bcc.w	800310a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb6:	4b66      	ldr	r3, [pc, #408]	; (8003150 <xTaskIncrementTick+0x210>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d104      	bne.n	8002fca <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fc0:	4b66      	ldr	r3, [pc, #408]	; (800315c <xTaskIncrementTick+0x21c>)
 8002fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc6:	601a      	str	r2, [r3, #0]
                    break;
 8002fc8:	e09f      	b.n	800310a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fca:	4b61      	ldr	r3, [pc, #388]	; (8003150 <xTaskIncrementTick+0x210>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002fda:	6a3a      	ldr	r2, [r7, #32]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d203      	bcs.n	8002fea <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002fe2:	4a5e      	ldr	r2, [pc, #376]	; (800315c <xTaskIncrementTick+0x21c>)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002fe8:	e08f      	b.n	800310a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	68d2      	ldr	r2, [r2, #12]
 8002ff8:	609a      	str	r2, [r3, #8]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	6892      	ldr	r2, [r2, #8]
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	3304      	adds	r3, #4
 800300c:	429a      	cmp	r2, r3
 800300e:	d103      	bne.n	8003018 <xTaskIncrementTick+0xd8>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	605a      	str	r2, [r3, #4]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	2200      	movs	r2, #0
 800301c:	615a      	str	r2, [r3, #20]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	1e5a      	subs	r2, r3, #1
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01e      	beq.n	800306e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	6a12      	ldr	r2, [r2, #32]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	69d2      	ldr	r2, [r2, #28]
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3318      	adds	r3, #24
 8003052:	429a      	cmp	r2, r3
 8003054:	d103      	bne.n	800305e <xTaskIncrementTick+0x11e>
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2200      	movs	r2, #0
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1e5a      	subs	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4618      	mov	r0, r3
 8003072:	f003 fdb3 	bl	8006bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307a:	2201      	movs	r2, #1
 800307c:	409a      	lsls	r2, r3
 800307e:	4b38      	ldr	r3, [pc, #224]	; (8003160 <xTaskIncrementTick+0x220>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	4a36      	ldr	r2, [pc, #216]	; (8003160 <xTaskIncrementTick+0x220>)
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <xTaskIncrementTick+0x224>)
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3304      	adds	r3, #4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	60da      	str	r2, [r3, #12]
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	3204      	adds	r2, #4
 80030b4:	605a      	str	r2, [r3, #4]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1d1a      	adds	r2, r3, #4
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4613      	mov	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4a26      	ldr	r2, [pc, #152]	; (8003164 <xTaskIncrementTick+0x224>)
 80030cc:	441a      	add	r2, r3
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	615a      	str	r2, [r3, #20]
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d6:	4923      	ldr	r1, [pc, #140]	; (8003164 <xTaskIncrementTick+0x224>)
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1c59      	adds	r1, r3, #1
 80030e6:	481f      	ldr	r0, [pc, #124]	; (8003164 <xTaskIncrementTick+0x224>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4403      	add	r3, r0
 80030f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <xTaskIncrementTick+0x228>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	429a      	cmp	r2, r3
 8003100:	f67f af59 	bls.w	8002fb6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003108:	e755      	b.n	8002fb6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <xTaskIncrementTick+0x228>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4914      	ldr	r1, [pc, #80]	; (8003164 <xTaskIncrementTick+0x224>)
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d901      	bls.n	8003126 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003122:	2301      	movs	r3, #1
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <xTaskIncrementTick+0x22c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e004      	b.n	800313e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <xTaskIncrementTick+0x230>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <xTaskIncrementTick+0x230>)
 800313c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003140:	4618      	mov	r0, r3
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	200001c4 	.word	0x200001c4
 800314c:	200001a0 	.word	0x200001a0
 8003150:	20000154 	.word	0x20000154
 8003154:	20000158 	.word	0x20000158
 8003158:	200001b4 	.word	0x200001b4
 800315c:	200001bc 	.word	0x200001bc
 8003160:	200001a4 	.word	0x200001a4
 8003164:	200000c8 	.word	0x200000c8
 8003168:	200000c4 	.word	0x200000c4
 800316c:	200001b0 	.word	0x200001b0
 8003170:	200001ac 	.word	0x200001ac

08003174 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <vTaskSwitchContext+0xbc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003182:	4b2c      	ldr	r3, [pc, #176]	; (8003234 <vTaskSwitchContext+0xc0>)
 8003184:	2201      	movs	r2, #1
 8003186:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003188:	e04d      	b.n	8003226 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <vTaskSwitchContext+0xc0>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <vTaskSwitchContext+0xc4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800319e:	7afb      	ldrb	r3, [r7, #11]
 80031a0:	f1c3 031f 	rsb	r3, r3, #31
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	4925      	ldr	r1, [pc, #148]	; (800323c <vTaskSwitchContext+0xc8>)
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10a      	bne.n	80031d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80031ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031be:	f383 8811 	msr	BASEPRI, r3
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	f3bf 8f4f 	dsb	sy
 80031ca:	607b      	str	r3, [r7, #4]
    }
 80031cc:	bf00      	nop
 80031ce:	e7fe      	b.n	80031ce <vTaskSwitchContext+0x5a>
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4a18      	ldr	r2, [pc, #96]	; (800323c <vTaskSwitchContext+0xc8>)
 80031dc:	4413      	add	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	3308      	adds	r3, #8
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d104      	bne.n	8003200 <vTaskSwitchContext+0x8c>
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <vTaskSwitchContext+0xcc>)
 8003208:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <vTaskSwitchContext+0xcc>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <vTaskSwitchContext+0xd0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	429a      	cmp	r2, r3
 8003214:	d102      	bne.n	800321c <vTaskSwitchContext+0xa8>
 8003216:	f003 fc41 	bl	8006a9c <SEGGER_SYSVIEW_OnIdle>
}
 800321a:	e004      	b.n	8003226 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800321c:	4b08      	ldr	r3, [pc, #32]	; (8003240 <vTaskSwitchContext+0xcc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f003 fc99 	bl	8006b58 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	200001c4 	.word	0x200001c4
 8003234:	200001b0 	.word	0x200001b0
 8003238:	200001a4 	.word	0x200001a4
 800323c:	200000c8 	.word	0x200000c8
 8003240:	200000c4 	.word	0x200000c4
 8003244:	200001c0 	.word	0x200001c0

08003248 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	60fb      	str	r3, [r7, #12]
    }
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <vTaskPlaceOnEventList+0x44>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3318      	adds	r3, #24
 8003274:	4619      	mov	r1, r3
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe ffb5 	bl	80021e6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800327c:	2101      	movs	r1, #1
 800327e:	6838      	ldr	r0, [r7, #0]
 8003280:	f000 fa7e 	bl	8003780 <prvAddCurrentTaskToDelayedList>
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	200000c4 	.word	0x200000c4

08003290 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	613b      	str	r3, [r7, #16]
    }
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	617b      	str	r3, [r7, #20]
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <vTaskPlaceOnEventListRestricted+0x8c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	61da      	str	r2, [r3, #28]
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <vTaskPlaceOnEventListRestricted+0x8c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	6892      	ldr	r2, [r2, #8]
 80032ce:	621a      	str	r2, [r3, #32]
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <vTaskPlaceOnEventListRestricted+0x8c>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	3218      	adds	r2, #24
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <vTaskPlaceOnEventListRestricted+0x8c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f103 0218 	add.w	r2, r3, #24
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <vTaskPlaceOnEventListRestricted+0x8c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d002      	beq.n	8003306 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003300:	f04f 33ff 	mov.w	r3, #4294967295
 8003304:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003306:	2024      	movs	r0, #36	; 0x24
 8003308:	f002 fec8 	bl	800609c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68b8      	ldr	r0, [r7, #8]
 8003310:	f000 fa36 	bl	8003780 <prvAddCurrentTaskToDelayedList>
    }
 8003314:	bf00      	nop
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200000c4 	.word	0x200000c4

08003320 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	60fb      	str	r3, [r7, #12]
    }
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	6a12      	ldr	r2, [r2, #32]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	6a3a      	ldr	r2, [r7, #32]
 8003362:	69d2      	ldr	r2, [r2, #28]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	3318      	adds	r3, #24
 800336e:	429a      	cmp	r2, r3
 8003370:	d103      	bne.n	800337a <xTaskRemoveFromEventList+0x5a>
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	2200      	movs	r2, #0
 800337e:	629a      	str	r2, [r3, #40]	; 0x28
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	1e5a      	subs	r2, r3, #1
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800338a:	4b4b      	ldr	r3, [pc, #300]	; (80034b8 <xTaskRemoveFromEventList+0x198>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d162      	bne.n	8003458 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003392:	6a3b      	ldr	r3, [r7, #32]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	68d2      	ldr	r2, [r2, #12]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	6892      	ldr	r2, [r2, #8]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	3304      	adds	r3, #4
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d103      	bne.n	80033c0 <xTaskRemoveFromEventList+0xa0>
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	605a      	str	r2, [r3, #4]
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2200      	movs	r2, #0
 80033c4:	615a      	str	r2, [r3, #20]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	1e5a      	subs	r2, r3, #1
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f003 fc02 	bl	8006bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	2201      	movs	r2, #1
 80033de:	409a      	lsls	r2, r3
 80033e0:	4b36      	ldr	r3, [pc, #216]	; (80034bc <xTaskRemoveFromEventList+0x19c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	4a35      	ldr	r2, [pc, #212]	; (80034bc <xTaskRemoveFromEventList+0x19c>)
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	4934      	ldr	r1, [pc, #208]	; (80034c0 <xTaskRemoveFromEventList+0x1a0>)
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	3304      	adds	r3, #4
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	3204      	adds	r2, #4
 8003416:	605a      	str	r2, [r3, #4]
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	1d1a      	adds	r2, r3, #4
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <xTaskRemoveFromEventList+0x1a0>)
 800342e:	441a      	add	r2, r3
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	615a      	str	r2, [r3, #20]
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003438:	4921      	ldr	r1, [pc, #132]	; (80034c0 <xTaskRemoveFromEventList+0x1a0>)
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	481d      	ldr	r0, [pc, #116]	; (80034c0 <xTaskRemoveFromEventList+0x1a0>)
 800344a:	4613      	mov	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4403      	add	r3, r0
 8003454:	6019      	str	r1, [r3, #0]
 8003456:	e01b      	b.n	8003490 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <xTaskRemoveFromEventList+0x1a4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61bb      	str	r3, [r7, #24]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	61da      	str	r2, [r3, #28]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	621a      	str	r2, [r3, #32]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	3218      	adds	r2, #24
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	f103 0218 	add.w	r2, r3, #24
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	4a10      	ldr	r2, [pc, #64]	; (80034c4 <xTaskRemoveFromEventList+0x1a4>)
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <xTaskRemoveFromEventList+0x1a4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <xTaskRemoveFromEventList+0x1a4>)
 800348e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <xTaskRemoveFromEventList+0x1a8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	429a      	cmp	r2, r3
 800349c:	d905      	bls.n	80034aa <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <xTaskRemoveFromEventList+0x1ac>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	e001      	b.n	80034ae <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3728      	adds	r7, #40	; 0x28
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	200001c4 	.word	0x200001c4
 80034bc:	200001a4 	.word	0x200001a4
 80034c0:	200000c8 	.word	0x200000c8
 80034c4:	2000015c 	.word	0x2000015c
 80034c8:	200000c4 	.word	0x200000c4
 80034cc:	200001b0 	.word	0x200001b0

080034d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <vTaskInternalSetTimeOutState+0x24>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034e0:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <vTaskInternalSetTimeOutState+0x28>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	605a      	str	r2, [r3, #4]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	200001b4 	.word	0x200001b4
 80034f8:	200001a0 	.word	0x200001a0

080034fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	613b      	str	r3, [r7, #16]
    }
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	60fb      	str	r3, [r7, #12]
    }
 800353a:	bf00      	nop
 800353c:	e7fe      	b.n	800353c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800353e:	f000 fdd1 	bl	80040e4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <xTaskCheckForTimeOut+0xc4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d102      	bne.n	8003562 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	e026      	b.n	80035b0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <xTaskCheckForTimeOut+0xc8>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d00a      	beq.n	8003584 <xTaskCheckForTimeOut+0x88>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	429a      	cmp	r2, r3
 8003576:	d305      	bcc.n	8003584 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e015      	b.n	80035b0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	429a      	cmp	r2, r3
 800358c:	d20b      	bcs.n	80035a6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	1ad2      	subs	r2, r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff ff98 	bl	80034d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61fb      	str	r3, [r7, #28]
 80035a4:	e004      	b.n	80035b0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80035b0:	f000 fdc8 	bl	8004144 <vPortExitCritical>

    return xReturn;
 80035b4:	69fb      	ldr	r3, [r7, #28]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	200001a0 	.word	0x200001a0
 80035c4:	200001b4 	.word	0x200001b4

080035c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <vTaskMissedYield+0x14>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	200001b0 	.word	0x200001b0

080035e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035e8:	f000 f852 	bl	8003690 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <prvIdleTask+0x28>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d9f9      	bls.n	80035e8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <prvIdleTask+0x2c>)
 80035f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	f3bf 8f4f 	dsb	sy
 8003600:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003604:	e7f0      	b.n	80035e8 <prvIdleTask+0x8>
 8003606:	bf00      	nop
 8003608:	200000c8 	.word	0x200000c8
 800360c:	e000ed04 	.word	0xe000ed04

08003610 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	e00c      	b.n	8003636 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4a12      	ldr	r2, [pc, #72]	; (8003670 <prvInitialiseTaskLists+0x60>)
 8003628:	4413      	add	r3, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f7fe fdae 	bl	800218c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3301      	adds	r3, #1
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d9ef      	bls.n	800361c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800363c:	480d      	ldr	r0, [pc, #52]	; (8003674 <prvInitialiseTaskLists+0x64>)
 800363e:	f7fe fda5 	bl	800218c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003642:	480d      	ldr	r0, [pc, #52]	; (8003678 <prvInitialiseTaskLists+0x68>)
 8003644:	f7fe fda2 	bl	800218c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003648:	480c      	ldr	r0, [pc, #48]	; (800367c <prvInitialiseTaskLists+0x6c>)
 800364a:	f7fe fd9f 	bl	800218c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800364e:	480c      	ldr	r0, [pc, #48]	; (8003680 <prvInitialiseTaskLists+0x70>)
 8003650:	f7fe fd9c 	bl	800218c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003654:	480b      	ldr	r0, [pc, #44]	; (8003684 <prvInitialiseTaskLists+0x74>)
 8003656:	f7fe fd99 	bl	800218c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800365a:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <prvInitialiseTaskLists+0x78>)
 800365c:	4a05      	ldr	r2, [pc, #20]	; (8003674 <prvInitialiseTaskLists+0x64>)
 800365e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <prvInitialiseTaskLists+0x7c>)
 8003662:	4a05      	ldr	r2, [pc, #20]	; (8003678 <prvInitialiseTaskLists+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200000c8 	.word	0x200000c8
 8003674:	2000012c 	.word	0x2000012c
 8003678:	20000140 	.word	0x20000140
 800367c:	2000015c 	.word	0x2000015c
 8003680:	20000170 	.word	0x20000170
 8003684:	20000188 	.word	0x20000188
 8003688:	20000154 	.word	0x20000154
 800368c:	20000158 	.word	0x20000158

08003690 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003696:	e019      	b.n	80036cc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003698:	f000 fd24 	bl	80040e4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <prvCheckTasksWaitingTermination+0x50>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fe fdd5 	bl	8002258 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80036ae:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <prvCheckTasksWaitingTermination+0x54>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	4a0b      	ldr	r2, [pc, #44]	; (80036e4 <prvCheckTasksWaitingTermination+0x54>)
 80036b6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80036b8:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <prvCheckTasksWaitingTermination+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3b01      	subs	r3, #1
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <prvCheckTasksWaitingTermination+0x58>)
 80036c0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80036c2:	f000 fd3f 	bl	8004144 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f810 	bl	80036ec <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <prvCheckTasksWaitingTermination+0x58>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1e1      	bne.n	8003698 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	20000170 	.word	0x20000170
 80036e4:	2000019c 	.word	0x2000019c
 80036e8:	20000184 	.word	0x20000184

080036ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fed9 	bl	80044b0 <vPortFree>
            vPortFree( pxTCB );
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fed6 	bl	80044b0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003704:	bf00      	nop
 8003706:	3708      	adds	r7, #8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <prvResetNextTaskUnblockTime+0x30>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d104      	bne.n	8003724 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <prvResetNextTaskUnblockTime+0x34>)
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003722:	e005      	b.n	8003730 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <prvResetNextTaskUnblockTime+0x30>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <prvResetNextTaskUnblockTime+0x34>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000154 	.word	0x20000154
 8003740:	200001bc 	.word	0x200001bc

08003744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <xTaskGetSchedulerState+0x34>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d102      	bne.n	8003758 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003752:	2301      	movs	r3, #1
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	e008      	b.n	800376a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <xTaskGetSchedulerState+0x38>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d102      	bne.n	8003766 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003760:	2302      	movs	r3, #2
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	e001      	b.n	800376a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800376a:	687b      	ldr	r3, [r7, #4]
    }
 800376c:	4618      	mov	r0, r3
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	200001a8 	.word	0x200001a8
 800377c:	200001c4 	.word	0x200001c4

08003780 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800378a:	4b36      	ldr	r3, [pc, #216]	; (8003864 <prvAddCurrentTaskToDelayedList+0xe4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003790:	4b35      	ldr	r3, [pc, #212]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3304      	adds	r3, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7fe fd5e 	bl	8002258 <uxListRemove>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2201      	movs	r2, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	4b2e      	ldr	r3, [pc, #184]	; (800386c <prvAddCurrentTaskToDelayedList+0xec>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4013      	ands	r3, r2
 80037b6:	4a2d      	ldr	r2, [pc, #180]	; (800386c <prvAddCurrentTaskToDelayedList+0xec>)
 80037b8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d124      	bne.n	800380c <prvAddCurrentTaskToDelayedList+0x8c>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d021      	beq.n	800380c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037c8:	4b29      	ldr	r3, [pc, #164]	; (8003870 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	4b26      	ldr	r3, [pc, #152]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	6892      	ldr	r2, [r2, #8]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	3204      	adds	r2, #4
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1d1a      	adds	r2, r3, #4
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	609a      	str	r2, [r3, #8]
 80037f6:	4b1c      	ldr	r3, [pc, #112]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a1d      	ldr	r2, [pc, #116]	; (8003870 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037fc:	615a      	str	r2, [r3, #20]
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3301      	adds	r3, #1
 8003804:	4a1a      	ldr	r2, [pc, #104]	; (8003870 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800380a:	e026      	b.n	800385a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003814:	4b14      	ldr	r3, [pc, #80]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	429a      	cmp	r2, r3
 8003822:	d209      	bcs.n	8003838 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003824:	4b13      	ldr	r3, [pc, #76]	; (8003874 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3304      	adds	r3, #4
 800382e:	4619      	mov	r1, r3
 8003830:	4610      	mov	r0, r2
 8003832:	f7fe fcd8 	bl	80021e6 <vListInsert>
}
 8003836:	e010      	b.n	800385a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003838:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <prvAddCurrentTaskToDelayedList+0xf8>)
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <prvAddCurrentTaskToDelayedList+0xe8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3304      	adds	r3, #4
 8003842:	4619      	mov	r1, r3
 8003844:	4610      	mov	r0, r2
 8003846:	f7fe fcce 	bl	80021e6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <prvAddCurrentTaskToDelayedList+0xfc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d202      	bcs.n	800385a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003854:	4a09      	ldr	r2, [pc, #36]	; (800387c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6013      	str	r3, [r2, #0]
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200001a0 	.word	0x200001a0
 8003868:	200000c4 	.word	0x200000c4
 800386c:	200001a4 	.word	0x200001a4
 8003870:	20000188 	.word	0x20000188
 8003874:	20000158 	.word	0x20000158
 8003878:	20000154 	.word	0x20000154
 800387c:	200001bc 	.word	0x200001bc

08003880 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003886:	2300      	movs	r3, #0
 8003888:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800388a:	f000 fa47 	bl	8003d1c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <xTimerCreateTimerTask+0x54>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00b      	beq.n	80038ae <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <xTimerCreateTimerTask+0x58>)
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	2302      	movs	r3, #2
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2300      	movs	r3, #0
 80038a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038a4:	490d      	ldr	r1, [pc, #52]	; (80038dc <xTimerCreateTimerTask+0x5c>)
 80038a6:	480e      	ldr	r0, [pc, #56]	; (80038e0 <xTimerCreateTimerTask+0x60>)
 80038a8:	f7ff f830 	bl	800290c <xTaskCreate>
 80038ac:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	603b      	str	r3, [r7, #0]
    }
 80038c6:	bf00      	nop
 80038c8:	e7fe      	b.n	80038c8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038ca:	687b      	ldr	r3, [r7, #4]
    }
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	200001f8 	.word	0x200001f8
 80038d8:	200001fc 	.word	0x200001fc
 80038dc:	080070a8 	.word	0x080070a8
 80038e0:	08003989 	.word	0x08003989

080038e4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038f0:	e008      	b.n	8003904 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4413      	add	r3, r2
 80038fa:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	68f8      	ldr	r0, [r7, #12]
 8003902:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	18d1      	adds	r1, r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 f8dd 	bl	8003ad0 <prvInsertTimerInActiveList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ea      	bne.n	80038f2 <prvReloadTimer+0xe>
        }
    }
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <prvProcessExpiredTimer+0x5c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3304      	adds	r3, #4
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fc89 	bl	8002258 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d005      	beq.n	8003960 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7ff ffc3 	bl	80038e4 <prvReloadTimer>
 800395e:	e008      	b.n	8003972 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	4798      	blx	r3
    }
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	200001f0 	.word	0x200001f0

08003988 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003990:	f107 0308 	add.w	r3, r7, #8
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f857 	bl	8003a48 <prvGetNextExpireTime>
 800399a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f803 	bl	80039ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80039a6:	f000 f8d5 	bl	8003b54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039aa:	e7f1      	b.n	8003990 <prvTimerTask+0x8>

080039ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80039b6:	f7ff f993 	bl	8002ce0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80039ba:	f107 0308 	add.w	r3, r7, #8
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f866 	bl	8003a90 <prvSampleTimeNow>
 80039c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d130      	bne.n	8003a2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10a      	bne.n	80039e8 <prvProcessTimerOrBlockTask+0x3c>
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d806      	bhi.n	80039e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039da:	f7ff f98f 	bl	8002cfc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ffa1 	bl	8003928 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039e6:	e024      	b.n	8003a32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <prvProcessTimerOrBlockTask+0x90>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <prvProcessTimerOrBlockTask+0x50>
 80039f8:	2301      	movs	r3, #1
 80039fa:	e000      	b.n	80039fe <prvProcessTimerOrBlockTask+0x52>
 80039fc:	2300      	movs	r3, #0
 80039fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a00:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <prvProcessTimerOrBlockTask+0x94>)
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7fe ff49 	bl	80028a4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a12:	f7ff f973 	bl	8002cfc <xTaskResumeAll>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10a      	bne.n	8003a32 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a1c:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <prvProcessTimerOrBlockTask+0x98>)
 8003a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	f3bf 8f6f 	isb	sy
    }
 8003a2c:	e001      	b.n	8003a32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a2e:	f7ff f965 	bl	8002cfc <xTaskResumeAll>
    }
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200001f4 	.word	0x200001f4
 8003a40:	200001f8 	.word	0x200001f8
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a50:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <prvGetNextExpireTime+0x44>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <prvGetNextExpireTime+0x16>
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	e000      	b.n	8003a60 <prvGetNextExpireTime+0x18>
 8003a5e:	2200      	movs	r2, #0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a6c:	4b07      	ldr	r3, [pc, #28]	; (8003a8c <prvGetNextExpireTime+0x44>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e001      	b.n	8003a7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	200001f0 	.word	0x200001f0

08003a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a98:	f7ff fa30 	bl	8002efc <xTaskGetTickCount>
 8003a9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a9e:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <prvSampleTimeNow+0x3c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d205      	bcs.n	8003ab4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003aa8:	f000 f912 	bl	8003cd0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e002      	b.n	8003aba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003aba:	4a04      	ldr	r2, [pc, #16]	; (8003acc <prvSampleTimeNow+0x3c>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000200 	.word	0x20000200

08003ad0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d812      	bhi.n	8003b1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad2      	subs	r2, r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d302      	bcc.n	8003b0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e01b      	b.n	8003b42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b0a:	4b10      	ldr	r3, [pc, #64]	; (8003b4c <prvInsertTimerInActiveList+0x7c>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3304      	adds	r3, #4
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe fb66 	bl	80021e6 <vListInsert>
 8003b1a:	e012      	b.n	8003b42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d206      	bcs.n	8003b32 <prvInsertTimerInActiveList+0x62>
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d302      	bcc.n	8003b32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	e007      	b.n	8003b42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b32:	4b07      	ldr	r3, [pc, #28]	; (8003b50 <prvInsertTimerInActiveList+0x80>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3304      	adds	r3, #4
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7fe fb52 	bl	80021e6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b42:	697b      	ldr	r3, [r7, #20]
    }
 8003b44:	4618      	mov	r0, r3
 8003b46:	3718      	adds	r7, #24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200001f4 	.word	0x200001f4
 8003b50:	200001f0 	.word	0x200001f0

08003b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b5a:	e0a6      	b.n	8003caa <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f2c0 80a2 	blt.w	8003ca8 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d004      	beq.n	8003b7a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fb6f 	bl	8002258 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b7a:	1d3b      	adds	r3, r7, #4
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff ff87 	bl	8003a90 <prvSampleTimeNow>
 8003b82:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	f200 808e 	bhi.w	8003caa <prvProcessReceivedCommands+0x156>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <prvProcessReceivedCommands+0x40>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bb9 	.word	0x08003bb9
 8003b9c:	08003c21 	.word	0x08003c21
 8003ba0:	08003c35 	.word	0x08003c35
 8003ba4:	08003c7f 	.word	0x08003c7f
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bb9 	.word	0x08003bb9
 8003bb0:	08003c21 	.word	0x08003c21
 8003bb4:	08003c35 	.word	0x08003c35
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	18d1      	adds	r1, r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	69f8      	ldr	r0, [r7, #28]
 8003bd8:	f7ff ff7a 	bl	8003ad0 <prvInsertTimerInActiveList>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d063      	beq.n	8003caa <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	69f8      	ldr	r0, [r7, #28]
 8003bfe:	f7ff fe71 	bl	80038e4 <prvReloadTimer>
 8003c02:	e008      	b.n	8003c16 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	69f8      	ldr	r0, [r7, #28]
 8003c1c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003c1e:	e044      	b.n	8003caa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c26:	f023 0301 	bic.w	r3, r3, #1
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c32:	e03a      	b.n	8003caa <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10a      	bne.n	8003c6a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	617b      	str	r3, [r7, #20]
    }
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	18d1      	adds	r1, r2, r3
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	69f8      	ldr	r0, [r7, #28]
 8003c78:	f7ff ff2a 	bl	8003ad0 <prvInsertTimerInActiveList>
                        break;
 8003c7c:	e015      	b.n	8003caa <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003c8c:	69f8      	ldr	r0, [r7, #28]
 8003c8e:	f000 fc0f 	bl	80044b0 <vPortFree>
 8003c92:	e00a      	b.n	8003caa <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ca6:	e000      	b.n	8003caa <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003ca8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003caa:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <prvProcessReceivedCommands+0x178>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f107 0108 	add.w	r1, r7, #8
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fc01 	bl	80024bc <xQueueReceive>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f af4d 	bne.w	8003b5c <prvProcessReceivedCommands+0x8>
        }
    }
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	200001f8 	.word	0x200001f8

08003cd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cd6:	e009      	b.n	8003cec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <prvSwitchTimerLists+0x44>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f7ff fe1e 	bl	8003928 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cec:	4b09      	ldr	r3, [pc, #36]	; (8003d14 <prvSwitchTimerLists+0x44>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <prvSwitchTimerLists+0x44>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <prvSwitchTimerLists+0x48>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <prvSwitchTimerLists+0x44>)
 8003d02:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003d04:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <prvSwitchTimerLists+0x48>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6013      	str	r3, [r2, #0]
    }
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200001f0 	.word	0x200001f0
 8003d18:	200001f4 	.word	0x200001f4

08003d1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d20:	f000 f9e0 	bl	80040e4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <prvCheckForValidListAndQueue+0x54>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d11d      	bne.n	8003d68 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d2c:	4811      	ldr	r0, [pc, #68]	; (8003d74 <prvCheckForValidListAndQueue+0x58>)
 8003d2e:	f7fe fa2d 	bl	800218c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d32:	4811      	ldr	r0, [pc, #68]	; (8003d78 <prvCheckForValidListAndQueue+0x5c>)
 8003d34:	f7fe fa2a 	bl	800218c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d38:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <prvCheckForValidListAndQueue+0x60>)
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <prvCheckForValidListAndQueue+0x58>)
 8003d3c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <prvCheckForValidListAndQueue+0x64>)
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <prvCheckForValidListAndQueue+0x5c>)
 8003d42:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d44:	2200      	movs	r2, #0
 8003d46:	210c      	movs	r1, #12
 8003d48:	200a      	movs	r0, #10
 8003d4a:	f7fe fb3f 	bl	80023cc <xQueueGenericCreate>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4a07      	ldr	r2, [pc, #28]	; (8003d70 <prvCheckForValidListAndQueue+0x54>)
 8003d52:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <prvCheckForValidListAndQueue+0x54>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <prvCheckForValidListAndQueue+0x54>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4908      	ldr	r1, [pc, #32]	; (8003d84 <prvCheckForValidListAndQueue+0x68>)
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe fd48 	bl	80027f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d68:	f000 f9ec 	bl	8004144 <vPortExitCritical>
    }
 8003d6c:	bf00      	nop
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	200001f8 	.word	0x200001f8
 8003d74:	200001c8 	.word	0x200001c8
 8003d78:	200001dc 	.word	0x200001dc
 8003d7c:	200001f0 	.word	0x200001f0
 8003d80:	200001f4 	.word	0x200001f4
 8003d84:	080070b0 	.word	0x080070b0

08003d88 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b04      	subs	r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003da0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	3b04      	subs	r3, #4
 8003da6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f023 0201 	bic.w	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3b04      	subs	r3, #4
 8003db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003db8:	4a0c      	ldr	r2, [pc, #48]	; (8003dec <pxPortInitialiseStack+0x64>)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3b14      	subs	r3, #20
 8003dc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3b04      	subs	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f06f 0202 	mvn.w	r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3b20      	subs	r3, #32
 8003ddc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dde:	68fb      	ldr	r3, [r7, #12]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	08003df1 	.word	0x08003df1

08003df0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003dfa:	4b12      	ldr	r3, [pc, #72]	; (8003e44 <prvTaskExitError+0x54>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e02:	d00a      	beq.n	8003e1a <prvTaskExitError+0x2a>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60fb      	str	r3, [r7, #12]
    }
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <prvTaskExitError+0x28>
        __asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	60bb      	str	r3, [r7, #8]
    }
 8003e2c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e2e:	bf00      	nop
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0fc      	beq.n	8003e30 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	20000010 	.word	0x20000010
	...

08003e50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e50:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <pxCurrentTCBConst2>)
 8003e52:	6819      	ldr	r1, [r3, #0]
 8003e54:	6808      	ldr	r0, [r1, #0]
 8003e56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	f380 8809 	msr	PSP, r0
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	4770      	bx	lr
 8003e6c:	f3af 8000 	nop.w

08003e70 <pxCurrentTCBConst2>:
 8003e70:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop

08003e78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e78:	4808      	ldr	r0, [pc, #32]	; (8003e9c <prvPortStartFirstTask+0x24>)
 8003e7a:	6800      	ldr	r0, [r0, #0]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f380 8808 	msr	MSP, r0
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f380 8814 	msr	CONTROL, r0
 8003e8a:	b662      	cpsie	i
 8003e8c:	b661      	cpsie	f
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	df00      	svc	0
 8003e98:	bf00      	nop
 8003e9a:	0000      	.short	0x0000
 8003e9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop

08003ea4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003eaa:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <xPortStartScheduler+0x120>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a46      	ldr	r2, [pc, #280]	; (8003fc8 <xPortStartScheduler+0x124>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10a      	bne.n	8003eca <xPortStartScheduler+0x26>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	613b      	str	r3, [r7, #16]
    }
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eca:	4b3e      	ldr	r3, [pc, #248]	; (8003fc4 <xPortStartScheduler+0x120>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3f      	ldr	r2, [pc, #252]	; (8003fcc <xPortStartScheduler+0x128>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10a      	bne.n	8003eea <xPortStartScheduler+0x46>
        __asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	60fb      	str	r3, [r7, #12]
    }
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eea:	4b39      	ldr	r3, [pc, #228]	; (8003fd0 <xPortStartScheduler+0x12c>)
 8003eec:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	22ff      	movs	r2, #255	; 0xff
 8003efa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <xPortStartScheduler+0x130>)
 8003f10:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f12:	4b31      	ldr	r3, [pc, #196]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f14:	2207      	movs	r2, #7
 8003f16:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f18:	e009      	b.n	8003f2e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003f1a:	4b2f      	ldr	r3, [pc, #188]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f22:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f36:	2b80      	cmp	r3, #128	; 0x80
 8003f38:	d0ef      	beq.n	8003f1a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f3a:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d00a      	beq.n	8003f5c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	60bb      	str	r3, [r7, #8]
    }
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f5c:	4b1e      	ldr	r3, [pc, #120]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	4a1d      	ldr	r2, [pc, #116]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f64:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f66:	4b1c      	ldr	r3, [pc, #112]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	; (8003fd8 <xPortStartScheduler+0x134>)
 8003f70:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a17      	ldr	r2, [pc, #92]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f84:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a14      	ldr	r2, [pc, #80]	; (8003fdc <xPortStartScheduler+0x138>)
 8003f8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f90:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f92:	f000 f963 	bl	800425c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f96:	4b12      	ldr	r3, [pc, #72]	; (8003fe0 <xPortStartScheduler+0x13c>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f9c:	f000 f982 	bl	80042a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003fa0:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <xPortStartScheduler+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0f      	ldr	r2, [pc, #60]	; (8003fe4 <xPortStartScheduler+0x140>)
 8003fa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003faa:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003fac:	f7ff ff64 	bl	8003e78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003fb0:	f7ff f8e0 	bl	8003174 <vTaskSwitchContext>
    prvTaskExitError();
 8003fb4:	f7ff ff1c 	bl	8003df0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	e000ed00 	.word	0xe000ed00
 8003fc8:	410fc271 	.word	0x410fc271
 8003fcc:	410fc270 	.word	0x410fc270
 8003fd0:	e000e400 	.word	0xe000e400
 8003fd4:	20000204 	.word	0x20000204
 8003fd8:	20000208 	.word	0x20000208
 8003fdc:	e000ed20 	.word	0xe000ed20
 8003fe0:	20000010 	.word	0x20000010
 8003fe4:	e000ef34 	.word	0xe000ef34

08003fe8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fee:	4b37      	ldr	r3, [pc, #220]	; (80040cc <vInitPrioGroupValue+0xe4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <vInitPrioGroupValue+0xe8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10a      	bne.n	800400e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	613b      	str	r3, [r7, #16]
    }
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <vInitPrioGroupValue+0xe4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <vInitPrioGroupValue+0xec>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d10a      	bne.n	800402e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
    }
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800402e:	4b2a      	ldr	r3, [pc, #168]	; (80040d8 <vInitPrioGroupValue+0xf0>)
 8004030:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	22ff      	movs	r2, #255	; 0xff
 800403e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004050:	b2da      	uxtb	r2, r3
 8004052:	4b22      	ldr	r3, [pc, #136]	; (80040dc <vInitPrioGroupValue+0xf4>)
 8004054:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004056:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 8004058:	2207      	movs	r2, #7
 800405a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800405c:	e009      	b.n	8004072 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800405e:	4b20      	ldr	r3, [pc, #128]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3b01      	subs	r3, #1
 8004064:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 8004066:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b80      	cmp	r3, #128	; 0x80
 800407c:	d0ef      	beq.n	800405e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f1c3 0307 	rsb	r3, r3, #7
 8004086:	2b04      	cmp	r3, #4
 8004088:	d00a      	beq.n	80040a0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60bb      	str	r3, [r7, #8]
    }
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 80040a8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040aa:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040b2:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <vInitPrioGroupValue+0xf8>)
 80040b4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000ed00 	.word	0xe000ed00
 80040d0:	410fc271 	.word	0x410fc271
 80040d4:	410fc270 	.word	0x410fc270
 80040d8:	e000e400 	.word	0xe000e400
 80040dc:	20000204 	.word	0x20000204
 80040e0:	20000208 	.word	0x20000208

080040e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
        __asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	607b      	str	r3, [r7, #4]
    }
 80040fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040fe:	4b0f      	ldr	r3, [pc, #60]	; (800413c <vPortEnterCritical+0x58>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	4a0d      	ldr	r2, [pc, #52]	; (800413c <vPortEnterCritical+0x58>)
 8004106:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <vPortEnterCritical+0x58>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d10f      	bne.n	8004130 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004110:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <vPortEnterCritical+0x5c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <vPortEnterCritical+0x4c>
        __asm volatile
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	603b      	str	r3, [r7, #0]
    }
 800412c:	bf00      	nop
 800412e:	e7fe      	b.n	800412e <vPortEnterCritical+0x4a>
    }
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	20000010 	.word	0x20000010
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <vPortExitCritical+0x50>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10a      	bne.n	8004168 <vPortExitCritical+0x24>
        __asm volatile
 8004152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004156:	f383 8811 	msr	BASEPRI, r3
 800415a:	f3bf 8f6f 	isb	sy
 800415e:	f3bf 8f4f 	dsb	sy
 8004162:	607b      	str	r3, [r7, #4]
    }
 8004164:	bf00      	nop
 8004166:	e7fe      	b.n	8004166 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004168:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <vPortExitCritical+0x50>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3b01      	subs	r3, #1
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <vPortExitCritical+0x50>)
 8004170:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <vPortExitCritical+0x50>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <vPortExitCritical+0x42>
 800417a:	2300      	movs	r3, #0
 800417c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004184:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000010 	.word	0x20000010
	...

080041a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041a0:	f3ef 8009 	mrs	r0, PSP
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <pxCurrentTCBConst>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	f01e 0f10 	tst.w	lr, #16
 80041b0:	bf08      	it	eq
 80041b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041ba:	6010      	str	r0, [r2, #0]
 80041bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041c4:	f380 8811 	msr	BASEPRI, r0
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f7fe ffd0 	bl	8003174 <vTaskSwitchContext>
 80041d4:	f04f 0000 	mov.w	r0, #0
 80041d8:	f380 8811 	msr	BASEPRI, r0
 80041dc:	bc09      	pop	{r0, r3}
 80041de:	6819      	ldr	r1, [r3, #0]
 80041e0:	6808      	ldr	r0, [r1, #0]
 80041e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e6:	f01e 0f10 	tst.w	lr, #16
 80041ea:	bf08      	it	eq
 80041ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041f0:	f380 8809 	msr	PSP, r0
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	f3af 8000 	nop.w

08004200 <pxCurrentTCBConst>:
 8004200:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop

08004208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
        __asm volatile
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	607b      	str	r3, [r7, #4]
    }
 8004220:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004222:	f002 fbc1 	bl	80069a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004226:	f7fe fe8b 	bl	8002f40 <xTaskIncrementTick>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d006      	beq.n	800423e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004230:	f002 fc18 	bl	8006a64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004234:	4b08      	ldr	r3, [pc, #32]	; (8004258 <SysTick_Handler+0x50>)
 8004236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e001      	b.n	8004242 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800423e:	f002 fbf5 	bl	8006a2c <SEGGER_SYSVIEW_RecordExitISR>
 8004242:	2300      	movs	r3, #0
 8004244:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	f383 8811 	msr	BASEPRI, r3
    }
 800424c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	e000ed04 	.word	0xe000ed04

0800425c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <vPortSetupTimerInterrupt+0x34>)
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <vPortSetupTimerInterrupt+0x38>)
 8004268:	2200      	movs	r2, #0
 800426a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <vPortSetupTimerInterrupt+0x3c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <vPortSetupTimerInterrupt+0x40>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	4a09      	ldr	r2, [pc, #36]	; (80042a0 <vPortSetupTimerInterrupt+0x44>)
 800427a:	3b01      	subs	r3, #1
 800427c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800427e:	4b04      	ldr	r3, [pc, #16]	; (8004290 <vPortSetupTimerInterrupt+0x34>)
 8004280:	2207      	movs	r2, #7
 8004282:	601a      	str	r2, [r3, #0]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000e010 	.word	0xe000e010
 8004294:	e000e018 	.word	0xe000e018
 8004298:	20000000 	.word	0x20000000
 800429c:	10624dd3 	.word	0x10624dd3
 80042a0:	e000e014 	.word	0xe000e014

080042a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80042a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042b4 <vPortEnableVFP+0x10>
 80042a8:	6801      	ldr	r1, [r0, #0]
 80042aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042ae:	6001      	str	r1, [r0, #0]
 80042b0:	4770      	bx	lr
 80042b2:	0000      	.short	0x0000
 80042b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop

080042bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80042c2:	f3ef 8305 	mrs	r3, IPSR
 80042c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b0f      	cmp	r3, #15
 80042cc:	d914      	bls.n	80042f8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ce:	4a17      	ldr	r2, [pc, #92]	; (800432c <vPortValidateInterruptPriority+0x70>)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042d8:	4b15      	ldr	r3, [pc, #84]	; (8004330 <vPortValidateInterruptPriority+0x74>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	7afa      	ldrb	r2, [r7, #11]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20a      	bcs.n	80042f8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80042e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	607b      	str	r3, [r7, #4]
    }
 80042f4:	bf00      	nop
 80042f6:	e7fe      	b.n	80042f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042f8:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <vPortValidateInterruptPriority+0x78>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <vPortValidateInterruptPriority+0x7c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d90a      	bls.n	800431e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	603b      	str	r3, [r7, #0]
    }
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <vPortValidateInterruptPriority+0x60>
    }
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	e000e3f0 	.word	0xe000e3f0
 8004330:	20000204 	.word	0x20000204
 8004334:	e000ed0c 	.word	0xe000ed0c
 8004338:	20000208 	.word	0x20000208

0800433c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004348:	f7fe fcca 	bl	8002ce0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800434c:	4b53      	ldr	r3, [pc, #332]	; (800449c <pvPortMalloc+0x160>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d101      	bne.n	8004358 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004354:	f000 f908 	bl	8004568 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d012      	beq.n	8004384 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800435e:	2208      	movs	r2, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	3308      	adds	r3, #8
 800436a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	43db      	mvns	r3, r3
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	429a      	cmp	r2, r3
 8004374:	d804      	bhi.n	8004380 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	4413      	add	r3, r2
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	e001      	b.n	8004384 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db70      	blt.n	800446c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d06d      	beq.n	800446c <pvPortMalloc+0x130>
 8004390:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <pvPortMalloc+0x164>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d868      	bhi.n	800446c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800439a:	4b42      	ldr	r3, [pc, #264]	; (80044a4 <pvPortMalloc+0x168>)
 800439c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800439e:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <pvPortMalloc+0x168>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043a4:	e004      	b.n	80043b0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d903      	bls.n	80043c2 <pvPortMalloc+0x86>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f1      	bne.n	80043a6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043c2:	4b36      	ldr	r3, [pc, #216]	; (800449c <pvPortMalloc+0x160>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d04f      	beq.n	800446c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	4413      	add	r3, r2
 80043d4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad2      	subs	r2, r2, r3
 80043e6:	2308      	movs	r3, #8
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d91f      	bls.n	800442e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <pvPortMalloc+0xda>
        __asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
    }
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	1ad2      	subs	r2, r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004428:	6978      	ldr	r0, [r7, #20]
 800442a:	f000 f8f9 	bl	8004620 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800442e:	4b1c      	ldr	r3, [pc, #112]	; (80044a0 <pvPortMalloc+0x164>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <pvPortMalloc+0x164>)
 800443a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <pvPortMalloc+0x164>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <pvPortMalloc+0x16c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d203      	bcs.n	8004450 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <pvPortMalloc+0x164>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a16      	ldr	r2, [pc, #88]	; (80044a8 <pvPortMalloc+0x16c>)
 800444e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004462:	4b12      	ldr	r3, [pc, #72]	; (80044ac <pvPortMalloc+0x170>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3301      	adds	r3, #1
 8004468:	4a10      	ldr	r2, [pc, #64]	; (80044ac <pvPortMalloc+0x170>)
 800446a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800446c:	f7fe fc46 	bl	8002cfc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <pvPortMalloc+0x154>
        __asm volatile
 800447a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447e:	f383 8811 	msr	BASEPRI, r3
 8004482:	f3bf 8f6f 	isb	sy
 8004486:	f3bf 8f4f 	dsb	sy
 800448a:	60fb      	str	r3, [r7, #12]
    }
 800448c:	bf00      	nop
 800448e:	e7fe      	b.n	800448e <pvPortMalloc+0x152>
    return pvReturn;
 8004490:	69fb      	ldr	r3, [r7, #28]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3728      	adds	r7, #40	; 0x28
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20012e14 	.word	0x20012e14
 80044a0:	20012e18 	.word	0x20012e18
 80044a4:	20012e0c 	.word	0x20012e0c
 80044a8:	20012e1c 	.word	0x20012e1c
 80044ac:	20012e20 	.word	0x20012e20

080044b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d049      	beq.n	8004556 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044c2:	2308      	movs	r3, #8
 80044c4:	425b      	negs	r3, r3
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4413      	add	r3, r2
 80044ca:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	db0a      	blt.n	80044ee <vPortFree+0x3e>
        __asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
    }
 80044ea:	bf00      	nop
 80044ec:	e7fe      	b.n	80044ec <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <vPortFree+0x5c>
        __asm volatile
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	60bb      	str	r3, [r7, #8]
    }
 8004508:	bf00      	nop
 800450a:	e7fe      	b.n	800450a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0fdb      	lsrs	r3, r3, #31
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01c      	beq.n	8004556 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d118      	bne.n	8004556 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004530:	f7fe fbd6 	bl	8002ce0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	4b09      	ldr	r3, [pc, #36]	; (8004560 <vPortFree+0xb0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4413      	add	r3, r2
 800453e:	4a08      	ldr	r2, [pc, #32]	; (8004560 <vPortFree+0xb0>)
 8004540:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004542:	6938      	ldr	r0, [r7, #16]
 8004544:	f000 f86c 	bl	8004620 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004548:	4b06      	ldr	r3, [pc, #24]	; (8004564 <vPortFree+0xb4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <vPortFree+0xb4>)
 8004550:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004552:	f7fe fbd3 	bl	8002cfc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004556:	bf00      	nop
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20012e18 	.word	0x20012e18
 8004564:	20012e24 	.word	0x20012e24

08004568 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800456e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004572:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <prvHeapInit+0xa4>)
 8004576:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00c      	beq.n	800459c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3307      	adds	r3, #7
 8004586:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0307 	bic.w	r3, r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	4a1d      	ldr	r2, [pc, #116]	; (800460c <prvHeapInit+0xa4>)
 8004598:	4413      	add	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045a0:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <prvHeapInit+0xa8>)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045a6:	4b1a      	ldr	r3, [pc, #104]	; (8004610 <prvHeapInit+0xa8>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	4413      	add	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045b4:	2208      	movs	r2, #8
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0307 	bic.w	r3, r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4a13      	ldr	r2, [pc, #76]	; (8004614 <prvHeapInit+0xac>)
 80045c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <prvHeapInit+0xac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <prvHeapInit+0xac>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	1ad2      	subs	r2, r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <prvHeapInit+0xac>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	4a08      	ldr	r2, [pc, #32]	; (8004618 <prvHeapInit+0xb0>)
 80045f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a07      	ldr	r2, [pc, #28]	; (800461c <prvHeapInit+0xb4>)
 80045fe:	6013      	str	r3, [r2, #0]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	2000020c 	.word	0x2000020c
 8004610:	20012e0c 	.word	0x20012e0c
 8004614:	20012e14 	.word	0x20012e14
 8004618:	20012e1c 	.word	0x20012e1c
 800461c:	20012e18 	.word	0x20012e18

08004620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004628:	4b28      	ldr	r3, [pc, #160]	; (80046cc <prvInsertBlockIntoFreeList+0xac>)
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	e002      	b.n	8004634 <prvInsertBlockIntoFreeList+0x14>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d8f7      	bhi.n	800462e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	4413      	add	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d108      	bne.n	8004662 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	441a      	add	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d118      	bne.n	80046a8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <prvInsertBlockIntoFreeList+0xb0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d00d      	beq.n	800469e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	e008      	b.n	80046b0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800469e:	4b0c      	ldr	r3, [pc, #48]	; (80046d0 <prvInsertBlockIntoFreeList+0xb0>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e003      	b.n	80046b0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d002      	beq.n	80046be <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	20012e0c 	.word	0x20012e0c
 80046d0:	20012e14 	.word	0x20012e14

080046d4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046d8:	4803      	ldr	r0, [pc, #12]	; (80046e8 <_cbSendSystemDesc+0x14>)
 80046da:	f002 f90f 	bl	80068fc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046de:	4803      	ldr	r0, [pc, #12]	; (80046ec <_cbSendSystemDesc+0x18>)
 80046e0:	f002 f90c 	bl	80068fc <SEGGER_SYSVIEW_SendSysDesc>
}
 80046e4:	bf00      	nop
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	080070b8 	.word	0x080070b8
 80046ec:	080070f4 	.word	0x080070f4

080046f0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <SEGGER_SYSVIEW_Conf+0x20>)
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	4b05      	ldr	r3, [pc, #20]	; (8004710 <SEGGER_SYSVIEW_Conf+0x20>)
 80046fa:	6819      	ldr	r1, [r3, #0]
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <SEGGER_SYSVIEW_Conf+0x24>)
 80046fe:	4a06      	ldr	r2, [pc, #24]	; (8004718 <SEGGER_SYSVIEW_Conf+0x28>)
 8004700:	f001 fc78 	bl	8005ff4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004704:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004708:	f001 fcb8 	bl	800607c <SEGGER_SYSVIEW_SetRAMBase>
}
 800470c:	bf00      	nop
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000000 	.word	0x20000000
 8004714:	080046d5 	.word	0x080046d5
 8004718:	08007190 	.word	0x08007190

0800471c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800471c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800471e:	b085      	sub	sp, #20
 8004720:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e033      	b.n	8004790 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004728:	491e      	ldr	r1, [pc, #120]	; (80047a4 <_cbSendTaskList+0x88>)
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	491a      	ldr	r1, [pc, #104]	; (80047a4 <_cbSendTaskList+0x88>)
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	3304      	adds	r3, #4
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	4c16      	ldr	r4, [pc, #88]	; (80047a4 <_cbSendTaskList+0x88>)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4423      	add	r3, r4
 8004758:	3308      	adds	r3, #8
 800475a:	681c      	ldr	r4, [r3, #0]
 800475c:	4d11      	ldr	r5, [pc, #68]	; (80047a4 <_cbSendTaskList+0x88>)
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	442b      	add	r3, r5
 800476a:	330c      	adds	r3, #12
 800476c:	681d      	ldr	r5, [r3, #0]
 800476e:	4e0d      	ldr	r6, [pc, #52]	; (80047a4 <_cbSendTaskList+0x88>)
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4433      	add	r3, r6
 800477c:	3310      	adds	r3, #16
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	462b      	mov	r3, r5
 8004784:	4622      	mov	r2, r4
 8004786:	f000 f8bd 	bl	8004904 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3301      	adds	r3, #1
 800478e:	607b      	str	r3, [r7, #4]
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <_cbSendTaskList+0x8c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d3c6      	bcc.n	8004728 <_cbSendTaskList+0xc>
  }
}
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047a4:	20012e28 	.word	0x20012e28
 80047a8:	20012ec8 	.word	0x20012ec8

080047ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80047ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80047b4:	f7fe fbb2 	bl	8002f1c <xTaskGetTickCountFromISR>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2200      	movs	r2, #0
 80047bc:	469a      	mov	sl, r3
 80047be:	4693      	mov	fp, r2
 80047c0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	f04f 0a00 	mov.w	sl, #0
 80047d0:	f04f 0b00 	mov.w	fp, #0
 80047d4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047d8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047dc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047e0:	4652      	mov	r2, sl
 80047e2:	465b      	mov	r3, fp
 80047e4:	1a14      	subs	r4, r2, r0
 80047e6:	eb63 0501 	sbc.w	r5, r3, r1
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	00ab      	lsls	r3, r5, #2
 80047f4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047f8:	00a2      	lsls	r2, r4, #2
 80047fa:	4614      	mov	r4, r2
 80047fc:	461d      	mov	r5, r3
 80047fe:	eb14 0800 	adds.w	r8, r4, r0
 8004802:	eb45 0901 	adc.w	r9, r5, r1
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800481a:	4690      	mov	r8, r2
 800481c:	4699      	mov	r9, r3
 800481e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004822:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004826:	4610      	mov	r0, r2
 8004828:	4619      	mov	r1, r3
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004834 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004842:	2205      	movs	r2, #5
 8004844:	492b      	ldr	r1, [pc, #172]	; (80048f4 <SYSVIEW_AddTask+0xc0>)
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	f002 fbc2 	bl	8006fd0 <memcmp>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d04b      	beq.n	80048ea <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004852:	4b29      	ldr	r3, [pc, #164]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b07      	cmp	r3, #7
 8004858:	d903      	bls.n	8004862 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800485a:	4828      	ldr	r0, [pc, #160]	; (80048fc <SYSVIEW_AddTask+0xc8>)
 800485c:	f002 fb0a 	bl	8006e74 <SEGGER_SYSVIEW_Warn>
    return;
 8004860:	e044      	b.n	80048ec <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004862:	4b25      	ldr	r3, [pc, #148]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4926      	ldr	r1, [pc, #152]	; (8004900 <SYSVIEW_AddTask+0xcc>)
 8004868:	4613      	mov	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004876:	4b20      	ldr	r3, [pc, #128]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4921      	ldr	r1, [pc, #132]	; (8004900 <SYSVIEW_AddTask+0xcc>)
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	3304      	adds	r3, #4
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800488c:	4b1a      	ldr	r3, [pc, #104]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	491b      	ldr	r1, [pc, #108]	; (8004900 <SYSVIEW_AddTask+0xcc>)
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	440b      	add	r3, r1
 800489c:	3308      	adds	r3, #8
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	4916      	ldr	r1, [pc, #88]	; (8004900 <SYSVIEW_AddTask+0xcc>)
 80048a8:	4613      	mov	r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	330c      	adds	r3, #12
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80048b8:	4b0f      	ldr	r3, [pc, #60]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	4910      	ldr	r1, [pc, #64]	; (8004900 <SYSVIEW_AddTask+0xcc>)
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3310      	adds	r3, #16
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	3301      	adds	r3, #1
 80048d4:	4a08      	ldr	r2, [pc, #32]	; (80048f8 <SYSVIEW_AddTask+0xc4>)
 80048d6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f80e 	bl	8004904 <SYSVIEW_SendTaskInfo>
 80048e8:	e000      	b.n	80048ec <SYSVIEW_AddTask+0xb8>
    return;
 80048ea:	bf00      	nop

}
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	08007104 	.word	0x08007104
 80048f8:	20012ec8 	.word	0x20012ec8
 80048fc:	0800710c 	.word	0x0800710c
 8004900:	20012e28 	.word	0x20012e28

08004904 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004912:	f107 0314 	add.w	r3, r7, #20
 8004916:	2214      	movs	r2, #20
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f002 fb76 	bl	800700c <memset>
  TaskInfo.TaskID     = TaskID;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	4618      	mov	r0, r3
 800493a:	f001 fee7 	bl	800670c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800493e:	bf00      	nop
 8004940:	3728      	adds	r7, #40	; 0x28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
	...

08004948 <__NVIC_EnableIRQ>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	4603      	mov	r3, r0
 8004950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db0b      	blt.n	8004972 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4907      	ldr	r1, [pc, #28]	; (8004980 <__NVIC_EnableIRQ+0x38>)
 8004962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2001      	movs	r0, #1
 800496a:	fa00 f202 	lsl.w	r2, r0, r2
 800496e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000e100 	.word	0xe000e100

08004984 <__NVIC_SetPriority>:
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	4603      	mov	r3, r0
 800498c:	6039      	str	r1, [r7, #0]
 800498e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004994:	2b00      	cmp	r3, #0
 8004996:	db0a      	blt.n	80049ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	b2da      	uxtb	r2, r3
 800499c:	490c      	ldr	r1, [pc, #48]	; (80049d0 <__NVIC_SetPriority+0x4c>)
 800499e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a2:	0112      	lsls	r2, r2, #4
 80049a4:	b2d2      	uxtb	r2, r2
 80049a6:	440b      	add	r3, r1
 80049a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049ac:	e00a      	b.n	80049c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	b2da      	uxtb	r2, r3
 80049b2:	4908      	ldr	r1, [pc, #32]	; (80049d4 <__NVIC_SetPriority+0x50>)
 80049b4:	79fb      	ldrb	r3, [r7, #7]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	3b04      	subs	r3, #4
 80049bc:	0112      	lsls	r2, r2, #4
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	440b      	add	r3, r1
 80049c2:	761a      	strb	r2, [r3, #24]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	e000e100 	.word	0xe000e100
 80049d4:	e000ed00 	.word	0xe000ed00

080049d8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80049de:	f002 faa5 	bl	8006f2c <SEGGER_SYSVIEW_IsStarted>
 80049e2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80049ea:	f001 fd13 	bl	8006414 <SEGGER_SYSVIEW_Start>
  }
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
	...

080049f8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	4603      	mov	r3, r0
 8004a00:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004a02:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <_cbOnUARTRx+0x3c>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b03      	cmp	r3, #3
 8004a08:	d806      	bhi.n	8004a18 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004a0a:	4b0a      	ldr	r3, [pc, #40]	; (8004a34 <_cbOnUARTRx+0x3c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <_cbOnUARTRx+0x3c>)
 8004a14:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004a16:	e009      	b.n	8004a2c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004a18:	f7ff ffde 	bl	80049d8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <_cbOnUARTRx+0x3c>)
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4618      	mov	r0, r3
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	2201      	movs	r2, #1
 8004a26:	4619      	mov	r1, r3
 8004a28:	f000 fb9c 	bl	8005164 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a2c:	bf00      	nop
}
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000014 	.word	0x20000014

08004a38 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <_cbOnUARTTx+0x5c>)
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d80f      	bhi.n	8004a68 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <_cbOnUARTTx+0x5c>)
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <_cbOnUARTTx+0x60>)
 8004a50:	5c9a      	ldrb	r2, [r3, r2]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <_cbOnUARTTx+0x5c>)
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <_cbOnUARTTx+0x5c>)
 8004a60:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004a66:	e00f      	b.n	8004a88 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <_cbOnUARTTx+0x5c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fa1b 	bl	8004eac <SEGGER_RTT_ReadUpBufferNoLock>
 8004a76:	4603      	mov	r3, r0
 8004a78:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	da02      	bge.n	8004a86 <_cbOnUARTTx+0x4e>
    r = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
 8004a84:	e000      	b.n	8004a88 <_cbOnUARTTx+0x50>
  }
Done:
 8004a86:	bf00      	nop
  return r;
 8004a88:	68fb      	ldr	r3, [r7, #12]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000014 	.word	0x20000014
 8004a98:	08007198 	.word	0x08007198

08004a9c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <SEGGER_UART_init+0x1c>)
 8004aa6:	4905      	ldr	r1, [pc, #20]	; (8004abc <SEGGER_UART_init+0x20>)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f863 	bl	8004b74 <HIF_UART_Init>
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	080049f9 	.word	0x080049f9
 8004abc:	08004a39 	.word	0x08004a39

08004ac0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <USART2_IRQHandler+0x80>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <USART2_IRQHandler+0x84>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 030b 	and.w	r3, r3, #11
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d108      	bne.n	8004afa <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <USART2_IRQHandler+0x88>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d004      	beq.n	8004afa <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004af0:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <USART2_IRQHandler+0x88>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	79fa      	ldrb	r2, [r7, #7]
 8004af6:	4610      	mov	r0, r2
 8004af8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004b04:	4b11      	ldr	r3, [pc, #68]	; (8004b4c <USART2_IRQHandler+0x8c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d015      	beq.n	8004b38 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <USART2_IRQHandler+0x8c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	1dfa      	adds	r2, r7, #7
 8004b12:	4610      	mov	r0, r2
 8004b14:	4798      	blx	r3
 8004b16:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <USART2_IRQHandler+0x90>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a0b      	ldr	r2, [pc, #44]	; (8004b50 <USART2_IRQHandler+0x90>)
 8004b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e006      	b.n	8004b3a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b2c:	4b04      	ldr	r3, [pc, #16]	; (8004b40 <USART2_IRQHandler+0x80>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b30:	79fa      	ldrb	r2, [r7, #7]
 8004b32:	4b04      	ldr	r3, [pc, #16]	; (8004b44 <USART2_IRQHandler+0x84>)
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e000      	b.n	8004b3a <USART2_IRQHandler+0x7a>
      return;
 8004b38:	bf00      	nop
    }
  }
}
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40004400 	.word	0x40004400
 8004b44:	40004404 	.word	0x40004404
 8004b48:	20012ecc 	.word	0x20012ecc
 8004b4c:	20012ed0 	.word	0x20012ed0
 8004b50:	4000440c 	.word	0x4000440c

08004b54 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b62:	6013      	str	r3, [r2, #0]
}
 8004b64:	bf00      	nop
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	4000440c 	.word	0x4000440c

08004b74 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b80:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HIF_UART_Init+0xc8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2d      	ldr	r2, [pc, #180]	; (8004c3c <HIF_UART_Init+0xc8>)
 8004b86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b8c:	4b2c      	ldr	r3, [pc, #176]	; (8004c40 <HIF_UART_Init+0xcc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2b      	ldr	r2, [pc, #172]	; (8004c40 <HIF_UART_Init+0xcc>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b98:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <HIF_UART_Init+0xd0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004bac:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004bae:	4a25      	ldr	r2, [pc, #148]	; (8004c44 <HIF_UART_Init+0xd0>)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004bb4:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HIF_UART_Init+0xd4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004bc8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004bca:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <HIF_UART_Init+0xd4>)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	; (8004c4c <HIF_UART_Init+0xd8>)
 8004bd2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004bd6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <HIF_UART_Init+0xdc>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HIF_UART_Init+0xe0>)
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004bea:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HIF_UART_Init+0xe4>)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c02:	d302      	bcc.n	8004c0a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004c04:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004c08:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <HIF_UART_Init+0xe8>)
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004c1a:	4a11      	ldr	r2, [pc, #68]	; (8004c60 <HIF_UART_Init+0xec>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004c20:	4a10      	ldr	r2, [pc, #64]	; (8004c64 <HIF_UART_Init+0xf0>)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004c26:	2106      	movs	r1, #6
 8004c28:	2026      	movs	r0, #38	; 0x26
 8004c2a:	f7ff feab 	bl	8004984 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c2e:	2026      	movs	r0, #38	; 0x26
 8004c30:	f7ff fe8a 	bl	8004948 <__NVIC_EnableIRQ>
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40023840 	.word	0x40023840
 8004c40:	40023830 	.word	0x40023830
 8004c44:	40020020 	.word	0x40020020
 8004c48:	40020000 	.word	0x40020000
 8004c4c:	4000440c 	.word	0x4000440c
 8004c50:	40004410 	.word	0x40004410
 8004c54:	40004414 	.word	0x40004414
 8004c58:	0501bd00 	.word	0x0501bd00
 8004c5c:	40004408 	.word	0x40004408
 8004c60:	20012ecc 	.word	0x20012ecc
 8004c64:	20012ed0 	.word	0x20012ed0

08004c68 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c6e:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <_DoInit+0xa0>)
 8004c70:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004c72:	22a8      	movs	r2, #168	; 0xa8
 8004c74:	2100      	movs	r1, #0
 8004c76:	6838      	ldr	r0, [r7, #0]
 8004c78:	f002 f9c8 	bl	800700c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2203      	movs	r2, #3
 8004c80:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2203      	movs	r2, #3
 8004c86:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <_DoInit+0xa4>)
 8004c8c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <_DoInit+0xa8>)
 8004c92:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c9a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	4a16      	ldr	r2, [pc, #88]	; (8004d0c <_DoInit+0xa4>)
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4a17      	ldr	r2, [pc, #92]	; (8004d14 <_DoInit+0xac>)
 8004cb8:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2210      	movs	r2, #16
 8004cbe:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cd2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	e00c      	b.n	8004cf6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f1c3 030f 	rsb	r3, r3, #15
 8004ce2:	4a0d      	ldr	r2, [pc, #52]	; (8004d18 <_DoInit+0xb0>)
 8004ce4:	5cd1      	ldrb	r1, [r2, r3]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	460a      	mov	r2, r1
 8004cee:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2b0f      	cmp	r3, #15
 8004cfa:	d9ef      	bls.n	8004cdc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cfc:	f3bf 8f5f 	dmb	sy
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20012ed4 	.word	0x20012ed4
 8004d0c:	0800715c 	.word	0x0800715c
 8004d10:	20012f7c 	.word	0x20012f7c
 8004d14:	2001337c 	.word	0x2001337c
 8004d18:	0800719c 	.word	0x0800719c

08004d1c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	; 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d905      	bls.n	8004d4c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	3b01      	subs	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	e007      	b.n	8004d5c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	69b9      	ldr	r1, [r7, #24]
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	1acb      	subs	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	4293      	cmp	r3, r2
 8004d68:	bf28      	it	cs
 8004d6a:	4613      	movcs	r3, r2
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bf28      	it	cs
 8004d76:	4613      	movcs	r3, r2
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	6978      	ldr	r0, [r7, #20]
 8004d8a:	f002 f931 	bl	8006ff0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d92:	4413      	add	r3, r2
 8004d94:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	4413      	add	r3, r2
 8004d9c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	4413      	add	r3, r2
 8004dac:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d101      	bne.n	8004dbc <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dbc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	69fa      	ldr	r2, [r7, #28]
 8004dc4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1b2      	bne.n	8004d32 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004dcc:	6a3b      	ldr	r3, [r7, #32]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	; 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}

08004dd6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004dd6:	b580      	push	{r7, lr}
 8004dd8:	b088      	sub	sp, #32
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	60f8      	str	r0, [r7, #12]
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d911      	bls.n	8004e1e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	6938      	ldr	r0, [r7, #16]
 8004e0a:	f002 f8f1 	bl	8006ff0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e0e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	441a      	add	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004e1c:	e01f      	b.n	8004e5e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	6938      	ldr	r0, [r7, #16]
 8004e32:	f002 f8dd 	bl	8006ff0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	4413      	add	r3, r2
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6938      	ldr	r0, [r7, #16]
 8004e50:	f002 f8ce 	bl	8006ff0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e54:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	60da      	str	r2, [r3, #12]
}
 8004e5e:	bf00      	nop
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d808      	bhi.n	8004e94 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad2      	subs	r2, r2, r3
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e004      	b.n	8004e9e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e9e:	697b      	ldr	r3, [r7, #20]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	371c      	adds	r7, #28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr

08004eac <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b08c      	sub	sp, #48	; 0x30
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004eba:	623b      	str	r3, [r7, #32]
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b53      	cmp	r3, #83	; 0x53
 8004ec4:	d001      	beq.n	8004eca <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004ec6:	f7ff fecf 	bl	8004c68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	4613      	mov	r3, r2
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4a37      	ldr	r2, [pc, #220]	; (8004fb4 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ed8:	4413      	add	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004eec:	2300      	movs	r3, #0
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d92b      	bls.n	8004f50 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	bf28      	it	cs
 8004f0a:	4613      	movcs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	4413      	add	r3, r2
 8004f16:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	6939      	ldr	r1, [r7, #16]
 8004f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f1e:	f002 f867 	bl	8006ff0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	4413      	add	r3, r2
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4413      	add	r3, r2
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	4413      	add	r3, r2
 8004f40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d101      	bne.n	8004f50 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	bf28      	it	cs
 8004f60:	4613      	movcs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d019      	beq.n	8004f9e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f70:	4413      	add	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	6939      	ldr	r1, [r7, #16]
 8004f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f7a:	f002 f839 	bl	8006ff0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	4413      	add	r3, r2
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3730      	adds	r7, #48	; 0x30
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	20012ed4 	.word	0x20012ed4

08004fb8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08c      	sub	sp, #48	; 0x30
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fc4:	4b3e      	ldr	r3, [pc, #248]	; (80050c0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fc6:	623b      	str	r3, [r7, #32]
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b53      	cmp	r3, #83	; 0x53
 8004fd0:	d001      	beq.n	8004fd6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fd2:	f7ff fe49 	bl	8004c68 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	3360      	adds	r3, #96	; 0x60
 8004fe2:	4a37      	ldr	r2, [pc, #220]	; (80050c0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	429a      	cmp	r2, r3
 8005002:	d92b      	bls.n	800505c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4293      	cmp	r3, r2
 8005014:	bf28      	it	cs
 8005016:	4613      	movcs	r3, r2
 8005018:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	4413      	add	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502a:	f001 ffe1 	bl	8006ff0 <memcpy>
    NumBytesRead += NumBytesRem;
 800502e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	4413      	add	r3, r2
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005046:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005054:	429a      	cmp	r2, r3
 8005056:	d101      	bne.n	800505c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005058:	2300      	movs	r3, #0
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4293      	cmp	r3, r2
 800506a:	bf28      	it	cs
 800506c:	4613      	movcs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d019      	beq.n	80050aa <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507c:	4413      	add	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	6939      	ldr	r1, [r7, #16]
 8005084:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005086:	f001 ffb3 	bl	8006ff0 <memcpy>
    NumBytesRead += NumBytesRem;
 800508a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80050a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3730      	adds	r7, #48	; 0x30
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20012ed4 	.word	0x20012ed4

080050c4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b088      	sub	sp, #32
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4613      	mov	r3, r2
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	4413      	add	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	3360      	adds	r3, #96	; 0x60
 80050e0:	4a1f      	ldr	r2, [pc, #124]	; (8005160 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050e2:	4413      	add	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d029      	beq.n	8005142 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d82e      	bhi.n	8005150 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d013      	beq.n	8005122 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80050fa:	e029      	b.n	8005150 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050fc:	6978      	ldr	r0, [r7, #20]
 80050fe:	f7ff feb2 	bl	8004e66 <_GetAvailWriteSpace>
 8005102:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	d202      	bcs.n	8005112 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005110:	e021      	b.n	8005156 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff fe5b 	bl	8004dd6 <_WriteNoCheck>
    break;
 8005120:	e019      	b.n	8005156 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005122:	6978      	ldr	r0, [r7, #20]
 8005124:	f7ff fe9f 	bl	8004e66 <_GetAvailWriteSpace>
 8005128:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4293      	cmp	r3, r2
 8005130:	bf28      	it	cs
 8005132:	4613      	movcs	r3, r2
 8005134:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005136:	69fa      	ldr	r2, [r7, #28]
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff fe4b 	bl	8004dd6 <_WriteNoCheck>
    break;
 8005140:	e009      	b.n	8005156 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7ff fde8 	bl	8004d1c <_WriteBlocking>
 800514c:	61f8      	str	r0, [r7, #28]
    break;
 800514e:	e002      	b.n	8005156 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
    break;
 8005154:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20012ed4 	.word	0x20012ed4

08005164 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b53      	cmp	r3, #83	; 0x53
 800517c:	d001      	beq.n	8005182 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800517e:	f7ff fd73 	bl	8004c68 <_DoInit>
  SEGGER_RTT_LOCK();
 8005182:	f3ef 8311 	mrs	r3, BASEPRI
 8005186:	f04f 0120 	mov.w	r1, #32
 800518a:	f381 8811 	msr	BASEPRI, r1
 800518e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f7ff ff95 	bl	80050c4 <SEGGER_RTT_WriteDownBufferNoLock>
 800519a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80051a2:	697b      	ldr	r3, [r7, #20]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3720      	adds	r7, #32
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20012ed4 	.word	0x20012ed4

080051b0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051be:	4b3d      	ldr	r3, [pc, #244]	; (80052b4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b53      	cmp	r3, #83	; 0x53
 80051ca:	d001      	beq.n	80051d0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051cc:	f7ff fd4c 	bl	8004c68 <_DoInit>
  SEGGER_RTT_LOCK();
 80051d0:	f3ef 8311 	mrs	r3, BASEPRI
 80051d4:	f04f 0120 	mov.w	r1, #32
 80051d8:	f381 8811 	msr	BASEPRI, r1
 80051dc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051de:	4b35      	ldr	r3, [pc, #212]	; (80052b4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051e0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	4613      	mov	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	4413      	add	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	440b      	add	r3, r1
 80051f6:	3304      	adds	r3, #4
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3301      	adds	r3, #1
 8005202:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	429a      	cmp	r2, r3
 800520c:	dbeb      	blt.n	80051e6 <SEGGER_RTT_AllocUpBuffer+0x36>
 800520e:	e000      	b.n	8005212 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005210:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	429a      	cmp	r2, r3
 800521a:	da3f      	bge.n	800529c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800521c:	6939      	ldr	r1, [r7, #16]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	4613      	mov	r3, r2
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	4413      	add	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	440b      	add	r3, r1
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005230:	6939      	ldr	r1, [r7, #16]
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	4613      	mov	r3, r2
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	440b      	add	r3, r1
 8005240:	3304      	adds	r3, #4
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005246:	6939      	ldr	r1, [r7, #16]
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	4613      	mov	r3, r2
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	4413      	add	r3, r2
 8005250:	00db      	lsls	r3, r3, #3
 8005252:	440b      	add	r3, r1
 8005254:	3320      	adds	r3, #32
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800525a:	6939      	ldr	r1, [r7, #16]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	440b      	add	r3, r1
 8005268:	3328      	adds	r3, #40	; 0x28
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	440b      	add	r3, r1
 800527c:	3324      	adds	r3, #36	; 0x24
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005282:	6939      	ldr	r1, [r7, #16]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	440b      	add	r3, r1
 8005290:	332c      	adds	r3, #44	; 0x2c
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005296:	f3bf 8f5f 	dmb	sy
 800529a:	e002      	b.n	80052a2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800529c:	f04f 33ff 	mov.w	r3, #4294967295
 80052a0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052a8:	69fb      	ldr	r3, [r7, #28]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20012ed4 	.word	0x20012ed4

080052b8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	; 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80052c6:	4b21      	ldr	r3, [pc, #132]	; (800534c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b53      	cmp	r3, #83	; 0x53
 80052d2:	d001      	beq.n	80052d8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052d4:	f7ff fcc8 	bl	8004c68 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052d8:	4b1c      	ldr	r3, [pc, #112]	; (800534c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80052da:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d82c      	bhi.n	800533c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80052e2:	f3ef 8311 	mrs	r3, BASEPRI
 80052e6:	f04f 0120 	mov.w	r1, #32
 80052ea:	f381 8811 	msr	BASEPRI, r1
 80052ee:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4613      	mov	r3, r2
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	4413      	add	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	3360      	adds	r3, #96	; 0x60
 80052fc:	69fa      	ldr	r2, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00e      	beq.n	8005326 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800532a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800532c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	e002      	b.n	8005342 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005344:	4618      	mov	r0, r3
 8005346:	3728      	adds	r7, #40	; 0x28
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20012ed4 	.word	0x20012ed4

08005350 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005350:	b480      	push	{r7}
 8005352:	b087      	sub	sp, #28
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	60fa      	str	r2, [r7, #12]
 8005366:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d90a      	bls.n	8005384 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005372:	e007      	b.n	8005384 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	1c53      	adds	r3, r2, #1
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	1c59      	adds	r1, r3, #1
 800537e:	60f9      	str	r1, [r7, #12]
 8005380:	7812      	ldrb	r2, [r2, #0]
 8005382:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	1e5a      	subs	r2, r3, #1
 8005388:	607a      	str	r2, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <_EncodeStr+0x46>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1ee      	bne.n	8005374 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	b2da      	uxtb	r2, r3
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80053a2:	68fb      	ldr	r3, [r7, #12]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3307      	adds	r3, #7
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053ce:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <_HandleIncomingPacket+0xdc>)
 80053d0:	7e1b      	ldrb	r3, [r3, #24]
 80053d2:	4618      	mov	r0, r3
 80053d4:	1cfb      	adds	r3, r7, #3
 80053d6:	2201      	movs	r2, #1
 80053d8:	4619      	mov	r1, r3
 80053da:	f7ff fded 	bl	8004fb8 <SEGGER_RTT_ReadNoLock>
 80053de:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d052      	beq.n	800548c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d031      	beq.n	8005450 <_HandleIncomingPacket+0x88>
 80053ec:	2b80      	cmp	r3, #128	; 0x80
 80053ee:	dc40      	bgt.n	8005472 <_HandleIncomingPacket+0xaa>
 80053f0:	2b07      	cmp	r3, #7
 80053f2:	dc15      	bgt.n	8005420 <_HandleIncomingPacket+0x58>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	dd3c      	ble.n	8005472 <_HandleIncomingPacket+0xaa>
 80053f8:	3b01      	subs	r3, #1
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d839      	bhi.n	8005472 <_HandleIncomingPacket+0xaa>
 80053fe:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <_HandleIncomingPacket+0x3c>)
 8005400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005404:	08005427 	.word	0x08005427
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005433 	.word	0x08005433
 8005410:	08005439 	.word	0x08005439
 8005414:	0800543f 	.word	0x0800543f
 8005418:	08005445 	.word	0x08005445
 800541c:	0800544b 	.word	0x0800544b
 8005420:	2b7f      	cmp	r3, #127	; 0x7f
 8005422:	d035      	beq.n	8005490 <_HandleIncomingPacket+0xc8>
 8005424:	e025      	b.n	8005472 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005426:	f000 fff5 	bl	8006414 <SEGGER_SYSVIEW_Start>
      break;
 800542a:	e036      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800542c:	f001 f8ae 	bl	800658c <SEGGER_SYSVIEW_Stop>
      break;
 8005430:	e033      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005432:	f001 fa87 	bl	8006944 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005436:	e030      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005438:	f001 fa4c 	bl	80068d4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800543c:	e02d      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800543e:	f001 f8cb 	bl	80065d8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005442:	e02a      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005444:	f001 fcc4 	bl	8006dd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005448:	e027      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800544a:	f001 fca3 	bl	8006d94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800544e:	e024      	b.n	800549a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <_HandleIncomingPacket+0xdc>)
 8005452:	7e1b      	ldrb	r3, [r3, #24]
 8005454:	4618      	mov	r0, r3
 8005456:	1cfb      	adds	r3, r7, #3
 8005458:	2201      	movs	r2, #1
 800545a:	4619      	mov	r1, r3
 800545c:	f7ff fdac 	bl	8004fb8 <SEGGER_RTT_ReadNoLock>
 8005460:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d015      	beq.n	8005494 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	4618      	mov	r0, r3
 800546c:	f001 fc08 	bl	8006c80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005470:	e010      	b.n	8005494 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	b25b      	sxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	da0e      	bge.n	8005498 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <_HandleIncomingPacket+0xdc>)
 800547c:	7e1b      	ldrb	r3, [r3, #24]
 800547e:	4618      	mov	r0, r3
 8005480:	1cfb      	adds	r3, r7, #3
 8005482:	2201      	movs	r2, #1
 8005484:	4619      	mov	r1, r3
 8005486:	f7ff fd97 	bl	8004fb8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800548a:	e005      	b.n	8005498 <_HandleIncomingPacket+0xd0>
    }
  }
 800548c:	bf00      	nop
 800548e:	e004      	b.n	800549a <_HandleIncomingPacket+0xd2>
      break;
 8005490:	bf00      	nop
 8005492:	e002      	b.n	800549a <_HandleIncomingPacket+0xd2>
      break;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <_HandleIncomingPacket+0xd2>
      break;
 8005498:	bf00      	nop
}
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20014394 	.word	0x20014394

080054a8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	; 0x30
 80054ac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80054ae:	2301      	movs	r3, #1
 80054b0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	3301      	adds	r3, #1
 80054b6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054bc:	4b32      	ldr	r3, [pc, #200]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 80054be:	695b      	ldr	r3, [r3, #20]
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c2:	e00b      	b.n	80054dc <_TrySendOverflowPacket+0x34>
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	09db      	lsrs	r3, r3, #7
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	2b7f      	cmp	r3, #127	; 0x7f
 80054e0:	d8f0      	bhi.n	80054c4 <_TrySendOverflowPacket+0x1c>
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80054f2:	4b26      	ldr	r3, [pc, #152]	; (800558c <_TrySendOverflowPacket+0xe4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80054f8:	4b23      	ldr	r3, [pc, #140]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	627b      	str	r3, [r7, #36]	; 0x24
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	623b      	str	r3, [r7, #32]
 800550a:	e00b      	b.n	8005524 <_TrySendOverflowPacket+0x7c>
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	b2da      	uxtb	r2, r3
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	1c59      	adds	r1, r3, #1
 8005514:	6279      	str	r1, [r7, #36]	; 0x24
 8005516:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	09db      	lsrs	r3, r3, #7
 8005522:	623b      	str	r3, [r7, #32]
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	2b7f      	cmp	r3, #127	; 0x7f
 8005528:	d8f0      	bhi.n	800550c <_TrySendOverflowPacket+0x64>
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	627a      	str	r2, [r7, #36]	; 0x24
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800553a:	4b13      	ldr	r3, [pc, #76]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	4618      	mov	r0, r3
 8005540:	1d3b      	adds	r3, r7, #4
 8005542:	69fa      	ldr	r2, [r7, #28]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	461a      	mov	r2, r3
 8005548:	1d3b      	adds	r3, r7, #4
 800554a:	4619      	mov	r1, r3
 800554c:	f7fa fe40 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005550:	4603      	mov	r3, r0
 8005552:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005554:	f7ff fafe 	bl	8004b54 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d009      	beq.n	8005572 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	3b01      	subs	r3, #1
 800556a:	b2da      	uxtb	r2, r3
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e004      	b.n	800557c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005572:	4b05      	ldr	r3, [pc, #20]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	3301      	adds	r3, #1
 8005578:	4a03      	ldr	r2, [pc, #12]	; (8005588 <_TrySendOverflowPacket+0xe0>)
 800557a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800557c:	693b      	ldr	r3, [r7, #16]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3730      	adds	r7, #48	; 0x30
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20014394 	.word	0x20014394
 800558c:	e0001004 	.word	0xe0001004

08005590 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800559c:	4b96      	ldr	r3, [pc, #600]	; (80057f8 <_SendPacket+0x268>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d010      	beq.n	80055c6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80055a4:	4b94      	ldr	r3, [pc, #592]	; (80057f8 <_SendPacket+0x268>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8130 	beq.w	800580e <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80055ae:	4b92      	ldr	r3, [pc, #584]	; (80057f8 <_SendPacket+0x268>)
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d109      	bne.n	80055ca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80055b6:	f7ff ff77 	bl	80054a8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80055ba:	4b8f      	ldr	r3, [pc, #572]	; (80057f8 <_SendPacket+0x268>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	f040 8127 	bne.w	8005812 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80055c4:	e001      	b.n	80055ca <_SendPacket+0x3a>
    goto Send;
 80055c6:	bf00      	nop
 80055c8:	e000      	b.n	80055cc <_SendPacket+0x3c>
Send:
 80055ca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b1f      	cmp	r3, #31
 80055d0:	d809      	bhi.n	80055e6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80055d2:	4b89      	ldr	r3, [pc, #548]	; (80057f8 <_SendPacket+0x268>)
 80055d4:	69da      	ldr	r2, [r3, #28]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f040 8118 	bne.w	8005816 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b17      	cmp	r3, #23
 80055ea:	d807      	bhi.n	80055fc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3b01      	subs	r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	e0c4      	b.n	8005786 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	2b7f      	cmp	r3, #127	; 0x7f
 8005608:	d912      	bls.n	8005630 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	09da      	lsrs	r2, r3, #7
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3b01      	subs	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	3a01      	subs	r2, #1
 8005622:	60fa      	str	r2, [r7, #12]
 8005624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
 800562e:	e006      	b.n	800563e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	3b01      	subs	r3, #1
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b7e      	cmp	r3, #126	; 0x7e
 8005642:	d807      	bhi.n	8005654 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3b01      	subs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	e098      	b.n	8005786 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800565a:	d212      	bcs.n	8005682 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	09da      	lsrs	r2, r3, #7
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3b01      	subs	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	3a01      	subs	r2, #1
 8005674:	60fa      	str	r2, [r7, #12]
 8005676:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800567a:	b2da      	uxtb	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e081      	b.n	8005786 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005688:	d21d      	bcs.n	80056c6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	0b9a      	lsrs	r2, r3, #14
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3b01      	subs	r3, #1
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	09db      	lsrs	r3, r3, #7
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	3a01      	subs	r2, #1
 80056a4:	60fa      	str	r2, [r7, #12]
 80056a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	3a01      	subs	r2, #1
 80056b8:	60fa      	str	r2, [r7, #12]
 80056ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	701a      	strb	r2, [r3, #0]
 80056c4:	e05f      	b.n	8005786 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056cc:	d228      	bcs.n	8005720 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0d5a      	lsrs	r2, r3, #21
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	0b9b      	lsrs	r3, r3, #14
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	3a01      	subs	r2, #1
 80056e8:	60fa      	str	r2, [r7, #12]
 80056ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	09db      	lsrs	r3, r3, #7
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	3a01      	subs	r2, #1
 80056fe:	60fa      	str	r2, [r7, #12]
 8005700:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	3a01      	subs	r2, #1
 8005712:	60fa      	str	r2, [r7, #12]
 8005714:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e032      	b.n	8005786 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0f1a      	lsrs	r2, r3, #28
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	0d5b      	lsrs	r3, r3, #21
 8005734:	b2db      	uxtb	r3, r3
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	3a01      	subs	r2, #1
 800573a:	60fa      	str	r2, [r7, #12]
 800573c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005740:	b2da      	uxtb	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	0b9b      	lsrs	r3, r3, #14
 800574a:	b2db      	uxtb	r3, r3
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	3a01      	subs	r2, #1
 8005750:	60fa      	str	r2, [r7, #12]
 8005752:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005756:	b2da      	uxtb	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	09db      	lsrs	r3, r3, #7
 8005760:	b2db      	uxtb	r3, r3
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	3a01      	subs	r2, #1
 8005766:	60fa      	str	r2, [r7, #12]
 8005768:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800576c:	b2da      	uxtb	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	3a01      	subs	r2, #1
 800577a:	60fa      	str	r2, [r7, #12]
 800577c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005780:	b2da      	uxtb	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005786:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <_SendPacket+0x26c>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <_SendPacket+0x268>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	e00b      	b.n	80057b8 <_SendPacket+0x228>
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a6:	1c59      	adds	r1, r3, #1
 80057a8:	6279      	str	r1, [r7, #36]	; 0x24
 80057aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	09db      	lsrs	r3, r3, #7
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	6a3b      	ldr	r3, [r7, #32]
 80057ba:	2b7f      	cmp	r3, #127	; 0x7f
 80057bc:	d8f0      	bhi.n	80057a0 <_SendPacket+0x210>
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	627a      	str	r2, [r7, #36]	; 0x24
 80057c4:	6a3a      	ldr	r2, [r7, #32]
 80057c6:	b2d2      	uxtb	r2, r2
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <_SendPacket+0x268>)
 80057d0:	785b      	ldrb	r3, [r3, #1]
 80057d2:	4618      	mov	r0, r3
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	f7fa fcf7 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057e2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80057e4:	f7ff f9b6 	bl	8004b54 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057ee:	4a02      	ldr	r2, [pc, #8]	; (80057f8 <_SendPacket+0x268>)
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	60d3      	str	r3, [r2, #12]
 80057f4:	e010      	b.n	8005818 <_SendPacket+0x288>
 80057f6:	bf00      	nop
 80057f8:	20014394 	.word	0x20014394
 80057fc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005800:	4b19      	ldr	r3, [pc, #100]	; (8005868 <_SendPacket+0x2d8>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	3301      	adds	r3, #1
 8005806:	b2da      	uxtb	r2, r3
 8005808:	4b17      	ldr	r3, [pc, #92]	; (8005868 <_SendPacket+0x2d8>)
 800580a:	701a      	strb	r2, [r3, #0]
 800580c:	e004      	b.n	8005818 <_SendPacket+0x288>
    goto SendDone;
 800580e:	bf00      	nop
 8005810:	e002      	b.n	8005818 <_SendPacket+0x288>
      goto SendDone;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <_SendPacket+0x288>
      goto SendDone;
 8005816:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <_SendPacket+0x2d8>)
 800581a:	7e1b      	ldrb	r3, [r3, #24]
 800581c:	4619      	mov	r1, r3
 800581e:	4a13      	ldr	r2, [pc, #76]	; (800586c <_SendPacket+0x2dc>)
 8005820:	460b      	mov	r3, r1
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	440b      	add	r3, r1
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	4413      	add	r3, r2
 800582a:	336c      	adds	r3, #108	; 0x6c
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	4b0e      	ldr	r3, [pc, #56]	; (8005868 <_SendPacket+0x2d8>)
 8005830:	7e1b      	ldrb	r3, [r3, #24]
 8005832:	4618      	mov	r0, r3
 8005834:	490d      	ldr	r1, [pc, #52]	; (800586c <_SendPacket+0x2dc>)
 8005836:	4603      	mov	r3, r0
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4403      	add	r3, r0
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	440b      	add	r3, r1
 8005840:	3370      	adds	r3, #112	; 0x70
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d00b      	beq.n	8005860 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005848:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_SendPacket+0x2d8>)
 800584a:	789b      	ldrb	r3, [r3, #2]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <_SendPacket+0x2d8>)
 8005852:	2201      	movs	r2, #1
 8005854:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005856:	f7ff fdb7 	bl	80053c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800585a:	4b03      	ldr	r3, [pc, #12]	; (8005868 <_SendPacket+0x2d8>)
 800585c:	2200      	movs	r2, #0
 800585e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005860:	bf00      	nop
 8005862:	3728      	adds	r7, #40	; 0x28
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20014394 	.word	0x20014394
 800586c:	20012ed4 	.word	0x20012ed4

08005870 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b08a      	sub	sp, #40	; 0x28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	3301      	adds	r3, #1
 8005886:	2b80      	cmp	r3, #128	; 0x80
 8005888:	d80a      	bhi.n	80058a0 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	1c59      	adds	r1, r3, #1
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6051      	str	r1, [r2, #4]
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	1c5a      	adds	r2, r3, #1
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d15a      	bne.n	800595e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	623b      	str	r3, [r7, #32]
 80058c8:	e00b      	b.n	80058e2 <_StoreChar+0x72>
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1c59      	adds	r1, r3, #1
 80058d2:	6279      	str	r1, [r7, #36]	; 0x24
 80058d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	09db      	lsrs	r3, r3, #7
 80058e0:	623b      	str	r3, [r7, #32]
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	2b7f      	cmp	r3, #127	; 0x7f
 80058e6:	d8f0      	bhi.n	80058ca <_StoreChar+0x5a>
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	627a      	str	r2, [r7, #36]	; 0x24
 80058ee:	6a3a      	ldr	r2, [r7, #32]
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	61fb      	str	r3, [r7, #28]
 80058fc:	2300      	movs	r3, #0
 80058fe:	61bb      	str	r3, [r7, #24]
 8005900:	e00b      	b.n	800591a <_StoreChar+0xaa>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	b2da      	uxtb	r2, r3
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	1c59      	adds	r1, r3, #1
 800590a:	61f9      	str	r1, [r7, #28]
 800590c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	09db      	lsrs	r3, r3, #7
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	69bb      	ldr	r3, [r7, #24]
 800591c:	2b7f      	cmp	r3, #127	; 0x7f
 800591e:	d8f0      	bhi.n	8005902 <_StoreChar+0x92>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	61fa      	str	r2, [r7, #28]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	221a      	movs	r2, #26
 8005936:	6939      	ldr	r1, [r7, #16]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff fe29 	bl	8005590 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff fd34 	bl	80053b0 <_PreparePacket>
 8005948:	4602      	mov	r2, r0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	1c5a      	adds	r2, r3, #1
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
  }
}
 800595e:	bf00      	nop
 8005960:	3728      	adds	r7, #40	; 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b08a      	sub	sp, #40	; 0x28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800597a:	2301      	movs	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800597e:	2301      	movs	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005982:	e007      	b.n	8005994 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	623b      	str	r3, [r7, #32]
    Width++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005994:	6a3a      	ldr	r2, [r7, #32]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d2f3      	bcs.n	8005984 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d901      	bls.n	80059a8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80059a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11f      	bne.n	80059f2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01c      	beq.n	80059f2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <_PrintUnsigned+0x66>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d102      	bne.n	80059ce <_PrintUnsigned+0x66>
        c = '0';
 80059c8:	2330      	movs	r3, #48	; 0x30
 80059ca:	76fb      	strb	r3, [r7, #27]
 80059cc:	e001      	b.n	80059d2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80059ce:	2320      	movs	r3, #32
 80059d0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059d2:	e007      	b.n	80059e4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	3b01      	subs	r3, #1
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80059da:	7efb      	ldrb	r3, [r7, #27]
 80059dc:	4619      	mov	r1, r3
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f7ff ff46 	bl	8005870 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <_PrintUnsigned+0x8a>
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d3f0      	bcc.n	80059d4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d903      	bls.n	8005a00 <_PrintUnsigned+0x98>
      NumDigits--;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	3b01      	subs	r3, #1
 80059fc:	603b      	str	r3, [r7, #0]
 80059fe:	e009      	b.n	8005a14 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a08:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d200      	bcs.n	8005a14 <_PrintUnsigned+0xac>
        break;
 8005a12:	e005      	b.n	8005a20 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	fb02 f303 	mul.w	r3, r2, r3
 8005a1c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005a1e:	e7e8      	b.n	80059f2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	fb02 f303 	mul.w	r3, r2, r3
 8005a32:	68ba      	ldr	r2, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005a38:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <_PrintUnsigned+0x128>)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	4619      	mov	r1, r3
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff ff14 	bl	8005870 <_StoreChar>
    Digit /= Base;
 8005a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e3      	bne.n	8005a20 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00e      	beq.n	8005a86 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a68:	e006      	b.n	8005a78 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a70:	2120      	movs	r1, #32
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f7ff fefc 	bl	8005870 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <_PrintUnsigned+0x11e>
 8005a7e:	69fa      	ldr	r2, [r7, #28]
 8005a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d3f1      	bcc.n	8005a6a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005a86:	bf00      	nop
 8005a88:	3728      	adds	r7, #40	; 0x28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	080071bc 	.word	0x080071bc

08005a94 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	bfb8      	it	lt
 8005aa8:	425b      	neglt	r3, r3
 8005aaa:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ab0:	e007      	b.n	8005ac2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005aba:	613b      	str	r3, [r7, #16]
    Width++;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	daf3      	bge.n	8005ab2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005aca:	683a      	ldr	r2, [r7, #0]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d901      	bls.n	8005ad6 <_PrintInt+0x42>
    Width = NumDigits;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <_PrintInt+0x5e>
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	db04      	blt.n	8005aec <_PrintInt+0x58>
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d002      	beq.n	8005af2 <_PrintInt+0x5e>
    FieldWidth--;
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <_PrintInt+0x6e>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <_PrintInt+0x9c>
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00e      	beq.n	8005b30 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b12:	e006      	b.n	8005b22 <_PrintInt+0x8e>
        FieldWidth--;
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	3b01      	subs	r3, #1
 8005b18:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f7ff fea7 	bl	8005870 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <_PrintInt+0x9c>
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d3f1      	bcc.n	8005b14 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da07      	bge.n	8005b46 <_PrintInt+0xb2>
    v = -v;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	425b      	negs	r3, r3
 8005b3a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b3c:	212d      	movs	r1, #45	; 0x2d
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff fe96 	bl	8005870 <_StoreChar>
 8005b44:	e008      	b.n	8005b58 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d003      	beq.n	8005b58 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b50:	212b      	movs	r1, #43	; 0x2b
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fe8c 	bl	8005870 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d019      	beq.n	8005b96 <_PrintInt+0x102>
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d114      	bne.n	8005b96 <_PrintInt+0x102>
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d111      	bne.n	8005b96 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b78:	e006      	b.n	8005b88 <_PrintInt+0xf4>
        FieldWidth--;
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b80:	2130      	movs	r1, #48	; 0x30
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7ff fe74 	bl	8005870 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <_PrintInt+0x102>
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d3f1      	bcc.n	8005b7a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	9301      	str	r3, [sp, #4]
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fedf 	bl	8005968 <_PrintUnsigned>
}
 8005baa:	bf00      	nop
 8005bac:	3718      	adds	r7, #24
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b098      	sub	sp, #96	; 0x60
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bc0:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc4:	f04f 0120 	mov.w	r1, #32
 8005bc8:	f381 8811 	msr	BASEPRI, r1
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bce:	48b7      	ldr	r0, [pc, #732]	; (8005eac <_VPrintTarget+0x2f8>)
 8005bd0:	f7ff fbee 	bl	80053b0 <_PreparePacket>
 8005bd4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005bd6:	4bb5      	ldr	r3, [pc, #724]	; (8005eac <_VPrintTarget+0x2f8>)
 8005bd8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	3301      	adds	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005bfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 81a8 	beq.w	8005f54 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005c04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c08:	2b25      	cmp	r3, #37	; 0x25
 8005c0a:	f040 8195 	bne.w	8005f38 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005c12:	2301      	movs	r3, #1
 8005c14:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005c1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c22:	3b23      	subs	r3, #35	; 0x23
 8005c24:	2b0d      	cmp	r3, #13
 8005c26:	d83f      	bhi.n	8005ca8 <_VPrintTarget+0xf4>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <_VPrintTarget+0x7c>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c99 	.word	0x08005c99
 8005c34:	08005ca9 	.word	0x08005ca9
 8005c38:	08005ca9 	.word	0x08005ca9
 8005c3c:	08005ca9 	.word	0x08005ca9
 8005c40:	08005ca9 	.word	0x08005ca9
 8005c44:	08005ca9 	.word	0x08005ca9
 8005c48:	08005ca9 	.word	0x08005ca9
 8005c4c:	08005ca9 	.word	0x08005ca9
 8005c50:	08005c89 	.word	0x08005c89
 8005c54:	08005ca9 	.word	0x08005ca9
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005ca9 	.word	0x08005ca9
 8005c60:	08005ca9 	.word	0x08005ca9
 8005c64:	08005c79 	.word	0x08005c79
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3301      	adds	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e01a      	b.n	8005cae <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7a:	f043 0302 	orr.w	r3, r3, #2
 8005c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	3301      	adds	r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	e012      	b.n	8005cae <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8a:	f043 0304 	orr.w	r3, r3, #4
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e00a      	b.n	8005cae <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c9a:	f043 0308 	orr.w	r3, r3, #8
 8005c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e002      	b.n	8005cae <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	653b      	str	r3, [r7, #80]	; 0x50
 8005cac:	bf00      	nop
        }
      } while (v);
 8005cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1b0      	bne.n	8005c16 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8005cc6:	d912      	bls.n	8005cee <_VPrintTarget+0x13a>
 8005cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ccc:	2b39      	cmp	r3, #57	; 0x39
 8005cce:	d80e      	bhi.n	8005cee <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005cd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cd8:	4613      	mov	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce6:	4413      	add	r3, r2
 8005ce8:	3b30      	subs	r3, #48	; 0x30
 8005cea:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005cec:	e7e4      	b.n	8005cb8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8005d00:	d11d      	bne.n	8005d3e <_VPrintTarget+0x18a>
        sFormat++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d14:	2b2f      	cmp	r3, #47	; 0x2f
 8005d16:	d912      	bls.n	8005d3e <_VPrintTarget+0x18a>
 8005d18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d1c:	2b39      	cmp	r3, #57	; 0x39
 8005d1e:	d80e      	bhi.n	8005d3e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005d26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	461a      	mov	r2, r3
 8005d32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d36:	4413      	add	r3, r2
 8005d38:	3b30      	subs	r3, #48	; 0x30
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005d3c:	e7e4      	b.n	8005d08 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d4a:	2b6c      	cmp	r3, #108	; 0x6c
 8005d4c:	d003      	beq.n	8005d56 <_VPrintTarget+0x1a2>
 8005d4e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d52:	2b68      	cmp	r3, #104	; 0x68
 8005d54:	d107      	bne.n	8005d66 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3301      	adds	r3, #1
 8005d62:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d64:	e7ef      	b.n	8005d46 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d6a:	2b25      	cmp	r3, #37	; 0x25
 8005d6c:	f000 80d8 	beq.w	8005f20 <_VPrintTarget+0x36c>
 8005d70:	2b25      	cmp	r3, #37	; 0x25
 8005d72:	f2c0 80dc 	blt.w	8005f2e <_VPrintTarget+0x37a>
 8005d76:	2b78      	cmp	r3, #120	; 0x78
 8005d78:	f300 80d9 	bgt.w	8005f2e <_VPrintTarget+0x37a>
 8005d7c:	2b58      	cmp	r3, #88	; 0x58
 8005d7e:	f2c0 80d6 	blt.w	8005f2e <_VPrintTarget+0x37a>
 8005d82:	3b58      	subs	r3, #88	; 0x58
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	f200 80d2 	bhi.w	8005f2e <_VPrintTarget+0x37a>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <_VPrintTarget+0x1dc>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005e87 	.word	0x08005e87
 8005d94:	08005f2f 	.word	0x08005f2f
 8005d98:	08005f2f 	.word	0x08005f2f
 8005d9c:	08005f2f 	.word	0x08005f2f
 8005da0:	08005f2f 	.word	0x08005f2f
 8005da4:	08005f2f 	.word	0x08005f2f
 8005da8:	08005f2f 	.word	0x08005f2f
 8005dac:	08005f2f 	.word	0x08005f2f
 8005db0:	08005f2f 	.word	0x08005f2f
 8005db4:	08005f2f 	.word	0x08005f2f
 8005db8:	08005f2f 	.word	0x08005f2f
 8005dbc:	08005e15 	.word	0x08005e15
 8005dc0:	08005e3b 	.word	0x08005e3b
 8005dc4:	08005f2f 	.word	0x08005f2f
 8005dc8:	08005f2f 	.word	0x08005f2f
 8005dcc:	08005f2f 	.word	0x08005f2f
 8005dd0:	08005f2f 	.word	0x08005f2f
 8005dd4:	08005f2f 	.word	0x08005f2f
 8005dd8:	08005f2f 	.word	0x08005f2f
 8005ddc:	08005f2f 	.word	0x08005f2f
 8005de0:	08005f2f 	.word	0x08005f2f
 8005de4:	08005f2f 	.word	0x08005f2f
 8005de8:	08005f2f 	.word	0x08005f2f
 8005dec:	08005f2f 	.word	0x08005f2f
 8005df0:	08005efb 	.word	0x08005efb
 8005df4:	08005f2f 	.word	0x08005f2f
 8005df8:	08005f2f 	.word	0x08005f2f
 8005dfc:	08005eb1 	.word	0x08005eb1
 8005e00:	08005f2f 	.word	0x08005f2f
 8005e04:	08005e61 	.word	0x08005e61
 8005e08:	08005f2f 	.word	0x08005f2f
 8005e0c:	08005f2f 	.word	0x08005f2f
 8005e10:	08005e87 	.word	0x08005e87
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	1d19      	adds	r1, r3, #4
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005e28:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e2c:	f107 0310 	add.w	r3, r7, #16
 8005e30:	4611      	mov	r1, r2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff fd1c 	bl	8005870 <_StoreChar>
        break;
 8005e38:	e07a      	b.n	8005f30 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1d19      	adds	r1, r3, #4
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6011      	str	r1, [r2, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e48:	f107 0010 	add.w	r0, r7, #16
 8005e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e4e:	9301      	str	r3, [sp, #4]
 8005e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e56:	220a      	movs	r2, #10
 8005e58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e5a:	f7ff fe1b 	bl	8005a94 <_PrintInt>
        break;
 8005e5e:	e067      	b.n	8005f30 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	1d19      	adds	r1, r3, #4
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6011      	str	r1, [r2, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e70:	f107 0010 	add.w	r0, r7, #16
 8005e74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7e:	220a      	movs	r2, #10
 8005e80:	f7ff fd72 	bl	8005968 <_PrintUnsigned>
        break;
 8005e84:	e054      	b.n	8005f30 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	1d19      	adds	r1, r3, #4
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6011      	str	r1, [r2, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e94:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e96:	f107 0010 	add.w	r0, r7, #16
 8005e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	f7ff fd5f 	bl	8005968 <_PrintUnsigned>
        break;
 8005eaa:	e041      	b.n	8005f30 <_VPrintTarget+0x37c>
 8005eac:	200143c4 	.word	0x200143c4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	1d19      	adds	r1, r3, #4
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6011      	str	r1, [r2, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <_VPrintTarget+0x314>
          s = "(null)";
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <_VPrintTarget+0x43c>)
 8005ec6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005ede:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ee2:	f107 0310 	add.w	r3, r7, #16
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fcc1 	bl	8005870 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef2:	d9e9      	bls.n	8005ec8 <_VPrintTarget+0x314>
        break;
 8005ef4:	e01c      	b.n	8005f30 <_VPrintTarget+0x37c>
            break;
 8005ef6:	bf00      	nop
        break;
 8005ef8:	e01a      	b.n	8005f30 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	1d19      	adds	r1, r3, #4
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6011      	str	r1, [r2, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005f08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f0a:	f107 0010 	add.w	r0, r7, #16
 8005f0e:	2300      	movs	r3, #0
 8005f10:	9301      	str	r3, [sp, #4]
 8005f12:	2308      	movs	r3, #8
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2308      	movs	r3, #8
 8005f18:	2210      	movs	r2, #16
 8005f1a:	f7ff fd25 	bl	8005968 <_PrintUnsigned>
        break;
 8005f1e:	e007      	b.n	8005f30 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005f20:	f107 0310 	add.w	r3, r7, #16
 8005f24:	2125      	movs	r1, #37	; 0x25
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fca2 	bl	8005870 <_StoreChar>
        break;
 8005f2c:	e000      	b.n	8005f30 <_VPrintTarget+0x37c>
      default:
        break;
 8005f2e:	bf00      	nop
      }
      sFormat++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e007      	b.n	8005f48 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005f38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	4611      	mov	r1, r2
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fc94 	bl	8005870 <_StoreChar>
    }
  } while (*sFormat);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f47f ae4d 	bne.w	8005bec <_VPrintTarget+0x38>
 8005f52:	e000      	b.n	8005f56 <_VPrintTarget+0x3a2>
      break;
 8005f54:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d041      	beq.n	8005fe0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005f5c:	6a3a      	ldr	r2, [r7, #32]
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f6c:	e00b      	b.n	8005f86 <_VPrintTarget+0x3d2>
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f74:	1c59      	adds	r1, r3, #1
 8005f76:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f82:	09db      	lsrs	r3, r3, #7
 8005f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8a:	d8f0      	bhi.n	8005f6e <_VPrintTarget+0x3ba>
 8005f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f9a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa4:	e00b      	b.n	8005fbe <_VPrintTarget+0x40a>
 8005fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fac:	1c59      	adds	r1, r3, #1
 8005fae:	6379      	str	r1, [r7, #52]	; 0x34
 8005fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	09db      	lsrs	r3, r3, #7
 8005fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc2:	d8f0      	bhi.n	8005fa6 <_VPrintTarget+0x3f2>
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	637a      	str	r2, [r7, #52]	; 0x34
 8005fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	6979      	ldr	r1, [r7, #20]
 8005fd8:	221a      	movs	r2, #26
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff fad8 	bl	8005590 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005fe6:	bf00      	nop
 8005fe8:	3758      	adds	r7, #88	; 0x58
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	08007168 	.word	0x08007168

08005ff4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006002:	2300      	movs	r3, #0
 8006004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006008:	4917      	ldr	r1, [pc, #92]	; (8006068 <SEGGER_SYSVIEW_Init+0x74>)
 800600a:	4818      	ldr	r0, [pc, #96]	; (800606c <SEGGER_SYSVIEW_Init+0x78>)
 800600c:	f7ff f8d0 	bl	80051b0 <SEGGER_RTT_AllocUpBuffer>
 8006010:	4603      	mov	r3, r0
 8006012:	b2da      	uxtb	r2, r3
 8006014:	4b16      	ldr	r3, [pc, #88]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006016:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006018:	4b15      	ldr	r3, [pc, #84]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800601a:	785a      	ldrb	r2, [r3, #1]
 800601c:	4b14      	ldr	r3, [pc, #80]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800601e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006020:	4b13      	ldr	r3, [pc, #76]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006022:	7e1b      	ldrb	r3, [r3, #24]
 8006024:	4618      	mov	r0, r3
 8006026:	2300      	movs	r3, #0
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	2308      	movs	r3, #8
 800602c:	4a11      	ldr	r2, [pc, #68]	; (8006074 <SEGGER_SYSVIEW_Init+0x80>)
 800602e:	490f      	ldr	r1, [pc, #60]	; (800606c <SEGGER_SYSVIEW_Init+0x78>)
 8006030:	f7ff f942 	bl	80052b8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006034:	4b0e      	ldr	r3, [pc, #56]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006036:	2200      	movs	r2, #0
 8006038:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800603a:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <SEGGER_SYSVIEW_Init+0x84>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a0c      	ldr	r2, [pc, #48]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006040:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006042:	4a0b      	ldr	r2, [pc, #44]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006048:	4a09      	ldr	r2, [pc, #36]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800604e:	4a08      	ldr	r2, [pc, #32]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <SEGGER_SYSVIEW_Init+0x7c>)
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	2001338c 	.word	0x2001338c
 800606c:	08007170 	.word	0x08007170
 8006070:	20014394 	.word	0x20014394
 8006074:	2001438c 	.word	0x2001438c
 8006078:	e0001004 	.word	0xe0001004

0800607c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006084:	4a04      	ldr	r2, [pc, #16]	; (8006098 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6113      	str	r3, [r2, #16]
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	20014394 	.word	0x20014394

0800609c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80060a4:	f3ef 8311 	mrs	r3, BASEPRI
 80060a8:	f04f 0120 	mov.w	r1, #32
 80060ac:	f381 8811 	msr	BASEPRI, r1
 80060b0:	60fb      	str	r3, [r7, #12]
 80060b2:	4808      	ldr	r0, [pc, #32]	; (80060d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80060b4:	f7ff f97c 	bl	80053b0 <_PreparePacket>
 80060b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	f7ff fa66 	bl	8005590 <_SendPacket>
  RECORD_END();
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f383 8811 	msr	BASEPRI, r3
}
 80060ca:	bf00      	nop
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200143c4 	.word	0x200143c4

080060d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b088      	sub	sp, #32
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80060e2:	f3ef 8311 	mrs	r3, BASEPRI
 80060e6:	f04f 0120 	mov.w	r1, #32
 80060ea:	f381 8811 	msr	BASEPRI, r1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	4816      	ldr	r0, [pc, #88]	; (800614c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80060f2:	f7ff f95d 	bl	80053b0 <_PreparePacket>
 80060f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	61fb      	str	r3, [r7, #28]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	e00b      	b.n	800611e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	b2da      	uxtb	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	61f9      	str	r1, [r7, #28]
 8006110:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006114:	b2d2      	uxtb	r2, r2
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	09db      	lsrs	r3, r3, #7
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	2b7f      	cmp	r3, #127	; 0x7f
 8006122:	d8f0      	bhi.n	8006106 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	61fa      	str	r2, [r7, #28]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	68f9      	ldr	r1, [r7, #12]
 8006138:	6938      	ldr	r0, [r7, #16]
 800613a:	f7ff fa29 	bl	8005590 <_SendPacket>
  RECORD_END();
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f383 8811 	msr	BASEPRI, r3
}
 8006144:	bf00      	nop
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	200143c4 	.word	0x200143c4

08006150 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b08c      	sub	sp, #48	; 0x30
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800615c:	f3ef 8311 	mrs	r3, BASEPRI
 8006160:	f04f 0120 	mov.w	r1, #32
 8006164:	f381 8811 	msr	BASEPRI, r1
 8006168:	61fb      	str	r3, [r7, #28]
 800616a:	4825      	ldr	r0, [pc, #148]	; (8006200 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800616c:	f7ff f920 	bl	80053b0 <_PreparePacket>
 8006170:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	62bb      	str	r3, [r7, #40]	; 0x28
 800617e:	e00b      	b.n	8006198 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006186:	1c59      	adds	r1, r3, #1
 8006188:	62f9      	str	r1, [r7, #44]	; 0x2c
 800618a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800618e:	b2d2      	uxtb	r2, r2
 8006190:	701a      	strb	r2, [r3, #0]
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	09db      	lsrs	r3, r3, #7
 8006196:	62bb      	str	r3, [r7, #40]	; 0x28
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2b7f      	cmp	r3, #127	; 0x7f
 800619c:	d8f0      	bhi.n	8006180 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a6:	b2d2      	uxtb	r2, r2
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	623b      	str	r3, [r7, #32]
 80061b6:	e00b      	b.n	80061d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	6279      	str	r1, [r7, #36]	; 0x24
 80061c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	6a3b      	ldr	r3, [r7, #32]
 80061cc:	09db      	lsrs	r3, r3, #7
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	2b7f      	cmp	r3, #127	; 0x7f
 80061d4:	d8f0      	bhi.n	80061b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	627a      	str	r2, [r7, #36]	; 0x24
 80061dc:	6a3a      	ldr	r2, [r7, #32]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	6979      	ldr	r1, [r7, #20]
 80061ea:	69b8      	ldr	r0, [r7, #24]
 80061ec:	f7ff f9d0 	bl	8005590 <_SendPacket>
  RECORD_END();
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f383 8811 	msr	BASEPRI, r3
}
 80061f6:	bf00      	nop
 80061f8:	3730      	adds	r7, #48	; 0x30
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	200143c4 	.word	0x200143c4

08006204 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b08e      	sub	sp, #56	; 0x38
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
 8006210:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	f04f 0120 	mov.w	r1, #32
 800621a:	f381 8811 	msr	BASEPRI, r1
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	4832      	ldr	r0, [pc, #200]	; (80062ec <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006222:	f7ff f8c5 	bl	80053b0 <_PreparePacket>
 8006226:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	637b      	str	r3, [r7, #52]	; 0x34
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
 8006234:	e00b      	b.n	800624e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	b2da      	uxtb	r2, r3
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	6379      	str	r1, [r7, #52]	; 0x34
 8006240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	09db      	lsrs	r3, r3, #7
 800624c:	633b      	str	r3, [r7, #48]	; 0x30
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2b7f      	cmp	r3, #127	; 0x7f
 8006252:	d8f0      	bhi.n	8006236 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	637a      	str	r2, [r7, #52]	; 0x34
 800625a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006262:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
 800626c:	e00b      	b.n	8006286 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	b2da      	uxtb	r2, r3
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	1c59      	adds	r1, r3, #1
 8006276:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006278:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	09db      	lsrs	r3, r3, #7
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
 8006286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006288:	2b7f      	cmp	r3, #127	; 0x7f
 800628a:	d8f0      	bhi.n	800626e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	627b      	str	r3, [r7, #36]	; 0x24
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	623b      	str	r3, [r7, #32]
 80062a4:	e00b      	b.n	80062be <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	1c59      	adds	r1, r3, #1
 80062ae:	6279      	str	r1, [r7, #36]	; 0x24
 80062b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062b4:	b2d2      	uxtb	r2, r2
 80062b6:	701a      	strb	r2, [r3, #0]
 80062b8:	6a3b      	ldr	r3, [r7, #32]
 80062ba:	09db      	lsrs	r3, r3, #7
 80062bc:	623b      	str	r3, [r7, #32]
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	2b7f      	cmp	r3, #127	; 0x7f
 80062c2:	d8f0      	bhi.n	80062a6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	627a      	str	r2, [r7, #36]	; 0x24
 80062ca:	6a3a      	ldr	r2, [r7, #32]
 80062cc:	b2d2      	uxtb	r2, r2
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	6979      	ldr	r1, [r7, #20]
 80062d8:	69b8      	ldr	r0, [r7, #24]
 80062da:	f7ff f959 	bl	8005590 <_SendPacket>
  RECORD_END();
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	f383 8811 	msr	BASEPRI, r3
}
 80062e4:	bf00      	nop
 80062e6:	3738      	adds	r7, #56	; 0x38
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	200143c4 	.word	0x200143c4

080062f0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b090      	sub	sp, #64	; 0x40
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80062fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006302:	f04f 0120 	mov.w	r1, #32
 8006306:	f381 8811 	msr	BASEPRI, r1
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	4840      	ldr	r0, [pc, #256]	; (8006410 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800630e:	f7ff f84f 	bl	80053b0 <_PreparePacket>
 8006312:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006320:	e00b      	b.n	800633a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	b2da      	uxtb	r2, r3
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800632c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	09db      	lsrs	r3, r3, #7
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b7f      	cmp	r3, #127	; 0x7f
 800633e:	d8f0      	bhi.n	8006322 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
 8006358:	e00b      	b.n	8006372 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	b2da      	uxtb	r2, r3
 800635e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006360:	1c59      	adds	r1, r3, #1
 8006362:	6379      	str	r1, [r7, #52]	; 0x34
 8006364:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	09db      	lsrs	r3, r3, #7
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b7f      	cmp	r3, #127	; 0x7f
 8006376:	d8f0      	bhi.n	800635a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	637a      	str	r2, [r7, #52]	; 0x34
 800637e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006390:	e00b      	b.n	80063aa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	b2da      	uxtb	r2, r3
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	1c59      	adds	r1, r3, #1
 800639a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800639c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063a0:	b2d2      	uxtb	r2, r2
 80063a2:	701a      	strb	r2, [r3, #0]
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	09db      	lsrs	r3, r3, #7
 80063a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80063aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ac:	2b7f      	cmp	r3, #127	; 0x7f
 80063ae:	d8f0      	bhi.n	8006392 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80063b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b8:	b2d2      	uxtb	r2, r2
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	623b      	str	r3, [r7, #32]
 80063c8:	e00b      	b.n	80063e2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1c59      	adds	r1, r3, #1
 80063d2:	6279      	str	r1, [r7, #36]	; 0x24
 80063d4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d8:	b2d2      	uxtb	r2, r2
 80063da:	701a      	strb	r2, [r3, #0]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	09db      	lsrs	r3, r3, #7
 80063e0:	623b      	str	r3, [r7, #32]
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	2b7f      	cmp	r3, #127	; 0x7f
 80063e6:	d8f0      	bhi.n	80063ca <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	627a      	str	r2, [r7, #36]	; 0x24
 80063ee:	6a3a      	ldr	r2, [r7, #32]
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	6979      	ldr	r1, [r7, #20]
 80063fc:	69b8      	ldr	r0, [r7, #24]
 80063fe:	f7ff f8c7 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f383 8811 	msr	BASEPRI, r3
}
 8006408:	bf00      	nop
 800640a:	3740      	adds	r7, #64	; 0x40
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	200143c4 	.word	0x200143c4

08006414 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800641a:	4b59      	ldr	r3, [pc, #356]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 800641c:	2201      	movs	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006420:	f3ef 8311 	mrs	r3, BASEPRI
 8006424:	f04f 0120 	mov.w	r1, #32
 8006428:	f381 8811 	msr	BASEPRI, r1
 800642c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800642e:	4b54      	ldr	r3, [pc, #336]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 8006430:	785b      	ldrb	r3, [r3, #1]
 8006432:	220a      	movs	r2, #10
 8006434:	4953      	ldr	r1, [pc, #332]	; (8006584 <SEGGER_SYSVIEW_Start+0x170>)
 8006436:	4618      	mov	r0, r3
 8006438:	f7f9 feca 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006442:	f7fe fb87 	bl	8004b54 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006446:	200a      	movs	r0, #10
 8006448:	f7ff fe28 	bl	800609c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800644c:	f3ef 8311 	mrs	r3, BASEPRI
 8006450:	f04f 0120 	mov.w	r1, #32
 8006454:	f381 8811 	msr	BASEPRI, r1
 8006458:	60bb      	str	r3, [r7, #8]
 800645a:	484b      	ldr	r0, [pc, #300]	; (8006588 <SEGGER_SYSVIEW_Start+0x174>)
 800645c:	f7fe ffa8 	bl	80053b0 <_PreparePacket>
 8006460:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646a:	4b45      	ldr	r3, [pc, #276]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006470:	e00b      	b.n	800648a <SEGGER_SYSVIEW_Start+0x76>
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	1c59      	adds	r1, r3, #1
 800647a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800647c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	09db      	lsrs	r3, r3, #7
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d8f0      	bhi.n	8006472 <SEGGER_SYSVIEW_Start+0x5e>
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
 80064a4:	4b36      	ldr	r3, [pc, #216]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	e00b      	b.n	80064c4 <SEGGER_SYSVIEW_Start+0xb0>
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b2:	1c59      	adds	r1, r3, #1
 80064b4:	6279      	str	r1, [r7, #36]	; 0x24
 80064b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ba:	b2d2      	uxtb	r2, r2
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	09db      	lsrs	r3, r3, #7
 80064c2:	623b      	str	r3, [r7, #32]
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2b7f      	cmp	r3, #127	; 0x7f
 80064c8:	d8f0      	bhi.n	80064ac <SEGGER_SYSVIEW_Start+0x98>
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	627a      	str	r2, [r7, #36]	; 0x24
 80064d0:	6a3a      	ldr	r2, [r7, #32]
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	4b28      	ldr	r3, [pc, #160]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e00b      	b.n	80064fe <SEGGER_SYSVIEW_Start+0xea>
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	61f9      	str	r1, [r7, #28]
 80064f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	61bb      	str	r3, [r7, #24]
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b7f      	cmp	r3, #127	; 0x7f
 8006502:	d8f0      	bhi.n	80064e6 <SEGGER_SYSVIEW_Start+0xd2>
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	61fa      	str	r2, [r7, #28]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	617b      	str	r3, [r7, #20]
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	e00b      	b.n	8006536 <SEGGER_SYSVIEW_Start+0x122>
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	6179      	str	r1, [r7, #20]
 8006528:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	09db      	lsrs	r3, r3, #7
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	2b7f      	cmp	r3, #127	; 0x7f
 800653a:	d8f0      	bhi.n	800651e <SEGGER_SYSVIEW_Start+0x10a>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	617a      	str	r2, [r7, #20]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800654c:	2218      	movs	r2, #24
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff f81d 	bl	8005590 <_SendPacket>
      RECORD_END();
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800655c:	4b08      	ldr	r3, [pc, #32]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <SEGGER_SYSVIEW_Start+0x16c>)
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800656a:	f000 f9eb 	bl	8006944 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800656e:	f000 f9b1 	bl	80068d4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006572:	f000 fc2d 	bl	8006dd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006576:	bf00      	nop
 8006578:	3730      	adds	r7, #48	; 0x30
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20014394 	.word	0x20014394
 8006584:	080071b0 	.word	0x080071b0
 8006588:	200143c4 	.word	0x200143c4

0800658c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006592:	f3ef 8311 	mrs	r3, BASEPRI
 8006596:	f04f 0120 	mov.w	r1, #32
 800659a:	f381 8811 	msr	BASEPRI, r1
 800659e:	607b      	str	r3, [r7, #4]
 80065a0:	480b      	ldr	r0, [pc, #44]	; (80065d0 <SEGGER_SYSVIEW_Stop+0x44>)
 80065a2:	f7fe ff05 	bl	80053b0 <_PreparePacket>
 80065a6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80065a8:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d007      	beq.n	80065c0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80065b0:	220b      	movs	r2, #11
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6838      	ldr	r0, [r7, #0]
 80065b6:	f7fe ffeb 	bl	8005590 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <SEGGER_SYSVIEW_Stop+0x48>)
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f383 8811 	msr	BASEPRI, r3
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200143c4 	.word	0x200143c4
 80065d4:	20014394 	.word	0x20014394

080065d8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08c      	sub	sp, #48	; 0x30
 80065dc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80065de:	f3ef 8311 	mrs	r3, BASEPRI
 80065e2:	f04f 0120 	mov.w	r1, #32
 80065e6:	f381 8811 	msr	BASEPRI, r1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	4845      	ldr	r0, [pc, #276]	; (8006704 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80065ee:	f7fe fedf 	bl	80053b0 <_PreparePacket>
 80065f2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065fc:	4b42      	ldr	r3, [pc, #264]	; (8006708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	62bb      	str	r3, [r7, #40]	; 0x28
 8006602:	e00b      	b.n	800661c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	b2da      	uxtb	r2, r3
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800660e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	701a      	strb	r2, [r3, #0]
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	09db      	lsrs	r3, r3, #7
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2b7f      	cmp	r3, #127	; 0x7f
 8006620:	d8f0      	bhi.n	8006604 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800662a:	b2d2      	uxtb	r2, r2
 800662c:	701a      	strb	r2, [r3, #0]
 800662e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006630:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	627b      	str	r3, [r7, #36]	; 0x24
 8006636:	4b34      	ldr	r3, [pc, #208]	; (8006708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	e00b      	b.n	8006656 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	b2da      	uxtb	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	6279      	str	r1, [r7, #36]	; 0x24
 8006648:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664c:	b2d2      	uxtb	r2, r2
 800664e:	701a      	strb	r2, [r3, #0]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	09db      	lsrs	r3, r3, #7
 8006654:	623b      	str	r3, [r7, #32]
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	2b7f      	cmp	r3, #127	; 0x7f
 800665a:	d8f0      	bhi.n	800663e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	627a      	str	r2, [r7, #36]	; 0x24
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	b2d2      	uxtb	r2, r2
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	4b25      	ldr	r3, [pc, #148]	; (8006708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	61bb      	str	r3, [r7, #24]
 8006676:	e00b      	b.n	8006690 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1c59      	adds	r1, r3, #1
 8006680:	61f9      	str	r1, [r7, #28]
 8006682:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	09db      	lsrs	r3, r3, #7
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b7f      	cmp	r3, #127	; 0x7f
 8006694:	d8f0      	bhi.n	8006678 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	61fa      	str	r2, [r7, #28]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e00b      	b.n	80066c8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	1c59      	adds	r1, r3, #1
 80066b8:	6179      	str	r1, [r7, #20]
 80066ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	09db      	lsrs	r3, r3, #7
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b7f      	cmp	r3, #127	; 0x7f
 80066cc:	d8f0      	bhi.n	80066b0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	617a      	str	r2, [r7, #20]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	b2d2      	uxtb	r2, r2
 80066d8:	701a      	strb	r2, [r3, #0]
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80066de:	2218      	movs	r2, #24
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	68b8      	ldr	r0, [r7, #8]
 80066e4:	f7fe ff54 	bl	8005590 <_SendPacket>
  RECORD_END();
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80066f6:	4b04      	ldr	r3, [pc, #16]	; (8006708 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	4798      	blx	r3
  }
}
 80066fc:	bf00      	nop
 80066fe:	3730      	adds	r7, #48	; 0x30
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	200143c4 	.word	0x200143c4
 8006708:	20014394 	.word	0x20014394

0800670c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b092      	sub	sp, #72	; 0x48
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006714:	f3ef 8311 	mrs	r3, BASEPRI
 8006718:	f04f 0120 	mov.w	r1, #32
 800671c:	f381 8811 	msr	BASEPRI, r1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	486a      	ldr	r0, [pc, #424]	; (80068cc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006724:	f7fe fe44 	bl	80053b0 <_PreparePacket>
 8006728:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	647b      	str	r3, [r7, #68]	; 0x44
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	4b66      	ldr	r3, [pc, #408]	; (80068d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	643b      	str	r3, [r7, #64]	; 0x40
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6479      	str	r1, [r7, #68]	; 0x44
 800674a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	643b      	str	r3, [r7, #64]	; 0x40
 8006758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800675e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	647a      	str	r2, [r7, #68]	; 0x44
 8006764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800676c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
 8006778:	e00b      	b.n	8006792 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677c:	b2da      	uxtb	r2, r3
 800677e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006780:	1c59      	adds	r1, r3, #1
 8006782:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006784:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006788:	b2d2      	uxtb	r2, r2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	09db      	lsrs	r3, r3, #7
 8006790:	63bb      	str	r3, [r7, #56]	; 0x38
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	2b7f      	cmp	r3, #127	; 0x7f
 8006796:	d8f0      	bhi.n	800677a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800679a:	1c5a      	adds	r2, r3, #1
 800679c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800679e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067a6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	4619      	mov	r1, r3
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7fe fdcd 	bl	8005350 <_EncodeStr>
 80067b6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80067b8:	2209      	movs	r2, #9
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6938      	ldr	r0, [r7, #16]
 80067be:	f7fe fee7 	bl	8005590 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b40      	ldr	r3, [pc, #256]	; (80068d0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	633b      	str	r3, [r7, #48]	; 0x30
 80067d6:	e00b      	b.n	80067f0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067de:	1c59      	adds	r1, r3, #1
 80067e0:	6379      	str	r1, [r7, #52]	; 0x34
 80067e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ec:	09db      	lsrs	r3, r3, #7
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	2b7f      	cmp	r3, #127	; 0x7f
 80067f4:	d8f0      	bhi.n	80067d8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80067f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	637a      	str	r2, [r7, #52]	; 0x34
 80067fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006804:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006810:	e00b      	b.n	800682a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	b2da      	uxtb	r2, r3
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	1c59      	adds	r1, r3, #1
 800681a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800681c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006826:	09db      	lsrs	r3, r3, #7
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
 800682a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682c:	2b7f      	cmp	r3, #127	; 0x7f
 800682e:	d8f0      	bhi.n	8006812 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006836:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800683e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	e00b      	b.n	8006864 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	b2da      	uxtb	r2, r3
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	1c59      	adds	r1, r3, #1
 8006854:	6279      	str	r1, [r7, #36]	; 0x24
 8006856:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	09db      	lsrs	r3, r3, #7
 8006862:	623b      	str	r3, [r7, #32]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	2b7f      	cmp	r3, #127	; 0x7f
 8006868:	d8f0      	bhi.n	800684c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	627a      	str	r2, [r7, #36]	; 0x24
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	2300      	movs	r3, #0
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e00b      	b.n	800689c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	61f9      	str	r1, [r7, #28]
 800688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b7f      	cmp	r3, #127	; 0x7f
 80068a0:	d8f0      	bhi.n	8006884 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	61fa      	str	r2, [r7, #28]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80068b2:	2215      	movs	r2, #21
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f7fe fe6a 	bl	8005590 <_SendPacket>
  RECORD_END();
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f383 8811 	msr	BASEPRI, r3
}
 80068c2:	bf00      	nop
 80068c4:	3748      	adds	r7, #72	; 0x48
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200143c4 	.word	0x200143c4
 80068d0:	20014394 	.word	0x20014394

080068d4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80068d8:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d008      	beq.n	80068f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80068e0:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80068ea:	4b03      	ldr	r3, [pc, #12]	; (80068f8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4798      	blx	r3
  }
}
 80068f2:	bf00      	nop
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	20014394 	.word	0x20014394

080068fc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006904:	f3ef 8311 	mrs	r3, BASEPRI
 8006908:	f04f 0120 	mov.w	r1, #32
 800690c:	f381 8811 	msr	BASEPRI, r1
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	480b      	ldr	r0, [pc, #44]	; (8006940 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006914:	f7fe fd4c 	bl	80053b0 <_PreparePacket>
 8006918:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800691a:	2280      	movs	r2, #128	; 0x80
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	6938      	ldr	r0, [r7, #16]
 8006920:	f7fe fd16 	bl	8005350 <_EncodeStr>
 8006924:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006926:	220e      	movs	r2, #14
 8006928:	68f9      	ldr	r1, [r7, #12]
 800692a:	6938      	ldr	r0, [r7, #16]
 800692c:	f7fe fe30 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f383 8811 	msr	BASEPRI, r3
}
 8006936:	bf00      	nop
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	200143c4 	.word	0x200143c4

08006944 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800694a:	4b15      	ldr	r3, [pc, #84]	; (80069a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01a      	beq.n	8006988 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4798      	blx	r3
 8006964:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006968:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800696a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800696e:	f04f 0200 	mov.w	r2, #0
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	000a      	movs	r2, r1
 8006978:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800697a:	4613      	mov	r3, r2
 800697c:	461a      	mov	r2, r3
 800697e:	4621      	mov	r1, r4
 8006980:	200d      	movs	r0, #13
 8006982:	f7ff fbe5 	bl	8006150 <SEGGER_SYSVIEW_RecordU32x2>
 8006986:	e006      	b.n	8006996 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4619      	mov	r1, r3
 800698e:	200c      	movs	r0, #12
 8006990:	f7ff fba2 	bl	80060d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bd90      	pop	{r4, r7, pc}
 800699e:	bf00      	nop
 80069a0:	20014394 	.word	0x20014394
 80069a4:	e0001004 	.word	0xe0001004

080069a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069ae:	f3ef 8311 	mrs	r3, BASEPRI
 80069b2:	f04f 0120 	mov.w	r1, #32
 80069b6:	f381 8811 	msr	BASEPRI, r1
 80069ba:	60fb      	str	r3, [r7, #12]
 80069bc:	4819      	ldr	r0, [pc, #100]	; (8006a24 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80069be:	f7fe fcf7 	bl	80053b0 <_PreparePacket>
 80069c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	617b      	str	r3, [r7, #20]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6179      	str	r1, [r7, #20]
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	613b      	str	r3, [r7, #16]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	617a      	str	r2, [r7, #20]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	68b8      	ldr	r0, [r7, #8]
 8006a10:	f7fe fdbe 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f383 8811 	msr	BASEPRI, r3
}
 8006a1a:	bf00      	nop
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200143c4 	.word	0x200143c4
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a32:	f3ef 8311 	mrs	r3, BASEPRI
 8006a36:	f04f 0120 	mov.w	r1, #32
 8006a3a:	f381 8811 	msr	BASEPRI, r1
 8006a3e:	607b      	str	r3, [r7, #4]
 8006a40:	4807      	ldr	r0, [pc, #28]	; (8006a60 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006a42:	f7fe fcb5 	bl	80053b0 <_PreparePacket>
 8006a46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006a48:	2203      	movs	r2, #3
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	6838      	ldr	r0, [r7, #0]
 8006a4e:	f7fe fd9f 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f383 8811 	msr	BASEPRI, r3
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	200143c4 	.word	0x200143c4

08006a64 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a6e:	f04f 0120 	mov.w	r1, #32
 8006a72:	f381 8811 	msr	BASEPRI, r1
 8006a76:	607b      	str	r3, [r7, #4]
 8006a78:	4807      	ldr	r0, [pc, #28]	; (8006a98 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006a7a:	f7fe fc99 	bl	80053b0 <_PreparePacket>
 8006a7e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006a80:	2212      	movs	r2, #18
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6838      	ldr	r0, [r7, #0]
 8006a86:	f7fe fd83 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f383 8811 	msr	BASEPRI, r3
}
 8006a90:	bf00      	nop
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	200143c4 	.word	0x200143c4

08006a9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa6:	f04f 0120 	mov.w	r1, #32
 8006aaa:	f381 8811 	msr	BASEPRI, r1
 8006aae:	607b      	str	r3, [r7, #4]
 8006ab0:	4807      	ldr	r0, [pc, #28]	; (8006ad0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006ab2:	f7fe fc7d 	bl	80053b0 <_PreparePacket>
 8006ab6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006ab8:	2211      	movs	r2, #17
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6838      	ldr	r0, [r7, #0]
 8006abe:	f7fe fd67 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f383 8811 	msr	BASEPRI, r3
}
 8006ac8:	bf00      	nop
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	200143c4 	.word	0x200143c4

08006ad4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006adc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae0:	f04f 0120 	mov.w	r1, #32
 8006ae4:	f381 8811 	msr	BASEPRI, r1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	4819      	ldr	r0, [pc, #100]	; (8006b50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006aec:	f7fe fc60 	bl	80053b0 <_PreparePacket>
 8006af0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006af6:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	61fb      	str	r3, [r7, #28]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	61bb      	str	r3, [r7, #24]
 8006b08:	e00b      	b.n	8006b22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	b2da      	uxtb	r2, r3
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	61f9      	str	r1, [r7, #28]
 8006b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	09db      	lsrs	r3, r3, #7
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	2b7f      	cmp	r3, #127	; 0x7f
 8006b26:	d8f0      	bhi.n	8006b0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	61fa      	str	r2, [r7, #28]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006b38:	2208      	movs	r2, #8
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	6938      	ldr	r0, [r7, #16]
 8006b3e:	f7fe fd27 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	f383 8811 	msr	BASEPRI, r3
}
 8006b48:	bf00      	nop
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	200143c4 	.word	0x200143c4
 8006b54:	20014394 	.word	0x20014394

08006b58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b60:	f3ef 8311 	mrs	r3, BASEPRI
 8006b64:	f04f 0120 	mov.w	r1, #32
 8006b68:	f381 8811 	msr	BASEPRI, r1
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	4819      	ldr	r0, [pc, #100]	; (8006bd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006b70:	f7fe fc1e 	bl	80053b0 <_PreparePacket>
 8006b74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b7a:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e00b      	b.n	8006ba6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	1c59      	adds	r1, r3, #1
 8006b96:	61f9      	str	r1, [r7, #28]
 8006b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b9c:	b2d2      	uxtb	r2, r2
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	09db      	lsrs	r3, r3, #7
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	2b7f      	cmp	r3, #127	; 0x7f
 8006baa:	d8f0      	bhi.n	8006b8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	61fa      	str	r2, [r7, #28]
 8006bb2:	69ba      	ldr	r2, [r7, #24]
 8006bb4:	b2d2      	uxtb	r2, r2
 8006bb6:	701a      	strb	r2, [r3, #0]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	6938      	ldr	r0, [r7, #16]
 8006bc2:	f7fe fce5 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f383 8811 	msr	BASEPRI, r3
}
 8006bcc:	bf00      	nop
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200143c4 	.word	0x200143c4
 8006bd8:	20014394 	.word	0x20014394

08006bdc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006be4:	f3ef 8311 	mrs	r3, BASEPRI
 8006be8:	f04f 0120 	mov.w	r1, #32
 8006bec:	f381 8811 	msr	BASEPRI, r1
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	4819      	ldr	r0, [pc, #100]	; (8006c58 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006bf4:	f7fe fbdc 	bl	80053b0 <_PreparePacket>
 8006bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bfe:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	687a      	ldr	r2, [r7, #4]
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	61fb      	str	r3, [r7, #28]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	61bb      	str	r3, [r7, #24]
 8006c10:	e00b      	b.n	8006c2a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	1c59      	adds	r1, r3, #1
 8006c1a:	61f9      	str	r1, [r7, #28]
 8006c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	09db      	lsrs	r3, r3, #7
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c2e:	d8f0      	bhi.n	8006c12 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	1c5a      	adds	r2, r3, #1
 8006c34:	61fa      	str	r2, [r7, #28]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006c40:	2206      	movs	r2, #6
 8006c42:	68f9      	ldr	r1, [r7, #12]
 8006c44:	6938      	ldr	r0, [r7, #16]
 8006c46:	f7fe fca3 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f383 8811 	msr	BASEPRI, r3
}
 8006c50:	bf00      	nop
 8006c52:	3720      	adds	r7, #32
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	200143c4 	.word	0x200143c4
 8006c5c:	20014394 	.word	0x20014394

08006c60 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006c68:	4b04      	ldr	r3, [pc, #16]	; (8006c7c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	1ad3      	subs	r3, r2, r3
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20014394 	.word	0x20014394

08006c80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b08c      	sub	sp, #48	; 0x30
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	4603      	mov	r3, r0
 8006c88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006c8a:	4b40      	ldr	r3, [pc, #256]	; (8006d8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d077      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006c92:	4b3e      	ldr	r3, [pc, #248]	; (8006d8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006c98:	2300      	movs	r3, #0
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c9c:	e008      	b.n	8006cb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	3301      	adds	r3, #1
 8006cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3f2      	bcc.n	8006c9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006cb8:	e000      	b.n	8006cbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006cba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d055      	beq.n	8006d6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc6:	f04f 0120 	mov.w	r1, #32
 8006cca:	f381 8811 	msr	BASEPRI, r1
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	482f      	ldr	r0, [pc, #188]	; (8006d90 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006cd2:	f7fe fb6d 	bl	80053b0 <_PreparePacket>
 8006cd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
 8006ce2:	623b      	str	r3, [r7, #32]
 8006ce4:	e00b      	b.n	8006cfe <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1c59      	adds	r1, r3, #1
 8006cee:	6279      	str	r1, [r7, #36]	; 0x24
 8006cf0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cf4:	b2d2      	uxtb	r2, r2
 8006cf6:	701a      	strb	r2, [r3, #0]
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	09db      	lsrs	r3, r3, #7
 8006cfc:	623b      	str	r3, [r7, #32]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	2b7f      	cmp	r3, #127	; 0x7f
 8006d02:	d8f0      	bhi.n	8006ce6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	627a      	str	r2, [r7, #36]	; 0x24
 8006d0a:	6a3a      	ldr	r2, [r7, #32]
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	61fb      	str	r3, [r7, #28]
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	e00b      	b.n	8006d38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	b2da      	uxtb	r2, r3
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	1c59      	adds	r1, r3, #1
 8006d28:	61f9      	str	r1, [r7, #28]
 8006d2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d2e:	b2d2      	uxtb	r2, r2
 8006d30:	701a      	strb	r2, [r3, #0]
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	09db      	lsrs	r3, r3, #7
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d3c:	d8f0      	bhi.n	8006d20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	61fa      	str	r2, [r7, #28]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2280      	movs	r2, #128	; 0x80
 8006d54:	4619      	mov	r1, r3
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7fe fafa 	bl	8005350 <_EncodeStr>
 8006d5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006d5e:	2216      	movs	r2, #22
 8006d60:	68f9      	ldr	r1, [r7, #12]
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7fe fc14 	bl	8005590 <_SendPacket>
      RECORD_END();
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d006      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x102>
 8006d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	4798      	blx	r3
    }
  }
}
 8006d82:	bf00      	nop
 8006d84:	3730      	adds	r7, #48	; 0x30
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	200143bc 	.word	0x200143bc
 8006d90:	200143c4 	.word	0x200143c4

08006d94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006d9a:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00f      	beq.n	8006dc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006da2:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d002      	beq.n	8006db6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1f2      	bne.n	8006da8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	200143bc 	.word	0x200143bc

08006dd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b086      	sub	sp, #24
 8006dd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8006dda:	f04f 0120 	mov.w	r1, #32
 8006dde:	f381 8811 	msr	BASEPRI, r1
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	4817      	ldr	r0, [pc, #92]	; (8006e44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006de6:	f7fe fae3 	bl	80053b0 <_PreparePacket>
 8006dea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	4b14      	ldr	r3, [pc, #80]	; (8006e48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	613b      	str	r3, [r7, #16]
 8006dfa:	e00b      	b.n	8006e14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	6179      	str	r1, [r7, #20]
 8006e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	09db      	lsrs	r3, r3, #7
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2b7f      	cmp	r3, #127	; 0x7f
 8006e18:	d8f0      	bhi.n	8006dfc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	617a      	str	r2, [r7, #20]
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006e2a:	221b      	movs	r2, #27
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	68b8      	ldr	r0, [r7, #8]
 8006e30:	f7fe fbae 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f383 8811 	msr	BASEPRI, r3
}
 8006e3a:	bf00      	nop
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200143c4 	.word	0x200143c4
 8006e48:	200143c0 	.word	0x200143c0

08006e4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006e4c:	b40f      	push	{r0, r1, r2, r3}
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b082      	sub	sp, #8
 8006e52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006e5a:	1d3b      	adds	r3, r7, #4
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2100      	movs	r1, #0
 8006e60:	6938      	ldr	r0, [r7, #16]
 8006e62:	f7fe fea7 	bl	8005bb4 <_VPrintTarget>
  va_end(ParamList);
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e70:	b004      	add	sp, #16
 8006e72:	4770      	bx	lr

08006e74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08a      	sub	sp, #40	; 0x28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e80:	f04f 0120 	mov.w	r1, #32
 8006e84:	f381 8811 	msr	BASEPRI, r1
 8006e88:	617b      	str	r3, [r7, #20]
 8006e8a:	4827      	ldr	r0, [pc, #156]	; (8006f28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006e8c:	f7fe fa90 	bl	80053b0 <_PreparePacket>
 8006e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e92:	2280      	movs	r2, #128	; 0x80
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	6938      	ldr	r0, [r7, #16]
 8006e98:	f7fe fa5a 	bl	8005350 <_EncodeStr>
 8006e9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	623b      	str	r3, [r7, #32]
 8006ea6:	e00b      	b.n	8006ec0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	1c59      	adds	r1, r3, #1
 8006eb0:	6279      	str	r1, [r7, #36]	; 0x24
 8006eb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	701a      	strb	r2, [r3, #0]
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	09db      	lsrs	r3, r3, #7
 8006ebe:	623b      	str	r3, [r7, #32]
 8006ec0:	6a3b      	ldr	r3, [r7, #32]
 8006ec2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec4:	d8f0      	bhi.n	8006ea8 <SEGGER_SYSVIEW_Warn+0x34>
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	627a      	str	r2, [r7, #36]	; 0x24
 8006ecc:	6a3a      	ldr	r2, [r7, #32]
 8006ece:	b2d2      	uxtb	r2, r2
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	61fb      	str	r3, [r7, #28]
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	e00b      	b.n	8006ef8 <SEGGER_SYSVIEW_Warn+0x84>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	61f9      	str	r1, [r7, #28]
 8006eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	2b7f      	cmp	r3, #127	; 0x7f
 8006efc:	d8f0      	bhi.n	8006ee0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	61fa      	str	r2, [r7, #28]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006f0e:	221a      	movs	r2, #26
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	6938      	ldr	r0, [r7, #16]
 8006f14:	f7fe fb3c 	bl	8005590 <_SendPacket>
  RECORD_END();
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
}
 8006f1e:	bf00      	nop
 8006f20:	3728      	adds	r7, #40	; 0x28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200143c4 	.word	0x200143c4

08006f2c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006f30:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f32:	7e1b      	ldrb	r3, [r3, #24]
 8006f34:	4619      	mov	r1, r3
 8006f36:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f38:	460b      	mov	r3, r1
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	440b      	add	r3, r1
 8006f3e:	00db      	lsls	r3, r3, #3
 8006f40:	4413      	add	r3, r2
 8006f42:	336c      	adds	r3, #108	; 0x6c
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f48:	7e1b      	ldrb	r3, [r3, #24]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	490d      	ldr	r1, [pc, #52]	; (8006f84 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006f4e:	4603      	mov	r3, r0
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4403      	add	r3, r0
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	440b      	add	r3, r1
 8006f58:	3370      	adds	r3, #112	; 0x70
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d00b      	beq.n	8006f78 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006f60:	4b07      	ldr	r3, [pc, #28]	; (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f62:	789b      	ldrb	r3, [r3, #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d107      	bne.n	8006f78 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006f68:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006f6e:	f7fe fa2b 	bl	80053c8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006f72:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006f78:	4b01      	ldr	r3, [pc, #4]	; (8006f80 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	20014394 	.word	0x20014394
 8006f84:	20012ed4 	.word	0x20012ed4

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4d0d      	ldr	r5, [pc, #52]	; (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	; (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1b64      	subs	r4, r4, r5
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2600      	movs	r6, #0
 8006f94:	42a6      	cmp	r6, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4d0b      	ldr	r5, [pc, #44]	; (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	; (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 f83e 	bl	800701c <_init>
 8006fa0:	1b64      	subs	r4, r4, r5
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2600      	movs	r6, #0
 8006fa6:	42a6      	cmp	r6, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb0:	4798      	blx	r3
 8006fb2:	3601      	adds	r6, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fba:	4798      	blx	r3
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	080071d4 	.word	0x080071d4
 8006fc4:	080071d4 	.word	0x080071d4
 8006fc8:	080071d4 	.word	0x080071d4
 8006fcc:	080071d8 	.word	0x080071d8

08006fd0 <memcmp>:
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	3901      	subs	r1, #1
 8006fd4:	4402      	add	r2, r0
 8006fd6:	4290      	cmp	r0, r2
 8006fd8:	d101      	bne.n	8006fde <memcmp+0xe>
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e005      	b.n	8006fea <memcmp+0x1a>
 8006fde:	7803      	ldrb	r3, [r0, #0]
 8006fe0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d001      	beq.n	8006fec <memcmp+0x1c>
 8006fe8:	1b18      	subs	r0, r3, r4
 8006fea:	bd10      	pop	{r4, pc}
 8006fec:	3001      	adds	r0, #1
 8006fee:	e7f2      	b.n	8006fd6 <memcmp+0x6>

08006ff0 <memcpy>:
 8006ff0:	440a      	add	r2, r1
 8006ff2:	4291      	cmp	r1, r2
 8006ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ff8:	d100      	bne.n	8006ffc <memcpy+0xc>
 8006ffa:	4770      	bx	lr
 8006ffc:	b510      	push	{r4, lr}
 8006ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007006:	4291      	cmp	r1, r2
 8007008:	d1f9      	bne.n	8006ffe <memcpy+0xe>
 800700a:	bd10      	pop	{r4, pc}

0800700c <memset>:
 800700c:	4402      	add	r2, r0
 800700e:	4603      	mov	r3, r0
 8007010:	4293      	cmp	r3, r2
 8007012:	d100      	bne.n	8007016 <memset+0xa>
 8007014:	4770      	bx	lr
 8007016:	f803 1b01 	strb.w	r1, [r3], #1
 800701a:	e7f9      	b.n	8007010 <memset+0x4>

0800701c <_init>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	bf00      	nop
 8007020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007022:	bc08      	pop	{r3}
 8007024:	469e      	mov	lr, r3
 8007026:	4770      	bx	lr

08007028 <_fini>:
 8007028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800702a:	bf00      	nop
 800702c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800702e:	bc08      	pop	{r3}
 8007030:	469e      	mov	lr, r3
 8007032:	4770      	bx	lr
