
004LED_Periodic_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f84  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072ac  080072ac  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072b4  080072b4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072b4  080072b4  000172b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080072bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001448c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000157f5  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003069  00000000  00000000  00035841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c0  00000000  00000000  000388b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001238  00000000  00000000  00039c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002304a  00000000  00000000  0003aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015660  00000000  00000000  0005def2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7cd1  00000000  00000000  00073552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b223  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005290  00000000  00000000  0014b274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070fc 	.word	0x080070fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080070fc 	.word	0x080070fc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b974 	b.w	8000564 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9d08      	ldr	r5, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	468e      	mov	lr, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14d      	bne.n	800033e <__udivmoddi4+0xaa>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4694      	mov	ip, r2
 80002a6:	d969      	bls.n	800037c <__udivmoddi4+0xe8>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b152      	cbz	r2, 80002c4 <__udivmoddi4+0x30>
 80002ae:	fa01 f302 	lsl.w	r3, r1, r2
 80002b2:	f1c2 0120 	rsb	r1, r2, #32
 80002b6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ba:	fa0c fc02 	lsl.w	ip, ip, r2
 80002be:	ea41 0e03 	orr.w	lr, r1, r3
 80002c2:	4094      	lsls	r4, r2
 80002c4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c8:	0c21      	lsrs	r1, r4, #16
 80002ca:	fbbe f6f8 	udiv	r6, lr, r8
 80002ce:	fa1f f78c 	uxth.w	r7, ip
 80002d2:	fb08 e316 	mls	r3, r8, r6, lr
 80002d6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002da:	fb06 f107 	mul.w	r1, r6, r7
 80002de:	4299      	cmp	r1, r3
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x64>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ea:	f080 811f 	bcs.w	800052c <__udivmoddi4+0x298>
 80002ee:	4299      	cmp	r1, r3
 80002f0:	f240 811c 	bls.w	800052c <__udivmoddi4+0x298>
 80002f4:	3e02      	subs	r6, #2
 80002f6:	4463      	add	r3, ip
 80002f8:	1a5b      	subs	r3, r3, r1
 80002fa:	b2a4      	uxth	r4, r4
 80002fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000300:	fb08 3310 	mls	r3, r8, r0, r3
 8000304:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000308:	fb00 f707 	mul.w	r7, r0, r7
 800030c:	42a7      	cmp	r7, r4
 800030e:	d90a      	bls.n	8000326 <__udivmoddi4+0x92>
 8000310:	eb1c 0404 	adds.w	r4, ip, r4
 8000314:	f100 33ff 	add.w	r3, r0, #4294967295
 8000318:	f080 810a 	bcs.w	8000530 <__udivmoddi4+0x29c>
 800031c:	42a7      	cmp	r7, r4
 800031e:	f240 8107 	bls.w	8000530 <__udivmoddi4+0x29c>
 8000322:	4464      	add	r4, ip
 8000324:	3802      	subs	r0, #2
 8000326:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032a:	1be4      	subs	r4, r4, r7
 800032c:	2600      	movs	r6, #0
 800032e:	b11d      	cbz	r5, 8000338 <__udivmoddi4+0xa4>
 8000330:	40d4      	lsrs	r4, r2
 8000332:	2300      	movs	r3, #0
 8000334:	e9c5 4300 	strd	r4, r3, [r5]
 8000338:	4631      	mov	r1, r6
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033e:	428b      	cmp	r3, r1
 8000340:	d909      	bls.n	8000356 <__udivmoddi4+0xc2>
 8000342:	2d00      	cmp	r5, #0
 8000344:	f000 80ef 	beq.w	8000526 <__udivmoddi4+0x292>
 8000348:	2600      	movs	r6, #0
 800034a:	e9c5 0100 	strd	r0, r1, [r5]
 800034e:	4630      	mov	r0, r6
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	fab3 f683 	clz	r6, r3
 800035a:	2e00      	cmp	r6, #0
 800035c:	d14a      	bne.n	80003f4 <__udivmoddi4+0x160>
 800035e:	428b      	cmp	r3, r1
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xd4>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 80f9 	bhi.w	800055a <__udivmoddi4+0x2c6>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb61 0303 	sbc.w	r3, r1, r3
 800036e:	2001      	movs	r0, #1
 8000370:	469e      	mov	lr, r3
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e0      	beq.n	8000338 <__udivmoddi4+0xa4>
 8000376:	e9c5 4e00 	strd	r4, lr, [r5]
 800037a:	e7dd      	b.n	8000338 <__udivmoddi4+0xa4>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xec>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f282 	clz	r2, r2
 8000384:	2a00      	cmp	r2, #0
 8000386:	f040 8092 	bne.w	80004ae <__udivmoddi4+0x21a>
 800038a:	eba1 010c 	sub.w	r1, r1, ip
 800038e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000392:	fa1f fe8c 	uxth.w	lr, ip
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f3f7 	udiv	r3, r1, r7
 800039e:	fb07 1113 	mls	r1, r7, r3, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb0e f003 	mul.w	r0, lr, r3
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x12c>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x12a>
 80003b8:	4288      	cmp	r0, r1
 80003ba:	f200 80cb 	bhi.w	8000554 <__udivmoddi4+0x2c0>
 80003be:	4643      	mov	r3, r8
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003c8:	fb07 1110 	mls	r1, r7, r0, r1
 80003cc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003d0:	fb0e fe00 	mul.w	lr, lr, r0
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x156>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	d202      	bcs.n	80003e8 <__udivmoddi4+0x154>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	f200 80bb 	bhi.w	800055e <__udivmoddi4+0x2ca>
 80003e8:	4608      	mov	r0, r1
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003f2:	e79c      	b.n	800032e <__udivmoddi4+0x9a>
 80003f4:	f1c6 0720 	rsb	r7, r6, #32
 80003f8:	40b3      	lsls	r3, r6
 80003fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000402:	fa20 f407 	lsr.w	r4, r0, r7
 8000406:	fa01 f306 	lsl.w	r3, r1, r6
 800040a:	431c      	orrs	r4, r3
 800040c:	40f9      	lsrs	r1, r7
 800040e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000412:	fa00 f306 	lsl.w	r3, r0, r6
 8000416:	fbb1 f8f9 	udiv	r8, r1, r9
 800041a:	0c20      	lsrs	r0, r4, #16
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fb09 1118 	mls	r1, r9, r8, r1
 8000424:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000428:	fb08 f00e 	mul.w	r0, r8, lr
 800042c:	4288      	cmp	r0, r1
 800042e:	fa02 f206 	lsl.w	r2, r2, r6
 8000432:	d90b      	bls.n	800044c <__udivmoddi4+0x1b8>
 8000434:	eb1c 0101 	adds.w	r1, ip, r1
 8000438:	f108 3aff 	add.w	sl, r8, #4294967295
 800043c:	f080 8088 	bcs.w	8000550 <__udivmoddi4+0x2bc>
 8000440:	4288      	cmp	r0, r1
 8000442:	f240 8085 	bls.w	8000550 <__udivmoddi4+0x2bc>
 8000446:	f1a8 0802 	sub.w	r8, r8, #2
 800044a:	4461      	add	r1, ip
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f9 	udiv	r0, r1, r9
 8000454:	fb09 1110 	mls	r1, r9, r0, r1
 8000458:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800045c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000460:	458e      	cmp	lr, r1
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x1e2>
 8000464:	eb1c 0101 	adds.w	r1, ip, r1
 8000468:	f100 34ff 	add.w	r4, r0, #4294967295
 800046c:	d26c      	bcs.n	8000548 <__udivmoddi4+0x2b4>
 800046e:	458e      	cmp	lr, r1
 8000470:	d96a      	bls.n	8000548 <__udivmoddi4+0x2b4>
 8000472:	3802      	subs	r0, #2
 8000474:	4461      	add	r1, ip
 8000476:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800047a:	fba0 9402 	umull	r9, r4, r0, r2
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	42a1      	cmp	r1, r4
 8000484:	46c8      	mov	r8, r9
 8000486:	46a6      	mov	lr, r4
 8000488:	d356      	bcc.n	8000538 <__udivmoddi4+0x2a4>
 800048a:	d053      	beq.n	8000534 <__udivmoddi4+0x2a0>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x212>
 800048e:	ebb3 0208 	subs.w	r2, r3, r8
 8000492:	eb61 010e 	sbc.w	r1, r1, lr
 8000496:	fa01 f707 	lsl.w	r7, r1, r7
 800049a:	fa22 f306 	lsr.w	r3, r2, r6
 800049e:	40f1      	lsrs	r1, r6
 80004a0:	431f      	orrs	r7, r3
 80004a2:	e9c5 7100 	strd	r7, r1, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	40d8      	lsrs	r0, r3
 80004b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b8:	fa21 f303 	lsr.w	r3, r1, r3
 80004bc:	4091      	lsls	r1, r2
 80004be:	4301      	orrs	r1, r0
 80004c0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004cc:	fb07 3610 	mls	r6, r7, r0, r3
 80004d0:	0c0b      	lsrs	r3, r1, #16
 80004d2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004d6:	fb00 f60e 	mul.w	r6, r0, lr
 80004da:	429e      	cmp	r6, r3
 80004dc:	fa04 f402 	lsl.w	r4, r4, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x260>
 80004e2:	eb1c 0303 	adds.w	r3, ip, r3
 80004e6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ea:	d22f      	bcs.n	800054c <__udivmoddi4+0x2b8>
 80004ec:	429e      	cmp	r6, r3
 80004ee:	d92d      	bls.n	800054c <__udivmoddi4+0x2b8>
 80004f0:	3802      	subs	r0, #2
 80004f2:	4463      	add	r3, ip
 80004f4:	1b9b      	subs	r3, r3, r6
 80004f6:	b289      	uxth	r1, r1
 80004f8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004fc:	fb07 3316 	mls	r3, r7, r6, r3
 8000500:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000504:	fb06 f30e 	mul.w	r3, r6, lr
 8000508:	428b      	cmp	r3, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x28a>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f106 38ff 	add.w	r8, r6, #4294967295
 8000514:	d216      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 8000516:	428b      	cmp	r3, r1
 8000518:	d914      	bls.n	8000544 <__udivmoddi4+0x2b0>
 800051a:	3e02      	subs	r6, #2
 800051c:	4461      	add	r1, ip
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000524:	e738      	b.n	8000398 <__udivmoddi4+0x104>
 8000526:	462e      	mov	r6, r5
 8000528:	4628      	mov	r0, r5
 800052a:	e705      	b.n	8000338 <__udivmoddi4+0xa4>
 800052c:	4606      	mov	r6, r0
 800052e:	e6e3      	b.n	80002f8 <__udivmoddi4+0x64>
 8000530:	4618      	mov	r0, r3
 8000532:	e6f8      	b.n	8000326 <__udivmoddi4+0x92>
 8000534:	454b      	cmp	r3, r9
 8000536:	d2a9      	bcs.n	800048c <__udivmoddi4+0x1f8>
 8000538:	ebb9 0802 	subs.w	r8, r9, r2
 800053c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000540:	3801      	subs	r0, #1
 8000542:	e7a3      	b.n	800048c <__udivmoddi4+0x1f8>
 8000544:	4646      	mov	r6, r8
 8000546:	e7ea      	b.n	800051e <__udivmoddi4+0x28a>
 8000548:	4620      	mov	r0, r4
 800054a:	e794      	b.n	8000476 <__udivmoddi4+0x1e2>
 800054c:	4640      	mov	r0, r8
 800054e:	e7d1      	b.n	80004f4 <__udivmoddi4+0x260>
 8000550:	46d0      	mov	r8, sl
 8000552:	e77b      	b.n	800044c <__udivmoddi4+0x1b8>
 8000554:	3b02      	subs	r3, #2
 8000556:	4461      	add	r1, ip
 8000558:	e732      	b.n	80003c0 <__udivmoddi4+0x12c>
 800055a:	4630      	mov	r0, r6
 800055c:	e709      	b.n	8000372 <__udivmoddi4+0xde>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e742      	b.n	80003ea <__udivmoddi4+0x156>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fba3 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f86d 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8d5 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= ( 1<< 0);
 800057a:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <main+0xc8>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a2c      	ldr	r2, [pc, #176]	; (8000630 <main+0xc8>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000586:	482b      	ldr	r0, [pc, #172]	; (8000634 <main+0xcc>)
 8000588:	f004 faf8 	bl	8004b7c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 800058c:	f004 f920 	bl	80047d0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	2302      	movs	r3, #2
 8000598:	9300      	str	r3, [sp, #0]
 800059a:	2300      	movs	r3, #0
 800059c:	22c8      	movs	r2, #200	; 0xc8
 800059e:	4926      	ldr	r1, [pc, #152]	; (8000638 <main+0xd0>)
 80005a0:	4826      	ldr	r0, [pc, #152]	; (800063c <main+0xd4>)
 80005a2:	f002 f9a1 	bl	80028e8 <xTaskCreate>
 80005a6:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005a8:	69fb      	ldr	r3, [r7, #28]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d00a      	beq.n	80005c4 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b2:	f383 8811 	msr	BASEPRI, r3
 80005b6:	f3bf 8f6f 	isb	sy
 80005ba:	f3bf 8f4f 	dsb	sy
 80005be:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c0:	bf00      	nop
 80005c2:	e7fe      	b.n	80005c2 <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task2_handle);
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	491b      	ldr	r1, [pc, #108]	; (8000640 <main+0xd8>)
 80005d4:	481b      	ldr	r0, [pc, #108]	; (8000644 <main+0xdc>)
 80005d6:	f002 f987 	bl	80028e8 <xTaskCreate>
 80005da:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x90>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	617b      	str	r3, [r7, #20]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	; 0xc8
 8000604:	4910      	ldr	r1, [pc, #64]	; (8000648 <main+0xe0>)
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <main+0xe4>)
 8000608:	f002 f96e 	bl	80028e8 <xTaskCreate>
 800060c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00a      	beq.n	800062a <main+0xc2>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <main+0xc0>

  vTaskStartScheduler();
 800062a:	f002 fb67 	bl	8002cfc <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xc6>
 8000630:	e0001000 	.word	0xe0001000
 8000634:	0007a120 	.word	0x0007a120
 8000638:	08007114 	.word	0x08007114
 800063c:	080009e1 	.word	0x080009e1
 8000640:	08007124 	.word	0x08007124
 8000644:	08000a19 	.word	0x08000a19
 8000648:	08007134 	.word	0x08007134
 800064c:	08000a51 	.word	0x08000a51

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	; 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	; 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f006 fd44 	bl	80070ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	; (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	; (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	; (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006c4:	23a8      	movs	r3, #168	; 0xa8
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fde3 	bl	80012a0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9e4 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2105      	movs	r1, #5
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f844 	bl	8001790 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9cd 	bl	8000aac <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	; 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	; (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd26 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd21 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd1b 	bl	8001238 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000802:	2308      	movs	r3, #8
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	486c      	ldr	r0, [pc, #432]	; (80009cc <MX_GPIO_Init+0x2a8>)
 800081a:	f000 fb71 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4866      	ldr	r0, [pc, #408]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000836:	f000 fb63 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084a:	2305      	movs	r3, #5
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	485e      	ldr	r0, [pc, #376]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 8000856:	f000 fb53 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800085a:	2301      	movs	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	485a      	ldr	r0, [pc, #360]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000870:	f000 fb46 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000874:	2310      	movs	r3, #16
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000884:	2306      	movs	r3, #6
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4852      	ldr	r0, [pc, #328]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000890:	f000 fb36 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000894:	23e0      	movs	r3, #224	; 0xe0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000898:	2302      	movs	r3, #2
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a4:	2305      	movs	r3, #5
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 031c 	add.w	r3, r7, #28
 80008ac:	4619      	mov	r1, r3
 80008ae:	484a      	ldr	r0, [pc, #296]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 80008b0:	f000 fb26 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008b4:	2304      	movs	r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4845      	ldr	r0, [pc, #276]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008c8:	f000 fb1a 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	483c      	ldr	r0, [pc, #240]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80008ea:	f000 fb09 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4833      	ldr	r0, [pc, #204]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 8000908:	f000 fafa 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800090c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800091e:	2306      	movs	r3, #6
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4829      	ldr	r0, [pc, #164]	; (80009d0 <MX_GPIO_Init+0x2ac>)
 800092a:	f000 fae9 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800092e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4825      	ldr	r0, [pc, #148]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000944:	f000 fadc 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000948:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800095a:	230a      	movs	r3, #10
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4619      	mov	r1, r3
 8000964:	481c      	ldr	r0, [pc, #112]	; (80009d8 <MX_GPIO_Init+0x2b4>)
 8000966:	f000 facb 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800096a:	2320      	movs	r3, #32
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4815      	ldr	r0, [pc, #84]	; (80009d4 <MX_GPIO_Init+0x2b0>)
 800097e:	f000 fabf 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000982:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000988:	2312      	movs	r3, #18
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000994:	2304      	movs	r3, #4
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480f      	ldr	r0, [pc, #60]	; (80009dc <MX_GPIO_Init+0x2b8>)
 80009a0:	f000 faae 	bl	8000f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x2a8>)
 80009ba:	f000 faa1 	bl	8000f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	; 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 80009e8:	f002 faf8 	bl	8002fdc <xTaskGetTickCount>
 80009ec:	4603      	mov	r3, r0
 80009ee:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009f0:	4807      	ldr	r0, [pc, #28]	; (8000a10 <led_green_handler+0x30>)
 80009f2:	f006 fa9b 	bl	8006f2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 80009f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <led_green_handler+0x34>)
 80009fc:	f000 fc35 	bl	800126a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f002 f8f5 	bl	8002bf8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a0e:	e7ef      	b.n	80009f0 <led_green_handler+0x10>
 8000a10:	08007144 	.word	0x08007144
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <led_red_handler>:
	}
}

static void led_red_handler(void* parameters)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a20:	f002 fadc 	bl	8002fdc <xTaskGetTickCount>
 8000a24:	4603      	mov	r3, r0
 8000a26:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <led_red_handler+0x30>)
 8000a2a:	f006 fa7f 	bl	8006f2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_ORANGE_PIN);
 8000a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a32:	4806      	ldr	r0, [pc, #24]	; (8000a4c <led_red_handler+0x34>)
 8000a34:	f000 fc19 	bl	800126a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(800));
 8000a38:	f107 030c 	add.w	r3, r7, #12
 8000a3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 f8d9 	bl	8002bf8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a46:	e7ef      	b.n	8000a28 <led_red_handler+0x10>
 8000a48:	08007158 	.word	0x08007158
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <led_orange_handler>:
	}
}

static void led_orange_handler(void* parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;

	last_wakeup_time = xTaskGetTickCount();
 8000a58:	f002 fac0 	bl	8002fdc <xTaskGetTickCount>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a60:	4807      	ldr	r0, [pc, #28]	; (8000a80 <led_orange_handler+0x30>)
 8000a62:	f006 fa63 	bl	8006f2c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 8000a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <led_orange_handler+0x34>)
 8000a6c:	f000 fbfd 	bl	800126a <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(400));
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 f8bd 	bl	8002bf8 <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a7e:	e7ef      	b.n	8000a60 <led_orange_handler+0x10>
 8000a80:	0800716c 	.word	0x0800716c
 8000a84:	40020c00 	.word	0x40020c00

08000a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a9a:	f000 f92f 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40001000 	.word	0x40001000

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ac8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000acc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x4c>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000af6:	f003 fae7 	bl	80040c8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	; 0x38
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	4b33      	ldr	r3, [pc, #204]	; (8000bec <HAL_InitTick+0xe4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a32      	ldr	r2, [pc, #200]	; (8000bec <HAL_InitTick+0xe4>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b30      	ldr	r3, [pc, #192]	; (8000bec <HAL_InitTick+0xe4>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b34:	f107 0210 	add.w	r2, r7, #16
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f001 f832 	bl	8001ba8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d103      	bne.n	8000b56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4e:	f001 f817 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8000b52:	6378      	str	r0, [r7, #52]	; 0x34
 8000b54:	e004      	b.n	8000b60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b56:	f001 f813 	bl	8001b80 <HAL_RCC_GetPCLK1Freq>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b62:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <HAL_InitTick+0xe8>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	0c9b      	lsrs	r3, r3, #18
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <HAL_InitTick+0xf0>)
 8000b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b94:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <HAL_InitTick+0xec>)
 8000b96:	f001 f839 	bl	8001c0c <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d11b      	bne.n	8000be0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba8:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <HAL_InitTick+0xec>)
 8000baa:	f001 f889 	bl	8001cc0 <HAL_TIM_Base_Start_IT>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d111      	bne.n	8000be0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bbc:	2036      	movs	r0, #54	; 0x36
 8000bbe:	f000 f991 	bl	8000ee4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b0f      	cmp	r3, #15
 8000bc6:	d808      	bhi.n	8000bda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2036      	movs	r0, #54	; 0x36
 8000bce:	f000 f96d 	bl	8000eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0xf4>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6013      	str	r3, [r2, #0]
 8000bd8:	e002      	b.n	8000be0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3738      	adds	r7, #56	; 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	20000038 	.word	0x20000038
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM6_DAC_IRQHandler+0x10>)
 8000c32:	f001 f8b5 	bl	8001da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000038 	.word	0x20000038

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f006 f9e9 	bl	8007068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fc67 	bl	8000568 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ca8:	080072bc 	.word	0x080072bc
  ldr r2, =_sbss
 8000cac:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cb0:	200144a8 	.word	0x200144a8

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8d8 	bl	8000e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff ff0e 	bl	8000b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fee4 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000080 	.word	0x20000080

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000080 	.word	0x20000080

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff4c 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebe:	f7ff ff61 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f7ff ffb1 	bl	8000e30 <NVIC_EncodePriority>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff80 	bl	8000ddc <__NVIC_SetPriority>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff54 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e16b      	b.n	80011f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 815a 	bne.w	80011ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80b4 	beq.w	80011ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5f      	ldr	r2, [pc, #380]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a5b      	ldr	r2, [pc, #364]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x320>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x32c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20a>
 8001106:	2307      	movs	r3, #7
 8001108:	e00e      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110a:	2308      	movs	r3, #8
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110e:	2306      	movs	r3, #6
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4935      	ldr	r1, [pc, #212]	; (8001210 <HAL_GPIO_Init+0x310>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x334>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x334>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f ae90 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126a:	b480      	push	{r7}
 800126c:	b085      	sub	sp, #20
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800127c:	887a      	ldrh	r2, [r7, #2]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4013      	ands	r3, r2
 8001282:	041a      	lsls	r2, r3, #16
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43d9      	mvns	r1, r3
 8001288:	887b      	ldrh	r3, [r7, #2]
 800128a:	400b      	ands	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e267      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d075      	beq.n	80013aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 030c 	and.w	r3, r3, #12
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d00c      	beq.n	80012e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b85      	ldr	r3, [pc, #532]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012d2:	2b08      	cmp	r3, #8
 80012d4:	d112      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4b82      	ldr	r3, [pc, #520]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b7e      	ldr	r3, [pc, #504]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d05b      	beq.n	80013a8 <HAL_RCC_OscConfig+0x108>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d157      	bne.n	80013a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e242      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x74>
 8001306:	4b76      	ldr	r3, [pc, #472]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a75      	ldr	r2, [pc, #468]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b70      	ldr	r3, [pc, #448]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a6f      	ldr	r2, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a6c      	ldr	r2, [pc, #432]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0xb0>
 8001338:	4b69      	ldr	r3, [pc, #420]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a68      	ldr	r2, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b66      	ldr	r3, [pc, #408]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a65      	ldr	r2, [pc, #404]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d013      	beq.n	8001380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fce4 	bl	8000d24 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fce0 	bl	8000d24 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e207      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0xc0>
 800137e:	e014      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff fcd0 	bl	8000d24 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001388:	f7ff fccc 	bl	8000d24 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b64      	cmp	r3, #100	; 0x64
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1f3      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139a:	4b51      	ldr	r3, [pc, #324]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0xe8>
 80013a6:	e000      	b.n	80013aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d063      	beq.n	800147e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	4b4a      	ldr	r3, [pc, #296]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f003 030c 	and.w	r3, r3, #12
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00b      	beq.n	80013da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d11c      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d116      	bne.n	8001408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	4b41      	ldr	r3, [pc, #260]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1c7      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001402:	4313      	orrs	r3, r2
 8001404:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001406:	e03a      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <HAL_RCC_OscConfig+0x244>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001416:	f7ff fc85 	bl	8000d24 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141e:	f7ff fc81 	bl	8000d24 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1a8      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4925      	ldr	r1, [pc, #148]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
 8001450:	e015      	b.n	800147e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <HAL_RCC_OscConfig+0x244>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fc64 	bl	8000d24 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001460:	f7ff fc60 	bl	8000d24 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e187      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d036      	beq.n	80014f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d016      	beq.n	80014c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_RCC_OscConfig+0x248>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001498:	f7ff fc44 	bl	8000d24 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc40 	bl	8000d24 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e167      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <HAL_RCC_OscConfig+0x240>)
 80014b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x200>
 80014be:	e01b      	b.n	80014f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_RCC_OscConfig+0x248>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c6:	f7ff fc2d 	bl	8000d24 <HAL_GetTick>
 80014ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014cc:	e00e      	b.n	80014ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ce:	f7ff fc29 	bl	8000d24 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d907      	bls.n	80014ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e150      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	42470000 	.word	0x42470000
 80014e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1ea      	bne.n	80014ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8097 	beq.w	8001634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b81      	ldr	r3, [pc, #516]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b7d      	ldr	r3, [pc, #500]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a7c      	ldr	r2, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b7a      	ldr	r3, [pc, #488]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001536:	4b77      	ldr	r3, [pc, #476]	; (8001714 <HAL_RCC_OscConfig+0x474>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d118      	bne.n	8001574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001542:	4b74      	ldr	r3, [pc, #464]	; (8001714 <HAL_RCC_OscConfig+0x474>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a73      	ldr	r2, [pc, #460]	; (8001714 <HAL_RCC_OscConfig+0x474>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff fbe9 	bl	8000d24 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001556:	f7ff fbe5 	bl	8000d24 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e10c      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	4b6a      	ldr	r3, [pc, #424]	; (8001714 <HAL_RCC_OscConfig+0x474>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x2ea>
 800157c:	4b64      	ldr	r3, [pc, #400]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a63      	ldr	r2, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	e01c      	b.n	80015c4 <HAL_RCC_OscConfig+0x324>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x30c>
 8001592:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a5e      	ldr	r2, [pc, #376]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a5b      	ldr	r2, [pc, #364]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x324>
 80015ac:	4b58      	ldr	r3, [pc, #352]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a57      	ldr	r2, [pc, #348]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	4b55      	ldr	r3, [pc, #340]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015bc:	4a54      	ldr	r2, [pc, #336]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015be:	f023 0304 	bic.w	r3, r3, #4
 80015c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d015      	beq.n	80015f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015cc:	f7ff fbaa 	bl	8000d24 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff fba6 	bl	8000d24 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0cb      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	4b49      	ldr	r3, [pc, #292]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0ee      	beq.n	80015d4 <HAL_RCC_OscConfig+0x334>
 80015f6:	e014      	b.n	8001622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f8:	f7ff fb94 	bl	8000d24 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	e00a      	b.n	8001616 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fb90 	bl	8000d24 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f241 3288 	movw	r2, #5000	; 0x1388
 800160e:	4293      	cmp	r3, r2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e0b5      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1ee      	bne.n	8001600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	4a38      	ldr	r2, [pc, #224]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 800162e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001632:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a1 	beq.w	8001780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b08      	cmp	r3, #8
 8001648:	d05c      	beq.n	8001704 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b02      	cmp	r3, #2
 8001650:	d141      	bne.n	80016d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <HAL_RCC_OscConfig+0x478>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb64 	bl	8000d24 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb60 	bl	8000d24 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e087      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	3b01      	subs	r3, #1
 8001698:	041b      	lsls	r3, r3, #16
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	491b      	ldr	r1, [pc, #108]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x478>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb39 	bl	8000d24 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b6:	f7ff fb35 	bl	8000d24 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e05c      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x416>
 80016d4:	e054      	b.n	8001780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_RCC_OscConfig+0x478>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016dc:	f7ff fb22 	bl	8000d24 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff fb1e 	bl	8000d24 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e045      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_RCC_OscConfig+0x470>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x444>
 8001702:	e03d      	b.n	8001780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e038      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000
 8001718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_RCC_OscConfig+0x4ec>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d028      	beq.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d121      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d11a      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800174c:	4013      	ands	r3, r2
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	4293      	cmp	r3, r2
 8001756:	d111      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	085b      	lsrs	r3, r3, #1
 8001764:	3b01      	subs	r3, #1
 8001766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001768:	429a      	cmp	r2, r3
 800176a:	d107      	bne.n	800177c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e0cc      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017a4:	4b68      	ldr	r3, [pc, #416]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d90c      	bls.n	80017cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e0b8      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	494d      	ldr	r1, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	4313      	orrs	r3, r2
 8001818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d044      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4b47      	ldr	r3, [pc, #284]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b02      	cmp	r3, #2
 8001844:	d003      	beq.n	800184e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184e:	4b3f      	ldr	r3, [pc, #252]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d109      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e06f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e067      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186e:	4b37      	ldr	r3, [pc, #220]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 0203 	bic.w	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4934      	ldr	r1, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001880:	f7ff fa50 	bl	8000d24 <HAL_GetTick>
 8001884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	e00a      	b.n	800189e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001888:	f7ff fa4c 	bl	8000d24 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f241 3288 	movw	r2, #5000	; 0x1388
 8001896:	4293      	cmp	r3, r2
 8001898:	d901      	bls.n	800189e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e04f      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 020c 	and.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1eb      	bne.n	8001888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b0:	4b25      	ldr	r3, [pc, #148]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20c      	bcs.n	80018d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d001      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e032      	b.n	800193e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4916      	ldr	r1, [pc, #88]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d009      	beq.n	8001916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4602      	mov	r2, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	490a      	ldr	r1, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	fa22 f303 	lsr.w	r3, r2, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x1c8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f8e6 	bl	8000b08 <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00
 800194c:	40023800 	.word	0x40023800
 8001950:	08007258 	.word	0x08007258
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001960:	b094      	sub	sp, #80	; 0x50
 8001962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001964:	2300      	movs	r3, #0
 8001966:	647b      	str	r3, [r7, #68]	; 0x44
 8001968:	2300      	movs	r3, #0
 800196a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800196c:	2300      	movs	r3, #0
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001974:	4b79      	ldr	r3, [pc, #484]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d00d      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001980:	2b08      	cmp	r3, #8
 8001982:	f200 80e1 	bhi.w	8001b48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 800198a:	2b04      	cmp	r3, #4
 800198c:	d003      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x3a>
 800198e:	e0db      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001990:	4b73      	ldr	r3, [pc, #460]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001992:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001994:	e0db      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b73      	ldr	r3, [pc, #460]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x208>)
 8001998:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800199a:	e0d8      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800199c:	4b6f      	ldr	r3, [pc, #444]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a6:	4b6d      	ldr	r3, [pc, #436]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d063      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	4b6a      	ldr	r3, [pc, #424]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	099b      	lsrs	r3, r3, #6
 80019b8:	2200      	movs	r2, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80019bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
 80019ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019ce:	4622      	mov	r2, r4
 80019d0:	462b      	mov	r3, r5
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0159      	lsls	r1, r3, #5
 80019dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e0:	0150      	lsls	r0, r2, #5
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4621      	mov	r1, r4
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	6139      	str	r1, [r7, #16]
 80019ec:	4629      	mov	r1, r5
 80019ee:	eb63 0301 	sbc.w	r3, r3, r1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a00:	4659      	mov	r1, fp
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	4651      	mov	r1, sl
 8001a06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	018a      	lsls	r2, r1, #6
 8001a0e:	4651      	mov	r1, sl
 8001a10:	ebb2 0801 	subs.w	r8, r2, r1
 8001a14:	4659      	mov	r1, fp
 8001a16:	eb63 0901 	sbc.w	r9, r3, r1
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	f04f 0300 	mov.w	r3, #0
 8001a22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a2e:	4690      	mov	r8, r2
 8001a30:	4699      	mov	r9, r3
 8001a32:	4623      	mov	r3, r4
 8001a34:	eb18 0303 	adds.w	r3, r8, r3
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	462b      	mov	r3, r5
 8001a3c:	eb49 0303 	adc.w	r3, r9, r3
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a4e:	4629      	mov	r1, r5
 8001a50:	024b      	lsls	r3, r1, #9
 8001a52:	4621      	mov	r1, r4
 8001a54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a58:	4621      	mov	r1, r4
 8001a5a:	024a      	lsls	r2, r1, #9
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a62:	2200      	movs	r2, #0
 8001a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a6c:	f7fe fbfa 	bl	8000264 <__aeabi_uldivmod>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4613      	mov	r3, r2
 8001a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a78:	e058      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a7a:	4b38      	ldr	r3, [pc, #224]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	099b      	lsrs	r3, r3, #6
 8001a80:	2200      	movs	r2, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	4611      	mov	r1, r2
 8001a86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a8a:	623b      	str	r3, [r7, #32]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a94:	4642      	mov	r2, r8
 8001a96:	464b      	mov	r3, r9
 8001a98:	f04f 0000 	mov.w	r0, #0
 8001a9c:	f04f 0100 	mov.w	r1, #0
 8001aa0:	0159      	lsls	r1, r3, #5
 8001aa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa6:	0150      	lsls	r0, r2, #5
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4641      	mov	r1, r8
 8001aae:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ab2:	4649      	mov	r1, r9
 8001ab4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ac4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ac8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001acc:	ebb2 040a 	subs.w	r4, r2, sl
 8001ad0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 0300 	mov.w	r3, #0
 8001adc:	00eb      	lsls	r3, r5, #3
 8001ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ae2:	00e2      	lsls	r2, r4, #3
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	461d      	mov	r5, r3
 8001ae8:	4643      	mov	r3, r8
 8001aea:	18e3      	adds	r3, r4, r3
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	464b      	mov	r3, r9
 8001af0:	eb45 0303 	adc.w	r3, r5, r3
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b02:	4629      	mov	r1, r5
 8001b04:	028b      	lsls	r3, r1, #10
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	028a      	lsls	r2, r1, #10
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b16:	2200      	movs	r2, #0
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	61fa      	str	r2, [r7, #28]
 8001b1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b20:	f7fe fba0 	bl	8000264 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	0c1b      	lsrs	r3, r3, #16
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	3301      	adds	r3, #1
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b46:	e002      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b48:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3750      	adds	r7, #80	; 0x50
 8001b54:	46bd      	mov	sp, r7
 8001b56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	00f42400 	.word	0x00f42400
 8001b64:	007a1200 	.word	0x007a1200

08001b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	20000000 	.word	0x20000000

08001b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b84:	f7ff fff0 	bl	8001b68 <HAL_RCC_GetHCLKFreq>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	0a9b      	lsrs	r3, r3, #10
 8001b90:	f003 0307 	and.w	r3, r3, #7
 8001b94:	4903      	ldr	r1, [pc, #12]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b96:	5ccb      	ldrb	r3, [r1, r3]
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	08007268 	.word	0x08007268

08001ba8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_RCC_GetClockConfig+0x60>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0207 	and.w	r2, r3, #7
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40023c00 	.word	0x40023c00

08001c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e041      	b.n	8001ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f839 	bl	8001caa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	f000 f9d8 	bl	8002000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e04e      	b.n	8001d76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d02:	d01d      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1e      	ldr	r2, [pc, #120]	; (8001d8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_TIM_Base_Start_IT+0x80>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b06      	cmp	r3, #6
 8001d50:	d010      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d62:	e007      	b.n	8001d74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0201 	orr.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40010000 	.word	0x40010000
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40000800 	.word	0x40000800
 8001d90:	40000c00 	.word	0x40000c00
 8001d94:	40010400 	.word	0x40010400
 8001d98:	40014000 	.word	0x40014000
 8001d9c:	40001800 	.word	0x40001800

08001da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0202 	mvn.w	r2, #2
 8001dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8ee 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8e0 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f8f1 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d122      	bne.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0304 	and.w	r3, r3, #4
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d11b      	bne.n	8001e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0204 	mvn.w	r2, #4
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8c4 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8b6 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8c7 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d122      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0208 	mvn.w	r2, #8
 8001e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2204      	movs	r2, #4
 8001e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f89a 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001e90:	e005      	b.n	8001e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f88c 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f89d 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d122      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d11b      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0210 	mvn.w	r2, #16
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f870 	bl	8001fc4 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f862 	bl	8001fb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f873 	bl	8001fd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7fe fdb2 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	2b80      	cmp	r3, #128	; 0x80
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f902 	bl	8002154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b40      	cmp	r3, #64	; 0x40
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b40      	cmp	r3, #64	; 0x40
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f838 	bl	8001fec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d10e      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d107      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8cc 	bl	8002140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a40      	ldr	r2, [pc, #256]	; (8002114 <TIM_Base_SetConfig+0x114>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d013      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201e:	d00f      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3d      	ldr	r2, [pc, #244]	; (8002118 <TIM_Base_SetConfig+0x118>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00b      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3c      	ldr	r2, [pc, #240]	; (800211c <TIM_Base_SetConfig+0x11c>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3b      	ldr	r2, [pc, #236]	; (8002120 <TIM_Base_SetConfig+0x120>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_Base_SetConfig+0x40>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3a      	ldr	r2, [pc, #232]	; (8002124 <TIM_Base_SetConfig+0x124>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d108      	bne.n	8002052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4313      	orrs	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2f      	ldr	r2, [pc, #188]	; (8002114 <TIM_Base_SetConfig+0x114>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002060:	d027      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a2c      	ldr	r2, [pc, #176]	; (8002118 <TIM_Base_SetConfig+0x118>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d023      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a2b      	ldr	r2, [pc, #172]	; (800211c <TIM_Base_SetConfig+0x11c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d01f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <TIM_Base_SetConfig+0x120>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d01b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <TIM_Base_SetConfig+0x124>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d017      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a28      	ldr	r2, [pc, #160]	; (8002128 <TIM_Base_SetConfig+0x128>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a27      	ldr	r2, [pc, #156]	; (800212c <TIM_Base_SetConfig+0x12c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00f      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <TIM_Base_SetConfig+0x130>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d00b      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a25      	ldr	r2, [pc, #148]	; (8002134 <TIM_Base_SetConfig+0x134>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d007      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a24      	ldr	r2, [pc, #144]	; (8002138 <TIM_Base_SetConfig+0x138>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d003      	beq.n	80020b2 <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a23      	ldr	r2, [pc, #140]	; (800213c <TIM_Base_SetConfig+0x13c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d108      	bne.n	80020c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <TIM_Base_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0xf8>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d103      	bne.n	8002100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	615a      	str	r2, [r3, #20]
}
 8002106:	bf00      	nop
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	40000c00 	.word	0x40000c00
 8002124:	40010400 	.word	0x40010400
 8002128:	40014000 	.word	0x40014000
 800212c:	40014400 	.word	0x40014400
 8002130:	40014800 	.word	0x40014800
 8002134:	40001800 	.word	0x40001800
 8002138:	40001c00 	.word	0x40001c00
 800213c:	40002000 	.word	0x40002000

08002140 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f103 0208 	add.w	r2, r3, #8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f04f 32ff 	mov.w	r2, #4294967295
 8002180:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 0208 	add.w	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0208 	add.w	r2, r3, #8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021c2:	b480      	push	{r7}
 80021c4:	b085      	sub	sp, #20
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d103      	bne.n	80021e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	e00c      	b.n	80021fc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3308      	adds	r3, #8
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	e002      	b.n	80021f0 <vListInsert+0x2e>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d2f6      	bcs.n	80021ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	601a      	str	r2, [r3, #0]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6892      	ldr	r2, [r2, #8]
 800224a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6852      	ldr	r2, [r2, #4]
 8002254:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d103      	bne.n	8002268 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1e5a      	subs	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10a      	bne.n	80022b6 <xQueueGenericReset+0x2e>
        __asm volatile
 80022a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a4:	f383 8811 	msr	BASEPRI, r3
 80022a8:	f3bf 8f6f 	isb	sy
 80022ac:	f3bf 8f4f 	dsb	sy
 80022b0:	60fb      	str	r3, [r7, #12]
    }
 80022b2:	bf00      	nop
 80022b4:	e7fe      	b.n	80022b4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d05d      	beq.n	8002378 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d059      	beq.n	8002378 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022cc:	2100      	movs	r1, #0
 80022ce:	fba3 2302 	umull	r2, r3, r3, r2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d000      	beq.n	80022d8 <xQueueGenericReset+0x50>
 80022d6:	2101      	movs	r1, #1
 80022d8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d14c      	bne.n	8002378 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80022de:	f001 ff71 	bl	80041c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	441a      	add	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2200      	movs	r2, #0
 80022fc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	3b01      	subs	r3, #1
 8002310:	6939      	ldr	r1, [r7, #16]
 8002312:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002314:	fb01 f303 	mul.w	r3, r1, r3
 8002318:	441a      	add	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	22ff      	movs	r2, #255	; 0xff
 8002322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	22ff      	movs	r2, #255	; 0xff
 800232a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d114      	bne.n	800235e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d01a      	beq.n	8002372 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	3310      	adds	r3, #16
 8002340:	4618      	mov	r0, r3
 8002342:	f001 f85d 	bl	8003400 <xTaskRemoveFromEventList>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d012      	beq.n	8002372 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <xQueueGenericReset+0x11c>)
 800234e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	f3bf 8f4f 	dsb	sy
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	e009      	b.n	8002372 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	3310      	adds	r3, #16
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff00 	bl	8002168 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	3324      	adds	r3, #36	; 0x24
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fefb 	bl	8002168 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002372:	f001 ff57 	bl	8004224 <vPortExitCritical>
 8002376:	e001      	b.n	800237c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <xQueueGenericReset+0x110>
        __asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	60bb      	str	r3, [r7, #8]
    }
 8002394:	bf00      	nop
 8002396:	e7fe      	b.n	8002396 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002398:	697b      	ldr	r3, [r7, #20]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000ed04 	.word	0xe000ed04

080023a8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08a      	sub	sp, #40	; 0x28
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02e      	beq.n	800241e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023c0:	2100      	movs	r1, #0
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d000      	beq.n	80023d0 <xQueueGenericCreate+0x28>
 80023ce:	2101      	movs	r1, #1
 80023d0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d123      	bne.n	800241e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80023de:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80023e2:	d81c      	bhi.n	800241e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3350      	adds	r3, #80	; 0x50
 80023f2:	4618      	mov	r0, r3
 80023f4:	f002 f812 	bl	800441c <pvPortMalloc>
 80023f8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01c      	beq.n	800243a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	3350      	adds	r3, #80	; 0x50
 8002408:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800240a:	79fa      	ldrb	r2, [r7, #7]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4613      	mov	r3, r2
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	68b9      	ldr	r1, [r7, #8]
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 f814 	bl	8002444 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800241c:	e00d      	b.n	800243a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericCreate+0x92>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	613b      	str	r3, [r7, #16]
    }
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800243a:	69fb      	ldr	r3, [r7, #28]
    }
 800243c:	4618      	mov	r0, r3
 800243e:	3720      	adds	r7, #32
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
 8002450:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	e002      	b.n	8002466 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002472:	2101      	movs	r1, #1
 8002474:	69b8      	ldr	r0, [r7, #24]
 8002476:	f7ff ff07 	bl	8002288 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	2073      	movs	r0, #115	; 0x73
 800248a:	f003 ff2b 	bl	80062e4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b08f      	sub	sp, #60	; 0x3c
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80024ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10a      	bne.n	80024c8 <xQueueReceive+0x30>
        __asm volatile
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	623b      	str	r3, [r7, #32]
    }
 80024c4:	bf00      	nop
 80024c6:	e7fe      	b.n	80024c6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d103      	bne.n	80024d6 <xQueueReceive+0x3e>
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <xQueueReceive+0x42>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueReceive+0x44>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueReceive+0x5e>
        __asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61fb      	str	r3, [r7, #28]
    }
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024f6:	f001 f995 	bl	8003824 <xTaskGetSchedulerState>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d102      	bne.n	8002506 <xQueueReceive+0x6e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <xQueueReceive+0x72>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueReceive+0x74>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueReceive+0x8e>
        __asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61bb      	str	r3, [r7, #24]
    }
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002526:	f001 fe4d 	bl	80041c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02f      	beq.n	8002596 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253a:	f000 f8bd 	bl	80026b8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fbfd 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 8002546:	4604      	mov	r4, r0
 8002548:	2000      	movs	r0, #0
 800254a:	f004 fbf9 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 800254e:	4602      	mov	r2, r0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2101      	movs	r1, #1
 8002554:	9100      	str	r1, [sp, #0]
 8002556:	4621      	mov	r1, r4
 8002558:	205c      	movs	r0, #92	; 0x5c
 800255a:	f003 ff39 	bl	80063d0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1e5a      	subs	r2, r3, #1
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00f      	beq.n	800258e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	3310      	adds	r3, #16
 8002572:	4618      	mov	r0, r3
 8002574:	f000 ff44 	bl	8003400 <xTaskRemoveFromEventList>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800257e:	4b4d      	ldr	r3, [pc, #308]	; (80026b4 <xQueueReceive+0x21c>)
 8002580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f3bf 8f4f 	dsb	sy
 800258a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800258e:	f001 fe49 	bl	8004224 <vPortExitCritical>
                return pdPASS;
 8002592:	2301      	movs	r3, #1
 8002594:	e08a      	b.n	80026ac <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d113      	bne.n	80025c4 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800259c:	f001 fe42 	bl	8004224 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	4618      	mov	r0, r3
 80025a4:	f004 fbcc 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 80025a8:	4604      	mov	r4, r0
 80025aa:	2000      	movs	r0, #0
 80025ac:	f004 fbc8 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2101      	movs	r1, #1
 80025b6:	9100      	str	r1, [sp, #0]
 80025b8:	4621      	mov	r1, r4
 80025ba:	205c      	movs	r0, #92	; 0x5c
 80025bc:	f003 ff08 	bl	80063d0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80025c0:	2300      	movs	r3, #0
 80025c2:	e073      	b.n	80026ac <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025ca:	f107 0310 	add.w	r3, r7, #16
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 ffee 	bl	80035b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025d4:	2301      	movs	r3, #1
 80025d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025d8:	f001 fe24 	bl	8004224 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025dc:	f000 fbf0 	bl	8002dc0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80025e0:	f001 fdf0 	bl	80041c4 <vPortEnterCritical>
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025ea:	b25b      	sxtb	r3, r3
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d103      	bne.n	80025fa <xQueueReceive+0x162>
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002600:	b25b      	sxtb	r3, r3
 8002602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002606:	d103      	bne.n	8002610 <xQueueReceive+0x178>
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002610:	f001 fe08 	bl	8004224 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002614:	1d3a      	adds	r2, r7, #4
 8002616:	f107 0310 	add.w	r3, r7, #16
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f000 ffdd 	bl	80035dc <xTaskCheckForTimeOut>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d124      	bne.n	8002672 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800262a:	f000 f8bd 	bl	80027a8 <prvIsQueueEmpty>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d018      	beq.n	8002666 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002636:	3324      	adds	r3, #36	; 0x24
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4611      	mov	r1, r2
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fe73 	bl	8003328 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002644:	f000 f85e 	bl	8002704 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002648:	f000 fbc8 	bl	8002ddc <xTaskResumeAll>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	f47f af69 	bne.w	8002526 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <xQueueReceive+0x21c>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	e75f      	b.n	8002526 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002668:	f000 f84c 	bl	8002704 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800266c:	f000 fbb6 	bl	8002ddc <xTaskResumeAll>
 8002670:	e759      	b.n	8002526 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002674:	f000 f846 	bl	8002704 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002678:	f000 fbb0 	bl	8002ddc <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800267c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800267e:	f000 f893 	bl	80027a8 <prvIsQueueEmpty>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	f43f af4e 	beq.w	8002526 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fb57 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 8002692:	4604      	mov	r4, r0
 8002694:	2000      	movs	r0, #0
 8002696:	f004 fb53 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 800269a:	4602      	mov	r2, r0
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2101      	movs	r1, #1
 80026a0:	9100      	str	r1, [sp, #0]
 80026a2:	4621      	mov	r1, r4
 80026a4:	205c      	movs	r0, #92	; 0x5c
 80026a6:	f003 fe93 	bl	80063d0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80026aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3734      	adds	r7, #52	; 0x34
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	e000ed04 	.word	0xe000ed04

080026b8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	441a      	add	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d303      	bcc.n	80026ec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	461a      	mov	r2, r3
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f004 fcea 	bl	80070d0 <memcpy>
    }
}
 80026fc:	bf00      	nop
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800270c:	f001 fd5a 	bl	80041c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002716:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002718:	e011      	b.n	800273e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d012      	beq.n	8002748 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3324      	adds	r3, #36	; 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fe6a 	bl	8003400 <xTaskRemoveFromEventList>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002732:	f000 ffb9 	bl	80036a8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
 8002738:	3b01      	subs	r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	dce9      	bgt.n	800271a <prvUnlockQueue+0x16>
 8002746:	e000      	b.n	800274a <prvUnlockQueue+0x46>
                    break;
 8002748:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	22ff      	movs	r2, #255	; 0xff
 800274e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002752:	f001 fd67 	bl	8004224 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002756:	f001 fd35 	bl	80041c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002760:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002762:	e011      	b.n	8002788 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3310      	adds	r3, #16
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fe45 	bl	8003400 <xTaskRemoveFromEventList>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800277c:	f000 ff94 	bl	80036a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	3b01      	subs	r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002788:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800278c:	2b00      	cmp	r3, #0
 800278e:	dce9      	bgt.n	8002764 <prvUnlockQueue+0x60>
 8002790:	e000      	b.n	8002794 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002792:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	22ff      	movs	r2, #255	; 0xff
 8002798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800279c:	f001 fd42 	bl	8004224 <vPortExitCritical>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027b0:	f001 fd08 	bl	80041c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d102      	bne.n	80027c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e001      	b.n	80027c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80027c6:	f001 fd2d 	bl	8004224 <vPortExitCritical>

    return xReturn;
 80027ca:	68fb      	ldr	r3, [r7, #12]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <vQueueAddToRegistry+0x2a>
        __asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	60fb      	str	r3, [r7, #12]
    }
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d024      	beq.n	800284e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	e01e      	b.n	8002848 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <vQueueAddToRegistry+0xa8>)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	4413      	add	r3, r2
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	429a      	cmp	r2, r3
 8002818:	d105      	bne.n	8002826 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <vQueueAddToRegistry+0xa8>)
 8002820:	4413      	add	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
                    break;
 8002824:	e013      	b.n	800284e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <vQueueAddToRegistry+0x6e>
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <vQueueAddToRegistry+0xa8>)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <vQueueAddToRegistry+0xa8>)
 800283e:	4413      	add	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b07      	cmp	r3, #7
 800284c:	d9dd      	bls.n	800280a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00f      	beq.n	8002874 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4618      	mov	r0, r3
 8002864:	f004 fa6c 	bl	8006d40 <SEGGER_SYSVIEW_ShrinkId>
 8002868:	4601      	mov	r1, r0
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	2071      	movs	r0, #113	; 0x71
 8002870:	f003 fcde 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002874:	bf00      	nop
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20000084 	.word	0x20000084

08002880 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002890:	f001 fc98 	bl	80041c4 <vPortEnterCritical>
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800289a:	b25b      	sxtb	r3, r3
 800289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a0:	d103      	bne.n	80028aa <vQueueWaitForMessageRestricted+0x2a>
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028b0:	b25b      	sxtb	r3, r3
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d103      	bne.n	80028c0 <vQueueWaitForMessageRestricted+0x40>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028c0:	f001 fcb0 	bl	8004224 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d106      	bne.n	80028da <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3324      	adds	r3, #36	; 0x24
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fd4b 	bl	8003370 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff12 	bl	8002704 <prvUnlockQueue>
    }
 80028e0:	bf00      	nop
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	; 0x30
 80028ec:	af04      	add	r7, sp, #16
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f001 fd8d 	bl	800441c <pvPortMalloc>
 8002902:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d013      	beq.n	8002932 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800290a:	2058      	movs	r0, #88	; 0x58
 800290c:	f001 fd86 	bl	800441c <pvPortMalloc>
 8002910:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002918:	2258      	movs	r2, #88	; 0x58
 800291a:	2100      	movs	r1, #0
 800291c:	69f8      	ldr	r0, [r7, #28]
 800291e:	f004 fbe5 	bl	80070ec <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
 8002928:	e005      	b.n	8002936 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f001 fe30 	bl	8004590 <vPortFree>
 8002930:	e001      	b.n	8002936 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d013      	beq.n	8002964 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	2300      	movs	r3, #0
 8002940:	9303      	str	r3, [sp, #12]
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	9302      	str	r3, [sp, #8]
 8002946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 f80e 	bl	8002974 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002958:	69f8      	ldr	r0, [r7, #28]
 800295a:	f000 f899 	bl	8002a90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800295e:	2301      	movs	r3, #1
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e002      	b.n	800296a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002964:	f04f 33ff 	mov.w	r3, #4294967295
 8002968:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800296a:	69bb      	ldr	r3, [r7, #24]
    }
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b088      	sub	sp, #32
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	461a      	mov	r2, r3
 800298c:	21a5      	movs	r1, #165	; 0xa5
 800298e:	f004 fbad 	bl	80070ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800299c:	3b01      	subs	r3, #1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f023 0307 	bic.w	r3, r3, #7
 80029aa:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <prvInitialiseNewTask+0x58>
        __asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	617b      	str	r3, [r7, #20]
    }
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01e      	beq.n	8002a10 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
 80029d6:	e012      	b.n	80029fe <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	7819      	ldrb	r1, [r3, #0]
 80029e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	4413      	add	r3, r2
 80029e6:	3334      	adds	r3, #52	; 0x34
 80029e8:	460a      	mov	r2, r1
 80029ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	3301      	adds	r3, #1
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d9e9      	bls.n	80029d8 <prvInitialiseNewTask+0x64>
 8002a04:	e000      	b.n	8002a08 <prvInitialiseNewTask+0x94>
            {
                break;
 8002a06:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d90a      	bls.n	8002a2c <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	613b      	str	r3, [r7, #16]
    }
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d901      	bls.n	8002a36 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a32:	2304      	movs	r3, #4
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a40:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	3304      	adds	r3, #4
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fbae 	bl	80021a8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4e:	3318      	adds	r3, #24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fba9 	bl	80021a8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	f1c3 0205 	rsb	r2, r3, #5
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	69b8      	ldr	r0, [r7, #24]
 8002a72:	f001 f9f9 	bl	8003e68 <pxPortInitialiseStack>
 8002a76:	4602      	mov	r2, r0
 8002a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a86:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a88:	bf00      	nop
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af02      	add	r7, sp, #8
 8002a96:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002a98:	f001 fb94 	bl	80041c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	; (8002bdc <prvAddNewTaskToReadyList+0x14c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	4a4e      	ldr	r2, [pc, #312]	; (8002bdc <prvAddNewTaskToReadyList+0x14c>)
 8002aa4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <prvAddNewTaskToReadyList+0x150>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002aae:	4a4c      	ldr	r2, [pc, #304]	; (8002be0 <prvAddNewTaskToReadyList+0x150>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ab4:	4b49      	ldr	r3, [pc, #292]	; (8002bdc <prvAddNewTaskToReadyList+0x14c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d110      	bne.n	8002ade <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002abc:	f000 fe18 	bl	80036f0 <prvInitialiseTaskLists>
 8002ac0:	e00d      	b.n	8002ade <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ac2:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <prvAddNewTaskToReadyList+0x154>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d109      	bne.n	8002ade <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002aca:	4b45      	ldr	r3, [pc, #276]	; (8002be0 <prvAddNewTaskToReadyList+0x150>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d802      	bhi.n	8002ade <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ad8:	4a41      	ldr	r2, [pc, #260]	; (8002be0 <prvAddNewTaskToReadyList+0x150>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002ade:	4b42      	ldr	r3, [pc, #264]	; (8002be8 <prvAddNewTaskToReadyList+0x158>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	4a40      	ldr	r2, [pc, #256]	; (8002be8 <prvAddNewTaskToReadyList+0x158>)
 8002ae6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <prvAddNewTaskToReadyList+0x158>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d016      	beq.n	8002b24 <prvAddNewTaskToReadyList+0x94>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f004 f85b 	bl	8006bb4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	461d      	mov	r5, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461c      	mov	r4, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	1ae3      	subs	r3, r4, r3
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	462b      	mov	r3, r5
 8002b20:	f001 fef8 	bl	8004914 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f004 f8c8 	bl	8006cbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	2201      	movs	r2, #1
 8002b32:	409a      	lsls	r2, r3
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <prvAddNewTaskToReadyList+0x15c>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	4a2c      	ldr	r2, [pc, #176]	; (8002bec <prvAddNewTaskToReadyList+0x15c>)
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b42:	492b      	ldr	r1, [pc, #172]	; (8002bf0 <prvAddNewTaskToReadyList+0x160>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3304      	adds	r3, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	609a      	str	r2, [r3, #8]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	3204      	adds	r2, #4
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	1d1a      	adds	r2, r3, #4
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <prvAddNewTaskToReadyList+0x160>)
 8002b82:	441a      	add	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	615a      	str	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8c:	4918      	ldr	r1, [pc, #96]	; (8002bf0 <prvAddNewTaskToReadyList+0x160>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	1c59      	adds	r1, r3, #1
 8002b9c:	4814      	ldr	r0, [pc, #80]	; (8002bf0 <prvAddNewTaskToReadyList+0x160>)
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4403      	add	r3, r0
 8002ba8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002baa:	f001 fb3b 	bl	8004224 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <prvAddNewTaskToReadyList+0x154>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00e      	beq.n	8002bd4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <prvAddNewTaskToReadyList+0x150>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d207      	bcs.n	8002bd4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <prvAddNewTaskToReadyList+0x164>)
 8002bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bdb0      	pop	{r4, r5, r7, pc}
 8002bdc:	2000019c 	.word	0x2000019c
 8002be0:	200000c4 	.word	0x200000c4
 8002be4:	200001a8 	.word	0x200001a8
 8002be8:	200001b8 	.word	0x200001b8
 8002bec:	200001a4 	.word	0x200001a4
 8002bf0:	200000c8 	.word	0x200000c8
 8002bf4:	e000ed04 	.word	0xe000ed04

08002bf8 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b08a      	sub	sp, #40	; 0x28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xTaskDelayUntil+0x2a>
        __asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	617b      	str	r3, [r7, #20]
    }
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xTaskDelayUntil+0x46>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	613b      	str	r3, [r7, #16]
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8002c3e:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <xTaskDelayUntil+0xf8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00a      	beq.n	8002c5c <xTaskDelayUntil+0x64>
        __asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	60fb      	str	r3, [r7, #12]
    }
 8002c58:	bf00      	nop
 8002c5a:	e7fe      	b.n	8002c5a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8002c5c:	f000 f8b0 	bl	8002dc0 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002c60:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <xTaskDelayUntil+0xfc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d20b      	bcs.n	8002c92 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d211      	bcs.n	8002ca8 <xTaskDelayUntil+0xb0>
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d90d      	bls.n	8002ca8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	e00a      	b.n	8002ca8 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d303      	bcc.n	8002ca4 <xTaskDelayUntil+0xac>
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d901      	bls.n	8002ca8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69fa      	ldr	r2, [r7, #28]
 8002cac:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002cb4:	2024      	movs	r0, #36	; 0x24
 8002cb6:	f003 fa61 	bl	800617c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fdcc 	bl	8003860 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002cc8:	f000 f888 	bl	8002ddc <xTaskResumeAll>
 8002ccc:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <xTaskDelayUntil+0x100>)
 8002cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f3bf 8f4f 	dsb	sy
 8002ce0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3728      	adds	r7, #40	; 0x28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	200001c4 	.word	0x200001c4
 8002cf4:	200001a0 	.word	0x200001a0
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <vTaskStartScheduler+0xa4>)
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	2300      	movs	r3, #0
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2282      	movs	r2, #130	; 0x82
 8002d0e:	4925      	ldr	r1, [pc, #148]	; (8002da4 <vTaskStartScheduler+0xa8>)
 8002d10:	4825      	ldr	r0, [pc, #148]	; (8002da8 <vTaskStartScheduler+0xac>)
 8002d12:	f7ff fde9 	bl	80028e8 <xTaskCreate>
 8002d16:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d102      	bne.n	8002d24 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002d1e:	f000 fe1f 	bl	8003960 <xTimerCreateTimerTask>
 8002d22:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d124      	bne.n	8002d74 <vTaskStartScheduler+0x78>
        __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	60bb      	str	r3, [r7, #8]
    }
 8002d3c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d3e:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <vTaskStartScheduler+0xb0>)
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <vTaskStartScheduler+0xb4>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d4c:	4b19      	ldr	r3, [pc, #100]	; (8002db4 <vTaskStartScheduler+0xb8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <vTaskStartScheduler+0xbc>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <vTaskStartScheduler+0xa4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d102      	bne.n	8002d64 <vTaskStartScheduler+0x68>
 8002d5e:	f003 ff0d 	bl	8006b7c <SEGGER_SYSVIEW_OnIdle>
 8002d62:	e004      	b.n	8002d6e <vTaskStartScheduler+0x72>
 8002d64:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <vTaskStartScheduler+0xbc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 ff65 	bl	8006c38 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002d6e:	f001 f909 	bl	8003f84 <xPortStartScheduler>
 8002d72:	e00e      	b.n	8002d92 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7a:	d10a      	bne.n	8002d92 <vTaskStartScheduler+0x96>
        __asm volatile
 8002d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d80:	f383 8811 	msr	BASEPRI, r3
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	607b      	str	r3, [r7, #4]
    }
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <vTaskStartScheduler+0xc0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	200001c0 	.word	0x200001c0
 8002da4:	08007180 	.word	0x08007180
 8002da8:	080036c1 	.word	0x080036c1
 8002dac:	200001bc 	.word	0x200001bc
 8002db0:	200001a8 	.word	0x200001a8
 8002db4:	200001a0 	.word	0x200001a0
 8002db8:	200000c4 	.word	0x200000c4
 8002dbc:	2000000c 	.word	0x2000000c

08002dc0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <vTaskSuspendAll+0x18>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	4a03      	ldr	r2, [pc, #12]	; (8002dd8 <vTaskSuspendAll+0x18>)
 8002dcc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	200001c4 	.word	0x200001c4

08002ddc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002dea:	4b73      	ldr	r3, [pc, #460]	; (8002fb8 <xTaskResumeAll+0x1dc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <xTaskResumeAll+0x2c>
        __asm volatile
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	607b      	str	r3, [r7, #4]
    }
 8002e04:	bf00      	nop
 8002e06:	e7fe      	b.n	8002e06 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e08:	f001 f9dc 	bl	80041c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e0c:	4b6a      	ldr	r3, [pc, #424]	; (8002fb8 <xTaskResumeAll+0x1dc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <xTaskResumeAll+0x1dc>)
 8002e14:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <xTaskResumeAll+0x1dc>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f040 80c4 	bne.w	8002fa8 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <xTaskResumeAll+0x1e0>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80bf 	beq.w	8002fa8 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e2a:	e08e      	b.n	8002f4a <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e2c:	4b64      	ldr	r3, [pc, #400]	; (8002fc0 <xTaskResumeAll+0x1e4>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	613b      	str	r3, [r7, #16]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	6a12      	ldr	r2, [r2, #32]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	69d2      	ldr	r2, [r2, #28]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	3318      	adds	r3, #24
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d103      	bne.n	8002e62 <xTaskResumeAll+0x86>
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2200      	movs	r2, #0
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	68d2      	ldr	r2, [r2, #12]
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	6892      	ldr	r2, [r2, #8]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3304      	adds	r3, #4
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d103      	bne.n	8002ea0 <xTaskResumeAll+0xc4>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	605a      	str	r2, [r3, #4]
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	615a      	str	r2, [r3, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1e5a      	subs	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 ff02 	bl	8006cbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	4b40      	ldr	r3, [pc, #256]	; (8002fc4 <xTaskResumeAll+0x1e8>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	4a3f      	ldr	r2, [pc, #252]	; (8002fc4 <xTaskResumeAll+0x1e8>)
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ece:	493e      	ldr	r1, [pc, #248]	; (8002fc8 <xTaskResumeAll+0x1ec>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3304      	adds	r3, #4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60bb      	str	r3, [r7, #8]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	3204      	adds	r2, #4
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	1d1a      	adds	r2, r3, #4
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	609a      	str	r2, [r3, #8]
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4a2e      	ldr	r2, [pc, #184]	; (8002fc8 <xTaskResumeAll+0x1ec>)
 8002f0e:	441a      	add	r2, r3
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	615a      	str	r2, [r3, #20]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	492b      	ldr	r1, [pc, #172]	; (8002fc8 <xTaskResumeAll+0x1ec>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	1c59      	adds	r1, r3, #1
 8002f28:	4827      	ldr	r0, [pc, #156]	; (8002fc8 <xTaskResumeAll+0x1ec>)
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4403      	add	r3, r0
 8002f34:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <xTaskResumeAll+0x1f0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002f44:	4b22      	ldr	r3, [pc, #136]	; (8002fd0 <xTaskResumeAll+0x1f4>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f4a:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <xTaskResumeAll+0x1e4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f47f af6c 	bne.w	8002e2c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002f5a:	f000 fc47 	bl	80037ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <xTaskResumeAll+0x1f8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002f6a:	f000 f859 	bl	8003020 <xTaskIncrementTick>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002f74:	4b16      	ldr	r3, [pc, #88]	; (8002fd0 <xTaskResumeAll+0x1f4>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f1      	bne.n	8002f6a <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002f86:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <xTaskResumeAll+0x1f8>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002f8c:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <xTaskResumeAll+0x1f4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d009      	beq.n	8002fa8 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002f94:	2301      	movs	r3, #1
 8002f96:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <xTaskResumeAll+0x1fc>)
 8002f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002fa8:	f001 f93c 	bl	8004224 <vPortExitCritical>

    return xAlreadyYielded;
 8002fac:	69bb      	ldr	r3, [r7, #24]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200001c4 	.word	0x200001c4
 8002fbc:	2000019c 	.word	0x2000019c
 8002fc0:	2000015c 	.word	0x2000015c
 8002fc4:	200001a4 	.word	0x200001a4
 8002fc8:	200000c8 	.word	0x200000c8
 8002fcc:	200000c4 	.word	0x200000c4
 8002fd0:	200001b0 	.word	0x200001b0
 8002fd4:	200001ac 	.word	0x200001ac
 8002fd8:	e000ed04 	.word	0xe000ed04

08002fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <xTaskGetTickCount+0x1c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	200001a0 	.word	0x200001a0

08002ffc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003002:	f001 f9cb 	bl	800439c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003006:	2300      	movs	r3, #0
 8003008:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <xTaskGetTickCountFromISR+0x20>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003010:	683b      	ldr	r3, [r7, #0]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200001a0 	.word	0x200001a0

08003020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302a:	4b7f      	ldr	r3, [pc, #508]	; (8003228 <xTaskIncrementTick+0x208>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80f0 	bne.w	8003214 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003034:	4b7d      	ldr	r3, [pc, #500]	; (800322c <xTaskIncrementTick+0x20c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	3301      	adds	r3, #1
 800303a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800303c:	4a7b      	ldr	r2, [pc, #492]	; (800322c <xTaskIncrementTick+0x20c>)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003048:	4b79      	ldr	r3, [pc, #484]	; (8003230 <xTaskIncrementTick+0x210>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <xTaskIncrementTick+0x48>
        __asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	607b      	str	r3, [r7, #4]
    }
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xTaskIncrementTick+0x46>
 8003068:	4b71      	ldr	r3, [pc, #452]	; (8003230 <xTaskIncrementTick+0x210>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	4b71      	ldr	r3, [pc, #452]	; (8003234 <xTaskIncrementTick+0x214>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6f      	ldr	r2, [pc, #444]	; (8003230 <xTaskIncrementTick+0x210>)
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	4a6f      	ldr	r2, [pc, #444]	; (8003234 <xTaskIncrementTick+0x214>)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b6e      	ldr	r3, [pc, #440]	; (8003238 <xTaskIncrementTick+0x218>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a6d      	ldr	r2, [pc, #436]	; (8003238 <xTaskIncrementTick+0x218>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	f000 fbb1 	bl	80037ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800308a:	4b6c      	ldr	r3, [pc, #432]	; (800323c <xTaskIncrementTick+0x21c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6a3a      	ldr	r2, [r7, #32]
 8003090:	429a      	cmp	r2, r3
 8003092:	f0c0 80aa 	bcc.w	80031ea <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003096:	4b66      	ldr	r3, [pc, #408]	; (8003230 <xTaskIncrementTick+0x210>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030a0:	4b66      	ldr	r3, [pc, #408]	; (800323c <xTaskIncrementTick+0x21c>)
 80030a2:	f04f 32ff 	mov.w	r2, #4294967295
 80030a6:	601a      	str	r2, [r3, #0]
                    break;
 80030a8:	e09f      	b.n	80031ea <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030aa:	4b61      	ldr	r3, [pc, #388]	; (8003230 <xTaskIncrementTick+0x210>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030ba:	6a3a      	ldr	r2, [r7, #32]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d203      	bcs.n	80030ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030c2:	4a5e      	ldr	r2, [pc, #376]	; (800323c <xTaskIncrementTick+0x21c>)
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030c8:	e08f      	b.n	80031ea <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	68d2      	ldr	r2, [r2, #12]
 80030d8:	609a      	str	r2, [r3, #8]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	6892      	ldr	r2, [r2, #8]
 80030e2:	605a      	str	r2, [r3, #4]
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3304      	adds	r3, #4
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d103      	bne.n	80030f8 <xTaskIncrementTick+0xd8>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1e5a      	subs	r2, r3, #1
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01e      	beq.n	800314e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	6a12      	ldr	r2, [r2, #32]
 800311e:	609a      	str	r2, [r3, #8]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	69d2      	ldr	r2, [r2, #28]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	3318      	adds	r3, #24
 8003132:	429a      	cmp	r2, r3
 8003134:	d103      	bne.n	800313e <xTaskIncrementTick+0x11e>
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2200      	movs	r2, #0
 8003142:	629a      	str	r2, [r3, #40]	; 0x28
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1e5a      	subs	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fdb3 	bl	8006cbc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	2201      	movs	r2, #1
 800315c:	409a      	lsls	r2, r3
 800315e:	4b38      	ldr	r3, [pc, #224]	; (8003240 <xTaskIncrementTick+0x220>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4313      	orrs	r3, r2
 8003164:	4a36      	ldr	r2, [pc, #216]	; (8003240 <xTaskIncrementTick+0x220>)
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <xTaskIncrementTick+0x224>)
 800316e:	4613      	mov	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	3304      	adds	r3, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	3204      	adds	r2, #4
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	1d1a      	adds	r2, r3, #4
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	609a      	str	r2, [r3, #8]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4a26      	ldr	r2, [pc, #152]	; (8003244 <xTaskIncrementTick+0x224>)
 80031ac:	441a      	add	r2, r3
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	615a      	str	r2, [r3, #20]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	4923      	ldr	r1, [pc, #140]	; (8003244 <xTaskIncrementTick+0x224>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	1c59      	adds	r1, r3, #1
 80031c6:	481f      	ldr	r0, [pc, #124]	; (8003244 <xTaskIncrementTick+0x224>)
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4403      	add	r3, r0
 80031d2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <xTaskIncrementTick+0x228>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	429a      	cmp	r2, r3
 80031e0:	f67f af59 	bls.w	8003096 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e8:	e755      	b.n	8003096 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80031ea:	4b17      	ldr	r3, [pc, #92]	; (8003248 <xTaskIncrementTick+0x228>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	4914      	ldr	r1, [pc, #80]	; (8003244 <xTaskIncrementTick+0x224>)
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d901      	bls.n	8003206 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003202:	2301      	movs	r3, #1
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <xTaskIncrementTick+0x22c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 800320e:	2301      	movs	r3, #1
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	e004      	b.n	800321e <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <xTaskIncrementTick+0x230>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <xTaskIncrementTick+0x230>)
 800321c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003220:	4618      	mov	r0, r3
 8003222:	3728      	adds	r7, #40	; 0x28
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}
 8003228:	200001c4 	.word	0x200001c4
 800322c:	200001a0 	.word	0x200001a0
 8003230:	20000154 	.word	0x20000154
 8003234:	20000158 	.word	0x20000158
 8003238:	200001b4 	.word	0x200001b4
 800323c:	200001bc 	.word	0x200001bc
 8003240:	200001a4 	.word	0x200001a4
 8003244:	200000c8 	.word	0x200000c8
 8003248:	200000c4 	.word	0x200000c4
 800324c:	200001b0 	.word	0x200001b0
 8003250:	200001ac 	.word	0x200001ac

08003254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <vTaskSwitchContext+0xbc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003262:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <vTaskSwitchContext+0xc0>)
 8003264:	2201      	movs	r2, #1
 8003266:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003268:	e04d      	b.n	8003306 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800326a:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <vTaskSwitchContext+0xc0>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003270:	4b29      	ldr	r3, [pc, #164]	; (8003318 <vTaskSwitchContext+0xc4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	fab3 f383 	clz	r3, r3
 800327c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800327e:	7afb      	ldrb	r3, [r7, #11]
 8003280:	f1c3 031f 	rsb	r3, r3, #31
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	4925      	ldr	r1, [pc, #148]	; (800331c <vTaskSwitchContext+0xc8>)
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <vTaskSwitchContext+0x5c>
        __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	607b      	str	r3, [r7, #4]
    }
 80032ac:	bf00      	nop
 80032ae:	e7fe      	b.n	80032ae <vTaskSwitchContext+0x5a>
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <vTaskSwitchContext+0xc8>)
 80032bc:	4413      	add	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	3308      	adds	r3, #8
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d104      	bne.n	80032e0 <vTaskSwitchContext+0x8c>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <vTaskSwitchContext+0xcc>)
 80032e8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <vTaskSwitchContext+0xcc>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <vTaskSwitchContext+0xd0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d102      	bne.n	80032fc <vTaskSwitchContext+0xa8>
 80032f6:	f003 fc41 	bl	8006b7c <SEGGER_SYSVIEW_OnIdle>
}
 80032fa:	e004      	b.n	8003306 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <vTaskSwitchContext+0xcc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f003 fc99 	bl	8006c38 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200001c4 	.word	0x200001c4
 8003314:	200001b0 	.word	0x200001b0
 8003318:	200001a4 	.word	0x200001a4
 800331c:	200000c8 	.word	0x200000c8
 8003320:	200000c4 	.word	0x200000c4
 8003324:	200001c0 	.word	0x200001c0

08003328 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
    }
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <vTaskPlaceOnEventList+0x44>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3318      	adds	r3, #24
 8003354:	4619      	mov	r1, r3
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7fe ff33 	bl	80021c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800335c:	2101      	movs	r1, #1
 800335e:	6838      	ldr	r0, [r7, #0]
 8003360:	f000 fa7e 	bl	8003860 <prvAddCurrentTaskToDelayedList>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200000c4 	.word	0x200000c4

08003370 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10a      	bne.n	8003398 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	613b      	str	r3, [r7, #16]
    }
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	617b      	str	r3, [r7, #20]
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	61da      	str	r2, [r3, #28]
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	6892      	ldr	r2, [r2, #8]
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	3218      	adds	r2, #24
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f103 0218 	add.w	r2, r3, #24
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <vTaskPlaceOnEventListRestricted+0x8c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80033e0:	f04f 33ff 	mov.w	r3, #4294967295
 80033e4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80033e6:	2024      	movs	r0, #36	; 0x24
 80033e8:	f002 fec8 	bl	800617c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68b8      	ldr	r0, [r7, #8]
 80033f0:	f000 fa36 	bl	8003860 <prvAddCurrentTaskToDelayedList>
    }
 80033f4:	bf00      	nop
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200000c4 	.word	0x200000c4

08003400 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10a      	bne.n	800342c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341a:	f383 8811 	msr	BASEPRI, r3
 800341e:	f3bf 8f6f 	isb	sy
 8003422:	f3bf 8f4f 	dsb	sy
 8003426:	60fb      	str	r3, [r7, #12]
    }
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	6a12      	ldr	r2, [r2, #32]
 800343a:	609a      	str	r2, [r3, #8]
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	69d2      	ldr	r2, [r2, #28]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	3318      	adds	r3, #24
 800344e:	429a      	cmp	r2, r3
 8003450:	d103      	bne.n	800345a <xTaskRemoveFromEventList+0x5a>
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	6a1a      	ldr	r2, [r3, #32]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	2200      	movs	r2, #0
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	1e5a      	subs	r2, r3, #1
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800346a:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <xTaskRemoveFromEventList+0x198>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d162      	bne.n	8003538 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	6a3a      	ldr	r2, [r7, #32]
 800347e:	68d2      	ldr	r2, [r2, #12]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	605a      	str	r2, [r3, #4]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	3304      	adds	r3, #4
 8003494:	429a      	cmp	r2, r3
 8003496:	d103      	bne.n	80034a0 <xTaskRemoveFromEventList+0xa0>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1e5a      	subs	r2, r3, #1
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f003 fc02 	bl	8006cbc <SEGGER_SYSVIEW_OnTaskStartReady>
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2201      	movs	r2, #1
 80034be:	409a      	lsls	r2, r3
 80034c0:	4b36      	ldr	r3, [pc, #216]	; (800359c <xTaskRemoveFromEventList+0x19c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	4a35      	ldr	r2, [pc, #212]	; (800359c <xTaskRemoveFromEventList+0x19c>)
 80034c8:	6013      	str	r3, [r2, #0]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	4934      	ldr	r1, [pc, #208]	; (80035a0 <xTaskRemoveFromEventList+0x1a0>)
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	3304      	adds	r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	613b      	str	r3, [r7, #16]
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	6a3a      	ldr	r2, [r7, #32]
 80034f4:	3204      	adds	r2, #4
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	1d1a      	adds	r2, r3, #4
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a24      	ldr	r2, [pc, #144]	; (80035a0 <xTaskRemoveFromEventList+0x1a0>)
 800350e:	441a      	add	r2, r3
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	615a      	str	r2, [r3, #20]
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	4921      	ldr	r1, [pc, #132]	; (80035a0 <xTaskRemoveFromEventList+0x1a0>)
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	1c59      	adds	r1, r3, #1
 8003528:	481d      	ldr	r0, [pc, #116]	; (80035a0 <xTaskRemoveFromEventList+0x1a0>)
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	6019      	str	r1, [r3, #0]
 8003536:	e01b      	b.n	8003570 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003538:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <xTaskRemoveFromEventList+0x1a4>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	61da      	str	r2, [r3, #28]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	621a      	str	r2, [r3, #32]
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	3218      	adds	r2, #24
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f103 0218 	add.w	r2, r3, #24
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <xTaskRemoveFromEventList+0x1a4>)
 8003564:	629a      	str	r2, [r3, #40]	; 0x28
 8003566:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <xTaskRemoveFromEventList+0x1a4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3301      	adds	r3, #1
 800356c:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <xTaskRemoveFromEventList+0x1a4>)
 800356e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <xTaskRemoveFromEventList+0x1a8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	429a      	cmp	r2, r3
 800357c:	d905      	bls.n	800358a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800357e:	2301      	movs	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003582:	4b0a      	ldr	r3, [pc, #40]	; (80035ac <xTaskRemoveFromEventList+0x1ac>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	e001      	b.n	800358e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003590:	4618      	mov	r0, r3
 8003592:	3728      	adds	r7, #40	; 0x28
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	200001c4 	.word	0x200001c4
 800359c:	200001a4 	.word	0x200001a4
 80035a0:	200000c8 	.word	0x200000c8
 80035a4:	2000015c 	.word	0x2000015c
 80035a8:	200000c4 	.word	0x200000c4
 80035ac:	200001b0 	.word	0x200001b0

080035b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <vTaskInternalSetTimeOutState+0x24>)
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <vTaskInternalSetTimeOutState+0x28>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	605a      	str	r2, [r3, #4]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	200001b4 	.word	0x200001b4
 80035d8:	200001a0 	.word	0x200001a0

080035dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	613b      	str	r3, [r7, #16]
    }
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	60fb      	str	r3, [r7, #12]
    }
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800361e:	f000 fdd1 	bl	80041c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003622:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <xTaskCheckForTimeOut+0xc4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363a:	d102      	bne.n	8003642 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	e026      	b.n	8003690 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <xTaskCheckForTimeOut+0xc8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d00a      	beq.n	8003664 <xTaskCheckForTimeOut+0x88>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	429a      	cmp	r2, r3
 8003656:	d305      	bcc.n	8003664 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	e015      	b.n	8003690 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20b      	bcs.n	8003686 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	1ad2      	subs	r2, r2, r3
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff ff98 	bl	80035b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003680:	2300      	movs	r3, #0
 8003682:	61fb      	str	r3, [r7, #28]
 8003684:	e004      	b.n	8003690 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800368c:	2301      	movs	r3, #1
 800368e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003690:	f000 fdc8 	bl	8004224 <vPortExitCritical>

    return xReturn;
 8003694:	69fb      	ldr	r3, [r7, #28]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200001a0 	.word	0x200001a0
 80036a4:	200001b4 	.word	0x200001b4

080036a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <vTaskMissedYield+0x14>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	200001b0 	.word	0x200001b0

080036c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80036c8:	f000 f852 	bl	8003770 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <prvIdleTask+0x28>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d9f9      	bls.n	80036c8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <prvIdleTask+0x2c>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80036e4:	e7f0      	b.n	80036c8 <prvIdleTask+0x8>
 80036e6:	bf00      	nop
 80036e8:	200000c8 	.word	0x200000c8
 80036ec:	e000ed04 	.word	0xe000ed04

080036f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]
 80036fa:	e00c      	b.n	8003716 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <prvInitialiseTaskLists+0x60>)
 8003708:	4413      	add	r3, r2
 800370a:	4618      	mov	r0, r3
 800370c:	f7fe fd2c 	bl	8002168 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3301      	adds	r3, #1
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d9ef      	bls.n	80036fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800371c:	480d      	ldr	r0, [pc, #52]	; (8003754 <prvInitialiseTaskLists+0x64>)
 800371e:	f7fe fd23 	bl	8002168 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003722:	480d      	ldr	r0, [pc, #52]	; (8003758 <prvInitialiseTaskLists+0x68>)
 8003724:	f7fe fd20 	bl	8002168 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003728:	480c      	ldr	r0, [pc, #48]	; (800375c <prvInitialiseTaskLists+0x6c>)
 800372a:	f7fe fd1d 	bl	8002168 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800372e:	480c      	ldr	r0, [pc, #48]	; (8003760 <prvInitialiseTaskLists+0x70>)
 8003730:	f7fe fd1a 	bl	8002168 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003734:	480b      	ldr	r0, [pc, #44]	; (8003764 <prvInitialiseTaskLists+0x74>)
 8003736:	f7fe fd17 	bl	8002168 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <prvInitialiseTaskLists+0x78>)
 800373c:	4a05      	ldr	r2, [pc, #20]	; (8003754 <prvInitialiseTaskLists+0x64>)
 800373e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <prvInitialiseTaskLists+0x7c>)
 8003742:	4a05      	ldr	r2, [pc, #20]	; (8003758 <prvInitialiseTaskLists+0x68>)
 8003744:	601a      	str	r2, [r3, #0]
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200000c8 	.word	0x200000c8
 8003754:	2000012c 	.word	0x2000012c
 8003758:	20000140 	.word	0x20000140
 800375c:	2000015c 	.word	0x2000015c
 8003760:	20000170 	.word	0x20000170
 8003764:	20000188 	.word	0x20000188
 8003768:	20000154 	.word	0x20000154
 800376c:	20000158 	.word	0x20000158

08003770 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003776:	e019      	b.n	80037ac <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003778:	f000 fd24 	bl	80041c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <prvCheckTasksWaitingTermination+0x50>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	4618      	mov	r0, r3
 800378a:	f7fe fd53 	bl	8002234 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800378e:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <prvCheckTasksWaitingTermination+0x54>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3b01      	subs	r3, #1
 8003794:	4a0b      	ldr	r2, [pc, #44]	; (80037c4 <prvCheckTasksWaitingTermination+0x54>)
 8003796:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <prvCheckTasksWaitingTermination+0x58>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3b01      	subs	r3, #1
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <prvCheckTasksWaitingTermination+0x58>)
 80037a0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80037a2:	f000 fd3f 	bl	8004224 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f810 	bl	80037cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <prvCheckTasksWaitingTermination+0x58>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e1      	bne.n	8003778 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000170 	.word	0x20000170
 80037c4:	2000019c 	.word	0x2000019c
 80037c8:	20000184 	.word	0x20000184

080037cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fed9 	bl	8004590 <vPortFree>
            vPortFree( pxTCB );
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fed6 	bl	8004590 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80037e4:	bf00      	nop
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <prvResetNextTaskUnblockTime+0x30>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <prvResetNextTaskUnblockTime+0x34>)
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003802:	e005      	b.n	8003810 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <prvResetNextTaskUnblockTime+0x30>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a04      	ldr	r2, [pc, #16]	; (8003820 <prvResetNextTaskUnblockTime+0x34>)
 800380e:	6013      	str	r3, [r2, #0]
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	20000154 	.word	0x20000154
 8003820:	200001bc 	.word	0x200001bc

08003824 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <xTaskGetSchedulerState+0x34>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003832:	2301      	movs	r3, #1
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	e008      	b.n	800384a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003838:	4b08      	ldr	r3, [pc, #32]	; (800385c <xTaskGetSchedulerState+0x38>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003840:	2302      	movs	r3, #2
 8003842:	607b      	str	r3, [r7, #4]
 8003844:	e001      	b.n	800384a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003846:	2300      	movs	r3, #0
 8003848:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800384a:	687b      	ldr	r3, [r7, #4]
    }
 800384c:	4618      	mov	r0, r3
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	200001a8 	.word	0x200001a8
 800385c:	200001c4 	.word	0x200001c4

08003860 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <prvAddCurrentTaskToDelayedList+0xe4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003870:	4b35      	ldr	r3, [pc, #212]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7fe fcdc 	bl	8002234 <uxListRemove>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10b      	bne.n	800389a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003882:	4b31      	ldr	r3, [pc, #196]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	2201      	movs	r2, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <prvAddCurrentTaskToDelayedList+0xec>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4013      	ands	r3, r2
 8003896:	4a2d      	ldr	r2, [pc, #180]	; (800394c <prvAddCurrentTaskToDelayedList+0xec>)
 8003898:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d124      	bne.n	80038ec <prvAddCurrentTaskToDelayedList+0x8c>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d021      	beq.n	80038ec <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038a8:	4b29      	ldr	r3, [pc, #164]	; (8003950 <prvAddCurrentTaskToDelayedList+0xf0>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	6892      	ldr	r2, [r2, #8]
 80038be:	60da      	str	r2, [r3, #12]
 80038c0:	4b21      	ldr	r3, [pc, #132]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	3204      	adds	r2, #4
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	4b1e      	ldr	r3, [pc, #120]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	1d1a      	adds	r2, r3, #4
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	609a      	str	r2, [r3, #8]
 80038d6:	4b1c      	ldr	r3, [pc, #112]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a1d      	ldr	r2, [pc, #116]	; (8003950 <prvAddCurrentTaskToDelayedList+0xf0>)
 80038dc:	615a      	str	r2, [r3, #20]
 80038de:	4b1c      	ldr	r3, [pc, #112]	; (8003950 <prvAddCurrentTaskToDelayedList+0xf0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3301      	adds	r3, #1
 80038e4:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <prvAddCurrentTaskToDelayedList+0xf0>)
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038ea:	e026      	b.n	800393a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038f4:	4b14      	ldr	r3, [pc, #80]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	429a      	cmp	r2, r3
 8003902:	d209      	bcs.n	8003918 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f7fe fc56 	bl	80021c2 <vListInsert>
}
 8003916:	e010      	b.n	800393a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <prvAddCurrentTaskToDelayedList+0xf8>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b0a      	ldr	r3, [pc, #40]	; (8003948 <prvAddCurrentTaskToDelayedList+0xe8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3304      	adds	r3, #4
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fe fc4c 	bl	80021c2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <prvAddCurrentTaskToDelayedList+0xfc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	429a      	cmp	r2, r3
 8003932:	d202      	bcs.n	800393a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6013      	str	r3, [r2, #0]
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	200001a0 	.word	0x200001a0
 8003948:	200000c4 	.word	0x200000c4
 800394c:	200001a4 	.word	0x200001a4
 8003950:	20000188 	.word	0x20000188
 8003954:	20000158 	.word	0x20000158
 8003958:	20000154 	.word	0x20000154
 800395c:	200001bc 	.word	0x200001bc

08003960 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003966:	2300      	movs	r3, #0
 8003968:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800396a:	f000 fa47 	bl	8003dfc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <xTimerCreateTimerTask+0x54>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00b      	beq.n	800398e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <xTimerCreateTimerTask+0x58>)
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	2302      	movs	r3, #2
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2300      	movs	r3, #0
 8003980:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003984:	490d      	ldr	r1, [pc, #52]	; (80039bc <xTimerCreateTimerTask+0x5c>)
 8003986:	480e      	ldr	r0, [pc, #56]	; (80039c0 <xTimerCreateTimerTask+0x60>)
 8003988:	f7fe ffae 	bl	80028e8 <xTaskCreate>
 800398c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	603b      	str	r3, [r7, #0]
    }
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80039aa:	687b      	ldr	r3, [r7, #4]
    }
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	200001f8 	.word	0x200001f8
 80039b8:	200001fc 	.word	0x200001fc
 80039bc:	08007188 	.word	0x08007188
 80039c0:	08003a69 	.word	0x08003a69

080039c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80039d0:	e008      	b.n	80039e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	699a      	ldr	r2, [r3, #24]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	18d1      	adds	r1, r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f8dd 	bl	8003bb0 <prvInsertTimerInActiveList>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ea      	bne.n	80039d2 <prvReloadTimer+0xe>
        }
    }
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <prvProcessExpiredTimer+0x5c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe fc07 	bl	8002234 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ffc3 	bl	80039c4 <prvReloadTimer>
 8003a3e:	e008      	b.n	8003a52 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	4798      	blx	r3
    }
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	200001f0 	.word	0x200001f0

08003a68 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f857 	bl	8003b28 <prvGetNextExpireTime>
 8003a7a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4619      	mov	r1, r3
 8003a80:	68f8      	ldr	r0, [r7, #12]
 8003a82:	f000 f803 	bl	8003a8c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a86:	f000 f8d5 	bl	8003c34 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a8a:	e7f1      	b.n	8003a70 <prvTimerTask+0x8>

08003a8c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a96:	f7ff f993 	bl	8002dc0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a9a:	f107 0308 	add.w	r3, r7, #8
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 f866 	bl	8003b70 <prvSampleTimeNow>
 8003aa4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d130      	bne.n	8003b0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <prvProcessTimerOrBlockTask+0x3c>
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d806      	bhi.n	8003ac8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003aba:	f7ff f98f 	bl	8002ddc <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003abe:	68f9      	ldr	r1, [r7, #12]
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f7ff ffa1 	bl	8003a08 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003ac6:	e024      	b.n	8003b12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d008      	beq.n	8003ae0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <prvProcessTimerOrBlockTask+0x90>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <prvProcessTimerOrBlockTask+0x50>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <prvProcessTimerOrBlockTask+0x52>
 8003adc:	2300      	movs	r3, #0
 8003ade:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <prvProcessTimerOrBlockTask+0x94>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f7fe fec7 	bl	8002880 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003af2:	f7ff f973 	bl	8002ddc <xTaskResumeAll>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <prvProcessTimerOrBlockTask+0x98>)
 8003afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	f3bf 8f6f 	isb	sy
    }
 8003b0c:	e001      	b.n	8003b12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003b0e:	f7ff f965 	bl	8002ddc <xTaskResumeAll>
    }
 8003b12:	bf00      	nop
 8003b14:	3710      	adds	r7, #16
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	200001f4 	.word	0x200001f4
 8003b20:	200001f8 	.word	0x200001f8
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b30:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <prvGetNextExpireTime+0x44>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <prvGetNextExpireTime+0x16>
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	e000      	b.n	8003b40 <prvGetNextExpireTime+0x18>
 8003b3e:	2200      	movs	r2, #0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b4c:	4b07      	ldr	r3, [pc, #28]	; (8003b6c <prvGetNextExpireTime+0x44>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e001      	b.n	8003b5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
    }
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200001f0 	.word	0x200001f0

08003b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b78:	f7ff fa30 	bl	8002fdc <xTaskGetTickCount>
 8003b7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <prvSampleTimeNow+0x3c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d205      	bcs.n	8003b94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b88:	f000 f912 	bl	8003db0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	e002      	b.n	8003b9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <prvSampleTimeNow+0x3c>)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    }
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000200 	.word	0x20000200

08003bb0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d812      	bhi.n	8003bfc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	1ad2      	subs	r2, r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d302      	bcc.n	8003bea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e01b      	b.n	8003c22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003bea:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <prvInsertTimerInActiveList+0x7c>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe fae4 	bl	80021c2 <vListInsert>
 8003bfa:	e012      	b.n	8003c22 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d206      	bcs.n	8003c12 <prvInsertTimerInActiveList+0x62>
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d302      	bcc.n	8003c12 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	e007      	b.n	8003c22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c12:	4b07      	ldr	r3, [pc, #28]	; (8003c30 <prvInsertTimerInActiveList+0x80>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe fad0 	bl	80021c2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003c22:	697b      	ldr	r3, [r7, #20]
    }
 8003c24:	4618      	mov	r0, r3
 8003c26:	3718      	adds	r7, #24
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	200001f4 	.word	0x200001f4
 8003c30:	200001f0 	.word	0x200001f0

08003c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c3a:	e0a6      	b.n	8003d8a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	f2c0 80a2 	blt.w	8003d88 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d004      	beq.n	8003c5a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe faed 	bl	8002234 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c5a:	1d3b      	adds	r3, r7, #4
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff ff87 	bl	8003b70 <prvSampleTimeNow>
 8003c62:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	f200 808e 	bhi.w	8003d8a <prvProcessReceivedCommands+0x156>
 8003c6e:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <prvProcessReceivedCommands+0x40>)
 8003c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c74:	08003c99 	.word	0x08003c99
 8003c78:	08003c99 	.word	0x08003c99
 8003c7c:	08003d01 	.word	0x08003d01
 8003c80:	08003d15 	.word	0x08003d15
 8003c84:	08003d5f 	.word	0x08003d5f
 8003c88:	08003c99 	.word	0x08003c99
 8003c8c:	08003c99 	.word	0x08003c99
 8003c90:	08003d01 	.word	0x08003d01
 8003c94:	08003d15 	.word	0x08003d15
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	18d1      	adds	r1, r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	69f8      	ldr	r0, [r7, #28]
 8003cb8:	f7ff ff7a 	bl	8003bb0 <prvInsertTimerInActiveList>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d063      	beq.n	8003d8a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	69f8      	ldr	r0, [r7, #28]
 8003cde:	f7ff fe71 	bl	80039c4 <prvReloadTimer>
 8003ce2:	e008      	b.n	8003cf6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cea:	f023 0301 	bic.w	r3, r3, #1
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	69f8      	ldr	r0, [r7, #28]
 8003cfc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003cfe:	e044      	b.n	8003d8a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d06:	f023 0301 	bic.w	r3, r3, #1
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003d12:	e03a      	b.n	8003d8a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d38:	f383 8811 	msr	BASEPRI, r3
 8003d3c:	f3bf 8f6f 	isb	sy
 8003d40:	f3bf 8f4f 	dsb	sy
 8003d44:	617b      	str	r3, [r7, #20]
    }
 8003d46:	bf00      	nop
 8003d48:	e7fe      	b.n	8003d48 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	699a      	ldr	r2, [r3, #24]
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	18d1      	adds	r1, r2, r3
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	69f8      	ldr	r0, [r7, #28]
 8003d58:	f7ff ff2a 	bl	8003bb0 <prvInsertTimerInActiveList>
                        break;
 8003d5c:	e015      	b.n	8003d8a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003d6c:	69f8      	ldr	r0, [r7, #28]
 8003d6e:	f000 fc0f 	bl	8004590 <vPortFree>
 8003d72:	e00a      	b.n	8003d8a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d7a:	f023 0301 	bic.w	r3, r3, #1
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d86:	e000      	b.n	8003d8a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003d88:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d8a:	4b08      	ldr	r3, [pc, #32]	; (8003dac <prvProcessReceivedCommands+0x178>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f107 0108 	add.w	r1, r7, #8
 8003d92:	2200      	movs	r2, #0
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe fb7f 	bl	8002498 <xQueueReceive>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f af4d 	bne.w	8003c3c <prvProcessReceivedCommands+0x8>
        }
    }
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200001f8 	.word	0x200001f8

08003db0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003db6:	e009      	b.n	8003dcc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003db8:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <prvSwitchTimerLists+0x44>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8003dc6:	6838      	ldr	r0, [r7, #0]
 8003dc8:	f7ff fe1e 	bl	8003a08 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <prvSwitchTimerLists+0x44>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003dd6:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <prvSwitchTimerLists+0x44>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <prvSwitchTimerLists+0x48>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <prvSwitchTimerLists+0x44>)
 8003de2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <prvSwitchTimerLists+0x48>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6013      	str	r3, [r2, #0]
    }
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	200001f0 	.word	0x200001f0
 8003df8:	200001f4 	.word	0x200001f4

08003dfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e00:	f000 f9e0 	bl	80041c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <prvCheckForValidListAndQueue+0x54>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d11d      	bne.n	8003e48 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e0c:	4811      	ldr	r0, [pc, #68]	; (8003e54 <prvCheckForValidListAndQueue+0x58>)
 8003e0e:	f7fe f9ab 	bl	8002168 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e12:	4811      	ldr	r0, [pc, #68]	; (8003e58 <prvCheckForValidListAndQueue+0x5c>)
 8003e14:	f7fe f9a8 	bl	8002168 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <prvCheckForValidListAndQueue+0x60>)
 8003e1a:	4a0e      	ldr	r2, [pc, #56]	; (8003e54 <prvCheckForValidListAndQueue+0x58>)
 8003e1c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <prvCheckForValidListAndQueue+0x64>)
 8003e20:	4a0d      	ldr	r2, [pc, #52]	; (8003e58 <prvCheckForValidListAndQueue+0x5c>)
 8003e22:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e24:	2200      	movs	r2, #0
 8003e26:	210c      	movs	r1, #12
 8003e28:	200a      	movs	r0, #10
 8003e2a:	f7fe fabd 	bl	80023a8 <xQueueGenericCreate>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <prvCheckForValidListAndQueue+0x54>)
 8003e32:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <prvCheckForValidListAndQueue+0x54>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <prvCheckForValidListAndQueue+0x54>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4908      	ldr	r1, [pc, #32]	; (8003e64 <prvCheckForValidListAndQueue+0x68>)
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fcc6 	bl	80027d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e48:	f000 f9ec 	bl	8004224 <vPortExitCritical>
    }
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	200001f8 	.word	0x200001f8
 8003e54:	200001c8 	.word	0x200001c8
 8003e58:	200001dc 	.word	0x200001dc
 8003e5c:	200001f0 	.word	0x200001f0
 8003e60:	200001f4 	.word	0x200001f4
 8003e64:	08007190 	.word	0x08007190

08003e68 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	3b04      	subs	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3b04      	subs	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	f023 0201 	bic.w	r2, r3, #1
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3b04      	subs	r3, #4
 8003e96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003e98:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <pxPortInitialiseStack+0x64>)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3b14      	subs	r3, #20
 8003ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3b04      	subs	r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f06f 0202 	mvn.w	r2, #2
 8003eb6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b20      	subs	r3, #32
 8003ebc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3714      	adds	r7, #20
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	08003ed1 	.word	0x08003ed1

08003ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <prvTaskExitError+0x54>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d00a      	beq.n	8003efa <prvTaskExitError+0x2a>
        __asm volatile
 8003ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
 8003ef4:	60fb      	str	r3, [r7, #12]
    }
 8003ef6:	bf00      	nop
 8003ef8:	e7fe      	b.n	8003ef8 <prvTaskExitError+0x28>
        __asm volatile
 8003efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efe:	f383 8811 	msr	BASEPRI, r3
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	60bb      	str	r3, [r7, #8]
    }
 8003f0c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f0e:	bf00      	nop
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0fc      	beq.n	8003f10 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20000010 	.word	0x20000010
	...

08003f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f30:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <pxCurrentTCBConst2>)
 8003f32:	6819      	ldr	r1, [r3, #0]
 8003f34:	6808      	ldr	r0, [r1, #0]
 8003f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f3a:	f380 8809 	msr	PSP, r0
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f380 8811 	msr	BASEPRI, r0
 8003f4a:	4770      	bx	lr
 8003f4c:	f3af 8000 	nop.w

08003f50 <pxCurrentTCBConst2>:
 8003f50:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop

08003f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f58:	4808      	ldr	r0, [pc, #32]	; (8003f7c <prvPortStartFirstTask+0x24>)
 8003f5a:	6800      	ldr	r0, [r0, #0]
 8003f5c:	6800      	ldr	r0, [r0, #0]
 8003f5e:	f380 8808 	msr	MSP, r0
 8003f62:	f04f 0000 	mov.w	r0, #0
 8003f66:	f380 8814 	msr	CONTROL, r0
 8003f6a:	b662      	cpsie	i
 8003f6c:	b661      	cpsie	f
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	f3bf 8f6f 	isb	sy
 8003f76:	df00      	svc	0
 8003f78:	bf00      	nop
 8003f7a:	0000      	.short	0x0000
 8003f7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop

08003f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f8a:	4b46      	ldr	r3, [pc, #280]	; (80040a4 <xPortStartScheduler+0x120>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a46      	ldr	r2, [pc, #280]	; (80040a8 <xPortStartScheduler+0x124>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d10a      	bne.n	8003faa <xPortStartScheduler+0x26>
        __asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	613b      	str	r3, [r7, #16]
    }
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003faa:	4b3e      	ldr	r3, [pc, #248]	; (80040a4 <xPortStartScheduler+0x120>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <xPortStartScheduler+0x128>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10a      	bne.n	8003fca <xPortStartScheduler+0x46>
        __asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	60fb      	str	r3, [r7, #12]
    }
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fca:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <xPortStartScheduler+0x12c>)
 8003fcc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	22ff      	movs	r2, #255	; 0xff
 8003fda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <xPortStartScheduler+0x130>)
 8003ff0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ff2:	4b31      	ldr	r3, [pc, #196]	; (80040b8 <xPortStartScheduler+0x134>)
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ff8:	e009      	b.n	800400e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <xPortStartScheduler+0x134>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	4a2d      	ldr	r2, [pc, #180]	; (80040b8 <xPortStartScheduler+0x134>)
 8004002:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d0ef      	beq.n	8003ffa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800401a:	4b27      	ldr	r3, [pc, #156]	; (80040b8 <xPortStartScheduler+0x134>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1c3 0307 	rsb	r3, r3, #7
 8004022:	2b04      	cmp	r3, #4
 8004024:	d00a      	beq.n	800403c <xPortStartScheduler+0xb8>
        __asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402a:	f383 8811 	msr	BASEPRI, r3
 800402e:	f3bf 8f6f 	isb	sy
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	60bb      	str	r3, [r7, #8]
    }
 8004038:	bf00      	nop
 800403a:	e7fe      	b.n	800403a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800403c:	4b1e      	ldr	r3, [pc, #120]	; (80040b8 <xPortStartScheduler+0x134>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	4a1d      	ldr	r2, [pc, #116]	; (80040b8 <xPortStartScheduler+0x134>)
 8004044:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004046:	4b1c      	ldr	r3, [pc, #112]	; (80040b8 <xPortStartScheduler+0x134>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800404e:	4a1a      	ldr	r2, [pc, #104]	; (80040b8 <xPortStartScheduler+0x134>)
 8004050:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800405a:	4b18      	ldr	r3, [pc, #96]	; (80040bc <xPortStartScheduler+0x138>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a17      	ldr	r2, [pc, #92]	; (80040bc <xPortStartScheduler+0x138>)
 8004060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004064:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <xPortStartScheduler+0x138>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a14      	ldr	r2, [pc, #80]	; (80040bc <xPortStartScheduler+0x138>)
 800406c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004070:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004072:	f000 f963 	bl	800433c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <xPortStartScheduler+0x13c>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800407c:	f000 f982 	bl	8004384 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004080:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <xPortStartScheduler+0x140>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <xPortStartScheduler+0x140>)
 8004086:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800408a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800408c:	f7ff ff64 	bl	8003f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004090:	f7ff f8e0 	bl	8003254 <vTaskSwitchContext>
    prvTaskExitError();
 8004094:	f7ff ff1c 	bl	8003ed0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	e000ed00 	.word	0xe000ed00
 80040a8:	410fc271 	.word	0x410fc271
 80040ac:	410fc270 	.word	0x410fc270
 80040b0:	e000e400 	.word	0xe000e400
 80040b4:	20000204 	.word	0x20000204
 80040b8:	20000208 	.word	0x20000208
 80040bc:	e000ed20 	.word	0xe000ed20
 80040c0:	20000010 	.word	0x20000010
 80040c4:	e000ef34 	.word	0xe000ef34

080040c8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040ce:	4b37      	ldr	r3, [pc, #220]	; (80041ac <vInitPrioGroupValue+0xe4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a37      	ldr	r2, [pc, #220]	; (80041b0 <vInitPrioGroupValue+0xe8>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d10a      	bne.n	80040ee <vInitPrioGroupValue+0x26>
        __asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	613b      	str	r3, [r7, #16]
    }
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <vInitPrioGroupValue+0xe4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <vInitPrioGroupValue+0xec>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d10a      	bne.n	800410e <vInitPrioGroupValue+0x46>
        __asm volatile
 80040f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fc:	f383 8811 	msr	BASEPRI, r3
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	f3bf 8f4f 	dsb	sy
 8004108:	60fb      	str	r3, [r7, #12]
    }
 800410a:	bf00      	nop
 800410c:	e7fe      	b.n	800410c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <vInitPrioGroupValue+0xf0>)
 8004110:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	22ff      	movs	r2, #255	; 0xff
 800411e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004130:	b2da      	uxtb	r2, r3
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <vInitPrioGroupValue+0xf4>)
 8004134:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004136:	4b22      	ldr	r3, [pc, #136]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004138:	2207      	movs	r2, #7
 800413a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800413c:	e009      	b.n	8004152 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3b01      	subs	r3, #1
 8004144:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004146:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415a:	2b80      	cmp	r3, #128	; 0x80
 800415c:	d0ef      	beq.n	800413e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800415e:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1c3 0307 	rsb	r3, r3, #7
 8004166:	2b04      	cmp	r3, #4
 8004168:	d00a      	beq.n	8004180 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	60bb      	str	r3, [r7, #8]
    }
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004180:	4b0f      	ldr	r3, [pc, #60]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	021b      	lsls	r3, r3, #8
 8004186:	4a0e      	ldr	r2, [pc, #56]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004188:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004192:	4a0b      	ldr	r2, [pc, #44]	; (80041c0 <vInitPrioGroupValue+0xf8>)
 8004194:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	b2da      	uxtb	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800419e:	bf00      	nop
 80041a0:	371c      	adds	r7, #28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	e000ed00 	.word	0xe000ed00
 80041b0:	410fc271 	.word	0x410fc271
 80041b4:	410fc270 	.word	0x410fc270
 80041b8:	e000e400 	.word	0xe000e400
 80041bc:	20000204 	.word	0x20000204
 80041c0:	20000208 	.word	0x20000208

080041c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
        __asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	607b      	str	r3, [r7, #4]
    }
 80041dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <vPortEnterCritical+0x58>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <vPortEnterCritical+0x58>)
 80041e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <vPortEnterCritical+0x58>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10f      	bne.n	8004210 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <vPortEnterCritical+0x5c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <vPortEnterCritical+0x4c>
        __asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	603b      	str	r3, [r7, #0]
    }
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <vPortEnterCritical+0x4a>
    }
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000010 	.word	0x20000010
 8004220:	e000ed04 	.word	0xe000ed04

08004224 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <vPortExitCritical+0x50>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <vPortExitCritical+0x24>
        __asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	607b      	str	r3, [r7, #4]
    }
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <vPortExitCritical+0x50>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3b01      	subs	r3, #1
 800424e:	4a09      	ldr	r2, [pc, #36]	; (8004274 <vPortExitCritical+0x50>)
 8004250:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <vPortExitCritical+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d105      	bne.n	8004266 <vPortExitCritical+0x42>
 800425a:	2300      	movs	r3, #0
 800425c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004264:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000010 	.word	0x20000010
	...

08004280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004280:	f3ef 8009 	mrs	r0, PSP
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <pxCurrentTCBConst>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	f01e 0f10 	tst.w	lr, #16
 8004290:	bf08      	it	eq
 8004292:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004296:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800429a:	6010      	str	r0, [r2, #0]
 800429c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80042a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042a4:	f380 8811 	msr	BASEPRI, r0
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f7fe ffd0 	bl	8003254 <vTaskSwitchContext>
 80042b4:	f04f 0000 	mov.w	r0, #0
 80042b8:	f380 8811 	msr	BASEPRI, r0
 80042bc:	bc09      	pop	{r0, r3}
 80042be:	6819      	ldr	r1, [r3, #0]
 80042c0:	6808      	ldr	r0, [r1, #0]
 80042c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c6:	f01e 0f10 	tst.w	lr, #16
 80042ca:	bf08      	it	eq
 80042cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80042d0:	f380 8809 	msr	PSP, r0
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst>:
 80042e0:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
        __asm volatile
 80042ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f2:	f383 8811 	msr	BASEPRI, r3
 80042f6:	f3bf 8f6f 	isb	sy
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	607b      	str	r3, [r7, #4]
    }
 8004300:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004302:	f002 fbc1 	bl	8006a88 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004306:	f7fe fe8b 	bl	8003020 <xTaskIncrementTick>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004310:	f002 fc18 	bl	8006b44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <SysTick_Handler+0x50>)
 8004316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	e001      	b.n	8004322 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800431e:	f002 fbf5 	bl	8006b0c <SEGGER_SYSVIEW_RecordExitISR>
 8004322:	2300      	movs	r3, #0
 8004324:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f383 8811 	msr	BASEPRI, r3
    }
 800432c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortSetupTimerInterrupt+0x34>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004346:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <vPortSetupTimerInterrupt+0x38>)
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800434c:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <vPortSetupTimerInterrupt+0x3c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a0a      	ldr	r2, [pc, #40]	; (800437c <vPortSetupTimerInterrupt+0x40>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	4a09      	ldr	r2, [pc, #36]	; (8004380 <vPortSetupTimerInterrupt+0x44>)
 800435a:	3b01      	subs	r3, #1
 800435c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <vPortSetupTimerInterrupt+0x34>)
 8004360:	2207      	movs	r2, #7
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	e000e010 	.word	0xe000e010
 8004374:	e000e018 	.word	0xe000e018
 8004378:	20000000 	.word	0x20000000
 800437c:	10624dd3 	.word	0x10624dd3
 8004380:	e000e014 	.word	0xe000e014

08004384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004394 <vPortEnableVFP+0x10>
 8004388:	6801      	ldr	r1, [r0, #0]
 800438a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800438e:	6001      	str	r1, [r0, #0]
 8004390:	4770      	bx	lr
 8004392:	0000      	.short	0x0000
 8004394:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop

0800439c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80043a2:	f3ef 8305 	mrs	r3, IPSR
 80043a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	d914      	bls.n	80043d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <vPortValidateInterruptPriority+0x70>)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <vPortValidateInterruptPriority+0x74>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	7afa      	ldrb	r2, [r7, #11]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d20a      	bcs.n	80043d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	607b      	str	r3, [r7, #4]
    }
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <vPortValidateInterruptPriority+0x78>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043e0:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <vPortValidateInterruptPriority+0x7c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d90a      	bls.n	80043fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	603b      	str	r3, [r7, #0]
    }
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <vPortValidateInterruptPriority+0x60>
    }
 80043fe:	bf00      	nop
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	e000e3f0 	.word	0xe000e3f0
 8004410:	20000204 	.word	0x20000204
 8004414:	e000ed0c 	.word	0xe000ed0c
 8004418:	20000208 	.word	0x20000208

0800441c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004428:	f7fe fcca 	bl	8002dc0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800442c:	4b53      	ldr	r3, [pc, #332]	; (800457c <pvPortMalloc+0x160>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004434:	f000 f908 	bl	8004648 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d012      	beq.n	8004464 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800443e:	2208      	movs	r2, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	3308      	adds	r3, #8
 800444a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	43db      	mvns	r3, r3
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	429a      	cmp	r2, r3
 8004454:	d804      	bhi.n	8004460 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4413      	add	r3, r2
 800445c:	607b      	str	r3, [r7, #4]
 800445e:	e001      	b.n	8004464 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	db70      	blt.n	800454c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d06d      	beq.n	800454c <pvPortMalloc+0x130>
 8004470:	4b43      	ldr	r3, [pc, #268]	; (8004580 <pvPortMalloc+0x164>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d868      	bhi.n	800454c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800447a:	4b42      	ldr	r3, [pc, #264]	; (8004584 <pvPortMalloc+0x168>)
 800447c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800447e:	4b41      	ldr	r3, [pc, #260]	; (8004584 <pvPortMalloc+0x168>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004484:	e004      	b.n	8004490 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d903      	bls.n	80044a2 <pvPortMalloc+0x86>
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f1      	bne.n	8004486 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80044a2:	4b36      	ldr	r3, [pc, #216]	; (800457c <pvPortMalloc+0x160>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d04f      	beq.n	800454c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2208      	movs	r2, #8
 80044b2:	4413      	add	r3, r2
 80044b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	1ad2      	subs	r2, r2, r3
 80044c6:	2308      	movs	r3, #8
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d91f      	bls.n	800450e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4413      	add	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <pvPortMalloc+0xda>
        __asm volatile
 80044e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	613b      	str	r3, [r7, #16]
    }
 80044f2:	bf00      	nop
 80044f4:	e7fe      	b.n	80044f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad2      	subs	r2, r2, r3
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004508:	6978      	ldr	r0, [r7, #20]
 800450a:	f000 f8f9 	bl	8004700 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800450e:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <pvPortMalloc+0x164>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	4a19      	ldr	r2, [pc, #100]	; (8004580 <pvPortMalloc+0x164>)
 800451a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <pvPortMalloc+0x164>)
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	4b19      	ldr	r3, [pc, #100]	; (8004588 <pvPortMalloc+0x16c>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d203      	bcs.n	8004530 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <pvPortMalloc+0x164>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a16      	ldr	r2, [pc, #88]	; (8004588 <pvPortMalloc+0x16c>)
 800452e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004542:	4b12      	ldr	r3, [pc, #72]	; (800458c <pvPortMalloc+0x170>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3301      	adds	r3, #1
 8004548:	4a10      	ldr	r2, [pc, #64]	; (800458c <pvPortMalloc+0x170>)
 800454a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800454c:	f7fe fc46 	bl	8002ddc <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <pvPortMalloc+0x154>
        __asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60fb      	str	r3, [r7, #12]
    }
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <pvPortMalloc+0x152>
    return pvReturn;
 8004570:	69fb      	ldr	r3, [r7, #28]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3728      	adds	r7, #40	; 0x28
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20012e14 	.word	0x20012e14
 8004580:	20012e18 	.word	0x20012e18
 8004584:	20012e0c 	.word	0x20012e0c
 8004588:	20012e1c 	.word	0x20012e1c
 800458c:	20012e20 	.word	0x20012e20

08004590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d049      	beq.n	8004636 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80045a2:	2308      	movs	r3, #8
 80045a4:	425b      	negs	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db0a      	blt.n	80045ce <vPortFree+0x3e>
        __asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	60fb      	str	r3, [r7, #12]
    }
 80045ca:	bf00      	nop
 80045cc:	e7fe      	b.n	80045cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <vPortFree+0x5c>
        __asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	60bb      	str	r3, [r7, #8]
    }
 80045e8:	bf00      	nop
 80045ea:	e7fe      	b.n	80045ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0fdb      	lsrs	r3, r3, #31
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01c      	beq.n	8004636 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d118      	bne.n	8004636 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004610:	f7fe fbd6 	bl	8002dc0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	4b09      	ldr	r3, [pc, #36]	; (8004640 <vPortFree+0xb0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4413      	add	r3, r2
 800461e:	4a08      	ldr	r2, [pc, #32]	; (8004640 <vPortFree+0xb0>)
 8004620:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004622:	6938      	ldr	r0, [r7, #16]
 8004624:	f000 f86c 	bl	8004700 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <vPortFree+0xb4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	4a05      	ldr	r2, [pc, #20]	; (8004644 <vPortFree+0xb4>)
 8004630:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004632:	f7fe fbd3 	bl	8002ddc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20012e18 	.word	0x20012e18
 8004644:	20012e24 	.word	0x20012e24

08004648 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800464e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004652:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004654:	4b25      	ldr	r3, [pc, #148]	; (80046ec <prvHeapInit+0xa4>)
 8004656:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00c      	beq.n	800467c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3307      	adds	r3, #7
 8004666:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0307 	bic.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <prvHeapInit+0xa4>)
 8004678:	4413      	add	r3, r2
 800467a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004680:	4a1b      	ldr	r2, [pc, #108]	; (80046f0 <prvHeapInit+0xa8>)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <prvHeapInit+0xa8>)
 8004688:	2200      	movs	r2, #0
 800468a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4413      	add	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004694:	2208      	movs	r2, #8
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1a9b      	subs	r3, r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <prvHeapInit+0xac>)
 80046a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80046aa:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <prvHeapInit+0xac>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <prvHeapInit+0xac>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <prvHeapInit+0xac>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4a08      	ldr	r2, [pc, #32]	; (80046f8 <prvHeapInit+0xb0>)
 80046d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	4a07      	ldr	r2, [pc, #28]	; (80046fc <prvHeapInit+0xb4>)
 80046de:	6013      	str	r3, [r2, #0]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	2000020c 	.word	0x2000020c
 80046f0:	20012e0c 	.word	0x20012e0c
 80046f4:	20012e14 	.word	0x20012e14
 80046f8:	20012e1c 	.word	0x20012e1c
 80046fc:	20012e18 	.word	0x20012e18

08004700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <prvInsertBlockIntoFreeList+0xac>)
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e002      	b.n	8004714 <prvInsertBlockIntoFreeList+0x14>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d8f7      	bhi.n	800470e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d108      	bne.n	8004742 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	441a      	add	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	441a      	add	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d118      	bne.n	8004788 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b15      	ldr	r3, [pc, #84]	; (80047b0 <prvInsertBlockIntoFreeList+0xb0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d00d      	beq.n	800477e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	441a      	add	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	e008      	b.n	8004790 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800477e:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e003      	b.n	8004790 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d002      	beq.n	800479e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20012e0c 	.word	0x20012e0c
 80047b0:	20012e14 	.word	0x20012e14

080047b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80047b8:	4803      	ldr	r0, [pc, #12]	; (80047c8 <_cbSendSystemDesc+0x14>)
 80047ba:	f002 f90f 	bl	80069dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80047be:	4803      	ldr	r0, [pc, #12]	; (80047cc <_cbSendSystemDesc+0x18>)
 80047c0:	f002 f90c 	bl	80069dc <SEGGER_SYSVIEW_SendSysDesc>
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	08007198 	.word	0x08007198
 80047cc:	080071d4 	.word	0x080071d4

080047d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80047d6:	6818      	ldr	r0, [r3, #0]
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80047da:	6819      	ldr	r1, [r3, #0]
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80047de:	4a06      	ldr	r2, [pc, #24]	; (80047f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80047e0:	f001 fc78 	bl	80060d4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80047e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80047e8:	f001 fcb8 	bl	800615c <SEGGER_SYSVIEW_SetRAMBase>
}
 80047ec:	bf00      	nop
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000000 	.word	0x20000000
 80047f4:	080047b5 	.word	0x080047b5
 80047f8:	08007270 	.word	0x08007270

080047fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80047fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fe:	b085      	sub	sp, #20
 8004800:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	e033      	b.n	8004870 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004808:	491e      	ldr	r1, [pc, #120]	; (8004884 <_cbSendTaskList+0x88>)
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	491a      	ldr	r1, [pc, #104]	; (8004884 <_cbSendTaskList+0x88>)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	440b      	add	r3, r1
 8004826:	3304      	adds	r3, #4
 8004828:	6819      	ldr	r1, [r3, #0]
 800482a:	4c16      	ldr	r4, [pc, #88]	; (8004884 <_cbSendTaskList+0x88>)
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4423      	add	r3, r4
 8004838:	3308      	adds	r3, #8
 800483a:	681c      	ldr	r4, [r3, #0]
 800483c:	4d11      	ldr	r5, [pc, #68]	; (8004884 <_cbSendTaskList+0x88>)
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	442b      	add	r3, r5
 800484a:	330c      	adds	r3, #12
 800484c:	681d      	ldr	r5, [r3, #0]
 800484e:	4e0d      	ldr	r6, [pc, #52]	; (8004884 <_cbSendTaskList+0x88>)
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	4613      	mov	r3, r2
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4433      	add	r3, r6
 800485c:	3310      	adds	r3, #16
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	9300      	str	r3, [sp, #0]
 8004862:	462b      	mov	r3, r5
 8004864:	4622      	mov	r2, r4
 8004866:	f000 f8bd 	bl	80049e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3301      	adds	r3, #1
 800486e:	607b      	str	r3, [r7, #4]
 8004870:	4b05      	ldr	r3, [pc, #20]	; (8004888 <_cbSendTaskList+0x8c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3c6      	bcc.n	8004808 <_cbSendTaskList+0xc>
  }
}
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	20012e28 	.word	0x20012e28
 8004888:	20012ec8 	.word	0x20012ec8

0800488c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800488c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004894:	f7fe fbb2 	bl	8002ffc <xTaskGetTickCountFromISR>
 8004898:	4603      	mov	r3, r0
 800489a:	2200      	movs	r2, #0
 800489c:	469a      	mov	sl, r3
 800489e:	4693      	mov	fp, r2
 80048a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80048a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	f04f 0a00 	mov.w	sl, #0
 80048b0:	f04f 0b00 	mov.w	fp, #0
 80048b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80048b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80048bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80048c0:	4652      	mov	r2, sl
 80048c2:	465b      	mov	r3, fp
 80048c4:	1a14      	subs	r4, r2, r0
 80048c6:	eb63 0501 	sbc.w	r5, r3, r1
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	00ab      	lsls	r3, r5, #2
 80048d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80048d8:	00a2      	lsls	r2, r4, #2
 80048da:	4614      	mov	r4, r2
 80048dc:	461d      	mov	r5, r3
 80048de:	eb14 0800 	adds.w	r8, r4, r0
 80048e2:	eb45 0901 	adc.w	r9, r5, r1
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	f04f 0300 	mov.w	r3, #0
 80048ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048fa:	4690      	mov	r8, r2
 80048fc:	4699      	mov	r9, r3
 80048fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004902:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004914 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004922:	2205      	movs	r2, #5
 8004924:	492b      	ldr	r1, [pc, #172]	; (80049d4 <SYSVIEW_AddTask+0xc0>)
 8004926:	68b8      	ldr	r0, [r7, #8]
 8004928:	f002 fbc2 	bl	80070b0 <memcmp>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d04b      	beq.n	80049ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004932:	4b29      	ldr	r3, [pc, #164]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b07      	cmp	r3, #7
 8004938:	d903      	bls.n	8004942 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800493a:	4828      	ldr	r0, [pc, #160]	; (80049dc <SYSVIEW_AddTask+0xc8>)
 800493c:	f002 fb0a 	bl	8006f54 <SEGGER_SYSVIEW_Warn>
    return;
 8004940:	e044      	b.n	80049cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004942:	4b25      	ldr	r3, [pc, #148]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4926      	ldr	r1, [pc, #152]	; (80049e0 <SYSVIEW_AddTask+0xcc>)
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004956:	4b20      	ldr	r3, [pc, #128]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4921      	ldr	r1, [pc, #132]	; (80049e0 <SYSVIEW_AddTask+0xcc>)
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	440b      	add	r3, r1
 8004966:	3304      	adds	r3, #4
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800496c:	4b1a      	ldr	r3, [pc, #104]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	491b      	ldr	r1, [pc, #108]	; (80049e0 <SYSVIEW_AddTask+0xcc>)
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3308      	adds	r3, #8
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4916      	ldr	r1, [pc, #88]	; (80049e0 <SYSVIEW_AddTask+0xcc>)
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	330c      	adds	r3, #12
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004998:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4910      	ldr	r1, [pc, #64]	; (80049e0 <SYSVIEW_AddTask+0xcc>)
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3310      	adds	r3, #16
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80049ae:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <SYSVIEW_AddTask+0xc4>)
 80049b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f80e 	bl	80049e4 <SYSVIEW_SendTaskInfo>
 80049c8:	e000      	b.n	80049cc <SYSVIEW_AddTask+0xb8>
    return;
 80049ca:	bf00      	nop

}
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	080071e4 	.word	0x080071e4
 80049d8:	20012ec8 	.word	0x20012ec8
 80049dc:	080071ec 	.word	0x080071ec
 80049e0:	20012e28 	.word	0x20012e28

080049e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	; 0x28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
 80049f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80049f2:	f107 0314 	add.w	r3, r7, #20
 80049f6:	2214      	movs	r2, #20
 80049f8:	2100      	movs	r1, #0
 80049fa:	4618      	mov	r0, r3
 80049fc:	f002 fb76 	bl	80070ec <memset>
  TaskInfo.TaskID     = TaskID;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fee7 	bl	80067ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004a1e:	bf00      	nop
 8004a20:	3728      	adds	r7, #40	; 0x28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <__NVIC_EnableIRQ>:
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db0b      	blt.n	8004a52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a3a:	79fb      	ldrb	r3, [r7, #7]
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	4907      	ldr	r1, [pc, #28]	; (8004a60 <__NVIC_EnableIRQ+0x38>)
 8004a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2001      	movs	r0, #1
 8004a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8004a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	e000e100 	.word	0xe000e100

08004a64 <__NVIC_SetPriority>:
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	6039      	str	r1, [r7, #0]
 8004a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	db0a      	blt.n	8004a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	b2da      	uxtb	r2, r3
 8004a7c:	490c      	ldr	r1, [pc, #48]	; (8004ab0 <__NVIC_SetPriority+0x4c>)
 8004a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	440b      	add	r3, r1
 8004a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a8c:	e00a      	b.n	8004aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	4908      	ldr	r1, [pc, #32]	; (8004ab4 <__NVIC_SetPriority+0x50>)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	3b04      	subs	r3, #4
 8004a9c:	0112      	lsls	r2, r2, #4
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	440b      	add	r3, r1
 8004aa2:	761a      	strb	r2, [r3, #24]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000e100 	.word	0xe000e100
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004abe:	f002 faa5 	bl	800700c <SEGGER_SYSVIEW_IsStarted>
 8004ac2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004aca:	f001 fd13 	bl	80064f4 <SEGGER_SYSVIEW_Start>
  }
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <_cbOnUARTRx+0x3c>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d806      	bhi.n	8004af8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004aea:	4b0a      	ldr	r3, [pc, #40]	; (8004b14 <_cbOnUARTRx+0x3c>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <_cbOnUARTRx+0x3c>)
 8004af4:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004af6:	e009      	b.n	8004b0c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004af8:	f7ff ffde 	bl	8004ab8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004afc:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <_cbOnUARTRx+0x3c>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	1dfb      	adds	r3, r7, #7
 8004b04:	2201      	movs	r2, #1
 8004b06:	4619      	mov	r1, r3
 8004b08:	f000 fb9c 	bl	8005244 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004b0c:	bf00      	nop
}
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000014 	.word	0x20000014

08004b18 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004b20:	4b14      	ldr	r3, [pc, #80]	; (8004b74 <_cbOnUARTTx+0x5c>)
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d80f      	bhi.n	8004b48 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004b28:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <_cbOnUARTTx+0x5c>)
 8004b2a:	785b      	ldrb	r3, [r3, #1]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <_cbOnUARTTx+0x60>)
 8004b30:	5c9a      	ldrb	r2, [r3, r2]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004b36:	4b0f      	ldr	r3, [pc, #60]	; (8004b74 <_cbOnUARTTx+0x5c>)
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <_cbOnUARTTx+0x5c>)
 8004b40:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004b42:	2301      	movs	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004b46:	e00f      	b.n	8004b68 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <_cbOnUARTTx+0x5c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fa1b 	bl	8004f8c <SEGGER_RTT_ReadUpBufferNoLock>
 8004b56:	4603      	mov	r3, r0
 8004b58:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	da02      	bge.n	8004b66 <_cbOnUARTTx+0x4e>
    r = 0;
 8004b60:	2300      	movs	r3, #0
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	e000      	b.n	8004b68 <_cbOnUARTTx+0x50>
  }
Done:
 8004b66:	bf00      	nop
  return r;
 8004b68:	68fb      	ldr	r3, [r7, #12]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3710      	adds	r7, #16
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	20000014 	.word	0x20000014
 8004b78:	08007278 	.word	0x08007278

08004b7c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004b84:	4a04      	ldr	r2, [pc, #16]	; (8004b98 <SEGGER_UART_init+0x1c>)
 8004b86:	4905      	ldr	r1, [pc, #20]	; (8004b9c <SEGGER_UART_init+0x20>)
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f863 	bl	8004c54 <HIF_UART_Init>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	08004ad9 	.word	0x08004ad9
 8004b9c:	08004b19 	.word	0x08004b19

08004ba0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <USART2_IRQHandler+0x80>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0320 	and.w	r3, r3, #32
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d011      	beq.n	8004bda <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004bb6:	4b1b      	ldr	r3, [pc, #108]	; (8004c24 <USART2_IRQHandler+0x84>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 030b 	and.w	r3, r3, #11
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d108      	bne.n	8004bda <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004bc8:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <USART2_IRQHandler+0x88>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d004      	beq.n	8004bda <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004bd0:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <USART2_IRQHandler+0x88>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	79fa      	ldrb	r2, [r7, #7]
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004be4:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <USART2_IRQHandler+0x8c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <USART2_IRQHandler+0x8c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	1dfa      	adds	r2, r7, #7
 8004bf2:	4610      	mov	r0, r2
 8004bf4:	4798      	blx	r3
 8004bf6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004bfe:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <USART2_IRQHandler+0x90>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a0b      	ldr	r2, [pc, #44]	; (8004c30 <USART2_IRQHandler+0x90>)
 8004c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	e006      	b.n	8004c1a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <USART2_IRQHandler+0x80>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004c10:	79fa      	ldrb	r2, [r7, #7]
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <USART2_IRQHandler+0x84>)
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e000      	b.n	8004c1a <USART2_IRQHandler+0x7a>
      return;
 8004c18:	bf00      	nop
    }
  }
}
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40004400 	.word	0x40004400
 8004c24:	40004404 	.word	0x40004404
 8004c28:	20012ecc 	.word	0x20012ecc
 8004c2c:	20012ed0 	.word	0x20012ed0
 8004c30:	4000440c 	.word	0x4000440c

08004c34 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004c38:	4b05      	ldr	r3, [pc, #20]	; (8004c50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a04      	ldr	r2, [pc, #16]	; (8004c50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	6013      	str	r3, [r2, #0]
}
 8004c44:	bf00      	nop
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	4000440c 	.word	0x4000440c

08004c54 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004c60:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <HIF_UART_Init+0xc8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a2d      	ldr	r2, [pc, #180]	; (8004d1c <HIF_UART_Init+0xc8>)
 8004c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004c6c:	4b2c      	ldr	r3, [pc, #176]	; (8004d20 <HIF_UART_Init+0xcc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <HIF_UART_Init+0xcc>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004c78:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <HIF_UART_Init+0xd0>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c84:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004c8c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004c8e:	4a25      	ldr	r2, [pc, #148]	; (8004d24 <HIF_UART_Init+0xd0>)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HIF_UART_Init+0xd4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ca0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004ca8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004caa:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <HIF_UART_Init+0xd4>)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	; (8004d2c <HIF_UART_Init+0xd8>)
 8004cb2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004cb6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004cb8:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HIF_UART_Init+0xdc>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HIF_UART_Init+0xe0>)
 8004cc0:	2280      	movs	r2, #128	; 0x80
 8004cc2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004cca:	4a1b      	ldr	r2, [pc, #108]	; (8004d38 <HIF_UART_Init+0xe4>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce2:	d302      	bcc.n	8004cea <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004ce4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004ce8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d004      	beq.n	8004cfa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	011b      	lsls	r3, r3, #4
 8004cf4:	4a11      	ldr	r2, [pc, #68]	; (8004d3c <HIF_UART_Init+0xe8>)
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004cfa:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <HIF_UART_Init+0xec>)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004d00:	4a10      	ldr	r2, [pc, #64]	; (8004d44 <HIF_UART_Init+0xf0>)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004d06:	2106      	movs	r1, #6
 8004d08:	2026      	movs	r0, #38	; 0x26
 8004d0a:	f7ff feab 	bl	8004a64 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004d0e:	2026      	movs	r0, #38	; 0x26
 8004d10:	f7ff fe8a 	bl	8004a28 <__NVIC_EnableIRQ>
}
 8004d14:	bf00      	nop
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40023840 	.word	0x40023840
 8004d20:	40023830 	.word	0x40023830
 8004d24:	40020020 	.word	0x40020020
 8004d28:	40020000 	.word	0x40020000
 8004d2c:	4000440c 	.word	0x4000440c
 8004d30:	40004410 	.word	0x40004410
 8004d34:	40004414 	.word	0x40004414
 8004d38:	0501bd00 	.word	0x0501bd00
 8004d3c:	40004408 	.word	0x40004408
 8004d40:	20012ecc 	.word	0x20012ecc
 8004d44:	20012ed0 	.word	0x20012ed0

08004d48 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004d4e:	4b26      	ldr	r3, [pc, #152]	; (8004de8 <_DoInit+0xa0>)
 8004d50:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004d52:	22a8      	movs	r2, #168	; 0xa8
 8004d54:	2100      	movs	r1, #0
 8004d56:	6838      	ldr	r0, [r7, #0]
 8004d58:	f002 f9c8 	bl	80070ec <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2203      	movs	r2, #3
 8004d66:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4a20      	ldr	r2, [pc, #128]	; (8004dec <_DoInit+0xa4>)
 8004d6c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <_DoInit+0xa8>)
 8004d72:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d7a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2200      	movs	r2, #0
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <_DoInit+0xa4>)
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	4a17      	ldr	r2, [pc, #92]	; (8004df4 <_DoInit+0xac>)
 8004d98:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2200      	movs	r2, #0
 8004daa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004db2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	e00c      	b.n	8004dd6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f1c3 030f 	rsb	r3, r3, #15
 8004dc2:	4a0d      	ldr	r2, [pc, #52]	; (8004df8 <_DoInit+0xb0>)
 8004dc4:	5cd1      	ldrb	r1, [r2, r3]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	460a      	mov	r2, r1
 8004dce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b0f      	cmp	r3, #15
 8004dda:	d9ef      	bls.n	8004dbc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004ddc:	f3bf 8f5f 	dmb	sy
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20012ed4 	.word	0x20012ed4
 8004dec:	0800723c 	.word	0x0800723c
 8004df0:	20012f7c 	.word	0x20012f7c
 8004df4:	2001337c 	.word	0x2001337c
 8004df8:	0800727c 	.word	0x0800727c

08004dfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08a      	sub	sp, #40	; 0x28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d905      	bls.n	8004e2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	3b01      	subs	r3, #1
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2a:	e007      	b.n	8004e3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	1acb      	subs	r3, r1, r3
 8004e36:	4413      	add	r3, r2
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bf28      	it	cs
 8004e4a:	4613      	movcs	r3, r2
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf28      	it	cs
 8004e56:	4613      	movcs	r3, r2
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	68b9      	ldr	r1, [r7, #8]
 8004e68:	6978      	ldr	r0, [r7, #20]
 8004e6a:	f002 f931 	bl	80070d0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004e6e:	6a3a      	ldr	r2, [r7, #32]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	4413      	add	r3, r2
 8004e74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	4413      	add	r3, r2
 8004e7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	4413      	add	r3, r2
 8004e8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d101      	bne.n	8004e9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	69fa      	ldr	r2, [r7, #28]
 8004ea4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1b2      	bne.n	8004e12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004eac:	6a3b      	ldr	r3, [r7, #32]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}

08004eb6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b088      	sub	sp, #32
 8004eba:	af00      	add	r7, sp, #0
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d911      	bls.n	8004efe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	68b9      	ldr	r1, [r7, #8]
 8004ee8:	6938      	ldr	r0, [r7, #16]
 8004eea:	f002 f8f1 	bl	80070d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004eee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004ef2:	69fa      	ldr	r2, [r7, #28]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	441a      	add	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004efc:	e01f      	b.n	8004f3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	6938      	ldr	r0, [r7, #16]
 8004f12:	f002 f8dd 	bl	80070d0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	4413      	add	r3, r2
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6938      	ldr	r0, [r7, #16]
 8004f30:	f002 f8ce 	bl	80070d0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	60da      	str	r2, [r3, #12]
}
 8004f3e:	bf00      	nop
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d808      	bhi.n	8004f74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	1ad2      	subs	r2, r2, r3
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	e004      	b.n	8004f7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004f7e:	697b      	ldr	r3, [r7, #20]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b08c      	sub	sp, #48	; 0x30
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004f98:	4b3e      	ldr	r3, [pc, #248]	; (8005094 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004f9a:	623b      	str	r3, [r7, #32]
 8004f9c:	6a3b      	ldr	r3, [r7, #32]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b53      	cmp	r3, #83	; 0x53
 8004fa4:	d001      	beq.n	8004faa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004fa6:	f7ff fecf 	bl	8004d48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	4613      	mov	r3, r2
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4a37      	ldr	r2, [pc, #220]	; (8005094 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d92b      	bls.n	8005030 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bf28      	it	cs
 8004fea:	4613      	movcs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff4:	4413      	add	r3, r2
 8004ff6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	6939      	ldr	r1, [r7, #16]
 8004ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ffe:	f002 f867 	bl	80070d0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4413      	add	r3, r2
 8005008:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800500a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	4413      	add	r3, r2
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800501a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4413      	add	r3, r2
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005028:	429a      	cmp	r2, r3
 800502a:	d101      	bne.n	8005030 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 800502c:	2300      	movs	r3, #0
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4293      	cmp	r3, r2
 800503e:	bf28      	it	cs
 8005040:	4613      	movcs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d019      	beq.n	800507e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	4413      	add	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800505a:	f002 f839 	bl	80070d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800505e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	4413      	add	r3, r2
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	4413      	add	r3, r2
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	4413      	add	r3, r2
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005088:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800508c:	4618      	mov	r0, r3
 800508e:	3730      	adds	r7, #48	; 0x30
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	20012ed4 	.word	0x20012ed4

08005098 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	; 0x30
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050a4:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050a6:	623b      	str	r3, [r7, #32]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b53      	cmp	r3, #83	; 0x53
 80050b0:	d001      	beq.n	80050b6 <SEGGER_RTT_ReadNoLock+0x1e>
 80050b2:	f7ff fe49 	bl	8004d48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	4613      	mov	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	4413      	add	r3, r2
 80050be:	00db      	lsls	r3, r3, #3
 80050c0:	3360      	adds	r3, #96	; 0x60
 80050c2:	4a37      	ldr	r2, [pc, #220]	; (80051a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050c4:	4413      	add	r3, r2
 80050c6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80050dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d92b      	bls.n	800513c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bf28      	it	cs
 80050f6:	4613      	movcs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	4413      	add	r3, r2
 8005102:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	6939      	ldr	r1, [r7, #16]
 8005108:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800510a:	f001 ffe1 	bl	80070d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800510e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4413      	add	r3, r2
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005126:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4413      	add	r3, r2
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005134:	429a      	cmp	r2, r3
 8005136:	d101      	bne.n	800513c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005138:	2300      	movs	r3, #0
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4293      	cmp	r3, r2
 800514a:	bf28      	it	cs
 800514c:	4613      	movcs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d019      	beq.n	800518a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	4413      	add	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005166:	f001 ffb3 	bl	80070d0 <memcpy>
    NumBytesRead += NumBytesRem;
 800516a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	4413      	add	r3, r2
 8005188:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005194:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005198:	4618      	mov	r0, r3
 800519a:	3730      	adds	r7, #48	; 0x30
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20012ed4 	.word	0x20012ed4

080051a4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4613      	mov	r3, r2
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	4413      	add	r3, r2
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	3360      	adds	r3, #96	; 0x60
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80051c2:	4413      	add	r3, r2
 80051c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d029      	beq.n	8005222 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d82e      	bhi.n	8005230 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d013      	beq.n	8005202 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80051da:	e029      	b.n	8005230 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80051dc:	6978      	ldr	r0, [r7, #20]
 80051de:	f7ff feb2 	bl	8004f46 <_GetAvailWriteSpace>
 80051e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d202      	bcs.n	80051f2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80051f0:	e021      	b.n	8005236 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	69b9      	ldr	r1, [r7, #24]
 80051fa:	6978      	ldr	r0, [r7, #20]
 80051fc:	f7ff fe5b 	bl	8004eb6 <_WriteNoCheck>
    break;
 8005200:	e019      	b.n	8005236 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005202:	6978      	ldr	r0, [r7, #20]
 8005204:	f7ff fe9f 	bl	8004f46 <_GetAvailWriteSpace>
 8005208:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4293      	cmp	r3, r2
 8005210:	bf28      	it	cs
 8005212:	4613      	movcs	r3, r2
 8005214:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005216:	69fa      	ldr	r2, [r7, #28]
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	6978      	ldr	r0, [r7, #20]
 800521c:	f7ff fe4b 	bl	8004eb6 <_WriteNoCheck>
    break;
 8005220:	e009      	b.n	8005236 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	69b9      	ldr	r1, [r7, #24]
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	f7ff fde8 	bl	8004dfc <_WriteBlocking>
 800522c:	61f8      	str	r0, [r7, #28]
    break;
 800522e:	e002      	b.n	8005236 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
    break;
 8005234:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20012ed4 	.word	0x20012ed4

08005244 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b088      	sub	sp, #32
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005250:	4b0e      	ldr	r3, [pc, #56]	; (800528c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005252:	61fb      	str	r3, [r7, #28]
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b53      	cmp	r3, #83	; 0x53
 800525c:	d001      	beq.n	8005262 <SEGGER_RTT_WriteDownBuffer+0x1e>
 800525e:	f7ff fd73 	bl	8004d48 <_DoInit>
  SEGGER_RTT_LOCK();
 8005262:	f3ef 8311 	mrs	r3, BASEPRI
 8005266:	f04f 0120 	mov.w	r1, #32
 800526a:	f381 8811 	msr	BASEPRI, r1
 800526e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7ff ff95 	bl	80051a4 <SEGGER_RTT_WriteDownBufferNoLock>
 800527a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005282:	697b      	ldr	r3, [r7, #20]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3720      	adds	r7, #32
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	20012ed4 	.word	0x20012ed4

08005290 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800529e:	4b3d      	ldr	r3, [pc, #244]	; (8005394 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b53      	cmp	r3, #83	; 0x53
 80052aa:	d001      	beq.n	80052b0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80052ac:	f7ff fd4c 	bl	8004d48 <_DoInit>
  SEGGER_RTT_LOCK();
 80052b0:	f3ef 8311 	mrs	r3, BASEPRI
 80052b4:	f04f 0120 	mov.w	r1, #32
 80052b8:	f381 8811 	msr	BASEPRI, r1
 80052bc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052be:	4b35      	ldr	r3, [pc, #212]	; (8005394 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052c0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052c6:	6939      	ldr	r1, [r7, #16]
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	440b      	add	r3, r1
 80052d6:	3304      	adds	r3, #4
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3301      	adds	r3, #1
 80052e2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	dbeb      	blt.n	80052c6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80052ee:	e000      	b.n	80052f2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80052f0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	69fa      	ldr	r2, [r7, #28]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	da3f      	bge.n	800537c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	440b      	add	r3, r1
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005310:	6939      	ldr	r1, [r7, #16]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	4613      	mov	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	3304      	adds	r3, #4
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005326:	6939      	ldr	r1, [r7, #16]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	3320      	adds	r3, #32
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800533a:	6939      	ldr	r1, [r7, #16]
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	440b      	add	r3, r1
 8005348:	3328      	adds	r3, #40	; 0x28
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	3324      	adds	r3, #36	; 0x24
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005362:	6939      	ldr	r1, [r7, #16]
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	4613      	mov	r3, r2
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	4413      	add	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	440b      	add	r3, r1
 8005370:	332c      	adds	r3, #44	; 0x2c
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005376:	f3bf 8f5f 	dmb	sy
 800537a:	e002      	b.n	8005382 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800537c:	f04f 33ff 	mov.w	r3, #4294967295
 8005380:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005388:	69fb      	ldr	r3, [r7, #28]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20012ed4 	.word	0x20012ed4

08005398 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80053a6:	4b21      	ldr	r3, [pc, #132]	; (800542c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053a8:	623b      	str	r3, [r7, #32]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b53      	cmp	r3, #83	; 0x53
 80053b2:	d001      	beq.n	80053b8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053b4:	f7ff fcc8 	bl	8004d48 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053b8:	4b1c      	ldr	r3, [pc, #112]	; (800542c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053ba:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d82c      	bhi.n	800541c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053c2:	f3ef 8311 	mrs	r3, BASEPRI
 80053c6:	f04f 0120 	mov.w	r1, #32
 80053ca:	f381 8811 	msr	BASEPRI, r1
 80053ce:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4613      	mov	r3, r2
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	4413      	add	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	3360      	adds	r3, #96	; 0x60
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	4413      	add	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00e      	beq.n	8005406 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2200      	movs	r2, #0
 8005404:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800540c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
 800541a:	e002      	b.n	8005422 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800541c:	f04f 33ff 	mov.w	r3, #4294967295
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005424:	4618      	mov	r0, r3
 8005426:	3728      	adds	r7, #40	; 0x28
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20012ed4 	.word	0x20012ed4

08005430 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	60fa      	str	r2, [r7, #12]
 8005446:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b80      	cmp	r3, #128	; 0x80
 800544c:	d90a      	bls.n	8005464 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800544e:	2380      	movs	r3, #128	; 0x80
 8005450:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005452:	e007      	b.n	8005464 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	1c53      	adds	r3, r2, #1
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	60f9      	str	r1, [r7, #12]
 8005460:	7812      	ldrb	r2, [r2, #0]
 8005462:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	1e5a      	subs	r2, r3, #1
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <_EncodeStr+0x46>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ee      	bne.n	8005454 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	b2da      	uxtb	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	4618      	mov	r0, r3
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3307      	adds	r3, #7
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054ae:	4b35      	ldr	r3, [pc, #212]	; (8005584 <_HandleIncomingPacket+0xdc>)
 80054b0:	7e1b      	ldrb	r3, [r3, #24]
 80054b2:	4618      	mov	r0, r3
 80054b4:	1cfb      	adds	r3, r7, #3
 80054b6:	2201      	movs	r2, #1
 80054b8:	4619      	mov	r1, r3
 80054ba:	f7ff fded 	bl	8005098 <SEGGER_RTT_ReadNoLock>
 80054be:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d052      	beq.n	800556c <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80054c6:	78fb      	ldrb	r3, [r7, #3]
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d031      	beq.n	8005530 <_HandleIncomingPacket+0x88>
 80054cc:	2b80      	cmp	r3, #128	; 0x80
 80054ce:	dc40      	bgt.n	8005552 <_HandleIncomingPacket+0xaa>
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	dc15      	bgt.n	8005500 <_HandleIncomingPacket+0x58>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	dd3c      	ble.n	8005552 <_HandleIncomingPacket+0xaa>
 80054d8:	3b01      	subs	r3, #1
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d839      	bhi.n	8005552 <_HandleIncomingPacket+0xaa>
 80054de:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <_HandleIncomingPacket+0x3c>)
 80054e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e4:	08005507 	.word	0x08005507
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005513 	.word	0x08005513
 80054f0:	08005519 	.word	0x08005519
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	08005525 	.word	0x08005525
 80054fc:	0800552b 	.word	0x0800552b
 8005500:	2b7f      	cmp	r3, #127	; 0x7f
 8005502:	d035      	beq.n	8005570 <_HandleIncomingPacket+0xc8>
 8005504:	e025      	b.n	8005552 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005506:	f000 fff5 	bl	80064f4 <SEGGER_SYSVIEW_Start>
      break;
 800550a:	e036      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800550c:	f001 f8ae 	bl	800666c <SEGGER_SYSVIEW_Stop>
      break;
 8005510:	e033      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005512:	f001 fa87 	bl	8006a24 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005516:	e030      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005518:	f001 fa4c 	bl	80069b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800551c:	e02d      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800551e:	f001 f8cb 	bl	80066b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005522:	e02a      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005524:	f001 fcc4 	bl	8006eb0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005528:	e027      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800552a:	f001 fca3 	bl	8006e74 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800552e:	e024      	b.n	800557a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005530:	4b14      	ldr	r3, [pc, #80]	; (8005584 <_HandleIncomingPacket+0xdc>)
 8005532:	7e1b      	ldrb	r3, [r3, #24]
 8005534:	4618      	mov	r0, r3
 8005536:	1cfb      	adds	r3, r7, #3
 8005538:	2201      	movs	r2, #1
 800553a:	4619      	mov	r1, r3
 800553c:	f7ff fdac 	bl	8005098 <SEGGER_RTT_ReadNoLock>
 8005540:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	4618      	mov	r0, r3
 800554c:	f001 fc08 	bl	8006d60 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005550:	e010      	b.n	8005574 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005552:	78fb      	ldrb	r3, [r7, #3]
 8005554:	b25b      	sxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	da0e      	bge.n	8005578 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <_HandleIncomingPacket+0xdc>)
 800555c:	7e1b      	ldrb	r3, [r3, #24]
 800555e:	4618      	mov	r0, r3
 8005560:	1cfb      	adds	r3, r7, #3
 8005562:	2201      	movs	r2, #1
 8005564:	4619      	mov	r1, r3
 8005566:	f7ff fd97 	bl	8005098 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800556a:	e005      	b.n	8005578 <_HandleIncomingPacket+0xd0>
    }
  }
 800556c:	bf00      	nop
 800556e:	e004      	b.n	800557a <_HandleIncomingPacket+0xd2>
      break;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <_HandleIncomingPacket+0xd2>
      break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <_HandleIncomingPacket+0xd2>
      break;
 8005578:	bf00      	nop
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20014394 	.word	0x20014394

08005588 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005588:	b580      	push	{r7, lr}
 800558a:	b08c      	sub	sp, #48	; 0x30
 800558c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800558e:	2301      	movs	r3, #1
 8005590:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005592:	1d3b      	adds	r3, r7, #4
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800559c:	4b32      	ldr	r3, [pc, #200]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a2:	e00b      	b.n	80055bc <_TrySendOverflowPacket+0x34>
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	2b7f      	cmp	r3, #127	; 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <_TrySendOverflowPacket+0x1c>
 80055c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055d2:	4b26      	ldr	r3, [pc, #152]	; (800566c <_TrySendOverflowPacket+0xe4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055d8:	4b23      	ldr	r3, [pc, #140]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	69ba      	ldr	r2, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	623b      	str	r3, [r7, #32]
 80055ea:	e00b      	b.n	8005604 <_TrySendOverflowPacket+0x7c>
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	1c59      	adds	r1, r3, #1
 80055f4:	6279      	str	r1, [r7, #36]	; 0x24
 80055f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	701a      	strb	r2, [r3, #0]
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	09db      	lsrs	r3, r3, #7
 8005602:	623b      	str	r3, [r7, #32]
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b7f      	cmp	r3, #127	; 0x7f
 8005608:	d8f0      	bhi.n	80055ec <_TrySendOverflowPacket+0x64>
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	627a      	str	r2, [r7, #36]	; 0x24
 8005610:	6a3a      	ldr	r2, [r7, #32]
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800561a:	4b13      	ldr	r3, [pc, #76]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	4618      	mov	r0, r3
 8005620:	1d3b      	adds	r3, r7, #4
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	461a      	mov	r2, r3
 8005628:	1d3b      	adds	r3, r7, #4
 800562a:	4619      	mov	r1, r3
 800562c:	f7fa fdd0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005630:	4603      	mov	r3, r0
 8005632:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005634:	f7ff fafe 	bl	8004c34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800563e:	4a0a      	ldr	r2, [pc, #40]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005644:	4b08      	ldr	r3, [pc, #32]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	3b01      	subs	r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	4b06      	ldr	r3, [pc, #24]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e004      	b.n	800565c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	3301      	adds	r3, #1
 8005658:	4a03      	ldr	r2, [pc, #12]	; (8005668 <_TrySendOverflowPacket+0xe0>)
 800565a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800565c:	693b      	ldr	r3, [r7, #16]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3730      	adds	r7, #48	; 0x30
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20014394 	.word	0x20014394
 800566c:	e0001004 	.word	0xe0001004

08005670 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005670:	b580      	push	{r7, lr}
 8005672:	b08a      	sub	sp, #40	; 0x28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800567c:	4b96      	ldr	r3, [pc, #600]	; (80058d8 <_SendPacket+0x268>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d010      	beq.n	80056a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005684:	4b94      	ldr	r3, [pc, #592]	; (80058d8 <_SendPacket+0x268>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 8130 	beq.w	80058ee <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800568e:	4b92      	ldr	r3, [pc, #584]	; (80058d8 <_SendPacket+0x268>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d109      	bne.n	80056aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005696:	f7ff ff77 	bl	8005588 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800569a:	4b8f      	ldr	r3, [pc, #572]	; (80058d8 <_SendPacket+0x268>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	f040 8127 	bne.w	80058f2 <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 80056a4:	e001      	b.n	80056aa <_SendPacket+0x3a>
    goto Send;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <_SendPacket+0x3c>
Send:
 80056aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b1f      	cmp	r3, #31
 80056b0:	d809      	bhi.n	80056c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056b2:	4b89      	ldr	r3, [pc, #548]	; (80058d8 <_SendPacket+0x268>)
 80056b4:	69da      	ldr	r2, [r3, #28]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f040 8118 	bne.w	80058f6 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b17      	cmp	r3, #23
 80056ca:	d807      	bhi.n	80056dc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	e0c4      	b.n	8005866 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	2b7f      	cmp	r3, #127	; 0x7f
 80056e8:	d912      	bls.n	8005710 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	09da      	lsrs	r2, r3, #7
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	3a01      	subs	r2, #1
 8005702:	60fa      	str	r2, [r7, #12]
 8005704:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005708:	b2da      	uxtb	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	e006      	b.n	800571e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b01      	subs	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b7e      	cmp	r3, #126	; 0x7e
 8005722:	d807      	bhi.n	8005734 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3b01      	subs	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	b2da      	uxtb	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	e098      	b.n	8005866 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800573a:	d212      	bcs.n	8005762 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	09da      	lsrs	r2, r3, #7
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3b01      	subs	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	3a01      	subs	r2, #1
 8005754:	60fa      	str	r2, [r7, #12]
 8005756:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800575a:	b2da      	uxtb	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	701a      	strb	r2, [r3, #0]
 8005760:	e081      	b.n	8005866 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005768:	d21d      	bcs.n	80057a6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	0b9a      	lsrs	r2, r3, #14
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3b01      	subs	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	b2d2      	uxtb	r2, r2
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	09db      	lsrs	r3, r3, #7
 800577e:	b2db      	uxtb	r3, r3
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	3a01      	subs	r2, #1
 8005784:	60fa      	str	r2, [r7, #12]
 8005786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	3a01      	subs	r2, #1
 8005798:	60fa      	str	r2, [r7, #12]
 800579a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e05f      	b.n	8005866 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ac:	d228      	bcs.n	8005800 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0d5a      	lsrs	r2, r3, #21
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	0b9b      	lsrs	r3, r3, #14
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	3a01      	subs	r2, #1
 80057c8:	60fa      	str	r2, [r7, #12]
 80057ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	09db      	lsrs	r3, r3, #7
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	3a01      	subs	r2, #1
 80057de:	60fa      	str	r2, [r7, #12]
 80057e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	3a01      	subs	r2, #1
 80057f2:	60fa      	str	r2, [r7, #12]
 80057f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e032      	b.n	8005866 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	0f1a      	lsrs	r2, r3, #28
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0d5b      	lsrs	r3, r3, #21
 8005814:	b2db      	uxtb	r3, r3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	3a01      	subs	r2, #1
 800581a:	60fa      	str	r2, [r7, #12]
 800581c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	0b9b      	lsrs	r3, r3, #14
 800582a:	b2db      	uxtb	r3, r3
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	3a01      	subs	r2, #1
 8005830:	60fa      	str	r2, [r7, #12]
 8005832:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005836:	b2da      	uxtb	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	09db      	lsrs	r3, r3, #7
 8005840:	b2db      	uxtb	r3, r3
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	3a01      	subs	r2, #1
 8005846:	60fa      	str	r2, [r7, #12]
 8005848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	3a01      	subs	r2, #1
 800585a:	60fa      	str	r2, [r7, #12]
 800585c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005866:	4b1d      	ldr	r3, [pc, #116]	; (80058dc <_SendPacket+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800586c:	4b1a      	ldr	r3, [pc, #104]	; (80058d8 <_SendPacket+0x268>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	e00b      	b.n	8005898 <_SendPacket+0x228>
 8005880:	6a3b      	ldr	r3, [r7, #32]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	1c59      	adds	r1, r3, #1
 8005888:	6279      	str	r1, [r7, #36]	; 0x24
 800588a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	623b      	str	r3, [r7, #32]
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b7f      	cmp	r3, #127	; 0x7f
 800589c:	d8f0      	bhi.n	8005880 <_SendPacket+0x210>
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	627a      	str	r2, [r7, #36]	; 0x24
 80058a4:	6a3a      	ldr	r2, [r7, #32]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <_SendPacket+0x268>)
 80058b0:	785b      	ldrb	r3, [r3, #1]
 80058b2:	4618      	mov	r0, r3
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	68f9      	ldr	r1, [r7, #12]
 80058be:	f7fa fc87 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058c2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058c4:	f7ff f9b6 	bl	8004c34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d008      	beq.n	80058e0 <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058ce:	4a02      	ldr	r2, [pc, #8]	; (80058d8 <_SendPacket+0x268>)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	60d3      	str	r3, [r2, #12]
 80058d4:	e010      	b.n	80058f8 <_SendPacket+0x288>
 80058d6:	bf00      	nop
 80058d8:	20014394 	.word	0x20014394
 80058dc:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <_SendPacket+0x2d8>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b17      	ldr	r3, [pc, #92]	; (8005948 <_SendPacket+0x2d8>)
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	e004      	b.n	80058f8 <_SendPacket+0x288>
    goto SendDone;
 80058ee:	bf00      	nop
 80058f0:	e002      	b.n	80058f8 <_SendPacket+0x288>
      goto SendDone;
 80058f2:	bf00      	nop
 80058f4:	e000      	b.n	80058f8 <_SendPacket+0x288>
      goto SendDone;
 80058f6:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058f8:	4b13      	ldr	r3, [pc, #76]	; (8005948 <_SendPacket+0x2d8>)
 80058fa:	7e1b      	ldrb	r3, [r3, #24]
 80058fc:	4619      	mov	r1, r3
 80058fe:	4a13      	ldr	r2, [pc, #76]	; (800594c <_SendPacket+0x2dc>)
 8005900:	460b      	mov	r3, r1
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	440b      	add	r3, r1
 8005906:	00db      	lsls	r3, r3, #3
 8005908:	4413      	add	r3, r2
 800590a:	336c      	adds	r3, #108	; 0x6c
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	4b0e      	ldr	r3, [pc, #56]	; (8005948 <_SendPacket+0x2d8>)
 8005910:	7e1b      	ldrb	r3, [r3, #24]
 8005912:	4618      	mov	r0, r3
 8005914:	490d      	ldr	r1, [pc, #52]	; (800594c <_SendPacket+0x2dc>)
 8005916:	4603      	mov	r3, r0
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4403      	add	r3, r0
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	440b      	add	r3, r1
 8005920:	3370      	adds	r3, #112	; 0x70
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	429a      	cmp	r2, r3
 8005926:	d00b      	beq.n	8005940 <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005928:	4b07      	ldr	r3, [pc, #28]	; (8005948 <_SendPacket+0x2d8>)
 800592a:	789b      	ldrb	r3, [r3, #2]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005930:	4b05      	ldr	r3, [pc, #20]	; (8005948 <_SendPacket+0x2d8>)
 8005932:	2201      	movs	r2, #1
 8005934:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005936:	f7ff fdb7 	bl	80054a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800593a:	4b03      	ldr	r3, [pc, #12]	; (8005948 <_SendPacket+0x2d8>)
 800593c:	2200      	movs	r2, #0
 800593e:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005940:	bf00      	nop
 8005942:	3728      	adds	r7, #40	; 0x28
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20014394 	.word	0x20014394
 800594c:	20012ed4 	.word	0x20012ed4

08005950 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005950:	b580      	push	{r7, lr}
 8005952:	b08a      	sub	sp, #40	; 0x28
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	460b      	mov	r3, r1
 800595a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	3301      	adds	r3, #1
 8005966:	2b80      	cmp	r3, #128	; 0x80
 8005968:	d80a      	bhi.n	8005980 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	1c59      	adds	r1, r3, #1
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6051      	str	r1, [r2, #4]
 8005974:	78fa      	ldrb	r2, [r7, #3]
 8005976:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d15a      	bne.n	8005a3e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	e00b      	b.n	80059c2 <_StoreChar+0x72>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1c59      	adds	r1, r3, #1
 80059b2:	6279      	str	r1, [r7, #36]	; 0x24
 80059b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	09db      	lsrs	r3, r3, #7
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	2b7f      	cmp	r3, #127	; 0x7f
 80059c6:	d8f0      	bhi.n	80059aa <_StoreChar+0x5a>
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	627a      	str	r2, [r7, #36]	; 0x24
 80059ce:	6a3a      	ldr	r2, [r7, #32]
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
 80059e0:	e00b      	b.n	80059fa <_StoreChar+0xaa>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	b2da      	uxtb	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	1c59      	adds	r1, r3, #1
 80059ea:	61f9      	str	r1, [r7, #28]
 80059ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f0:	b2d2      	uxtb	r2, r2
 80059f2:	701a      	strb	r2, [r3, #0]
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	09db      	lsrs	r3, r3, #7
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b7f      	cmp	r3, #127	; 0x7f
 80059fe:	d8f0      	bhi.n	80059e2 <_StoreChar+0x92>
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	61fa      	str	r2, [r7, #28]
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	221a      	movs	r2, #26
 8005a16:	6939      	ldr	r1, [r7, #16]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fe29 	bl	8005670 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fd34 	bl	8005490 <_PreparePacket>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	611a      	str	r2, [r3, #16]
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3728      	adds	r7, #40	; 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a62:	e007      	b.n	8005a74 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a64:	6a3a      	ldr	r2, [r7, #32]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a6c:	623b      	str	r3, [r7, #32]
    Width++;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3301      	adds	r3, #1
 8005a72:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d2f3      	bcs.n	8005a64 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d901      	bls.n	8005a88 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d11f      	bne.n	8005ad2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01c      	beq.n	8005ad2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <_PrintUnsigned+0x66>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <_PrintUnsigned+0x66>
        c = '0';
 8005aa8:	2330      	movs	r3, #48	; 0x30
 8005aaa:	76fb      	strb	r3, [r7, #27]
 8005aac:	e001      	b.n	8005ab2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005aae:	2320      	movs	r3, #32
 8005ab0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab2:	e007      	b.n	8005ac4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005aba:	7efb      	ldrb	r3, [r7, #27]
 8005abc:	4619      	mov	r1, r3
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7ff ff46 	bl	8005950 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <_PrintUnsigned+0x8a>
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d3f0      	bcc.n	8005ab4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d903      	bls.n	8005ae0 <_PrintUnsigned+0x98>
      NumDigits--;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	603b      	str	r3, [r7, #0]
 8005ade:	e009      	b.n	8005af4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ae8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d200      	bcs.n	8005af4 <_PrintUnsigned+0xac>
        break;
 8005af2:	e005      	b.n	8005b00 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	fb02 f303 	mul.w	r3, r2, r3
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005afe:	e7e8      	b.n	8005ad2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b08:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <_PrintUnsigned+0x128>)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	4619      	mov	r1, r3
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f7ff ff14 	bl	8005950 <_StoreChar>
    Digit /= Base;
 8005b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e3      	bne.n	8005b00 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d011      	beq.n	8005b66 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00e      	beq.n	8005b66 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b48:	e006      	b.n	8005b58 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b50:	2120      	movs	r1, #32
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff fefc 	bl	8005950 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <_PrintUnsigned+0x11e>
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d3f1      	bcc.n	8005b4a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b66:	bf00      	nop
 8005b68:	3728      	adds	r7, #40	; 0x28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	0800729c 	.word	0x0800729c

08005b74 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bfb8      	it	lt
 8005b88:	425b      	neglt	r3, r3
 8005b8a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b90:	e007      	b.n	8005ba2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b9a:	613b      	str	r3, [r7, #16]
    Width++;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	daf3      	bge.n	8005b92 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005baa:	683a      	ldr	r2, [r7, #0]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d901      	bls.n	8005bb6 <_PrintInt+0x42>
    Width = NumDigits;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00a      	beq.n	8005bd2 <_PrintInt+0x5e>
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	db04      	blt.n	8005bcc <_PrintInt+0x58>
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d002      	beq.n	8005bd2 <_PrintInt+0x5e>
    FieldWidth--;
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d002      	beq.n	8005be2 <_PrintInt+0x6e>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <_PrintInt+0x9c>
 8005be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d111      	bne.n	8005c10 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005bec:	6a3b      	ldr	r3, [r7, #32]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bf2:	e006      	b.n	8005c02 <_PrintInt+0x8e>
        FieldWidth--;
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005bfa:	2120      	movs	r1, #32
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fea7 	bl	8005950 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <_PrintInt+0x9c>
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d3f1      	bcc.n	8005bf4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	da07      	bge.n	8005c26 <_PrintInt+0xb2>
    v = -v;
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	425b      	negs	r3, r3
 8005c1a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c1c:	212d      	movs	r1, #45	; 0x2d
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fe96 	bl	8005950 <_StoreChar>
 8005c24:	e008      	b.n	8005c38 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	f003 0304 	and.w	r3, r3, #4
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c30:	212b      	movs	r1, #43	; 0x2b
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f7ff fe8c 	bl	8005950 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d019      	beq.n	8005c76 <_PrintInt+0x102>
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d114      	bne.n	8005c76 <_PrintInt+0x102>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d111      	bne.n	8005c76 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00e      	beq.n	8005c76 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c58:	e006      	b.n	8005c68 <_PrintInt+0xf4>
        FieldWidth--;
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c60:	2130      	movs	r1, #48	; 0x30
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff fe74 	bl	8005950 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <_PrintInt+0x102>
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3f1      	bcc.n	8005c5a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	9301      	str	r3, [sp, #4]
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff fedf 	bl	8005a48 <_PrintUnsigned>
}
 8005c8a:	bf00      	nop
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b098      	sub	sp, #96	; 0x60
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ca0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca4:	f04f 0120 	mov.w	r1, #32
 8005ca8:	f381 8811 	msr	BASEPRI, r1
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cae:	48b7      	ldr	r0, [pc, #732]	; (8005f8c <_VPrintTarget+0x2f8>)
 8005cb0:	f7ff fbee 	bl	8005490 <_PreparePacket>
 8005cb4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cb6:	4bb5      	ldr	r3, [pc, #724]	; (8005f8c <_VPrintTarget+0x2f8>)
 8005cb8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 81a8 	beq.w	8006034 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005ce4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ce8:	2b25      	cmp	r3, #37	; 0x25
 8005cea:	f040 8195 	bne.w	8006018 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d02:	3b23      	subs	r3, #35	; 0x23
 8005d04:	2b0d      	cmp	r3, #13
 8005d06:	d83f      	bhi.n	8005d88 <_VPrintTarget+0xf4>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <_VPrintTarget+0x7c>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005d89 	.word	0x08005d89
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	08005d89 	.word	0x08005d89
 8005d30:	08005d69 	.word	0x08005d69
 8005d34:	08005d89 	.word	0x08005d89
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d89 	.word	0x08005d89
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005d59 	.word	0x08005d59
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d4a:	f043 0301 	orr.w	r3, r3, #1
 8005d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	3301      	adds	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e01a      	b.n	8005d8e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5a:	f043 0302 	orr.w	r3, r3, #2
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e012      	b.n	8005d8e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d6a:	f043 0304 	orr.w	r3, r3, #4
 8005d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e00a      	b.n	8005d8e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d7a:	f043 0308 	orr.w	r3, r3, #8
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3301      	adds	r3, #1
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	e002      	b.n	8005d8e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d8c:	bf00      	nop
        }
      } while (v);
 8005d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1b0      	bne.n	8005cf6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005d94:	2300      	movs	r3, #0
 8005d96:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da4:	2b2f      	cmp	r3, #47	; 0x2f
 8005da6:	d912      	bls.n	8005dce <_VPrintTarget+0x13a>
 8005da8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dac:	2b39      	cmp	r3, #57	; 0x39
 8005dae:	d80e      	bhi.n	8005dce <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005db6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3b30      	subs	r3, #48	; 0x30
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005dcc:	e7e4      	b.n	8005d98 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dde:	2b2e      	cmp	r3, #46	; 0x2e
 8005de0:	d11d      	bne.n	8005e1e <_VPrintTarget+0x18a>
        sFormat++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005df4:	2b2f      	cmp	r3, #47	; 0x2f
 8005df6:	d912      	bls.n	8005e1e <_VPrintTarget+0x18a>
 8005df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dfc:	2b39      	cmp	r3, #57	; 0x39
 8005dfe:	d80e      	bhi.n	8005e1e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	461a      	mov	r2, r3
 8005e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e16:	4413      	add	r3, r2
 8005e18:	3b30      	subs	r3, #48	; 0x30
 8005e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e1c:	e7e4      	b.n	8005de8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e2a:	2b6c      	cmp	r3, #108	; 0x6c
 8005e2c:	d003      	beq.n	8005e36 <_VPrintTarget+0x1a2>
 8005e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e32:	2b68      	cmp	r3, #104	; 0x68
 8005e34:	d107      	bne.n	8005e46 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e44:	e7ef      	b.n	8005e26 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4a:	2b25      	cmp	r3, #37	; 0x25
 8005e4c:	f000 80d8 	beq.w	8006000 <_VPrintTarget+0x36c>
 8005e50:	2b25      	cmp	r3, #37	; 0x25
 8005e52:	f2c0 80dc 	blt.w	800600e <_VPrintTarget+0x37a>
 8005e56:	2b78      	cmp	r3, #120	; 0x78
 8005e58:	f300 80d9 	bgt.w	800600e <_VPrintTarget+0x37a>
 8005e5c:	2b58      	cmp	r3, #88	; 0x58
 8005e5e:	f2c0 80d6 	blt.w	800600e <_VPrintTarget+0x37a>
 8005e62:	3b58      	subs	r3, #88	; 0x58
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	f200 80d2 	bhi.w	800600e <_VPrintTarget+0x37a>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <_VPrintTarget+0x1dc>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005f67 	.word	0x08005f67
 8005e74:	0800600f 	.word	0x0800600f
 8005e78:	0800600f 	.word	0x0800600f
 8005e7c:	0800600f 	.word	0x0800600f
 8005e80:	0800600f 	.word	0x0800600f
 8005e84:	0800600f 	.word	0x0800600f
 8005e88:	0800600f 	.word	0x0800600f
 8005e8c:	0800600f 	.word	0x0800600f
 8005e90:	0800600f 	.word	0x0800600f
 8005e94:	0800600f 	.word	0x0800600f
 8005e98:	0800600f 	.word	0x0800600f
 8005e9c:	08005ef5 	.word	0x08005ef5
 8005ea0:	08005f1b 	.word	0x08005f1b
 8005ea4:	0800600f 	.word	0x0800600f
 8005ea8:	0800600f 	.word	0x0800600f
 8005eac:	0800600f 	.word	0x0800600f
 8005eb0:	0800600f 	.word	0x0800600f
 8005eb4:	0800600f 	.word	0x0800600f
 8005eb8:	0800600f 	.word	0x0800600f
 8005ebc:	0800600f 	.word	0x0800600f
 8005ec0:	0800600f 	.word	0x0800600f
 8005ec4:	0800600f 	.word	0x0800600f
 8005ec8:	0800600f 	.word	0x0800600f
 8005ecc:	0800600f 	.word	0x0800600f
 8005ed0:	08005fdb 	.word	0x08005fdb
 8005ed4:	0800600f 	.word	0x0800600f
 8005ed8:	0800600f 	.word	0x0800600f
 8005edc:	08005f91 	.word	0x08005f91
 8005ee0:	0800600f 	.word	0x0800600f
 8005ee4:	08005f41 	.word	0x08005f41
 8005ee8:	0800600f 	.word	0x0800600f
 8005eec:	0800600f 	.word	0x0800600f
 8005ef0:	08005f67 	.word	0x08005f67
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	1d19      	adds	r1, r3, #4
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6011      	str	r1, [r2, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005f08:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fd1c 	bl	8005950 <_StoreChar>
        break;
 8005f18:	e07a      	b.n	8006010 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	1d19      	adds	r1, r3, #4
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6011      	str	r1, [r2, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f28:	f107 0010 	add.w	r0, r7, #16
 8005f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f36:	220a      	movs	r2, #10
 8005f38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f3a:	f7ff fe1b 	bl	8005b74 <_PrintInt>
        break;
 8005f3e:	e067      	b.n	8006010 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	1d19      	adds	r1, r3, #4
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	6011      	str	r1, [r2, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f50:	f107 0010 	add.w	r0, r7, #16
 8005f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f5e:	220a      	movs	r2, #10
 8005f60:	f7ff fd72 	bl	8005a48 <_PrintUnsigned>
        break;
 8005f64:	e054      	b.n	8006010 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	1d19      	adds	r1, r3, #4
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6011      	str	r1, [r2, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f76:	f107 0010 	add.w	r0, r7, #16
 8005f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f84:	2210      	movs	r2, #16
 8005f86:	f7ff fd5f 	bl	8005a48 <_PrintUnsigned>
        break;
 8005f8a:	e041      	b.n	8006010 <_VPrintTarget+0x37c>
 8005f8c:	200143c4 	.word	0x200143c4
      case 's':
        s = va_arg(*pParamList, const char*);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	1d19      	adds	r1, r3, #4
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	6011      	str	r1, [r2, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <_VPrintTarget+0x314>
          s = "(null)";
 8005fa4:	4b4a      	ldr	r3, [pc, #296]	; (80060d0 <_VPrintTarget+0x43c>)
 8005fa6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005fbe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fc2:	f107 0310 	add.w	r3, r7, #16
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff fcc1 	bl	8005950 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd2:	d9e9      	bls.n	8005fa8 <_VPrintTarget+0x314>
        break;
 8005fd4:	e01c      	b.n	8006010 <_VPrintTarget+0x37c>
            break;
 8005fd6:	bf00      	nop
        break;
 8005fd8:	e01a      	b.n	8006010 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	1d19      	adds	r1, r3, #4
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	6011      	str	r1, [r2, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005fe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fea:	f107 0010 	add.w	r0, r7, #16
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	2308      	movs	r3, #8
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2308      	movs	r3, #8
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	f7ff fd25 	bl	8005a48 <_PrintUnsigned>
        break;
 8005ffe:	e007      	b.n	8006010 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006000:	f107 0310 	add.w	r3, r7, #16
 8006004:	2125      	movs	r1, #37	; 0x25
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fca2 	bl	8005950 <_StoreChar>
        break;
 800600c:	e000      	b.n	8006010 <_VPrintTarget+0x37c>
      default:
        break;
 800600e:	bf00      	nop
      }
      sFormat++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e007      	b.n	8006028 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006018:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800601c:	f107 0310 	add.w	r3, r7, #16
 8006020:	4611      	mov	r1, r2
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fc94 	bl	8005950 <_StoreChar>
    }
  } while (*sFormat);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f ae4d 	bne.w	8005ccc <_VPrintTarget+0x38>
 8006032:	e000      	b.n	8006036 <_VPrintTarget+0x3a2>
      break;
 8006034:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d041      	beq.n	80060c0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 800603c:	6a3a      	ldr	r2, [r7, #32]
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	63bb      	str	r3, [r7, #56]	; 0x38
 800604c:	e00b      	b.n	8006066 <_VPrintTarget+0x3d2>
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	b2da      	uxtb	r2, r3
 8006052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006058:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	09db      	lsrs	r3, r3, #7
 8006064:	63bb      	str	r3, [r7, #56]	; 0x38
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	2b7f      	cmp	r3, #127	; 0x7f
 800606a:	d8f0      	bhi.n	800604e <_VPrintTarget+0x3ba>
 800606c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800607a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	637b      	str	r3, [r7, #52]	; 0x34
 8006080:	2300      	movs	r3, #0
 8006082:	633b      	str	r3, [r7, #48]	; 0x30
 8006084:	e00b      	b.n	800609e <_VPrintTarget+0x40a>
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	b2da      	uxtb	r2, r3
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	1c59      	adds	r1, r3, #1
 800608e:	6379      	str	r1, [r7, #52]	; 0x34
 8006090:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	09db      	lsrs	r3, r3, #7
 800609c:	633b      	str	r3, [r7, #48]	; 0x30
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2b7f      	cmp	r3, #127	; 0x7f
 80060a2:	d8f0      	bhi.n	8006086 <_VPrintTarget+0x3f2>
 80060a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	637a      	str	r2, [r7, #52]	; 0x34
 80060aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ac:	b2d2      	uxtb	r2, r2
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	6979      	ldr	r1, [r7, #20]
 80060b8:	221a      	movs	r2, #26
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fad8 	bl	8005670 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060c6:	bf00      	nop
 80060c8:	3758      	adds	r7, #88	; 0x58
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	08007248 	.word	0x08007248

080060d4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060e2:	2300      	movs	r3, #0
 80060e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060e8:	4917      	ldr	r1, [pc, #92]	; (8006148 <SEGGER_SYSVIEW_Init+0x74>)
 80060ea:	4818      	ldr	r0, [pc, #96]	; (800614c <SEGGER_SYSVIEW_Init+0x78>)
 80060ec:	f7ff f8d0 	bl	8005290 <SEGGER_RTT_AllocUpBuffer>
 80060f0:	4603      	mov	r3, r0
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	4b16      	ldr	r3, [pc, #88]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 80060f6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060f8:	4b15      	ldr	r3, [pc, #84]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 80060fa:	785a      	ldrb	r2, [r3, #1]
 80060fc:	4b14      	ldr	r3, [pc, #80]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 80060fe:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006100:	4b13      	ldr	r3, [pc, #76]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 8006102:	7e1b      	ldrb	r3, [r3, #24]
 8006104:	4618      	mov	r0, r3
 8006106:	2300      	movs	r3, #0
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	2308      	movs	r3, #8
 800610c:	4a11      	ldr	r2, [pc, #68]	; (8006154 <SEGGER_SYSVIEW_Init+0x80>)
 800610e:	490f      	ldr	r1, [pc, #60]	; (800614c <SEGGER_SYSVIEW_Init+0x78>)
 8006110:	f7ff f942 	bl	8005398 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006114:	4b0e      	ldr	r3, [pc, #56]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	2200      	movs	r2, #0
 8006118:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800611a:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <SEGGER_SYSVIEW_Init+0x84>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a0c      	ldr	r2, [pc, #48]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 8006120:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006122:	4a0b      	ldr	r2, [pc, #44]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006128:	4a09      	ldr	r2, [pc, #36]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800612e:	4a08      	ldr	r2, [pc, #32]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006134:	4a06      	ldr	r2, [pc, #24]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <SEGGER_SYSVIEW_Init+0x7c>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006140:	bf00      	nop
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	2001338c 	.word	0x2001338c
 800614c:	08007250 	.word	0x08007250
 8006150:	20014394 	.word	0x20014394
 8006154:	2001438c 	.word	0x2001438c
 8006158:	e0001004 	.word	0xe0001004

0800615c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6113      	str	r3, [r2, #16]
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	20014394 	.word	0x20014394

0800617c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006184:	f3ef 8311 	mrs	r3, BASEPRI
 8006188:	f04f 0120 	mov.w	r1, #32
 800618c:	f381 8811 	msr	BASEPRI, r1
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	4808      	ldr	r0, [pc, #32]	; (80061b4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006194:	f7ff f97c 	bl	8005490 <_PreparePacket>
 8006198:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68b8      	ldr	r0, [r7, #8]
 80061a0:	f7ff fa66 	bl	8005670 <_SendPacket>
  RECORD_END();
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f383 8811 	msr	BASEPRI, r3
}
 80061aa:	bf00      	nop
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	200143c4 	.word	0x200143c4

080061b8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061c2:	f3ef 8311 	mrs	r3, BASEPRI
 80061c6:	f04f 0120 	mov.w	r1, #32
 80061ca:	f381 8811 	msr	BASEPRI, r1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	4816      	ldr	r0, [pc, #88]	; (800622c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061d2:	f7ff f95d 	bl	8005490 <_PreparePacket>
 80061d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_RecordU32+0x46>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	61f9      	str	r1, [r7, #28]
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	61bb      	str	r3, [r7, #24]
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	61fa      	str	r2, [r7, #28]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	6938      	ldr	r0, [r7, #16]
 800621a:	f7ff fa29 	bl	8005670 <_SendPacket>
  RECORD_END();
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f383 8811 	msr	BASEPRI, r3
}
 8006224:	bf00      	nop
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	200143c4 	.word	0x200143c4

08006230 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006230:	b580      	push	{r7, lr}
 8006232:	b08c      	sub	sp, #48	; 0x30
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800623c:	f3ef 8311 	mrs	r3, BASEPRI
 8006240:	f04f 0120 	mov.w	r1, #32
 8006244:	f381 8811 	msr	BASEPRI, r1
 8006248:	61fb      	str	r3, [r7, #28]
 800624a:	4825      	ldr	r0, [pc, #148]	; (80062e0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800624c:	f7ff f920 	bl	8005490 <_PreparePacket>
 8006250:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
 800625e:	e00b      	b.n	8006278 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	09db      	lsrs	r3, r3, #7
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	2b7f      	cmp	r3, #127	; 0x7f
 800627c:	d8f0      	bhi.n	8006260 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	e00b      	b.n	80062b0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	6279      	str	r1, [r7, #36]	; 0x24
 80062a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	09db      	lsrs	r3, r3, #7
 80062ae:	623b      	str	r3, [r7, #32]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b7f      	cmp	r3, #127	; 0x7f
 80062b4:	d8f0      	bhi.n	8006298 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	627a      	str	r2, [r7, #36]	; 0x24
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	6979      	ldr	r1, [r7, #20]
 80062ca:	69b8      	ldr	r0, [r7, #24]
 80062cc:	f7ff f9d0 	bl	8005670 <_SendPacket>
  RECORD_END();
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	f383 8811 	msr	BASEPRI, r3
}
 80062d6:	bf00      	nop
 80062d8:	3730      	adds	r7, #48	; 0x30
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	200143c4 	.word	0x200143c4

080062e4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08e      	sub	sp, #56	; 0x38
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062f2:	f3ef 8311 	mrs	r3, BASEPRI
 80062f6:	f04f 0120 	mov.w	r1, #32
 80062fa:	f381 8811 	msr	BASEPRI, r1
 80062fe:	61fb      	str	r3, [r7, #28]
 8006300:	4832      	ldr	r0, [pc, #200]	; (80063cc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006302:	f7ff f8c5 	bl	8005490 <_PreparePacket>
 8006306:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	637b      	str	r3, [r7, #52]	; 0x34
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	633b      	str	r3, [r7, #48]	; 0x30
 8006314:	e00b      	b.n	800632e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	b2da      	uxtb	r2, r3
 800631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631c:	1c59      	adds	r1, r3, #1
 800631e:	6379      	str	r1, [r7, #52]	; 0x34
 8006320:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006324:	b2d2      	uxtb	r2, r2
 8006326:	701a      	strb	r2, [r3, #0]
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	09db      	lsrs	r3, r3, #7
 800632c:	633b      	str	r3, [r7, #48]	; 0x30
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b7f      	cmp	r3, #127	; 0x7f
 8006332:	d8f0      	bhi.n	8006316 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	637a      	str	r2, [r7, #52]	; 0x34
 800633a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006342:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	62bb      	str	r3, [r7, #40]	; 0x28
 800634c:	e00b      	b.n	8006366 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006358:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	62bb      	str	r3, [r7, #40]	; 0x28
 8006366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006368:	2b7f      	cmp	r3, #127	; 0x7f
 800636a:	d8f0      	bhi.n	800634e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	623b      	str	r3, [r7, #32]
 8006384:	e00b      	b.n	800639e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	6279      	str	r1, [r7, #36]	; 0x24
 8006390:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	09db      	lsrs	r3, r3, #7
 800639c:	623b      	str	r3, [r7, #32]
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	2b7f      	cmp	r3, #127	; 0x7f
 80063a2:	d8f0      	bhi.n	8006386 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	627a      	str	r2, [r7, #36]	; 0x24
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	6979      	ldr	r1, [r7, #20]
 80063b8:	69b8      	ldr	r0, [r7, #24]
 80063ba:	f7ff f959 	bl	8005670 <_SendPacket>
  RECORD_END();
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f383 8811 	msr	BASEPRI, r3
}
 80063c4:	bf00      	nop
 80063c6:	3738      	adds	r7, #56	; 0x38
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	200143c4 	.word	0x200143c4

080063d0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b090      	sub	sp, #64	; 0x40
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063de:	f3ef 8311 	mrs	r3, BASEPRI
 80063e2:	f04f 0120 	mov.w	r1, #32
 80063e6:	f381 8811 	msr	BASEPRI, r1
 80063ea:	61fb      	str	r3, [r7, #28]
 80063ec:	4840      	ldr	r0, [pc, #256]	; (80064f0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063ee:	f7ff f84f 	bl	8005490 <_PreparePacket>
 80063f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8006400:	e00b      	b.n	800641a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	b2da      	uxtb	r2, r3
 8006406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006408:	1c59      	adds	r1, r3, #1
 800640a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800640c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	09db      	lsrs	r3, r3, #7
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
 800641a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800641c:	2b7f      	cmp	r3, #127	; 0x7f
 800641e:	d8f0      	bhi.n	8006402 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]
 800642c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800642e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	633b      	str	r3, [r7, #48]	; 0x30
 8006438:	e00b      	b.n	8006452 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	b2da      	uxtb	r2, r3
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	1c59      	adds	r1, r3, #1
 8006442:	6379      	str	r1, [r7, #52]	; 0x34
 8006444:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006448:	b2d2      	uxtb	r2, r2
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	09db      	lsrs	r3, r3, #7
 8006450:	633b      	str	r3, [r7, #48]	; 0x30
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	2b7f      	cmp	r3, #127	; 0x7f
 8006456:	d8f0      	bhi.n	800643a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	637a      	str	r2, [r7, #52]	; 0x34
 800645e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006466:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006470:	e00b      	b.n	800648a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	1c59      	adds	r1, r3, #1
 800647a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800647c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006486:	09db      	lsrs	r3, r3, #7
 8006488:	62bb      	str	r3, [r7, #40]	; 0x28
 800648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d8f0      	bhi.n	8006472 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	627b      	str	r3, [r7, #36]	; 0x24
 80064a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	e00b      	b.n	80064c2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	b2da      	uxtb	r2, r3
 80064ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b0:	1c59      	adds	r1, r3, #1
 80064b2:	6279      	str	r1, [r7, #36]	; 0x24
 80064b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b8:	b2d2      	uxtb	r2, r2
 80064ba:	701a      	strb	r2, [r3, #0]
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	09db      	lsrs	r3, r3, #7
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2b7f      	cmp	r3, #127	; 0x7f
 80064c6:	d8f0      	bhi.n	80064aa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	1c5a      	adds	r2, r3, #1
 80064cc:	627a      	str	r2, [r7, #36]	; 0x24
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	6979      	ldr	r1, [r7, #20]
 80064dc:	69b8      	ldr	r0, [r7, #24]
 80064de:	f7ff f8c7 	bl	8005670 <_SendPacket>
  RECORD_END();
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	f383 8811 	msr	BASEPRI, r3
}
 80064e8:	bf00      	nop
 80064ea:	3740      	adds	r7, #64	; 0x40
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	200143c4 	.word	0x200143c4

080064f4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08c      	sub	sp, #48	; 0x30
 80064f8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064fa:	4b59      	ldr	r3, [pc, #356]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006500:	f3ef 8311 	mrs	r3, BASEPRI
 8006504:	f04f 0120 	mov.w	r1, #32
 8006508:	f381 8811 	msr	BASEPRI, r1
 800650c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800650e:	4b54      	ldr	r3, [pc, #336]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	220a      	movs	r2, #10
 8006514:	4953      	ldr	r1, [pc, #332]	; (8006664 <SEGGER_SYSVIEW_Start+0x170>)
 8006516:	4618      	mov	r0, r3
 8006518:	f7f9 fe5a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006522:	f7fe fb87 	bl	8004c34 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006526:	200a      	movs	r0, #10
 8006528:	f7ff fe28 	bl	800617c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800652c:	f3ef 8311 	mrs	r3, BASEPRI
 8006530:	f04f 0120 	mov.w	r1, #32
 8006534:	f381 8811 	msr	BASEPRI, r1
 8006538:	60bb      	str	r3, [r7, #8]
 800653a:	484b      	ldr	r0, [pc, #300]	; (8006668 <SEGGER_SYSVIEW_Start+0x174>)
 800653c:	f7fe ffa8 	bl	8005490 <_PreparePacket>
 8006540:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654a:	4b45      	ldr	r3, [pc, #276]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006550:	e00b      	b.n	800656a <SEGGER_SYSVIEW_Start+0x76>
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	1c59      	adds	r1, r3, #1
 800655a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800655c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006560:	b2d2      	uxtb	r2, r2
 8006562:	701a      	strb	r2, [r3, #0]
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	09db      	lsrs	r3, r3, #7
 8006568:	62bb      	str	r3, [r7, #40]	; 0x28
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	2b7f      	cmp	r3, #127	; 0x7f
 800656e:	d8f0      	bhi.n	8006552 <SEGGER_SYSVIEW_Start+0x5e>
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006578:	b2d2      	uxtb	r2, r2
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	627b      	str	r3, [r7, #36]	; 0x24
 8006584:	4b36      	ldr	r3, [pc, #216]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	623b      	str	r3, [r7, #32]
 800658a:	e00b      	b.n	80065a4 <SEGGER_SYSVIEW_Start+0xb0>
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	6279      	str	r1, [r7, #36]	; 0x24
 8006596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659a:	b2d2      	uxtb	r2, r2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	09db      	lsrs	r3, r3, #7
 80065a2:	623b      	str	r3, [r7, #32]
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	2b7f      	cmp	r3, #127	; 0x7f
 80065a8:	d8f0      	bhi.n	800658c <SEGGER_SYSVIEW_Start+0x98>
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	627a      	str	r2, [r7, #36]	; 0x24
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	4b28      	ldr	r3, [pc, #160]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	61bb      	str	r3, [r7, #24]
 80065c4:	e00b      	b.n	80065de <SEGGER_SYSVIEW_Start+0xea>
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	1c59      	adds	r1, r3, #1
 80065ce:	61f9      	str	r1, [r7, #28]
 80065d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	09db      	lsrs	r3, r3, #7
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b7f      	cmp	r3, #127	; 0x7f
 80065e2:	d8f0      	bhi.n	80065c6 <SEGGER_SYSVIEW_Start+0xd2>
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	61fa      	str	r2, [r7, #28]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	b2d2      	uxtb	r2, r2
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	e00b      	b.n	8006616 <SEGGER_SYSVIEW_Start+0x122>
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	b2da      	uxtb	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	6179      	str	r1, [r7, #20]
 8006608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b7f      	cmp	r3, #127	; 0x7f
 800661a:	d8f0      	bhi.n	80065fe <SEGGER_SYSVIEW_Start+0x10a>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	617a      	str	r2, [r7, #20]
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800662c:	2218      	movs	r2, #24
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff f81d 	bl	8005670 <_SendPacket>
      RECORD_END();
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800663c:	4b08      	ldr	r3, [pc, #32]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <SEGGER_SYSVIEW_Start+0x16c>)
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800664a:	f000 f9eb 	bl	8006a24 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800664e:	f000 f9b1 	bl	80069b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006652:	f000 fc2d 	bl	8006eb0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006656:	bf00      	nop
 8006658:	3730      	adds	r7, #48	; 0x30
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20014394 	.word	0x20014394
 8006664:	08007290 	.word	0x08007290
 8006668:	200143c4 	.word	0x200143c4

0800666c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006672:	f3ef 8311 	mrs	r3, BASEPRI
 8006676:	f04f 0120 	mov.w	r1, #32
 800667a:	f381 8811 	msr	BASEPRI, r1
 800667e:	607b      	str	r3, [r7, #4]
 8006680:	480b      	ldr	r0, [pc, #44]	; (80066b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006682:	f7fe ff05 	bl	8005490 <_PreparePacket>
 8006686:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006688:	4b0a      	ldr	r3, [pc, #40]	; (80066b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d007      	beq.n	80066a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006690:	220b      	movs	r2, #11
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6838      	ldr	r0, [r7, #0]
 8006696:	f7fe ffeb 	bl	8005670 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800669c:	2200      	movs	r2, #0
 800669e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f383 8811 	msr	BASEPRI, r3
}
 80066a6:	bf00      	nop
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	200143c4 	.word	0x200143c4
 80066b4:	20014394 	.word	0x20014394

080066b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b08c      	sub	sp, #48	; 0x30
 80066bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066be:	f3ef 8311 	mrs	r3, BASEPRI
 80066c2:	f04f 0120 	mov.w	r1, #32
 80066c6:	f381 8811 	msr	BASEPRI, r1
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	4845      	ldr	r0, [pc, #276]	; (80067e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ce:	f7fe fedf 	bl	8005490 <_PreparePacket>
 80066d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066dc:	4b42      	ldr	r3, [pc, #264]	; (80067e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e2:	e00b      	b.n	80066fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	1c59      	adds	r1, r3, #1
 80066ec:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f2:	b2d2      	uxtb	r2, r2
 80066f4:	701a      	strb	r2, [r3, #0]
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	09db      	lsrs	r3, r3, #7
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006700:	d8f0      	bhi.n	80066e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	627b      	str	r3, [r7, #36]	; 0x24
 8006716:	4b34      	ldr	r3, [pc, #208]	; (80067e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	623b      	str	r3, [r7, #32]
 800671c:	e00b      	b.n	8006736 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	b2da      	uxtb	r2, r3
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	1c59      	adds	r1, r3, #1
 8006726:	6279      	str	r1, [r7, #36]	; 0x24
 8006728:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	701a      	strb	r2, [r3, #0]
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	623b      	str	r3, [r7, #32]
 8006736:	6a3b      	ldr	r3, [r7, #32]
 8006738:	2b7f      	cmp	r3, #127	; 0x7f
 800673a:	d8f0      	bhi.n	800671e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	627a      	str	r2, [r7, #36]	; 0x24
 8006742:	6a3a      	ldr	r2, [r7, #32]
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	61fb      	str	r3, [r7, #28]
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	61bb      	str	r3, [r7, #24]
 8006756:	e00b      	b.n	8006770 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	b2da      	uxtb	r2, r3
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	1c59      	adds	r1, r3, #1
 8006760:	61f9      	str	r1, [r7, #28]
 8006762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	09db      	lsrs	r3, r3, #7
 800676e:	61bb      	str	r3, [r7, #24]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2b7f      	cmp	r3, #127	; 0x7f
 8006774:	d8f0      	bhi.n	8006758 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	61fa      	str	r2, [r7, #28]
 800677c:	69ba      	ldr	r2, [r7, #24]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	617b      	str	r3, [r7, #20]
 800678a:	2300      	movs	r3, #0
 800678c:	613b      	str	r3, [r7, #16]
 800678e:	e00b      	b.n	80067a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	b2da      	uxtb	r2, r3
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	6179      	str	r1, [r7, #20]
 800679a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	09db      	lsrs	r3, r3, #7
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b7f      	cmp	r3, #127	; 0x7f
 80067ac:	d8f0      	bhi.n	8006790 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	1c5a      	adds	r2, r3, #1
 80067b2:	617a      	str	r2, [r7, #20]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	b2d2      	uxtb	r2, r2
 80067b8:	701a      	strb	r2, [r3, #0]
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067be:	2218      	movs	r2, #24
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	68b8      	ldr	r0, [r7, #8]
 80067c4:	f7fe ff54 	bl	8005670 <_SendPacket>
  RECORD_END();
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067d6:	4b04      	ldr	r3, [pc, #16]	; (80067e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	4798      	blx	r3
  }
}
 80067dc:	bf00      	nop
 80067de:	3730      	adds	r7, #48	; 0x30
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	200143c4 	.word	0x200143c4
 80067e8:	20014394 	.word	0x20014394

080067ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b092      	sub	sp, #72	; 0x48
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067f4:	f3ef 8311 	mrs	r3, BASEPRI
 80067f8:	f04f 0120 	mov.w	r1, #32
 80067fc:	f381 8811 	msr	BASEPRI, r1
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	486a      	ldr	r0, [pc, #424]	; (80069ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006804:	f7fe fe44 	bl	8005490 <_PreparePacket>
 8006808:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b66      	ldr	r3, [pc, #408]	; (80069b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	643b      	str	r3, [r7, #64]	; 0x40
 800681e:	e00b      	b.n	8006838 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006822:	b2da      	uxtb	r2, r3
 8006824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006826:	1c59      	adds	r1, r3, #1
 8006828:	6479      	str	r1, [r7, #68]	; 0x44
 800682a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800682e:	b2d2      	uxtb	r2, r2
 8006830:	701a      	strb	r2, [r3, #0]
 8006832:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006834:	09db      	lsrs	r3, r3, #7
 8006836:	643b      	str	r3, [r7, #64]	; 0x40
 8006838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800683a:	2b7f      	cmp	r3, #127	; 0x7f
 800683c:	d8f0      	bhi.n	8006820 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800683e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	647a      	str	r2, [r7, #68]	; 0x44
 8006844:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800684c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	63bb      	str	r3, [r7, #56]	; 0x38
 8006858:	e00b      	b.n	8006872 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	b2da      	uxtb	r2, r3
 800685e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006860:	1c59      	adds	r1, r3, #1
 8006862:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006868:	b2d2      	uxtb	r2, r2
 800686a:	701a      	strb	r2, [r3, #0]
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	09db      	lsrs	r3, r3, #7
 8006870:	63bb      	str	r3, [r7, #56]	; 0x38
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	2b7f      	cmp	r3, #127	; 0x7f
 8006876:	d8f0      	bhi.n	800685a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800687e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006880:	b2d2      	uxtb	r2, r2
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	4619      	mov	r1, r3
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7fe fdcd 	bl	8005430 <_EncodeStr>
 8006896:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006898:	2209      	movs	r2, #9
 800689a:	68f9      	ldr	r1, [r7, #12]
 800689c:	6938      	ldr	r0, [r7, #16]
 800689e:	f7fe fee7 	bl	8005670 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b40      	ldr	r3, [pc, #256]	; (80069b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	633b      	str	r3, [r7, #48]	; 0x30
 80068b6:	e00b      	b.n	80068d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068be:	1c59      	adds	r1, r3, #1
 80068c0:	6379      	str	r1, [r7, #52]	; 0x34
 80068c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	09db      	lsrs	r3, r3, #7
 80068ce:	633b      	str	r3, [r7, #48]	; 0x30
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	2b7f      	cmp	r3, #127	; 0x7f
 80068d4:	d8f0      	bhi.n	80068b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d8:	1c5a      	adds	r2, r3, #1
 80068da:	637a      	str	r2, [r7, #52]	; 0x34
 80068dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068de:	b2d2      	uxtb	r2, r2
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f0:	e00b      	b.n	800690a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	1c59      	adds	r1, r3, #1
 80068fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	09db      	lsrs	r3, r3, #7
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	2b7f      	cmp	r3, #127	; 0x7f
 800690e:	d8f0      	bhi.n	80068f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	1c5a      	adds	r2, r3, #1
 8006914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006916:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	623b      	str	r3, [r7, #32]
 800692a:	e00b      	b.n	8006944 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	b2da      	uxtb	r2, r3
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	6279      	str	r1, [r7, #36]	; 0x24
 8006936:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	6a3b      	ldr	r3, [r7, #32]
 8006940:	09db      	lsrs	r3, r3, #7
 8006942:	623b      	str	r3, [r7, #32]
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	2b7f      	cmp	r3, #127	; 0x7f
 8006948:	d8f0      	bhi.n	800692c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	627a      	str	r2, [r7, #36]	; 0x24
 8006950:	6a3a      	ldr	r2, [r7, #32]
 8006952:	b2d2      	uxtb	r2, r2
 8006954:	701a      	strb	r2, [r3, #0]
 8006956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006958:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	2300      	movs	r3, #0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e00b      	b.n	800697c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	1c59      	adds	r1, r3, #1
 800696c:	61f9      	str	r1, [r7, #28]
 800696e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	09db      	lsrs	r3, r3, #7
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b7f      	cmp	r3, #127	; 0x7f
 8006980:	d8f0      	bhi.n	8006964 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	61fa      	str	r2, [r7, #28]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006992:	2215      	movs	r2, #21
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	6938      	ldr	r0, [r7, #16]
 8006998:	f7fe fe6a 	bl	8005670 <_SendPacket>
  RECORD_END();
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f383 8811 	msr	BASEPRI, r3
}
 80069a2:	bf00      	nop
 80069a4:	3748      	adds	r7, #72	; 0x48
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200143c4 	.word	0x200143c4
 80069b0:	20014394 	.word	0x20014394

080069b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069b8:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ba:	6a1b      	ldr	r3, [r3, #32]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069ca:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4798      	blx	r3
  }
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	20014394 	.word	0x20014394

080069dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e4:	f3ef 8311 	mrs	r3, BASEPRI
 80069e8:	f04f 0120 	mov.w	r1, #32
 80069ec:	f381 8811 	msr	BASEPRI, r1
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	480b      	ldr	r0, [pc, #44]	; (8006a20 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069f4:	f7fe fd4c 	bl	8005490 <_PreparePacket>
 80069f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069fa:	2280      	movs	r2, #128	; 0x80
 80069fc:	6879      	ldr	r1, [r7, #4]
 80069fe:	6938      	ldr	r0, [r7, #16]
 8006a00:	f7fe fd16 	bl	8005430 <_EncodeStr>
 8006a04:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a06:	220e      	movs	r2, #14
 8006a08:	68f9      	ldr	r1, [r7, #12]
 8006a0a:	6938      	ldr	r0, [r7, #16]
 8006a0c:	f7fe fe30 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f383 8811 	msr	BASEPRI, r3
}
 8006a16:	bf00      	nop
 8006a18:	3718      	adds	r7, #24
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200143c4 	.word	0x200143c4

08006a24 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a2a:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d01a      	beq.n	8006a68 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a32:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d015      	beq.n	8006a68 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a3c:	4b10      	ldr	r3, [pc, #64]	; (8006a80 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4798      	blx	r3
 8006a44:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a48:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	000a      	movs	r2, r1
 8006a58:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4621      	mov	r1, r4
 8006a60:	200d      	movs	r0, #13
 8006a62:	f7ff fbe5 	bl	8006230 <SEGGER_SYSVIEW_RecordU32x2>
 8006a66:	e006      	b.n	8006a76 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a68:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	200c      	movs	r0, #12
 8006a70:	f7ff fba2 	bl	80061b8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd90      	pop	{r4, r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20014394 	.word	0x20014394
 8006a84:	e0001004 	.word	0xe0001004

08006a88 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a92:	f04f 0120 	mov.w	r1, #32
 8006a96:	f381 8811 	msr	BASEPRI, r1
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	4819      	ldr	r0, [pc, #100]	; (8006b04 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a9e:	f7fe fcf7 	bl	8005490 <_PreparePacket>
 8006aa2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006aa8:	4b17      	ldr	r3, [pc, #92]	; (8006b08 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6179      	str	r1, [r7, #20]
 8006ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	617a      	str	r2, [r7, #20]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006aea:	2202      	movs	r2, #2
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	68b8      	ldr	r0, [r7, #8]
 8006af0:	f7fe fdbe 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f383 8811 	msr	BASEPRI, r3
}
 8006afa:	bf00      	nop
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	200143c4 	.word	0x200143c4
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b12:	f3ef 8311 	mrs	r3, BASEPRI
 8006b16:	f04f 0120 	mov.w	r1, #32
 8006b1a:	f381 8811 	msr	BASEPRI, r1
 8006b1e:	607b      	str	r3, [r7, #4]
 8006b20:	4807      	ldr	r0, [pc, #28]	; (8006b40 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b22:	f7fe fcb5 	bl	8005490 <_PreparePacket>
 8006b26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b28:	2203      	movs	r2, #3
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6838      	ldr	r0, [r7, #0]
 8006b2e:	f7fe fd9f 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f383 8811 	msr	BASEPRI, r3
}
 8006b38:	bf00      	nop
 8006b3a:	3708      	adds	r7, #8
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	200143c4 	.word	0x200143c4

08006b44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b4e:	f04f 0120 	mov.w	r1, #32
 8006b52:	f381 8811 	msr	BASEPRI, r1
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	4807      	ldr	r0, [pc, #28]	; (8006b78 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b5a:	f7fe fc99 	bl	8005490 <_PreparePacket>
 8006b5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b60:	2212      	movs	r2, #18
 8006b62:	6839      	ldr	r1, [r7, #0]
 8006b64:	6838      	ldr	r0, [r7, #0]
 8006b66:	f7fe fd83 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f383 8811 	msr	BASEPRI, r3
}
 8006b70:	bf00      	nop
 8006b72:	3708      	adds	r7, #8
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	200143c4 	.word	0x200143c4

08006b7c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b82:	f3ef 8311 	mrs	r3, BASEPRI
 8006b86:	f04f 0120 	mov.w	r1, #32
 8006b8a:	f381 8811 	msr	BASEPRI, r1
 8006b8e:	607b      	str	r3, [r7, #4]
 8006b90:	4807      	ldr	r0, [pc, #28]	; (8006bb0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b92:	f7fe fc7d 	bl	8005490 <_PreparePacket>
 8006b96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b98:	2211      	movs	r2, #17
 8006b9a:	6839      	ldr	r1, [r7, #0]
 8006b9c:	6838      	ldr	r0, [r7, #0]
 8006b9e:	f7fe fd67 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f383 8811 	msr	BASEPRI, r3
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	200143c4 	.word	0x200143c4

08006bb4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8006bc0:	f04f 0120 	mov.w	r1, #32
 8006bc4:	f381 8811 	msr	BASEPRI, r1
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	4819      	ldr	r0, [pc, #100]	; (8006c30 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006bcc:	f7fe fc60 	bl	8005490 <_PreparePacket>
 8006bd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bd6:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	e00b      	b.n	8006c02 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	b2da      	uxtb	r2, r3
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	1c59      	adds	r1, r3, #1
 8006bf2:	61f9      	str	r1, [r7, #28]
 8006bf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bf8:	b2d2      	uxtb	r2, r2
 8006bfa:	701a      	strb	r2, [r3, #0]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	09db      	lsrs	r3, r3, #7
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b7f      	cmp	r3, #127	; 0x7f
 8006c06:	d8f0      	bhi.n	8006bea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	61fa      	str	r2, [r7, #28]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c18:	2208      	movs	r2, #8
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	6938      	ldr	r0, [r7, #16]
 8006c1e:	f7fe fd27 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f383 8811 	msr	BASEPRI, r3
}
 8006c28:	bf00      	nop
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200143c4 	.word	0x200143c4
 8006c34:	20014394 	.word	0x20014394

08006c38 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c40:	f3ef 8311 	mrs	r3, BASEPRI
 8006c44:	f04f 0120 	mov.w	r1, #32
 8006c48:	f381 8811 	msr	BASEPRI, r1
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	4819      	ldr	r0, [pc, #100]	; (8006cb4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c50:	f7fe fc1e 	bl	8005490 <_PreparePacket>
 8006c54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c5a:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	61fb      	str	r3, [r7, #28]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	61bb      	str	r3, [r7, #24]
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	61f9      	str	r1, [r7, #28]
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	61fa      	str	r2, [r7, #28]
 8006c92:	69ba      	ldr	r2, [r7, #24]
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c9c:	2204      	movs	r2, #4
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	6938      	ldr	r0, [r7, #16]
 8006ca2:	f7fe fce5 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f383 8811 	msr	BASEPRI, r3
}
 8006cac:	bf00      	nop
 8006cae:	3720      	adds	r7, #32
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	200143c4 	.word	0x200143c4
 8006cb8:	20014394 	.word	0x20014394

08006cbc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cc4:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc8:	f04f 0120 	mov.w	r1, #32
 8006ccc:	f381 8811 	msr	BASEPRI, r1
 8006cd0:	617b      	str	r3, [r7, #20]
 8006cd2:	4819      	ldr	r0, [pc, #100]	; (8006d38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006cd4:	f7fe fbdc 	bl	8005490 <_PreparePacket>
 8006cd8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cde:	4b17      	ldr	r3, [pc, #92]	; (8006d3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	e00b      	b.n	8006d0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	1c59      	adds	r1, r3, #1
 8006cfa:	61f9      	str	r1, [r7, #28]
 8006cfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	09db      	lsrs	r3, r3, #7
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006d0e:	d8f0      	bhi.n	8006cf2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	61fa      	str	r2, [r7, #28]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	b2d2      	uxtb	r2, r2
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d20:	2206      	movs	r2, #6
 8006d22:	68f9      	ldr	r1, [r7, #12]
 8006d24:	6938      	ldr	r0, [r7, #16]
 8006d26:	f7fe fca3 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f383 8811 	msr	BASEPRI, r3
}
 8006d30:	bf00      	nop
 8006d32:	3720      	adds	r7, #32
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	200143c4 	.word	0x200143c4
 8006d3c:	20014394 	.word	0x20014394

08006d40 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	1ad3      	subs	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20014394 	.word	0x20014394

08006d60 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08c      	sub	sp, #48	; 0x30
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d6a:	4b40      	ldr	r3, [pc, #256]	; (8006e6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d077      	beq.n	8006e62 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006d72:	4b3e      	ldr	r3, [pc, #248]	; (8006e6c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d78:	2300      	movs	r3, #0
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7c:	e008      	b.n	8006d90 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d007      	beq.n	8006d9a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d3f2      	bcc.n	8006d7e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d98:	e000      	b.n	8006d9c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d9a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d055      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006da2:	f3ef 8311 	mrs	r3, BASEPRI
 8006da6:	f04f 0120 	mov.w	r1, #32
 8006daa:	f381 8811 	msr	BASEPRI, r1
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	482f      	ldr	r0, [pc, #188]	; (8006e70 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006db2:	f7fe fb6d 	bl	8005490 <_PreparePacket>
 8006db6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	e00b      	b.n	8006dde <SEGGER_SYSVIEW_SendModule+0x7e>
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	1c59      	adds	r1, r3, #1
 8006dce:	6279      	str	r1, [r7, #36]	; 0x24
 8006dd0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	09db      	lsrs	r3, r3, #7
 8006ddc:	623b      	str	r3, [r7, #32]
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	2b7f      	cmp	r3, #127	; 0x7f
 8006de2:	d8f0      	bhi.n	8006dc6 <SEGGER_SYSVIEW_SendModule+0x66>
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	1c5a      	adds	r2, r3, #1
 8006de8:	627a      	str	r2, [r7, #36]	; 0x24
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	61fb      	str	r3, [r7, #28]
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	e00b      	b.n	8006e18 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	1c59      	adds	r1, r3, #1
 8006e08:	61f9      	str	r1, [r7, #28]
 8006e0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	09db      	lsrs	r3, r3, #7
 8006e16:	61bb      	str	r3, [r7, #24]
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1c:	d8f0      	bhi.n	8006e00 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	61fa      	str	r2, [r7, #28]
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	4619      	mov	r1, r3
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7fe fafa 	bl	8005430 <_EncodeStr>
 8006e3c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e3e:	2216      	movs	r2, #22
 8006e40:	68f9      	ldr	r1, [r7, #12]
 8006e42:	6938      	ldr	r0, [r7, #16]
 8006e44:	f7fe fc14 	bl	8005670 <_SendPacket>
      RECORD_END();
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d006      	beq.n	8006e62 <SEGGER_SYSVIEW_SendModule+0x102>
 8006e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4798      	blx	r3
    }
  }
}
 8006e62:	bf00      	nop
 8006e64:	3730      	adds	r7, #48	; 0x30
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	200143bc 	.word	0x200143bc
 8006e70:	200143c4 	.word	0x200143c4

08006e74 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00f      	beq.n	8006ea2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1f2      	bne.n	8006e88 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	200143bc 	.word	0x200143bc

08006eb0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006eb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006eba:	f04f 0120 	mov.w	r1, #32
 8006ebe:	f381 8811 	msr	BASEPRI, r1
 8006ec2:	60fb      	str	r3, [r7, #12]
 8006ec4:	4817      	ldr	r0, [pc, #92]	; (8006f24 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ec6:	f7fe fae3 	bl	8005490 <_PreparePacket>
 8006eca:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	e00b      	b.n	8006ef4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	6179      	str	r1, [r7, #20]
 8006ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eea:	b2d2      	uxtb	r2, r2
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	09db      	lsrs	r3, r3, #7
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef8:	d8f0      	bhi.n	8006edc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	617a      	str	r2, [r7, #20]
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006f0a:	221b      	movs	r2, #27
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	68b8      	ldr	r0, [r7, #8]
 8006f10:	f7fe fbae 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f383 8811 	msr	BASEPRI, r3
}
 8006f1a:	bf00      	nop
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	200143c4 	.word	0x200143c4
 8006f28:	200143c0 	.word	0x200143c0

08006f2c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f2c:	b40f      	push	{r0, r1, r2, r3}
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f34:	f107 0314 	add.w	r3, r7, #20
 8006f38:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f3a:	1d3b      	adds	r3, r7, #4
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	2100      	movs	r1, #0
 8006f40:	6938      	ldr	r0, [r7, #16]
 8006f42:	f7fe fea7 	bl	8005c94 <_VPrintTarget>
  va_end(ParamList);
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f50:	b004      	add	sp, #16
 8006f52:	4770      	bx	lr

08006f54 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006f60:	f04f 0120 	mov.w	r1, #32
 8006f64:	f381 8811 	msr	BASEPRI, r1
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	4827      	ldr	r0, [pc, #156]	; (8007008 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f6c:	f7fe fa90 	bl	8005490 <_PreparePacket>
 8006f70:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f72:	2280      	movs	r2, #128	; 0x80
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	6938      	ldr	r0, [r7, #16]
 8006f78:	f7fe fa5a 	bl	8005430 <_EncodeStr>
 8006f7c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
 8006f82:	2301      	movs	r3, #1
 8006f84:	623b      	str	r3, [r7, #32]
 8006f86:	e00b      	b.n	8006fa0 <SEGGER_SYSVIEW_Warn+0x4c>
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	6279      	str	r1, [r7, #36]	; 0x24
 8006f92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	09db      	lsrs	r3, r3, #7
 8006f9e:	623b      	str	r3, [r7, #32]
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fa4:	d8f0      	bhi.n	8006f88 <SEGGER_SYSVIEW_Warn+0x34>
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	627a      	str	r2, [r7, #36]	; 0x24
 8006fac:	6a3a      	ldr	r2, [r7, #32]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61bb      	str	r3, [r7, #24]
 8006fbe:	e00b      	b.n	8006fd8 <SEGGER_SYSVIEW_Warn+0x84>
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	b2da      	uxtb	r2, r3
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	61f9      	str	r1, [r7, #28]
 8006fca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	701a      	strb	r2, [r3, #0]
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	09db      	lsrs	r3, r3, #7
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	2b7f      	cmp	r3, #127	; 0x7f
 8006fdc:	d8f0      	bhi.n	8006fc0 <SEGGER_SYSVIEW_Warn+0x6c>
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	61fa      	str	r2, [r7, #28]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006fee:	221a      	movs	r2, #26
 8006ff0:	68f9      	ldr	r1, [r7, #12]
 8006ff2:	6938      	ldr	r0, [r7, #16]
 8006ff4:	f7fe fb3c 	bl	8005670 <_SendPacket>
  RECORD_END();
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	f383 8811 	msr	BASEPRI, r3
}
 8006ffe:	bf00      	nop
 8007000:	3728      	adds	r7, #40	; 0x28
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	200143c4 	.word	0x200143c4

0800700c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007010:	4b13      	ldr	r3, [pc, #76]	; (8007060 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007012:	7e1b      	ldrb	r3, [r3, #24]
 8007014:	4619      	mov	r1, r3
 8007016:	4a13      	ldr	r2, [pc, #76]	; (8007064 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007018:	460b      	mov	r3, r1
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	440b      	add	r3, r1
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	336c      	adds	r3, #108	; 0x6c
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	4b0e      	ldr	r3, [pc, #56]	; (8007060 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007028:	7e1b      	ldrb	r3, [r3, #24]
 800702a:	4618      	mov	r0, r3
 800702c:	490d      	ldr	r1, [pc, #52]	; (8007064 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800702e:	4603      	mov	r3, r0
 8007030:	005b      	lsls	r3, r3, #1
 8007032:	4403      	add	r3, r0
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	440b      	add	r3, r1
 8007038:	3370      	adds	r3, #112	; 0x70
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d00b      	beq.n	8007058 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007040:	4b07      	ldr	r3, [pc, #28]	; (8007060 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007042:	789b      	ldrb	r3, [r3, #2]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d107      	bne.n	8007058 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800704a:	2201      	movs	r2, #1
 800704c:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800704e:	f7fe fa2b 	bl	80054a8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007052:	4b03      	ldr	r3, [pc, #12]	; (8007060 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007054:	2200      	movs	r2, #0
 8007056:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800705a:	781b      	ldrb	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	bd80      	pop	{r7, pc}
 8007060:	20014394 	.word	0x20014394
 8007064:	20012ed4 	.word	0x20012ed4

08007068 <__libc_init_array>:
 8007068:	b570      	push	{r4, r5, r6, lr}
 800706a:	4d0d      	ldr	r5, [pc, #52]	; (80070a0 <__libc_init_array+0x38>)
 800706c:	4c0d      	ldr	r4, [pc, #52]	; (80070a4 <__libc_init_array+0x3c>)
 800706e:	1b64      	subs	r4, r4, r5
 8007070:	10a4      	asrs	r4, r4, #2
 8007072:	2600      	movs	r6, #0
 8007074:	42a6      	cmp	r6, r4
 8007076:	d109      	bne.n	800708c <__libc_init_array+0x24>
 8007078:	4d0b      	ldr	r5, [pc, #44]	; (80070a8 <__libc_init_array+0x40>)
 800707a:	4c0c      	ldr	r4, [pc, #48]	; (80070ac <__libc_init_array+0x44>)
 800707c:	f000 f83e 	bl	80070fc <_init>
 8007080:	1b64      	subs	r4, r4, r5
 8007082:	10a4      	asrs	r4, r4, #2
 8007084:	2600      	movs	r6, #0
 8007086:	42a6      	cmp	r6, r4
 8007088:	d105      	bne.n	8007096 <__libc_init_array+0x2e>
 800708a:	bd70      	pop	{r4, r5, r6, pc}
 800708c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007090:	4798      	blx	r3
 8007092:	3601      	adds	r6, #1
 8007094:	e7ee      	b.n	8007074 <__libc_init_array+0xc>
 8007096:	f855 3b04 	ldr.w	r3, [r5], #4
 800709a:	4798      	blx	r3
 800709c:	3601      	adds	r6, #1
 800709e:	e7f2      	b.n	8007086 <__libc_init_array+0x1e>
 80070a0:	080072b4 	.word	0x080072b4
 80070a4:	080072b4 	.word	0x080072b4
 80070a8:	080072b4 	.word	0x080072b4
 80070ac:	080072b8 	.word	0x080072b8

080070b0 <memcmp>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	3901      	subs	r1, #1
 80070b4:	4402      	add	r2, r0
 80070b6:	4290      	cmp	r0, r2
 80070b8:	d101      	bne.n	80070be <memcmp+0xe>
 80070ba:	2000      	movs	r0, #0
 80070bc:	e005      	b.n	80070ca <memcmp+0x1a>
 80070be:	7803      	ldrb	r3, [r0, #0]
 80070c0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070c4:	42a3      	cmp	r3, r4
 80070c6:	d001      	beq.n	80070cc <memcmp+0x1c>
 80070c8:	1b18      	subs	r0, r3, r4
 80070ca:	bd10      	pop	{r4, pc}
 80070cc:	3001      	adds	r0, #1
 80070ce:	e7f2      	b.n	80070b6 <memcmp+0x6>

080070d0 <memcpy>:
 80070d0:	440a      	add	r2, r1
 80070d2:	4291      	cmp	r1, r2
 80070d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070d8:	d100      	bne.n	80070dc <memcpy+0xc>
 80070da:	4770      	bx	lr
 80070dc:	b510      	push	{r4, lr}
 80070de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070e6:	4291      	cmp	r1, r2
 80070e8:	d1f9      	bne.n	80070de <memcpy+0xe>
 80070ea:	bd10      	pop	{r4, pc}

080070ec <memset>:
 80070ec:	4402      	add	r2, r0
 80070ee:	4603      	mov	r3, r0
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d100      	bne.n	80070f6 <memset+0xa>
 80070f4:	4770      	bx	lr
 80070f6:	f803 1b01 	strb.w	r1, [r3], #1
 80070fa:	e7f9      	b.n	80070f0 <memset+0x4>

080070fc <_init>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	bf00      	nop
 8007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007102:	bc08      	pop	{r3}
 8007104:	469e      	mov	lr, r3
 8007106:	4770      	bx	lr

08007108 <_fini>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	bf00      	nop
 800710c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800710e:	bc08      	pop	{r3}
 8007110:	469e      	mov	lr, r3
 8007112:	4770      	bx	lr
