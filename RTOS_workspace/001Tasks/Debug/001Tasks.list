
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e64  08004e64  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e20  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012e98  20012e98  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f60d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271b  00000000  00000000  0002f6b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  00031dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e18  00000000  00000000  00032d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022cd4  00000000  00000000  00033b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107ca  00000000  00000000  000567fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d33db  00000000  00000000  00066fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a3a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045b8  00000000  00000000  0013a3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d70 	.word	0x08004d70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004d70 	.word	0x08004d70

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b088      	sub	sp, #32
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 fbe1 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f845 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8ad 	bl	8000640 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	9301      	str	r3, [sp, #4]
 80004ec:	2302      	movs	r3, #2
 80004ee:	9300      	str	r3, [sp, #0]
 80004f0:	4b18      	ldr	r3, [pc, #96]	; (8000554 <main+0x80>)
 80004f2:	22c8      	movs	r2, #200	; 0xc8
 80004f4:	4918      	ldr	r1, [pc, #96]	; (8000558 <main+0x84>)
 80004f6:	4819      	ldr	r0, [pc, #100]	; (800055c <main+0x88>)
 80004f8:	f002 f978 	bl	80027ec <xTaskCreate>
 80004fc:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d00a      	beq.n	800051a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000508:	f383 8811 	msr	BASEPRI, r3
 800050c:	f3bf 8f6f 	isb	sy
 8000510:	f3bf 8f4f 	dsb	sy
 8000514:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000516:	bf00      	nop
 8000518:	e7fe      	b.n	8000518 <main+0x44>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	2302      	movs	r3, #2
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0x8c>)
 8000524:	22c8      	movs	r2, #200	; 0xc8
 8000526:	490f      	ldr	r1, [pc, #60]	; (8000564 <main+0x90>)
 8000528:	480f      	ldr	r0, [pc, #60]	; (8000568 <main+0x94>)
 800052a:	f002 f95f 	bl	80027ec <xTaskCreate>
 800052e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d00a      	beq.n	800054c <main+0x78>
        __asm volatile
 8000536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053a:	f383 8811 	msr	BASEPRI, r3
 800053e:	f3bf 8f6f 	isb	sy
 8000542:	f3bf 8f4f 	dsb	sy
 8000546:	60fb      	str	r3, [r7, #12]
    }
 8000548:	bf00      	nop
 800054a:	e7fe      	b.n	800054a <main+0x76>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800054c:	f002 faaa 	bl	8002aa4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000550:	e7fe      	b.n	8000550 <main+0x7c>
 8000552:	bf00      	nop
 8000554:	08004d88 	.word	0x08004d88
 8000558:	08004da0 	.word	0x08004da0
 800055c:	080008fd 	.word	0x080008fd
 8000560:	08004da8 	.word	0x08004da8
 8000564:	08004dc0 	.word	0x08004dc0
 8000568:	08000921 	.word	0x08000921

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	; 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	; 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fee4 	bl	8004348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	; (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	; 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005e0:	2332      	movs	r3, #50	; 0x32
 80005e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fe2f 	bl	8001254 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 f9b4 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000616:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f001 f890 	bl	8001744 <HAL_RCC_ClockConfig>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800062a:	f000 f99d 	bl	8000968 <Error_Handler>
  }
}
 800062e:	bf00      	nop
 8000630:	3750      	adds	r7, #80	; 0x50
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
 800065a:	4ba2      	ldr	r3, [pc, #648]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4aa1      	ldr	r2, [pc, #644]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000660:	f043 0310 	orr.w	r3, r3, #16
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b9f      	ldr	r3, [pc, #636]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0310 	and.w	r3, r3, #16
 800066e:	61bb      	str	r3, [r7, #24]
 8000670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	4b9b      	ldr	r3, [pc, #620]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a9a      	ldr	r2, [pc, #616]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b98      	ldr	r3, [pc, #608]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	4b94      	ldr	r3, [pc, #592]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a93      	ldr	r2, [pc, #588]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 8000698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b91      	ldr	r3, [pc, #580]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	613b      	str	r3, [r7, #16]
 80006a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
 80006ae:	4b8d      	ldr	r3, [pc, #564]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a8c      	ldr	r2, [pc, #560]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b8a      	ldr	r3, [pc, #552]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	4b86      	ldr	r3, [pc, #536]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a85      	ldr	r2, [pc, #532]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b83      	ldr	r3, [pc, #524]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b7f      	ldr	r3, [pc, #508]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a7e      	ldr	r2, [pc, #504]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b7c      	ldr	r3, [pc, #496]	; (80008e4 <MX_GPIO_Init+0x2a4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2108      	movs	r1, #8
 8000702:	4879      	ldr	r0, [pc, #484]	; (80008e8 <MX_GPIO_Init+0x2a8>)
 8000704:	f000 fd8c 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2101      	movs	r1, #1
 800070c:	4877      	ldr	r0, [pc, #476]	; (80008ec <MX_GPIO_Init+0x2ac>)
 800070e:	f000 fd87 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000712:	2200      	movs	r2, #0
 8000714:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000718:	4875      	ldr	r0, [pc, #468]	; (80008f0 <MX_GPIO_Init+0x2b0>)
 800071a:	f000 fd81 	bl	8001220 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800071e:	2308      	movs	r3, #8
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	4619      	mov	r1, r3
 8000734:	486c      	ldr	r0, [pc, #432]	; (80008e8 <MX_GPIO_Init+0x2a8>)
 8000736:	f000 fbd7 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4866      	ldr	r0, [pc, #408]	; (80008ec <MX_GPIO_Init+0x2ac>)
 8000752:	f000 fbc9 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000756:	2308      	movs	r3, #8
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000766:	2305      	movs	r3, #5
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	485e      	ldr	r0, [pc, #376]	; (80008ec <MX_GPIO_Init+0x2ac>)
 8000772:	f000 fbb9 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	2301      	movs	r3, #1
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800077a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800077e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 031c 	add.w	r3, r7, #28
 8000788:	4619      	mov	r1, r3
 800078a:	485a      	ldr	r0, [pc, #360]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 800078c:	f000 fbac 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000790:	2310      	movs	r3, #16
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007a0:	2306      	movs	r3, #6
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4852      	ldr	r0, [pc, #328]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 80007ac:	f000 fb9c 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007b0:	23e0      	movs	r3, #224	; 0xe0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007c0:	2305      	movs	r3, #5
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	484a      	ldr	r0, [pc, #296]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 80007cc:	f000 fb8c 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007d0:	2304      	movs	r3, #4
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4845      	ldr	r0, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x2b8>)
 80007e4:	f000 fb80 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007fa:	2305      	movs	r3, #5
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	483c      	ldr	r0, [pc, #240]	; (80008f8 <MX_GPIO_Init+0x2b8>)
 8000806:	f000 fb6f 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800080a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800080e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081c:	f107 031c 	add.w	r3, r7, #28
 8000820:	4619      	mov	r1, r3
 8000822:	4833      	ldr	r0, [pc, #204]	; (80008f0 <MX_GPIO_Init+0x2b0>)
 8000824:	f000 fb60 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000828:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	2300      	movs	r3, #0
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800083a:	2306      	movs	r3, #6
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4829      	ldr	r0, [pc, #164]	; (80008ec <MX_GPIO_Init+0x2ac>)
 8000846:	f000 fb4f 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800084a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4825      	ldr	r0, [pc, #148]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 8000860:	f000 fb42 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000864:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000876:	230a      	movs	r3, #10
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	481c      	ldr	r0, [pc, #112]	; (80008f4 <MX_GPIO_Init+0x2b4>)
 8000882:	f000 fb31 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000886:	2320      	movs	r3, #32
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_GPIO_Init+0x2b0>)
 800089a:	f000 fb25 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800089e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a4:	2312      	movs	r3, #18
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b0:	2304      	movs	r3, #4
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	480f      	ldr	r0, [pc, #60]	; (80008f8 <MX_GPIO_Init+0x2b8>)
 80008bc:	f000 fb14 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_GPIO_Init+0x2a8>)
 80008d6:	f000 fb07 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008da:	bf00      	nop
 80008dc:	3730      	adds	r7, #48	; 0x30
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40020800 	.word	0x40020800
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	40020000 	.word	0x40020000
 80008f8:	40020400 	.word	0x40020400

080008fc <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f003 fd95 	bl	8004434 <puts>
		taskYIELD();
 800090a:	4b04      	ldr	r3, [pc, #16]	; (800091c <task1_handler+0x20>)
 800090c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	f3bf 8f4f 	dsb	sy
 8000916:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800091a:	e7f3      	b.n	8000904 <task1_handler+0x8>
 800091c:	e000ed04 	.word	0xe000ed04

08000920 <task2_handler>:
	}
}

static void task2_handler(void* parameters) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printf("%s\n", (char*)parameters);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f003 fd83 	bl	8004434 <puts>
		taskYIELD();
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <task2_handler+0x20>)
 8000930:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	f3bf 8f4f 	dsb	sy
 800093a:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 800093e:	e7f3      	b.n	8000928 <task2_handler+0x8>
 8000940:	e000ed04 	.word	0xe000ed04

08000944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d101      	bne.n	800095a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000956:	f000 f9c5 	bl	8000ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40001000 	.word	0x40001000

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	e7fe      	b.n	8000970 <Error_Handler+0x8>
	...

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <HAL_MspInit+0x4c>)
 8000984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000988:	6453      	str	r3, [r2, #68]	; 0x44
 800098a:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a32      	ldr	r2, [pc, #200]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f0:	f107 0210 	add.w	r2, r7, #16
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f8ae 	bl	8001b5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0a:	f001 f893 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000a0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a10:	e004      	b.n	8000a1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a12:	f001 f88f 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000a16:	4603      	mov	r3, r0
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <HAL_InitTick+0xe8>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	0c9b      	lsrs	r3, r3, #18
 8000a26:	3b01      	subs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <HAL_InitTick+0xf0>)
 8000a2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a50:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a52:	f001 f8b5 	bl	8001bc0 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11b      	bne.n	8000a9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a66:	f001 f905 	bl	8001c74 <HAL_TIM_Base_Start_IT>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d111      	bne.n	8000a9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f000 fa27 	bl	8000ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d808      	bhi.n	8000a96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2036      	movs	r0, #54	; 0x36
 8000a8a:	f000 fa03 	bl	8000e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_InitTick+0xf4>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e002      	b.n	8000a9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	20000094 	.word	0x20000094
 8000ab4:	40001000 	.word	0x40001000
 8000ab8:	20000004 	.word	0x20000004

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM6_DAC_IRQHandler+0x10>)
 8000aee:	f001 f931 	bl	8001d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000094 	.word	0x20000094

08000afc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <ITM_SendChar+0x48>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <ITM_SendChar+0x48>)
 8000b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b10:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <ITM_SendChar+0x4c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <ITM_SendChar+0x4c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b1e:	bf00      	nop
 8000b20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f8      	beq.n	8000b20 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000edfc 	.word	0xe000edfc
 8000b48:	e0000e00 	.word	0xe0000e00

08000b4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
  }

  return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffab 	bl	8000afc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <_write+0x12>
  }
  return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c54:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0b      	ldr	r2, [pc, #44]	; (8000c94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c68:	4c0b      	ldr	r4, [pc, #44]	; (8000c98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c76:	f7ff ffd7 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f003 fb33 	bl	80042e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc29 	bl	80004d4 <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c90:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 8000c94:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c98:	20012e98 	.word	0x20012e98

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f8d8 	bl	8000e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fe78 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe4e 	bl	8000974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200000dc 	.word	0x200000dc

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200000dc 	.word	0x200000dc

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff4c 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea6:	f7ff ff61 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f7ff ffb1 	bl	8000e18 <NVIC_EncodePriority>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff80 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff54 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5b      	ldr	r2, [pc, #364]	; (80011f8 <HAL_GPIO_Init+0x310>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x324>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x310>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_GPIO_Init+0x334>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a32      	ldr	r2, [pc, #200]	; (800121c <HAL_GPIO_Init+0x334>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_GPIO_Init+0x334>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_GPIO_Init+0x334>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_GPIO_Init+0x334>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_GPIO_Init+0x334>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_GPIO_Init+0x334>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_GPIO_Init+0x334>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcfe 	bl	8000d0c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcfa 	bl	8000d0c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fcea 	bl	8000d0c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fce6 	bl	8000d0c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc9f 	bl	8000d0c <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc9b 	bl	8000d0c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc7e 	bl	8000d0c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc7a 	bl	8000d0c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc5e 	bl	8000d0c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc5a 	bl	8000d0c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc47 	bl	8000d0c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc43 	bl	8000d0c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fc03 	bl	8000d0c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbff 	bl	8000d0c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fbc4 	bl	8000d0c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fbc0 	bl	8000d0c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fbae 	bl	8000d0c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fbaa 	bl	8000d0c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb7e 	bl	8000d0c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb7a 	bl	8000d0c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb53 	bl	8000d0c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb4f 	bl	8000d0c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb3c 	bl	8000d0c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb38 	bl	8000d0c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa6a 	bl	8000d0c <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa66 	bl	8000d0c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f86a 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08004de0 	.word	0x08004de0
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	; 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a20:	f7fe fbd6 	bl	80001d0 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fb7c 	bl	80001d0 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08004df0 	.word	0x08004df0

08001b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	220f      	movs	r2, #15
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_RCC_GetClockConfig+0x60>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0207 	and.w	r2, r3, #7
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e041      	b.n	8001c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f839 	bl	8001c5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 f9d8 	bl	8001fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d001      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e04e      	b.n	8001d2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d022      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb6:	d01d      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d018      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d010      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800
 8001d44:	40000c00 	.word	0x40000c00
 8001d48:	40010400 	.word	0x40010400
 8001d4c:	40014000 	.word	0x40014000
 8001d50:	40001800 	.word	0x40001800

08001d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d122      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d11b      	bne.n	8001db0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0202 	mvn.w	r2, #2
 8001d80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f8ee 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001d9c:	e005      	b.n	8001daa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8e0 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f8f1 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d122      	bne.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d11b      	bne.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0204 	mvn.w	r2, #4
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8c4 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8b6 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8c7 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d122      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d11b      	bne.n	8001e58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0208 	mvn.w	r2, #8
 8001e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 0303 	and.w	r3, r3, #3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f89a 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001e44:	e005      	b.n	8001e52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f88c 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f89d 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	2b10      	cmp	r3, #16
 8001e64:	d122      	bne.n	8001eac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d11b      	bne.n	8001eac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0210 	mvn.w	r2, #16
 8001e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2208      	movs	r2, #8
 8001e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f870 	bl	8001f78 <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f862 	bl	8001f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f873 	bl	8001f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d10e      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d107      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0201 	mvn.w	r2, #1
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fd36 	bl	8000944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee2:	2b80      	cmp	r3, #128	; 0x80
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef0:	2b80      	cmp	r3, #128	; 0x80
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f902 	bl	8002108 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f0e:	2b40      	cmp	r3, #64	; 0x40
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b40      	cmp	r3, #64	; 0x40
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f838 	bl	8001fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0320 	and.w	r3, r3, #32
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0220 	mvn.w	r2, #32
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8cc 	bl	80020f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <TIM_Base_SetConfig+0x114>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d00f      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a3d      	ldr	r2, [pc, #244]	; (80020cc <TIM_Base_SetConfig+0x118>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00b      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3c      	ldr	r2, [pc, #240]	; (80020d0 <TIM_Base_SetConfig+0x11c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <TIM_Base_SetConfig+0x120>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d003      	beq.n	8001ff4 <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3a      	ldr	r2, [pc, #232]	; (80020d8 <TIM_Base_SetConfig+0x124>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d108      	bne.n	8002006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a2f      	ldr	r2, [pc, #188]	; (80020c8 <TIM_Base_SetConfig+0x114>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d02b      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002014:	d027      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2c      	ldr	r2, [pc, #176]	; (80020cc <TIM_Base_SetConfig+0x118>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d023      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <TIM_Base_SetConfig+0x11c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d01f      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <TIM_Base_SetConfig+0x120>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01b      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <TIM_Base_SetConfig+0x124>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d017      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a28      	ldr	r2, [pc, #160]	; (80020dc <TIM_Base_SetConfig+0x128>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a27      	ldr	r2, [pc, #156]	; (80020e0 <TIM_Base_SetConfig+0x12c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00f      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <TIM_Base_SetConfig+0x130>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00b      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <TIM_Base_SetConfig+0x134>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a24      	ldr	r2, [pc, #144]	; (80020ec <TIM_Base_SetConfig+0x138>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d003      	beq.n	8002066 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a23      	ldr	r2, [pc, #140]	; (80020f0 <TIM_Base_SetConfig+0x13c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d108      	bne.n	8002078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	4313      	orrs	r3, r2
 8002076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <TIM_Base_SetConfig+0x114>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d003      	beq.n	80020ac <TIM_Base_SetConfig+0xf8>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <TIM_Base_SetConfig+0x124>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d103      	bne.n	80020b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691a      	ldr	r2, [r3, #16]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	615a      	str	r2, [r3, #20]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40000800 	.word	0x40000800
 80020d4:	40000c00 	.word	0x40000c00
 80020d8:	40010400 	.word	0x40010400
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40014400 	.word	0x40014400
 80020e4:	40014800 	.word	0x40014800
 80020e8:	40001800 	.word	0x40001800
 80020ec:	40001c00 	.word	0x40001c00
 80020f0:	40002000 	.word	0x40002000

080020f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f103 0208 	add.w	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f103 0208 	add.w	r2, r3, #8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f103 0208 	add.w	r2, r3, #8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d103      	bne.n	8002196 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e00c      	b.n	80021b0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3308      	adds	r3, #8
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	e002      	b.n	80021a4 <vListInsert+0x2e>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d2f6      	bcs.n	800219e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	bf00      	nop
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6852      	ldr	r2, [r2, #4]
 8002208:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	429a      	cmp	r2, r3
 8002212:	d103      	bne.n	800221c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	1e5a      	subs	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002246:	2301      	movs	r3, #1
 8002248:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10a      	bne.n	800226a <xQueueGenericReset+0x2e>
        __asm volatile
 8002254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002258:	f383 8811 	msr	BASEPRI, r3
 800225c:	f3bf 8f6f 	isb	sy
 8002260:	f3bf 8f4f 	dsb	sy
 8002264:	60fb      	str	r3, [r7, #12]
    }
 8002266:	bf00      	nop
 8002268:	e7fe      	b.n	8002268 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d052      	beq.n	8002316 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d04e      	beq.n	8002316 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2100      	movs	r1, #0
 8002282:	fba3 2302 	umull	r2, r3, r3, r2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d000      	beq.n	800228c <xQueueGenericReset+0x50>
 800228a:	2101      	movs	r1, #1
 800228c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800228e:	2b00      	cmp	r3, #0
 8002290:	d141      	bne.n	8002316 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002292:	f001 fd79 	bl	8003d88 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	6939      	ldr	r1, [r7, #16]
 80022a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	441a      	add	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2200      	movs	r2, #0
 80022b0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6939      	ldr	r1, [r7, #16]
 80022c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	441a      	add	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	22ff      	movs	r2, #255	; 0xff
 80022d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	22ff      	movs	r2, #255	; 0xff
 80022de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d109      	bne.n	80022fc <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00f      	beq.n	8002310 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	3310      	adds	r3, #16
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 feed 	bl	80030d4 <xTaskRemoveFromEventList>
 80022fa:	e009      	b.n	8002310 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	3310      	adds	r3, #16
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff0b 	bl	800211c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	3324      	adds	r3, #36	; 0x24
 800230a:	4618      	mov	r0, r3
 800230c:	f7ff ff06 	bl	800211c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002310:	f001 fd6a 	bl	8003de8 <vPortExitCritical>
 8002314:	e001      	b.n	800231a <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <xQueueGenericReset+0xfa>
        __asm volatile
 8002320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002324:	f383 8811 	msr	BASEPRI, r3
 8002328:	f3bf 8f6f 	isb	sy
 800232c:	f3bf 8f4f 	dsb	sy
 8002330:	60bb      	str	r3, [r7, #8]
    }
 8002332:	bf00      	nop
 8002334:	e7fe      	b.n	8002334 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002336:	697b      	ldr	r3, [r7, #20]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02e      	beq.n	80023b6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002358:	2100      	movs	r1, #0
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	fba3 2302 	umull	r2, r3, r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d000      	beq.n	8002368 <xQueueGenericCreate+0x28>
 8002366:	2101      	movs	r1, #1
 8002368:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800236a:	2b00      	cmp	r3, #0
 800236c:	d123      	bne.n	80023b6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002376:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800237a:	d81c      	bhi.n	80023b6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	fb02 f303 	mul.w	r3, r2, r3
 8002384:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3350      	adds	r3, #80	; 0x50
 800238a:	4618      	mov	r0, r3
 800238c:	f001 fdde 	bl	8003f4c <pvPortMalloc>
 8002390:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	3350      	adds	r3, #80	; 0x50
 80023a0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023a2:	79fa      	ldrb	r2, [r7, #7]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f814 	bl	80023dc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80023b4:	e00d      	b.n	80023d2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <xQueueGenericCreate+0x92>
        __asm volatile
 80023bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c0:	f383 8811 	msr	BASEPRI, r3
 80023c4:	f3bf 8f6f 	isb	sy
 80023c8:	f3bf 8f4f 	dsb	sy
 80023cc:	613b      	str	r3, [r7, #16]
    }
 80023ce:	bf00      	nop
 80023d0:	e7fe      	b.n	80023d0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80023d2:	69fb      	ldr	r3, [r7, #28]
    }
 80023d4:	4618      	mov	r0, r3
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
 80023e8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d103      	bne.n	80023f8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e002      	b.n	80023fe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800240a:	2101      	movs	r1, #1
 800240c:	69b8      	ldr	r0, [r7, #24]
 800240e:	f7ff ff15 	bl	800223c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	; 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10a      	bne.n	8002454 <xQueueReceive+0x30>
        __asm volatile
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	623b      	str	r3, [r7, #32]
    }
 8002450:	bf00      	nop
 8002452:	e7fe      	b.n	8002452 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d103      	bne.n	8002462 <xQueueReceive+0x3e>
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <xQueueReceive+0x42>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <xQueueReceive+0x44>
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueReceive+0x5e>
        __asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	61fb      	str	r3, [r7, #28]
    }
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002482:	f001 f831 	bl	80034e8 <xTaskGetSchedulerState>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <xQueueReceive+0x6e>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <xQueueReceive+0x72>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <xQueueReceive+0x74>
 8002496:	2300      	movs	r3, #0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <xQueueReceive+0x8e>
        __asm volatile
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	61bb      	str	r3, [r7, #24]
    }
 80024ae:	bf00      	nop
 80024b0:	e7fe      	b.n	80024b0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024b2:	f001 fc69 	bl	8003d88 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d014      	beq.n	80024ec <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024c2:	68b9      	ldr	r1, [r7, #8]
 80024c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024c6:	f000 f881 	bl	80025cc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	3310      	adds	r3, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fdf8 	bl	80030d4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024e4:	f001 fc80 	bl	8003de8 <vPortExitCritical>
                return pdPASS;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e069      	b.n	80025c0 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024f2:	f001 fc79 	bl	8003de8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e062      	b.n	80025c0 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f000 febb 	bl	8003280 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800250a:	2301      	movs	r3, #1
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800250e:	f001 fc6b 	bl	8003de8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002512:	f000 fb19 	bl	8002b48 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002516:	f001 fc37 	bl	8003d88 <vPortEnterCritical>
 800251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002520:	b25b      	sxtb	r3, r3
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d103      	bne.n	8002530 <xQueueReceive+0x10c>
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002536:	b25b      	sxtb	r3, r3
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d103      	bne.n	8002546 <xQueueReceive+0x122>
 800253e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002546:	f001 fc4f 	bl	8003de8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800254a:	1d3a      	adds	r2, r7, #4
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 feaa 	bl	80032ac <xTaskCheckForTimeOut>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d123      	bne.n	80025a6 <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800255e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002560:	f000 f8ac 	bl	80026bc <prvIsQueueEmpty>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d017      	beq.n	800259a <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	3324      	adds	r3, #36	; 0x24
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f000 fd44 	bl	8003000 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257a:	f000 f84d 	bl	8002618 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800257e:	f000 faf1 	bl	8002b64 <xTaskResumeAll>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d194      	bne.n	80024b2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <xQueueReceive+0x1a4>)
 800258a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f3bf 8f4f 	dsb	sy
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	e78b      	b.n	80024b2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800259a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800259c:	f000 f83c 	bl	8002618 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025a0:	f000 fae0 	bl	8002b64 <xTaskResumeAll>
 80025a4:	e785      	b.n	80024b2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025a8:	f000 f836 	bl	8002618 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025ac:	f000 fada 	bl	8002b64 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b2:	f000 f883 	bl	80026bc <prvIsQueueEmpty>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f43f af7a 	beq.w	80024b2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80025be:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3730      	adds	r7, #48	; 0x30
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d018      	beq.n	8002610 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	441a      	add	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d303      	bcc.n	8002600 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68d9      	ldr	r1, [r3, #12]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	461a      	mov	r2, r3
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f001 fe8e 	bl	800432c <memcpy>
    }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002620:	f001 fbb2 	bl	8003d88 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800262a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800262c:	e011      	b.n	8002652 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3324      	adds	r3, #36	; 0x24
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fd4a 	bl	80030d4 <xTaskRemoveFromEventList>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002646:	f000 fe97 	bl	8003378 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3b01      	subs	r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	2b00      	cmp	r3, #0
 8002658:	dce9      	bgt.n	800262e <prvUnlockQueue+0x16>
 800265a:	e000      	b.n	800265e <prvUnlockQueue+0x46>
                    break;
 800265c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002666:	f001 fbbf 	bl	8003de8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800266a:	f001 fb8d 	bl	8003d88 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002674:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002676:	e011      	b.n	800269c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d012      	beq.n	80026a6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3310      	adds	r3, #16
 8002684:	4618      	mov	r0, r3
 8002686:	f000 fd25 	bl	80030d4 <xTaskRemoveFromEventList>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002690:	f000 fe72 	bl	8003378 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	3b01      	subs	r3, #1
 8002698:	b2db      	uxtb	r3, r3
 800269a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800269c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	dce9      	bgt.n	8002678 <prvUnlockQueue+0x60>
 80026a4:	e000      	b.n	80026a8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026a6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	22ff      	movs	r2, #255	; 0xff
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80026b0:	f001 fb9a 	bl	8003de8 <vPortExitCritical>
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026c4:	f001 fb60 	bl	8003d88 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e001      	b.n	80026da <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026da:	f001 fb85 	bl	8003de8 <vPortExitCritical>

    return xReturn;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <vQueueAddToRegistry+0x2a>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	60fb      	str	r3, [r7, #12]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d024      	beq.n	8002762 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e01e      	b.n	800275c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800271e:	4a18      	ldr	r2, [pc, #96]	; (8002780 <vQueueAddToRegistry+0x98>)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d105      	bne.n	800273a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4a13      	ldr	r2, [pc, #76]	; (8002780 <vQueueAddToRegistry+0x98>)
 8002734:	4413      	add	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
                    break;
 8002738:	e013      	b.n	8002762 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10a      	bne.n	8002756 <vQueueAddToRegistry+0x6e>
 8002740:	4a0f      	ldr	r2, [pc, #60]	; (8002780 <vQueueAddToRegistry+0x98>)
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <vQueueAddToRegistry+0x98>)
 8002752:	4413      	add	r3, r2
 8002754:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b07      	cmp	r3, #7
 8002760:	d9dd      	bls.n	800271e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002774:	bf00      	nop
 8002776:	371c      	adds	r7, #28
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	200000e0 	.word	0x200000e0

08002784 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002794:	f001 faf8 	bl	8003d88 <vPortEnterCritical>
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800279e:	b25b      	sxtb	r3, r3
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d103      	bne.n	80027ae <vQueueWaitForMessageRestricted+0x2a>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b4:	b25b      	sxtb	r3, r3
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d103      	bne.n	80027c4 <vQueueWaitForMessageRestricted+0x40>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027c4:	f001 fb10 	bl	8003de8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d106      	bne.n	80027de <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	3324      	adds	r3, #36	; 0x24
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fc35 	bl	8003048 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027de:	6978      	ldr	r0, [r7, #20]
 80027e0:	f7ff ff1a 	bl	8002618 <prvUnlockQueue>
    }
 80027e4:	bf00      	nop
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	; 0x30
 80027f0:	af04      	add	r7, sp, #16
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4618      	mov	r0, r3
 8002802:	f001 fba3 	bl	8003f4c <pvPortMalloc>
 8002806:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d013      	beq.n	8002836 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800280e:	2058      	movs	r0, #88	; 0x58
 8002810:	f001 fb9c 	bl	8003f4c <pvPortMalloc>
 8002814:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800281c:	2258      	movs	r2, #88	; 0x58
 800281e:	2100      	movs	r1, #0
 8002820:	69f8      	ldr	r0, [r7, #28]
 8002822:	f001 fd91 	bl	8004348 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
 800282c:	e005      	b.n	800283a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f001 fc46 	bl	80040c0 <vPortFree>
 8002834:	e001      	b.n	800283a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	2300      	movs	r3, #0
 8002844:	9303      	str	r3, [sp, #12]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	9302      	str	r3, [sp, #8]
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f80e 	bl	8002878 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800285c:	69f8      	ldr	r0, [r7, #28]
 800285e:	f000 f899 	bl	8002994 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e002      	b.n	800286e <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
 800286c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800286e:	69bb      	ldr	r3, [r7, #24]
    }
 8002870:	4618      	mov	r0, r3
 8002872:	3720      	adds	r7, #32
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	461a      	mov	r2, r3
 8002890:	21a5      	movs	r1, #165	; 0xa5
 8002892:	f001 fd59 	bl	8004348 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028a0:	3b01      	subs	r3, #1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f023 0307 	bic.w	r3, r3, #7
 80028ae:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <prvInitialiseNewTask+0x58>
        __asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	617b      	str	r3, [r7, #20]
    }
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d01e      	beq.n	8002914 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e012      	b.n	8002902 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	7819      	ldrb	r1, [r3, #0]
 80028e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	3334      	adds	r3, #52	; 0x34
 80028ec:	460a      	mov	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4413      	add	r3, r2
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d006      	beq.n	800290a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	3301      	adds	r3, #1
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d9e9      	bls.n	80028dc <prvInitialiseNewTask+0x64>
 8002908:	e000      	b.n	800290c <prvInitialiseNewTask+0x94>
            {
                break;
 800290a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002916:	2b04      	cmp	r3, #4
 8002918:	d90a      	bls.n	8002930 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800291a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291e:	f383 8811 	msr	BASEPRI, r3
 8002922:	f3bf 8f6f 	isb	sy
 8002926:	f3bf 8f4f 	dsb	sy
 800292a:	613b      	str	r3, [r7, #16]
    }
 800292c:	bf00      	nop
 800292e:	e7fe      	b.n	800292e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b04      	cmp	r3, #4
 8002934:	d901      	bls.n	800293a <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002936:	2304      	movs	r3, #4
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002944:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002948:	3304      	adds	r3, #4
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff fc06 	bl	800215c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	3318      	adds	r3, #24
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fc01 	bl	800215c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800295e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002962:	f1c3 0205 	rsb	r2, r3, #5
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	68f9      	ldr	r1, [r7, #12]
 8002974:	69b8      	ldr	r0, [r7, #24]
 8002976:	f001 f8d9 	bl	8003b2c <pxPortInitialiseStack>
 800297a:	4602      	mov	r2, r0
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800298c:	bf00      	nop
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800299c:	f001 f9f4 	bl	8003d88 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029a0:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <prvAddNewTaskToReadyList+0xf8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	4a39      	ldr	r2, [pc, #228]	; (8002a8c <prvAddNewTaskToReadyList+0xf8>)
 80029a8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029aa:	4b39      	ldr	r3, [pc, #228]	; (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029b2:	4a37      	ldr	r2, [pc, #220]	; (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029b8:	4b34      	ldr	r3, [pc, #208]	; (8002a8c <prvAddNewTaskToReadyList+0xf8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d110      	bne.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029c0:	f000 fcf8 	bl	80033b4 <prvInitialiseTaskLists>
 80029c4:	e00d      	b.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029c6:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <prvAddNewTaskToReadyList+0x100>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ce:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	429a      	cmp	r2, r3
 80029da:	d802      	bhi.n	80029e2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029dc:	4a2c      	ldr	r2, [pc, #176]	; (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <prvAddNewTaskToReadyList+0x104>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <prvAddNewTaskToReadyList+0x104>)
 80029ea:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029ec:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <prvAddNewTaskToReadyList+0x104>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	2201      	movs	r2, #1
 80029fa:	409a      	lsls	r2, r3
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <prvAddNewTaskToReadyList+0x108>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <prvAddNewTaskToReadyList+0x108>)
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4925      	ldr	r1, [pc, #148]	; (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	3304      	adds	r3, #4
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	3204      	adds	r2, #4
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	1d1a      	adds	r2, r3, #4
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	615a      	str	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a54:	4912      	ldr	r1, [pc, #72]	; (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	1c59      	adds	r1, r3, #1
 8002a64:	480e      	ldr	r0, [pc, #56]	; (8002aa0 <prvAddNewTaskToReadyList+0x10c>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	4403      	add	r3, r0
 8002a70:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002a72:	f001 f9b9 	bl	8003de8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <prvAddNewTaskToReadyList+0x100>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a7e:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <prvAddNewTaskToReadyList+0xfc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200001f8 	.word	0x200001f8
 8002a90:	20000120 	.word	0x20000120
 8002a94:	20000204 	.word	0x20000204
 8002a98:	20000214 	.word	0x20000214
 8002a9c:	20000200 	.word	0x20000200
 8002aa0:	20000124 	.word	0x20000124

08002aa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <vTaskStartScheduler+0x88>)
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2282      	movs	r2, #130	; 0x82
 8002ab6:	491e      	ldr	r1, [pc, #120]	; (8002b30 <vTaskStartScheduler+0x8c>)
 8002ab8:	481e      	ldr	r0, [pc, #120]	; (8002b34 <vTaskStartScheduler+0x90>)
 8002aba:	f7ff fe97 	bl	80027ec <xTaskCreate>
 8002abe:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d102      	bne.n	8002acc <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ac6:	f000 fdad 	bl	8003624 <xTimerCreateTimerTask>
 8002aca:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d116      	bne.n	8002b00 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	60bb      	str	r3, [r7, #8]
    }
 8002ae4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <vTaskStartScheduler+0x94>)
 8002ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8002aec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <vTaskStartScheduler+0x98>)
 8002af0:	2201      	movs	r2, #1
 8002af2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <vTaskStartScheduler+0x9c>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002afa:	f001 f8a3 	bl	8003c44 <xPortStartScheduler>
 8002afe:	e00e      	b.n	8002b1e <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d10a      	bne.n	8002b1e <vTaskStartScheduler+0x7a>
        __asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	607b      	str	r3, [r7, #4]
    }
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <vTaskStartScheduler+0xa0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000021c 	.word	0x2000021c
 8002b30:	08004dc8 	.word	0x08004dc8
 8002b34:	08003391 	.word	0x08003391
 8002b38:	20000218 	.word	0x20000218
 8002b3c:	20000204 	.word	0x20000204
 8002b40:	200001fc 	.word	0x200001fc
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <vTaskSuspendAll+0x18>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	4a03      	ldr	r2, [pc, #12]	; (8002b60 <vTaskSuspendAll+0x18>)
 8002b54:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	20000220 	.word	0x20000220

08002b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002b72:	4b6b      	ldr	r3, [pc, #428]	; (8002d20 <xTaskResumeAll+0x1bc>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <xTaskResumeAll+0x2c>
        __asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	607b      	str	r3, [r7, #4]
    }
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002b90:	f001 f8fa 	bl	8003d88 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002b94:	4b62      	ldr	r3, [pc, #392]	; (8002d20 <xTaskResumeAll+0x1bc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	4a61      	ldr	r2, [pc, #388]	; (8002d20 <xTaskResumeAll+0x1bc>)
 8002b9c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <xTaskResumeAll+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 80b4 	bne.w	8002d10 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ba8:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <xTaskResumeAll+0x1c0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80af 	beq.w	8002d10 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bb2:	e08a      	b.n	8002cca <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb4:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <xTaskResumeAll+0x1c4>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	69fa      	ldr	r2, [r7, #28]
 8002bc8:	6a12      	ldr	r2, [r2, #32]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	69d2      	ldr	r2, [r2, #28]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3318      	adds	r3, #24
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d103      	bne.n	8002bea <xTaskResumeAll+0x86>
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	6a1a      	ldr	r2, [r3, #32]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2200      	movs	r2, #0
 8002bee:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	69fa      	ldr	r2, [r7, #28]
 8002c06:	68d2      	ldr	r2, [r2, #12]
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	6892      	ldr	r2, [r2, #8]
 8002c12:	605a      	str	r2, [r3, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d103      	bne.n	8002c28 <xTaskResumeAll+0xc4>
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	615a      	str	r2, [r3, #20]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	1e5a      	subs	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <xTaskResumeAll+0x1c8>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	4a39      	ldr	r2, [pc, #228]	; (8002d2c <xTaskResumeAll+0x1c8>)
 8002c48:	6013      	str	r3, [r2, #0]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4e:	4938      	ldr	r1, [pc, #224]	; (8002d30 <xTaskResumeAll+0x1cc>)
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	3204      	adds	r2, #4
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4a28      	ldr	r2, [pc, #160]	; (8002d30 <xTaskResumeAll+0x1cc>)
 8002c8e:	441a      	add	r2, r3
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	4925      	ldr	r1, [pc, #148]	; (8002d30 <xTaskResumeAll+0x1cc>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1c59      	adds	r1, r3, #1
 8002ca8:	4821      	ldr	r0, [pc, #132]	; (8002d30 <xTaskResumeAll+0x1cc>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4403      	add	r3, r0
 8002cb4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <xTaskResumeAll+0x1d0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <xTaskResumeAll+0x1d4>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <xTaskResumeAll+0x1c4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f47f af70 	bne.w	8002bb4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002cda:	f000 fbe9 	bl	80034b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cde:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <xTaskResumeAll+0x1d8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002cea:	f000 f839 	bl	8002d60 <xTaskIncrementTick>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <xTaskResumeAll+0x1d4>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f1      	bne.n	8002cea <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <xTaskResumeAll+0x1d8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <xTaskResumeAll+0x1d4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002d10:	f001 f86a 	bl	8003de8 <vPortExitCritical>

    return xAlreadyYielded;
 8002d14:	697b      	ldr	r3, [r7, #20]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000220 	.word	0x20000220
 8002d24:	200001f8 	.word	0x200001f8
 8002d28:	200001b8 	.word	0x200001b8
 8002d2c:	20000200 	.word	0x20000200
 8002d30:	20000124 	.word	0x20000124
 8002d34:	20000120 	.word	0x20000120
 8002d38:	2000020c 	.word	0x2000020c
 8002d3c:	20000208 	.word	0x20000208

08002d40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <xTaskGetTickCount+0x1c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d4c:	687b      	ldr	r3, [r7, #4]
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	200001fc 	.word	0x200001fc

08002d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d6a:	4b6e      	ldr	r3, [pc, #440]	; (8002f24 <xTaskIncrementTick+0x1c4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 80cd 	bne.w	8002f0e <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d74:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <xTaskIncrementTick+0x1c8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <xTaskIncrementTick+0x1c8>)
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d120      	bne.n	8002dca <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d88:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <xTaskIncrementTick+0x1cc>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d96:	f383 8811 	msr	BASEPRI, r3
 8002d9a:	f3bf 8f6f 	isb	sy
 8002d9e:	f3bf 8f4f 	dsb	sy
 8002da2:	607b      	str	r3, [r7, #4]
    }
 8002da4:	bf00      	nop
 8002da6:	e7fe      	b.n	8002da6 <xTaskIncrementTick+0x46>
 8002da8:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <xTaskIncrementTick+0x1cc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	4b60      	ldr	r3, [pc, #384]	; (8002f30 <xTaskIncrementTick+0x1d0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5e      	ldr	r2, [pc, #376]	; (8002f2c <xTaskIncrementTick+0x1cc>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4a5e      	ldr	r2, [pc, #376]	; (8002f30 <xTaskIncrementTick+0x1d0>)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <xTaskIncrementTick+0x1d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <xTaskIncrementTick+0x1d4>)
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	f000 fb73 	bl	80034b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <xTaskIncrementTick+0x1d8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a3a      	ldr	r2, [r7, #32]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	f0c0 80a1 	bcc.w	8002f18 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dd6:	4b55      	ldr	r3, [pc, #340]	; (8002f2c <xTaskIncrementTick+0x1cc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	4b55      	ldr	r3, [pc, #340]	; (8002f38 <xTaskIncrementTick+0x1d8>)
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	601a      	str	r2, [r3, #0]
                    break;
 8002de8:	e096      	b.n	8002f18 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dea:	4b50      	ldr	r3, [pc, #320]	; (8002f2c <xTaskIncrementTick+0x1cc>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002dfa:	6a3a      	ldr	r2, [r7, #32]
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d203      	bcs.n	8002e0a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002e02:	4a4d      	ldr	r2, [pc, #308]	; (8002f38 <xTaskIncrementTick+0x1d8>)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002e08:	e086      	b.n	8002f18 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	69ba      	ldr	r2, [r7, #24]
 8002e16:	68d2      	ldr	r2, [r2, #12]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	6892      	ldr	r2, [r2, #8]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d103      	bne.n	8002e38 <xTaskIncrementTick+0xd8>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	615a      	str	r2, [r3, #20]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	1e5a      	subs	r2, r3, #1
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01e      	beq.n	8002e8e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	6a12      	ldr	r2, [r2, #32]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	69d2      	ldr	r2, [r2, #28]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3318      	adds	r3, #24
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d103      	bne.n	8002e7e <xTaskIncrementTick+0x11e>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2200      	movs	r2, #0
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1e5a      	subs	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	4b29      	ldr	r3, [pc, #164]	; (8002f3c <xTaskIncrementTick+0x1dc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <xTaskIncrementTick+0x1dc>)
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4926      	ldr	r1, [pc, #152]	; (8002f40 <xTaskIncrementTick+0x1e0>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	3204      	adds	r2, #4
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1d1a      	adds	r2, r3, #4
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <xTaskIncrementTick+0x1e0>)
 8002ee4:	441a      	add	r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	615a      	str	r2, [r3, #20]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eee:	4914      	ldr	r1, [pc, #80]	; (8002f40 <xTaskIncrementTick+0x1e0>)
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1c59      	adds	r1, r3, #1
 8002efe:	4810      	ldr	r0, [pc, #64]	; (8002f40 <xTaskIncrementTick+0x1e0>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4403      	add	r3, r0
 8002f0a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f0c:	e763      	b.n	8002dd6 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <xTaskIncrementTick+0x1e4>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a0b      	ldr	r2, [pc, #44]	; (8002f44 <xTaskIncrementTick+0x1e4>)
 8002f16:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3728      	adds	r7, #40	; 0x28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000220 	.word	0x20000220
 8002f28:	200001fc 	.word	0x200001fc
 8002f2c:	200001b0 	.word	0x200001b0
 8002f30:	200001b4 	.word	0x200001b4
 8002f34:	20000210 	.word	0x20000210
 8002f38:	20000218 	.word	0x20000218
 8002f3c:	20000200 	.word	0x20000200
 8002f40:	20000124 	.word	0x20000124
 8002f44:	20000208 	.word	0x20000208

08002f48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <vTaskSwitchContext+0xa4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f56:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <vTaskSwitchContext+0xa8>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f5c:	e03f      	b.n	8002fde <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002f5e:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <vTaskSwitchContext+0xa8>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <vTaskSwitchContext+0xac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f72:	7afb      	ldrb	r3, [r7, #11]
 8002f74:	f1c3 031f 	rsb	r3, r3, #31
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	491f      	ldr	r1, [pc, #124]	; (8002ff8 <vTaskSwitchContext+0xb0>)
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	607b      	str	r3, [r7, #4]
    }
 8002fa0:	bf00      	nop
 8002fa2:	e7fe      	b.n	8002fa2 <vTaskSwitchContext+0x5a>
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <vTaskSwitchContext+0xb0>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	605a      	str	r2, [r3, #4]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	3308      	adds	r3, #8
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d104      	bne.n	8002fd4 <vTaskSwitchContext+0x8c>
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <vTaskSwitchContext+0xb4>)
 8002fdc:	6013      	str	r3, [r2, #0]
}
 8002fde:	bf00      	nop
 8002fe0:	371c      	adds	r7, #28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000220 	.word	0x20000220
 8002ff0:	2000020c 	.word	0x2000020c
 8002ff4:	20000200 	.word	0x20000200
 8002ff8:	20000124 	.word	0x20000124
 8002ffc:	20000120 	.word	0x20000120

08003000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003014:	f383 8811 	msr	BASEPRI, r3
 8003018:	f3bf 8f6f 	isb	sy
 800301c:	f3bf 8f4f 	dsb	sy
 8003020:	60fb      	str	r3, [r7, #12]
    }
 8003022:	bf00      	nop
 8003024:	e7fe      	b.n	8003024 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <vTaskPlaceOnEventList+0x44>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3318      	adds	r3, #24
 800302c:	4619      	mov	r1, r3
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7ff f8a1 	bl	8002176 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003034:	2101      	movs	r1, #1
 8003036:	6838      	ldr	r0, [r7, #0]
 8003038:	f000 fa74 	bl	8003524 <prvAddCurrentTaskToDelayedList>
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000120 	.word	0x20000120

08003048 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	613b      	str	r3, [r7, #16]
    }
 800306c:	bf00      	nop
 800306e:	e7fe      	b.n	800306e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	61da      	str	r2, [r3, #28]
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	6892      	ldr	r2, [r2, #8]
 8003086:	621a      	str	r2, [r3, #32]
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <vTaskPlaceOnEventListRestricted+0x88>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	3218      	adds	r2, #24
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <vTaskPlaceOnEventListRestricted+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f103 0218 	add.w	r2, r3, #24
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <vTaskPlaceOnEventListRestricted+0x88>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	1c5a      	adds	r2, r3, #1
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	68b8      	ldr	r0, [r7, #8]
 80030c2:	f000 fa2f 	bl	8003524 <prvAddCurrentTaskToDelayedList>
    }
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000120 	.word	0x20000120

080030d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030d4:	b480      	push	{r7}
 80030d6:	b08b      	sub	sp, #44	; 0x2c
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030e4:	6a3b      	ldr	r3, [r7, #32]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	60fb      	str	r3, [r7, #12]
    }
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	6a3a      	ldr	r2, [r7, #32]
 800310c:	6a12      	ldr	r2, [r2, #32]
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	6a3a      	ldr	r2, [r7, #32]
 8003116:	69d2      	ldr	r2, [r2, #28]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	3318      	adds	r3, #24
 8003122:	429a      	cmp	r2, r3
 8003124:	d103      	bne.n	800312e <xTaskRemoveFromEventList+0x5a>
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	6a1a      	ldr	r2, [r3, #32]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2200      	movs	r2, #0
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	1e5a      	subs	r2, r3, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <xTaskRemoveFromEventList+0x194>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d15e      	bne.n	8003204 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	6a3a      	ldr	r2, [r7, #32]
 8003152:	68d2      	ldr	r2, [r2, #12]
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	6a3a      	ldr	r2, [r7, #32]
 800315c:	6892      	ldr	r2, [r2, #8]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	3304      	adds	r3, #4
 8003168:	429a      	cmp	r2, r3
 800316a:	d103      	bne.n	8003174 <xTaskRemoveFromEventList+0xa0>
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	605a      	str	r2, [r3, #4]
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	2200      	movs	r2, #0
 8003178:	615a      	str	r2, [r3, #20]
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	1e5a      	subs	r2, r3, #1
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2201      	movs	r2, #1
 800318a:	409a      	lsls	r2, r3
 800318c:	4b37      	ldr	r3, [pc, #220]	; (800326c <xTaskRemoveFromEventList+0x198>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	4a36      	ldr	r2, [pc, #216]	; (800326c <xTaskRemoveFromEventList+0x198>)
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	4935      	ldr	r1, [pc, #212]	; (8003270 <xTaskRemoveFromEventList+0x19c>)
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3304      	adds	r3, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	6a3a      	ldr	r2, [r7, #32]
 80031c0:	3204      	adds	r2, #4
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	1d1a      	adds	r2, r3, #4
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4a25      	ldr	r2, [pc, #148]	; (8003270 <xTaskRemoveFromEventList+0x19c>)
 80031da:	441a      	add	r2, r3
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4922      	ldr	r1, [pc, #136]	; (8003270 <xTaskRemoveFromEventList+0x19c>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	481e      	ldr	r0, [pc, #120]	; (8003270 <xTaskRemoveFromEventList+0x19c>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	e01b      	b.n	800323c <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003204:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <xTaskRemoveFromEventList+0x1a0>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	61da      	str	r2, [r3, #28]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	621a      	str	r2, [r3, #32]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	3218      	adds	r2, #24
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f103 0218 	add.w	r2, r3, #24
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	4a11      	ldr	r2, [pc, #68]	; (8003274 <xTaskRemoveFromEventList+0x1a0>)
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <xTaskRemoveFromEventList+0x1a0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a0e      	ldr	r2, [pc, #56]	; (8003274 <xTaskRemoveFromEventList+0x1a0>)
 800323a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <xTaskRemoveFromEventList+0x1a4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d905      	bls.n	8003256 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <xTaskRemoveFromEventList+0x1a8>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e001      	b.n	800325a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800325c:	4618      	mov	r0, r3
 800325e:	372c      	adds	r7, #44	; 0x2c
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	20000220 	.word	0x20000220
 800326c:	20000200 	.word	0x20000200
 8003270:	20000124 	.word	0x20000124
 8003274:	200001b8 	.word	0x200001b8
 8003278:	20000120 	.word	0x20000120
 800327c:	2000020c 	.word	0x2000020c

08003280 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <vTaskInternalSetTimeOutState+0x24>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <vTaskInternalSetTimeOutState+0x28>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	605a      	str	r2, [r3, #4]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20000210 	.word	0x20000210
 80032a8:	200001fc 	.word	0x200001fc

080032ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10a      	bne.n	80032d2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80032bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c0:	f383 8811 	msr	BASEPRI, r3
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	613b      	str	r3, [r7, #16]
    }
 80032ce:	bf00      	nop
 80032d0:	e7fe      	b.n	80032d0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60fb      	str	r3, [r7, #12]
    }
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032ee:	f000 fd4b 	bl	8003d88 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032f2:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <xTaskCheckForTimeOut+0xc4>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330a:	d102      	bne.n	8003312 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	e026      	b.n	8003360 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b17      	ldr	r3, [pc, #92]	; (8003374 <xTaskCheckForTimeOut+0xc8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d00a      	beq.n	8003334 <xTaskCheckForTimeOut+0x88>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	429a      	cmp	r2, r3
 8003326:	d305      	bcc.n	8003334 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003328:	2301      	movs	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e015      	b.n	8003360 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	429a      	cmp	r2, r3
 800333c:	d20b      	bcs.n	8003356 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	1ad2      	subs	r2, r2, r3
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ff98 	bl	8003280 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e004      	b.n	8003360 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003360:	f000 fd42 	bl	8003de8 <vPortExitCritical>

    return xReturn;
 8003364:	69fb      	ldr	r3, [r7, #28]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200001fc 	.word	0x200001fc
 8003374:	20000210 	.word	0x20000210

08003378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <vTaskMissedYield+0x14>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	2000020c 	.word	0x2000020c

08003390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003398:	f000 f84c 	bl	8003434 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <prvIdleTask+0x20>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033ac:	e7f4      	b.n	8003398 <prvIdleTask+0x8>
 80033ae:	bf00      	nop
 80033b0:	e000ed04 	.word	0xe000ed04

080033b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	e00c      	b.n	80033da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4a12      	ldr	r2, [pc, #72]	; (8003414 <prvInitialiseTaskLists+0x60>)
 80033cc:	4413      	add	r3, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fea4 	bl	800211c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	607b      	str	r3, [r7, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d9ef      	bls.n	80033c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <prvInitialiseTaskLists+0x64>)
 80033e2:	f7fe fe9b 	bl	800211c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033e6:	480d      	ldr	r0, [pc, #52]	; (800341c <prvInitialiseTaskLists+0x68>)
 80033e8:	f7fe fe98 	bl	800211c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033ec:	480c      	ldr	r0, [pc, #48]	; (8003420 <prvInitialiseTaskLists+0x6c>)
 80033ee:	f7fe fe95 	bl	800211c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80033f2:	480c      	ldr	r0, [pc, #48]	; (8003424 <prvInitialiseTaskLists+0x70>)
 80033f4:	f7fe fe92 	bl	800211c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80033f8:	480b      	ldr	r0, [pc, #44]	; (8003428 <prvInitialiseTaskLists+0x74>)
 80033fa:	f7fe fe8f 	bl	800211c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <prvInitialiseTaskLists+0x78>)
 8003400:	4a05      	ldr	r2, [pc, #20]	; (8003418 <prvInitialiseTaskLists+0x64>)
 8003402:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003404:	4b0a      	ldr	r3, [pc, #40]	; (8003430 <prvInitialiseTaskLists+0x7c>)
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <prvInitialiseTaskLists+0x68>)
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	20000124 	.word	0x20000124
 8003418:	20000188 	.word	0x20000188
 800341c:	2000019c 	.word	0x2000019c
 8003420:	200001b8 	.word	0x200001b8
 8003424:	200001cc 	.word	0x200001cc
 8003428:	200001e4 	.word	0x200001e4
 800342c:	200001b0 	.word	0x200001b0
 8003430:	200001b4 	.word	0x200001b4

08003434 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800343a:	e019      	b.n	8003470 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800343c:	f000 fca4 	bl	8003d88 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <prvCheckTasksWaitingTermination+0x50>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3304      	adds	r3, #4
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fecb 	bl	80021e8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003452:	4b0d      	ldr	r3, [pc, #52]	; (8003488 <prvCheckTasksWaitingTermination+0x54>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3b01      	subs	r3, #1
 8003458:	4a0b      	ldr	r2, [pc, #44]	; (8003488 <prvCheckTasksWaitingTermination+0x54>)
 800345a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <prvCheckTasksWaitingTermination+0x58>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3b01      	subs	r3, #1
 8003462:	4a0a      	ldr	r2, [pc, #40]	; (800348c <prvCheckTasksWaitingTermination+0x58>)
 8003464:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003466:	f000 fcbf 	bl	8003de8 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f810 	bl	8003490 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <prvCheckTasksWaitingTermination+0x58>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e1      	bne.n	800343c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003478:	bf00      	nop
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200001cc 	.word	0x200001cc
 8003488:	200001f8 	.word	0x200001f8
 800348c:	200001e0 	.word	0x200001e0

08003490 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fe0f 	bl	80040c0 <vPortFree>
            vPortFree( pxTCB );
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fe0c 	bl	80040c0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <prvResetNextTaskUnblockTime+0x30>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <prvResetNextTaskUnblockTime+0x34>)
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034c6:	e005      	b.n	80034d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <prvResetNextTaskUnblockTime+0x30>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <prvResetNextTaskUnblockTime+0x34>)
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	200001b0 	.word	0x200001b0
 80034e4:	20000218 	.word	0x20000218

080034e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <xTaskGetSchedulerState+0x34>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d102      	bne.n	80034fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034f6:	2301      	movs	r3, #1
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	e008      	b.n	800350e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <xTaskGetSchedulerState+0x38>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d102      	bne.n	800350a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003504:	2302      	movs	r3, #2
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	e001      	b.n	800350e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800350e:	687b      	ldr	r3, [r7, #4]
    }
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000204 	.word	0x20000204
 8003520:	20000220 	.word	0x20000220

08003524 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800352e:	4b36      	ldr	r3, [pc, #216]	; (8003608 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3304      	adds	r3, #4
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fe54 	bl	80021e8 <uxListRemove>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003546:	4b31      	ldr	r3, [pc, #196]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	2201      	movs	r2, #1
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <prvAddCurrentTaskToDelayedList+0xec>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4013      	ands	r3, r2
 800355a:	4a2d      	ldr	r2, [pc, #180]	; (8003610 <prvAddCurrentTaskToDelayedList+0xec>)
 800355c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003564:	d124      	bne.n	80035b0 <prvAddCurrentTaskToDelayedList+0x8c>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d021      	beq.n	80035b0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <prvAddCurrentTaskToDelayedList+0xf0>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	4b26      	ldr	r3, [pc, #152]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	609a      	str	r2, [r3, #8]
 800357a:	4b24      	ldr	r3, [pc, #144]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	6892      	ldr	r2, [r2, #8]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	4b21      	ldr	r3, [pc, #132]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	3204      	adds	r2, #4
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035a0:	615a      	str	r2, [r3, #20]
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3301      	adds	r3, #1
 80035a8:	4a1a      	ldr	r2, [pc, #104]	; (8003614 <prvAddCurrentTaskToDelayedList+0xf0>)
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035ae:	e026      	b.n	80035fe <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035b8:	4b14      	ldr	r3, [pc, #80]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d209      	bcs.n	80035dc <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035c8:	4b13      	ldr	r3, [pc, #76]	; (8003618 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fe fdce 	bl	8002176 <vListInsert>
}
 80035da:	e010      	b.n	80035fe <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035dc:	4b0f      	ldr	r3, [pc, #60]	; (800361c <prvAddCurrentTaskToDelayedList+0xf8>)
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b0a      	ldr	r3, [pc, #40]	; (800360c <prvAddCurrentTaskToDelayedList+0xe8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4619      	mov	r1, r3
 80035e8:	4610      	mov	r0, r2
 80035ea:	f7fe fdc4 	bl	8002176 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d202      	bcs.n	80035fe <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80035f8:	4a09      	ldr	r2, [pc, #36]	; (8003620 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001fc 	.word	0x200001fc
 800360c:	20000120 	.word	0x20000120
 8003610:	20000200 	.word	0x20000200
 8003614:	200001e4 	.word	0x200001e4
 8003618:	200001b4 	.word	0x200001b4
 800361c:	200001b0 	.word	0x200001b0
 8003620:	20000218 	.word	0x20000218

08003624 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800362a:	2300      	movs	r3, #0
 800362c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800362e:	f000 fa47 	bl	8003ac0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <xTimerCreateTimerTask+0x54>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00b      	beq.n	8003652 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800363a:	4b10      	ldr	r3, [pc, #64]	; (800367c <xTimerCreateTimerTask+0x58>)
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2302      	movs	r3, #2
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003648:	490d      	ldr	r1, [pc, #52]	; (8003680 <xTimerCreateTimerTask+0x5c>)
 800364a:	480e      	ldr	r0, [pc, #56]	; (8003684 <xTimerCreateTimerTask+0x60>)
 800364c:	f7ff f8ce 	bl	80027ec <xTaskCreate>
 8003650:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	603b      	str	r3, [r7, #0]
    }
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800366e:	687b      	ldr	r3, [r7, #4]
    }
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20000254 	.word	0x20000254
 800367c:	20000258 	.word	0x20000258
 8003680:	08004dd0 	.word	0x08004dd0
 8003684:	0800372d 	.word	0x0800372d

08003688 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003694:	e008      	b.n	80036a8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	699a      	ldr	r2, [r3, #24]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	18d1      	adds	r1, r2, r3
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f8dd 	bl	8003874 <prvInsertTimerInActiveList>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1ea      	bne.n	8003696 <prvReloadTimer+0xe>
        }
    }
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <prvProcessExpiredTimer+0x5c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3304      	adds	r3, #4
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fe fd7f 	bl	80021e8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7ff ffc3 	bl	8003688 <prvReloadTimer>
 8003702:	e008      	b.n	8003716 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	4798      	blx	r3
    }
 800371e:	bf00      	nop
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	2000024c 	.word	0x2000024c

0800372c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003734:	f107 0308 	add.w	r3, r7, #8
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f857 	bl	80037ec <prvGetNextExpireTime>
 800373e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4619      	mov	r1, r3
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f803 	bl	8003750 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800374a:	f000 f8d5 	bl	80038f8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800374e:	e7f1      	b.n	8003734 <prvTimerTask+0x8>

08003750 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800375a:	f7ff f9f5 	bl	8002b48 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800375e:	f107 0308 	add.w	r3, r7, #8
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f866 	bl	8003834 <prvSampleTimeNow>
 8003768:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d130      	bne.n	80037d2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <prvProcessTimerOrBlockTask+0x3c>
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	429a      	cmp	r2, r3
 800377c:	d806      	bhi.n	800378c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800377e:	f7ff f9f1 	bl	8002b64 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003782:	68f9      	ldr	r1, [r7, #12]
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ffa1 	bl	80036cc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800378a:	e024      	b.n	80037d6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003792:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <prvProcessTimerOrBlockTask+0x90>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <prvProcessTimerOrBlockTask+0x50>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <prvProcessTimerOrBlockTask+0x52>
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <prvProcessTimerOrBlockTask+0x94>)
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	f7fe ffe7 	bl	8002784 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80037b6:	f7ff f9d5 	bl	8002b64 <xTaskResumeAll>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <prvProcessTimerOrBlockTask+0x98>)
 80037c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f3bf 8f4f 	dsb	sy
 80037cc:	f3bf 8f6f 	isb	sy
    }
 80037d0:	e001      	b.n	80037d6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80037d2:	f7ff f9c7 	bl	8002b64 <xTaskResumeAll>
    }
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000250 	.word	0x20000250
 80037e4:	20000254 	.word	0x20000254
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <prvGetNextExpireTime+0x44>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <prvGetNextExpireTime+0x16>
 80037fe:	2201      	movs	r2, #1
 8003800:	e000      	b.n	8003804 <prvGetNextExpireTime+0x18>
 8003802:	2200      	movs	r2, #0
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d105      	bne.n	800381c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003810:	4b07      	ldr	r3, [pc, #28]	; (8003830 <prvGetNextExpireTime+0x44>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	e001      	b.n	8003820 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003820:	68fb      	ldr	r3, [r7, #12]
    }
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000024c 	.word	0x2000024c

08003834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800383c:	f7ff fa80 	bl	8002d40 <xTaskGetTickCount>
 8003840:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003842:	4b0b      	ldr	r3, [pc, #44]	; (8003870 <prvSampleTimeNow+0x3c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d205      	bcs.n	8003858 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800384c:	f000 f912 	bl	8003a74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e002      	b.n	800385e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <prvSampleTimeNow+0x3c>)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003864:	68fb      	ldr	r3, [r7, #12]
    }
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2000025c 	.word	0x2000025c

08003874 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	429a      	cmp	r2, r3
 8003898:	d812      	bhi.n	80038c0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	1ad2      	subs	r2, r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e01b      	b.n	80038e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <prvInsertTimerInActiveList+0x7c>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe fc5c 	bl	8002176 <vListInsert>
 80038be:	e012      	b.n	80038e6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d206      	bcs.n	80038d6 <prvInsertTimerInActiveList+0x62>
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d302      	bcc.n	80038d6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	e007      	b.n	80038e6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <prvInsertTimerInActiveList+0x80>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3304      	adds	r3, #4
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f7fe fc48 	bl	8002176 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038e6:	697b      	ldr	r3, [r7, #20]
    }
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000250 	.word	0x20000250
 80038f4:	2000024c 	.word	0x2000024c

080038f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038fe:	e0a6      	b.n	8003a4e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	f2c0 80a2 	blt.w	8003a4c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d004      	beq.n	800391e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	3304      	adds	r3, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fc65 	bl	80021e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff87 	bl	8003834 <prvSampleTimeNow>
 8003926:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	3b01      	subs	r3, #1
 800392c:	2b08      	cmp	r3, #8
 800392e:	f200 808e 	bhi.w	8003a4e <prvProcessReceivedCommands+0x156>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <prvProcessReceivedCommands+0x40>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	0800395d 	.word	0x0800395d
 800393c:	0800395d 	.word	0x0800395d
 8003940:	080039c5 	.word	0x080039c5
 8003944:	080039d9 	.word	0x080039d9
 8003948:	08003a23 	.word	0x08003a23
 800394c:	0800395d 	.word	0x0800395d
 8003950:	0800395d 	.word	0x0800395d
 8003954:	080039c5 	.word	0x080039c5
 8003958:	080039d9 	.word	0x080039d9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	b2da      	uxtb	r2, r3
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	18d1      	adds	r1, r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	69f8      	ldr	r0, [r7, #28]
 800397c:	f7ff ff7a 	bl	8003874 <prvInsertTimerInActiveList>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d063      	beq.n	8003a4e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800398c:	f003 0304 	and.w	r3, r3, #4
 8003990:	2b00      	cmp	r3, #0
 8003992:	d009      	beq.n	80039a8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	4413      	add	r3, r2
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4619      	mov	r1, r3
 80039a0:	69f8      	ldr	r0, [r7, #28]
 80039a2:	f7ff fe71 	bl	8003688 <prvReloadTimer>
 80039a6:	e008      	b.n	80039ba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	69f8      	ldr	r0, [r7, #28]
 80039c0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80039c2:	e044      	b.n	8003a4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	b2da      	uxtb	r2, r3
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80039d6:	e03a      	b.n	8003a4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <prvProcessReceivedCommands+0x116>
        __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	617b      	str	r3, [r7, #20]
    }
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	18d1      	adds	r1, r2, r3
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	69f8      	ldr	r0, [r7, #28]
 8003a1c:	f7ff ff2a 	bl	8003874 <prvInsertTimerInActiveList>
                        break;
 8003a20:	e015      	b.n	8003a4e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003a30:	69f8      	ldr	r0, [r7, #28]
 8003a32:	f000 fb45 	bl	80040c0 <vPortFree>
 8003a36:	e00a      	b.n	8003a4e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a4a:	e000      	b.n	8003a4e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003a4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <prvProcessReceivedCommands+0x178>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f107 0108 	add.w	r1, r7, #8
 8003a56:	2200      	movs	r2, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fe fce3 	bl	8002424 <xQueueReceive>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f47f af4d 	bne.w	8003900 <prvProcessReceivedCommands+0x8>
        }
    }
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20000254 	.word	0x20000254

08003a74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a7a:	e009      	b.n	8003a90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <prvSwitchTimerLists+0x44>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a86:	f04f 31ff 	mov.w	r1, #4294967295
 8003a8a:	6838      	ldr	r0, [r7, #0]
 8003a8c:	f7ff fe1e 	bl	80036cc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <prvSwitchTimerLists+0x44>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f0      	bne.n	8003a7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <prvSwitchTimerLists+0x44>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <prvSwitchTimerLists+0x48>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a04      	ldr	r2, [pc, #16]	; (8003ab8 <prvSwitchTimerLists+0x44>)
 8003aa6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003aa8:	4a04      	ldr	r2, [pc, #16]	; (8003abc <prvSwitchTimerLists+0x48>)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6013      	str	r3, [r2, #0]
    }
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000024c 	.word	0x2000024c
 8003abc:	20000250 	.word	0x20000250

08003ac0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003ac4:	f000 f960 	bl	8003d88 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <prvCheckForValidListAndQueue+0x54>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d11d      	bne.n	8003b0c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ad0:	4811      	ldr	r0, [pc, #68]	; (8003b18 <prvCheckForValidListAndQueue+0x58>)
 8003ad2:	f7fe fb23 	bl	800211c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ad6:	4811      	ldr	r0, [pc, #68]	; (8003b1c <prvCheckForValidListAndQueue+0x5c>)
 8003ad8:	f7fe fb20 	bl	800211c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003adc:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <prvCheckForValidListAndQueue+0x60>)
 8003ade:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <prvCheckForValidListAndQueue+0x58>)
 8003ae0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <prvCheckForValidListAndQueue+0x64>)
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <prvCheckForValidListAndQueue+0x5c>)
 8003ae6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003ae8:	2200      	movs	r2, #0
 8003aea:	210c      	movs	r1, #12
 8003aec:	200a      	movs	r0, #10
 8003aee:	f7fe fc27 	bl	8002340 <xQueueGenericCreate>
 8003af2:	4603      	mov	r3, r0
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <prvCheckForValidListAndQueue+0x54>)
 8003af6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003af8:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <prvCheckForValidListAndQueue+0x54>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <prvCheckForValidListAndQueue+0x54>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4908      	ldr	r1, [pc, #32]	; (8003b28 <prvCheckForValidListAndQueue+0x68>)
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fe fdee 	bl	80026e8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b0c:	f000 f96c 	bl	8003de8 <vPortExitCritical>
    }
 8003b10:	bf00      	nop
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000254 	.word	0x20000254
 8003b18:	20000224 	.word	0x20000224
 8003b1c:	20000238 	.word	0x20000238
 8003b20:	2000024c 	.word	0x2000024c
 8003b24:	20000250 	.word	0x20000250
 8003b28:	08004dd8 	.word	0x08004dd8

08003b2c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b44:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3b04      	subs	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f023 0201 	bic.w	r2, r3, #1
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	3b04      	subs	r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b5c:	4a0c      	ldr	r2, [pc, #48]	; (8003b90 <pxPortInitialiseStack+0x64>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	3b14      	subs	r3, #20
 8003b66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3b04      	subs	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f06f 0202 	mvn.w	r2, #2
 8003b7a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	3b20      	subs	r3, #32
 8003b80:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b82:	68fb      	ldr	r3, [r7, #12]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	08003b95 	.word	0x08003b95

08003b94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003b9e:	4b12      	ldr	r3, [pc, #72]	; (8003be8 <prvTaskExitError+0x54>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba6:	d00a      	beq.n	8003bbe <prvTaskExitError+0x2a>
        __asm volatile
 8003ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	60fb      	str	r3, [r7, #12]
    }
 8003bba:	bf00      	nop
 8003bbc:	e7fe      	b.n	8003bbc <prvTaskExitError+0x28>
        __asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60bb      	str	r3, [r7, #8]
    }
 8003bd0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003bd2:	bf00      	nop
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0fc      	beq.n	8003bd4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003bda:	bf00      	nop
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	20000010 	.word	0x20000010
 8003bec:	00000000 	.word	0x00000000

08003bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003bf0:	4b07      	ldr	r3, [pc, #28]	; (8003c10 <pxCurrentTCBConst2>)
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	6808      	ldr	r0, [r1, #0]
 8003bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bfa:	f380 8809 	msr	PSP, r0
 8003bfe:	f3bf 8f6f 	isb	sy
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f380 8811 	msr	BASEPRI, r0
 8003c0a:	4770      	bx	lr
 8003c0c:	f3af 8000 	nop.w

08003c10 <pxCurrentTCBConst2>:
 8003c10:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop

08003c18 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c18:	4808      	ldr	r0, [pc, #32]	; (8003c3c <prvPortStartFirstTask+0x24>)
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	6800      	ldr	r0, [r0, #0]
 8003c1e:	f380 8808 	msr	MSP, r0
 8003c22:	f04f 0000 	mov.w	r0, #0
 8003c26:	f380 8814 	msr	CONTROL, r0
 8003c2a:	b662      	cpsie	i
 8003c2c:	b661      	cpsie	f
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	df00      	svc	0
 8003c38:	bf00      	nop
 8003c3a:	0000      	.short	0x0000
 8003c3c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop

08003c44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c4a:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <xPortStartScheduler+0x120>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a46      	ldr	r2, [pc, #280]	; (8003d68 <xPortStartScheduler+0x124>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d10a      	bne.n	8003c6a <xPortStartScheduler+0x26>
        __asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	613b      	str	r3, [r7, #16]
    }
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <xPortStartScheduler+0x120>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a3f      	ldr	r2, [pc, #252]	; (8003d6c <xPortStartScheduler+0x128>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d10a      	bne.n	8003c8a <xPortStartScheduler+0x46>
        __asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
    }
 8003c86:	bf00      	nop
 8003c88:	e7fe      	b.n	8003c88 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c8a:	4b39      	ldr	r3, [pc, #228]	; (8003d70 <xPortStartScheduler+0x12c>)
 8003c8c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	22ff      	movs	r2, #255	; 0xff
 8003c9a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4b31      	ldr	r3, [pc, #196]	; (8003d74 <xPortStartScheduler+0x130>)
 8003cb0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <xPortStartScheduler+0x134>)
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cb8:	e009      	b.n	8003cce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <xPortStartScheduler+0x134>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	; (8003d78 <xPortStartScheduler+0x134>)
 8003cc2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd6:	2b80      	cmp	r3, #128	; 0x80
 8003cd8:	d0ef      	beq.n	8003cba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cda:	4b27      	ldr	r3, [pc, #156]	; (8003d78 <xPortStartScheduler+0x134>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f1c3 0307 	rsb	r3, r3, #7
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d00a      	beq.n	8003cfc <xPortStartScheduler+0xb8>
        __asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	60bb      	str	r3, [r7, #8]
    }
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003cfc:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <xPortStartScheduler+0x134>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <xPortStartScheduler+0x134>)
 8003d04:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <xPortStartScheduler+0x134>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <xPortStartScheduler+0x134>)
 8003d10:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d1a:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <xPortStartScheduler+0x138>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a17      	ldr	r2, [pc, #92]	; (8003d7c <xPortStartScheduler+0x138>)
 8003d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d24:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d26:	4b15      	ldr	r3, [pc, #84]	; (8003d7c <xPortStartScheduler+0x138>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <xPortStartScheduler+0x138>)
 8003d2c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d30:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d32:	f000 f8db 	bl	8003eec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <xPortStartScheduler+0x13c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d3c:	f000 f8fa 	bl	8003f34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d40:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <xPortStartScheduler+0x140>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0f      	ldr	r2, [pc, #60]	; (8003d84 <xPortStartScheduler+0x140>)
 8003d46:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d4a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d4c:	f7ff ff64 	bl	8003c18 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d50:	f7ff f8fa 	bl	8002f48 <vTaskSwitchContext>
    prvTaskExitError();
 8003d54:	f7ff ff1e 	bl	8003b94 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000ed00 	.word	0xe000ed00
 8003d68:	410fc271 	.word	0x410fc271
 8003d6c:	410fc270 	.word	0x410fc270
 8003d70:	e000e400 	.word	0xe000e400
 8003d74:	20000260 	.word	0x20000260
 8003d78:	20000264 	.word	0x20000264
 8003d7c:	e000ed20 	.word	0xe000ed20
 8003d80:	20000010 	.word	0x20000010
 8003d84:	e000ef34 	.word	0xe000ef34

08003d88 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	607b      	str	r3, [r7, #4]
    }
 8003da0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <vPortEnterCritical+0x58>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <vPortEnterCritical+0x58>)
 8003daa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <vPortEnterCritical+0x58>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10f      	bne.n	8003dd4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <vPortEnterCritical+0x5c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <vPortEnterCritical+0x4c>
        __asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	603b      	str	r3, [r7, #0]
    }
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <vPortEnterCritical+0x4a>
    }
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	20000010 	.word	0x20000010
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <vPortExitCritical+0x50>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <vPortExitCritical+0x24>
        __asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	607b      	str	r3, [r7, #4]
    }
 8003e08:	bf00      	nop
 8003e0a:	e7fe      	b.n	8003e0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <vPortExitCritical+0x50>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <vPortExitCritical+0x50>)
 8003e14:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <vPortExitCritical+0x50>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d105      	bne.n	8003e2a <vPortExitCritical+0x42>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003e28:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000010 	.word	0x20000010
 8003e3c:	00000000 	.word	0x00000000

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	f01e 0f10 	tst.w	lr, #16
 8003e50:	bf08      	it	eq
 8003e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5a:	6010      	str	r0, [r2, #0]
 8003e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e64:	f380 8811 	msr	BASEPRI, r0
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f7ff f86a 	bl	8002f48 <vTaskSwitchContext>
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f380 8811 	msr	BASEPRI, r0
 8003e7c:	bc09      	pop	{r0, r3}
 8003e7e:	6819      	ldr	r1, [r3, #0]
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e86:	f01e 0f10 	tst.w	lr, #16
 8003e8a:	bf08      	it	eq
 8003e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e90:	f380 8809 	msr	PSP, r0
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w

08003ea0 <pxCurrentTCBConst>:
 8003ea0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
        __asm volatile
 8003eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	607b      	str	r3, [r7, #4]
    }
 8003ec0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ec2:	f7fe ff4d 	bl	8002d60 <xTaskIncrementTick>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <SysTick_Handler+0x40>)
 8003ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f383 8811 	msr	BASEPRI, r3
    }
 8003ede:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <vPortSetupTimerInterrupt+0x34>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <vPortSetupTimerInterrupt+0x38>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <vPortSetupTimerInterrupt+0x3c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	; (8003f2c <vPortSetupTimerInterrupt+0x40>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	4a09      	ldr	r2, [pc, #36]	; (8003f30 <vPortSetupTimerInterrupt+0x44>)
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <vPortSetupTimerInterrupt+0x34>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e010 	.word	0xe000e010
 8003f24:	e000e018 	.word	0xe000e018
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	10624dd3 	.word	0x10624dd3
 8003f30:	e000e014 	.word	0xe000e014

08003f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f44 <vPortEnableVFP+0x10>
 8003f38:	6801      	ldr	r1, [r0, #0]
 8003f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f3e:	6001      	str	r1, [r0, #0]
 8003f40:	4770      	bx	lr
 8003f42:	0000      	.short	0x0000
 8003f44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop

08003f4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	; 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003f58:	f7fe fdf6 	bl	8002b48 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f5c:	4b53      	ldr	r3, [pc, #332]	; (80040ac <pvPortMalloc+0x160>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003f64:	f000 f908 	bl	8004178 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d012      	beq.n	8003f94 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003f6e:	2208      	movs	r2, #8
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	3308      	adds	r3, #8
 8003f7a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d804      	bhi.n	8003f90 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	e001      	b.n	8003f94 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	db70      	blt.n	800407c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d06d      	beq.n	800407c <pvPortMalloc+0x130>
 8003fa0:	4b43      	ldr	r3, [pc, #268]	; (80040b0 <pvPortMalloc+0x164>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d868      	bhi.n	800407c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003faa:	4b42      	ldr	r3, [pc, #264]	; (80040b4 <pvPortMalloc+0x168>)
 8003fac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003fae:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <pvPortMalloc+0x168>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fb4:	e004      	b.n	8003fc0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d903      	bls.n	8003fd2 <pvPortMalloc+0x86>
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f1      	bne.n	8003fb6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <pvPortMalloc+0x160>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d04f      	beq.n	800407c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	4413      	add	r3, r2
 8003fe4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	1ad2      	subs	r2, r2, r3
 8003ff6:	2308      	movs	r3, #8
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d91f      	bls.n	800403e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4413      	add	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <pvPortMalloc+0xda>
        __asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	613b      	str	r3, [r7, #16]
    }
 8004022:	bf00      	nop
 8004024:	e7fe      	b.n	8004024 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	1ad2      	subs	r2, r2, r3
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004038:	6978      	ldr	r0, [r7, #20]
 800403a:	f000 f8f9 	bl	8004230 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800403e:	4b1c      	ldr	r3, [pc, #112]	; (80040b0 <pvPortMalloc+0x164>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <pvPortMalloc+0x164>)
 800404a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800404c:	4b18      	ldr	r3, [pc, #96]	; (80040b0 <pvPortMalloc+0x164>)
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <pvPortMalloc+0x16c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d203      	bcs.n	8004060 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004058:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <pvPortMalloc+0x164>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <pvPortMalloc+0x16c>)
 800405e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <pvPortMalloc+0x170>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3301      	adds	r3, #1
 8004078:	4a10      	ldr	r2, [pc, #64]	; (80040bc <pvPortMalloc+0x170>)
 800407a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800407c:	f7fe fd72 	bl	8002b64 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <pvPortMalloc+0x154>
        __asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	60fb      	str	r3, [r7, #12]
    }
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <pvPortMalloc+0x152>
    return pvReturn;
 80040a0:	69fb      	ldr	r3, [r7, #28]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3728      	adds	r7, #40	; 0x28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20012e70 	.word	0x20012e70
 80040b0:	20012e74 	.word	0x20012e74
 80040b4:	20012e68 	.word	0x20012e68
 80040b8:	20012e78 	.word	0x20012e78
 80040bc:	20012e7c 	.word	0x20012e7c

080040c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d049      	beq.n	8004166 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80040d2:	2308      	movs	r3, #8
 80040d4:	425b      	negs	r3, r3
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	db0a      	blt.n	80040fe <vPortFree+0x3e>
        __asm volatile
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	60fb      	str	r3, [r7, #12]
    }
 80040fa:	bf00      	nop
 80040fc:	e7fe      	b.n	80040fc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <vPortFree+0x5c>
        __asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	60bb      	str	r3, [r7, #8]
    }
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0fdb      	lsrs	r3, r3, #31
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01c      	beq.n	8004166 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d118      	bne.n	8004166 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004140:	f7fe fd02 	bl	8002b48 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	4b09      	ldr	r3, [pc, #36]	; (8004170 <vPortFree+0xb0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4413      	add	r3, r2
 800414e:	4a08      	ldr	r2, [pc, #32]	; (8004170 <vPortFree+0xb0>)
 8004150:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004152:	6938      	ldr	r0, [r7, #16]
 8004154:	f000 f86c 	bl	8004230 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <vPortFree+0xb4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a05      	ldr	r2, [pc, #20]	; (8004174 <vPortFree+0xb4>)
 8004160:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004162:	f7fe fcff 	bl	8002b64 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004166:	bf00      	nop
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	20012e74 	.word	0x20012e74
 8004174:	20012e80 	.word	0x20012e80

08004178 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800417e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004182:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004184:	4b25      	ldr	r3, [pc, #148]	; (800421c <prvHeapInit+0xa4>)
 8004186:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3307      	adds	r3, #7
 8004196:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0307 	bic.w	r3, r3, #7
 800419e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	4a1d      	ldr	r2, [pc, #116]	; (800421c <prvHeapInit+0xa4>)
 80041a8:	4413      	add	r3, r2
 80041aa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <prvHeapInit+0xa8>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <prvHeapInit+0xa8>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4413      	add	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80041c4:	2208      	movs	r2, #8
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0307 	bic.w	r3, r3, #7
 80041d2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4a13      	ldr	r2, [pc, #76]	; (8004224 <prvHeapInit+0xac>)
 80041d8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <prvHeapInit+0xac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <prvHeapInit+0xac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <prvHeapInit+0xac>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	4a08      	ldr	r2, [pc, #32]	; (8004228 <prvHeapInit+0xb0>)
 8004206:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4a07      	ldr	r2, [pc, #28]	; (800422c <prvHeapInit+0xb4>)
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000268 	.word	0x20000268
 8004220:	20012e68 	.word	0x20012e68
 8004224:	20012e70 	.word	0x20012e70
 8004228:	20012e78 	.word	0x20012e78
 800422c:	20012e74 	.word	0x20012e74

08004230 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <prvInsertBlockIntoFreeList+0xac>)
 800423a:	60fb      	str	r3, [r7, #12]
 800423c:	e002      	b.n	8004244 <prvInsertBlockIntoFreeList+0x14>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d8f7      	bhi.n	800423e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	4413      	add	r3, r2
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d108      	bne.n	8004272 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	441a      	add	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	441a      	add	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d118      	bne.n	80042b8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <prvInsertBlockIntoFreeList+0xb0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d00d      	beq.n	80042ae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	441a      	add	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e008      	b.n	80042c0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <prvInsertBlockIntoFreeList+0xb0>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	e003      	b.n	80042c0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d002      	beq.n	80042ce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20012e68 	.word	0x20012e68
 80042e0:	20012e70 	.word	0x20012e70

080042e4 <__libc_init_array>:
 80042e4:	b570      	push	{r4, r5, r6, lr}
 80042e6:	4d0d      	ldr	r5, [pc, #52]	; (800431c <__libc_init_array+0x38>)
 80042e8:	4c0d      	ldr	r4, [pc, #52]	; (8004320 <__libc_init_array+0x3c>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	2600      	movs	r6, #0
 80042f0:	42a6      	cmp	r6, r4
 80042f2:	d109      	bne.n	8004308 <__libc_init_array+0x24>
 80042f4:	4d0b      	ldr	r5, [pc, #44]	; (8004324 <__libc_init_array+0x40>)
 80042f6:	4c0c      	ldr	r4, [pc, #48]	; (8004328 <__libc_init_array+0x44>)
 80042f8:	f000 fd3a 	bl	8004d70 <_init>
 80042fc:	1b64      	subs	r4, r4, r5
 80042fe:	10a4      	asrs	r4, r4, #2
 8004300:	2600      	movs	r6, #0
 8004302:	42a6      	cmp	r6, r4
 8004304:	d105      	bne.n	8004312 <__libc_init_array+0x2e>
 8004306:	bd70      	pop	{r4, r5, r6, pc}
 8004308:	f855 3b04 	ldr.w	r3, [r5], #4
 800430c:	4798      	blx	r3
 800430e:	3601      	adds	r6, #1
 8004310:	e7ee      	b.n	80042f0 <__libc_init_array+0xc>
 8004312:	f855 3b04 	ldr.w	r3, [r5], #4
 8004316:	4798      	blx	r3
 8004318:	3601      	adds	r6, #1
 800431a:	e7f2      	b.n	8004302 <__libc_init_array+0x1e>
 800431c:	08004e64 	.word	0x08004e64
 8004320:	08004e64 	.word	0x08004e64
 8004324:	08004e64 	.word	0x08004e64
 8004328:	08004e68 	.word	0x08004e68

0800432c <memcpy>:
 800432c:	440a      	add	r2, r1
 800432e:	4291      	cmp	r1, r2
 8004330:	f100 33ff 	add.w	r3, r0, #4294967295
 8004334:	d100      	bne.n	8004338 <memcpy+0xc>
 8004336:	4770      	bx	lr
 8004338:	b510      	push	{r4, lr}
 800433a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800433e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004342:	4291      	cmp	r1, r2
 8004344:	d1f9      	bne.n	800433a <memcpy+0xe>
 8004346:	bd10      	pop	{r4, pc}

08004348 <memset>:
 8004348:	4402      	add	r2, r0
 800434a:	4603      	mov	r3, r0
 800434c:	4293      	cmp	r3, r2
 800434e:	d100      	bne.n	8004352 <memset+0xa>
 8004350:	4770      	bx	lr
 8004352:	f803 1b01 	strb.w	r1, [r3], #1
 8004356:	e7f9      	b.n	800434c <memset+0x4>

08004358 <_puts_r>:
 8004358:	b570      	push	{r4, r5, r6, lr}
 800435a:	460e      	mov	r6, r1
 800435c:	4605      	mov	r5, r0
 800435e:	b118      	cbz	r0, 8004368 <_puts_r+0x10>
 8004360:	6983      	ldr	r3, [r0, #24]
 8004362:	b90b      	cbnz	r3, 8004368 <_puts_r+0x10>
 8004364:	f000 fa48 	bl	80047f8 <__sinit>
 8004368:	69ab      	ldr	r3, [r5, #24]
 800436a:	68ac      	ldr	r4, [r5, #8]
 800436c:	b913      	cbnz	r3, 8004374 <_puts_r+0x1c>
 800436e:	4628      	mov	r0, r5
 8004370:	f000 fa42 	bl	80047f8 <__sinit>
 8004374:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <_puts_r+0xd0>)
 8004376:	429c      	cmp	r4, r3
 8004378:	d120      	bne.n	80043bc <_puts_r+0x64>
 800437a:	686c      	ldr	r4, [r5, #4]
 800437c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800437e:	07db      	lsls	r3, r3, #31
 8004380:	d405      	bmi.n	800438e <_puts_r+0x36>
 8004382:	89a3      	ldrh	r3, [r4, #12]
 8004384:	0598      	lsls	r0, r3, #22
 8004386:	d402      	bmi.n	800438e <_puts_r+0x36>
 8004388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800438a:	f000 fad3 	bl	8004934 <__retarget_lock_acquire_recursive>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	0719      	lsls	r1, r3, #28
 8004392:	d51d      	bpl.n	80043d0 <_puts_r+0x78>
 8004394:	6923      	ldr	r3, [r4, #16]
 8004396:	b1db      	cbz	r3, 80043d0 <_puts_r+0x78>
 8004398:	3e01      	subs	r6, #1
 800439a:	68a3      	ldr	r3, [r4, #8]
 800439c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80043a0:	3b01      	subs	r3, #1
 80043a2:	60a3      	str	r3, [r4, #8]
 80043a4:	bb39      	cbnz	r1, 80043f6 <_puts_r+0x9e>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	da38      	bge.n	800441c <_puts_r+0xc4>
 80043aa:	4622      	mov	r2, r4
 80043ac:	210a      	movs	r1, #10
 80043ae:	4628      	mov	r0, r5
 80043b0:	f000 f848 	bl	8004444 <__swbuf_r>
 80043b4:	3001      	adds	r0, #1
 80043b6:	d011      	beq.n	80043dc <_puts_r+0x84>
 80043b8:	250a      	movs	r5, #10
 80043ba:	e011      	b.n	80043e0 <_puts_r+0x88>
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <_puts_r+0xd4>)
 80043be:	429c      	cmp	r4, r3
 80043c0:	d101      	bne.n	80043c6 <_puts_r+0x6e>
 80043c2:	68ac      	ldr	r4, [r5, #8]
 80043c4:	e7da      	b.n	800437c <_puts_r+0x24>
 80043c6:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <_puts_r+0xd8>)
 80043c8:	429c      	cmp	r4, r3
 80043ca:	bf08      	it	eq
 80043cc:	68ec      	ldreq	r4, [r5, #12]
 80043ce:	e7d5      	b.n	800437c <_puts_r+0x24>
 80043d0:	4621      	mov	r1, r4
 80043d2:	4628      	mov	r0, r5
 80043d4:	f000 f888 	bl	80044e8 <__swsetup_r>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d0dd      	beq.n	8004398 <_puts_r+0x40>
 80043dc:	f04f 35ff 	mov.w	r5, #4294967295
 80043e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043e2:	07da      	lsls	r2, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_puts_r+0x9a>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	059b      	lsls	r3, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_puts_r+0x9a>
 80043ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043ee:	f000 faa2 	bl	8004936 <__retarget_lock_release_recursive>
 80043f2:	4628      	mov	r0, r5
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	da04      	bge.n	8004404 <_puts_r+0xac>
 80043fa:	69a2      	ldr	r2, [r4, #24]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	dc06      	bgt.n	800440e <_puts_r+0xb6>
 8004400:	290a      	cmp	r1, #10
 8004402:	d004      	beq.n	800440e <_puts_r+0xb6>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	6022      	str	r2, [r4, #0]
 800440a:	7019      	strb	r1, [r3, #0]
 800440c:	e7c5      	b.n	800439a <_puts_r+0x42>
 800440e:	4622      	mov	r2, r4
 8004410:	4628      	mov	r0, r5
 8004412:	f000 f817 	bl	8004444 <__swbuf_r>
 8004416:	3001      	adds	r0, #1
 8004418:	d1bf      	bne.n	800439a <_puts_r+0x42>
 800441a:	e7df      	b.n	80043dc <_puts_r+0x84>
 800441c:	6823      	ldr	r3, [r4, #0]
 800441e:	250a      	movs	r5, #10
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	6022      	str	r2, [r4, #0]
 8004424:	701d      	strb	r5, [r3, #0]
 8004426:	e7db      	b.n	80043e0 <_puts_r+0x88>
 8004428:	08004e1c 	.word	0x08004e1c
 800442c:	08004e3c 	.word	0x08004e3c
 8004430:	08004dfc 	.word	0x08004dfc

08004434 <puts>:
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <puts+0xc>)
 8004436:	4601      	mov	r1, r0
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	f7ff bf8d 	b.w	8004358 <_puts_r>
 800443e:	bf00      	nop
 8004440:	20000014 	.word	0x20000014

08004444 <__swbuf_r>:
 8004444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004446:	460e      	mov	r6, r1
 8004448:	4614      	mov	r4, r2
 800444a:	4605      	mov	r5, r0
 800444c:	b118      	cbz	r0, 8004456 <__swbuf_r+0x12>
 800444e:	6983      	ldr	r3, [r0, #24]
 8004450:	b90b      	cbnz	r3, 8004456 <__swbuf_r+0x12>
 8004452:	f000 f9d1 	bl	80047f8 <__sinit>
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <__swbuf_r+0x98>)
 8004458:	429c      	cmp	r4, r3
 800445a:	d12b      	bne.n	80044b4 <__swbuf_r+0x70>
 800445c:	686c      	ldr	r4, [r5, #4]
 800445e:	69a3      	ldr	r3, [r4, #24]
 8004460:	60a3      	str	r3, [r4, #8]
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	071a      	lsls	r2, r3, #28
 8004466:	d52f      	bpl.n	80044c8 <__swbuf_r+0x84>
 8004468:	6923      	ldr	r3, [r4, #16]
 800446a:	b36b      	cbz	r3, 80044c8 <__swbuf_r+0x84>
 800446c:	6923      	ldr	r3, [r4, #16]
 800446e:	6820      	ldr	r0, [r4, #0]
 8004470:	1ac0      	subs	r0, r0, r3
 8004472:	6963      	ldr	r3, [r4, #20]
 8004474:	b2f6      	uxtb	r6, r6
 8004476:	4283      	cmp	r3, r0
 8004478:	4637      	mov	r7, r6
 800447a:	dc04      	bgt.n	8004486 <__swbuf_r+0x42>
 800447c:	4621      	mov	r1, r4
 800447e:	4628      	mov	r0, r5
 8004480:	f000 f926 	bl	80046d0 <_fflush_r>
 8004484:	bb30      	cbnz	r0, 80044d4 <__swbuf_r+0x90>
 8004486:	68a3      	ldr	r3, [r4, #8]
 8004488:	3b01      	subs	r3, #1
 800448a:	60a3      	str	r3, [r4, #8]
 800448c:	6823      	ldr	r3, [r4, #0]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	6022      	str	r2, [r4, #0]
 8004492:	701e      	strb	r6, [r3, #0]
 8004494:	6963      	ldr	r3, [r4, #20]
 8004496:	3001      	adds	r0, #1
 8004498:	4283      	cmp	r3, r0
 800449a:	d004      	beq.n	80044a6 <__swbuf_r+0x62>
 800449c:	89a3      	ldrh	r3, [r4, #12]
 800449e:	07db      	lsls	r3, r3, #31
 80044a0:	d506      	bpl.n	80044b0 <__swbuf_r+0x6c>
 80044a2:	2e0a      	cmp	r6, #10
 80044a4:	d104      	bne.n	80044b0 <__swbuf_r+0x6c>
 80044a6:	4621      	mov	r1, r4
 80044a8:	4628      	mov	r0, r5
 80044aa:	f000 f911 	bl	80046d0 <_fflush_r>
 80044ae:	b988      	cbnz	r0, 80044d4 <__swbuf_r+0x90>
 80044b0:	4638      	mov	r0, r7
 80044b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <__swbuf_r+0x9c>)
 80044b6:	429c      	cmp	r4, r3
 80044b8:	d101      	bne.n	80044be <__swbuf_r+0x7a>
 80044ba:	68ac      	ldr	r4, [r5, #8]
 80044bc:	e7cf      	b.n	800445e <__swbuf_r+0x1a>
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <__swbuf_r+0xa0>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	bf08      	it	eq
 80044c4:	68ec      	ldreq	r4, [r5, #12]
 80044c6:	e7ca      	b.n	800445e <__swbuf_r+0x1a>
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	f000 f80c 	bl	80044e8 <__swsetup_r>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	d0cb      	beq.n	800446c <__swbuf_r+0x28>
 80044d4:	f04f 37ff 	mov.w	r7, #4294967295
 80044d8:	e7ea      	b.n	80044b0 <__swbuf_r+0x6c>
 80044da:	bf00      	nop
 80044dc:	08004e1c 	.word	0x08004e1c
 80044e0:	08004e3c 	.word	0x08004e3c
 80044e4:	08004dfc 	.word	0x08004dfc

080044e8 <__swsetup_r>:
 80044e8:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <__swsetup_r+0xcc>)
 80044ea:	b570      	push	{r4, r5, r6, lr}
 80044ec:	681d      	ldr	r5, [r3, #0]
 80044ee:	4606      	mov	r6, r0
 80044f0:	460c      	mov	r4, r1
 80044f2:	b125      	cbz	r5, 80044fe <__swsetup_r+0x16>
 80044f4:	69ab      	ldr	r3, [r5, #24]
 80044f6:	b913      	cbnz	r3, 80044fe <__swsetup_r+0x16>
 80044f8:	4628      	mov	r0, r5
 80044fa:	f000 f97d 	bl	80047f8 <__sinit>
 80044fe:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <__swsetup_r+0xd0>)
 8004500:	429c      	cmp	r4, r3
 8004502:	d10f      	bne.n	8004524 <__swsetup_r+0x3c>
 8004504:	686c      	ldr	r4, [r5, #4]
 8004506:	89a3      	ldrh	r3, [r4, #12]
 8004508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800450c:	0719      	lsls	r1, r3, #28
 800450e:	d42c      	bmi.n	800456a <__swsetup_r+0x82>
 8004510:	06dd      	lsls	r5, r3, #27
 8004512:	d411      	bmi.n	8004538 <__swsetup_r+0x50>
 8004514:	2309      	movs	r3, #9
 8004516:	6033      	str	r3, [r6, #0]
 8004518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800451c:	81a3      	strh	r3, [r4, #12]
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	e03e      	b.n	80045a2 <__swsetup_r+0xba>
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <__swsetup_r+0xd4>)
 8004526:	429c      	cmp	r4, r3
 8004528:	d101      	bne.n	800452e <__swsetup_r+0x46>
 800452a:	68ac      	ldr	r4, [r5, #8]
 800452c:	e7eb      	b.n	8004506 <__swsetup_r+0x1e>
 800452e:	4b24      	ldr	r3, [pc, #144]	; (80045c0 <__swsetup_r+0xd8>)
 8004530:	429c      	cmp	r4, r3
 8004532:	bf08      	it	eq
 8004534:	68ec      	ldreq	r4, [r5, #12]
 8004536:	e7e6      	b.n	8004506 <__swsetup_r+0x1e>
 8004538:	0758      	lsls	r0, r3, #29
 800453a:	d512      	bpl.n	8004562 <__swsetup_r+0x7a>
 800453c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800453e:	b141      	cbz	r1, 8004552 <__swsetup_r+0x6a>
 8004540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004544:	4299      	cmp	r1, r3
 8004546:	d002      	beq.n	800454e <__swsetup_r+0x66>
 8004548:	4630      	mov	r0, r6
 800454a:	f000 fa5b 	bl	8004a04 <_free_r>
 800454e:	2300      	movs	r3, #0
 8004550:	6363      	str	r3, [r4, #52]	; 0x34
 8004552:	89a3      	ldrh	r3, [r4, #12]
 8004554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004558:	81a3      	strh	r3, [r4, #12]
 800455a:	2300      	movs	r3, #0
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6923      	ldr	r3, [r4, #16]
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	89a3      	ldrh	r3, [r4, #12]
 8004564:	f043 0308 	orr.w	r3, r3, #8
 8004568:	81a3      	strh	r3, [r4, #12]
 800456a:	6923      	ldr	r3, [r4, #16]
 800456c:	b94b      	cbnz	r3, 8004582 <__swsetup_r+0x9a>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004578:	d003      	beq.n	8004582 <__swsetup_r+0x9a>
 800457a:	4621      	mov	r1, r4
 800457c:	4630      	mov	r0, r6
 800457e:	f000 fa01 	bl	8004984 <__smakebuf_r>
 8004582:	89a0      	ldrh	r0, [r4, #12]
 8004584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004588:	f010 0301 	ands.w	r3, r0, #1
 800458c:	d00a      	beq.n	80045a4 <__swsetup_r+0xbc>
 800458e:	2300      	movs	r3, #0
 8004590:	60a3      	str	r3, [r4, #8]
 8004592:	6963      	ldr	r3, [r4, #20]
 8004594:	425b      	negs	r3, r3
 8004596:	61a3      	str	r3, [r4, #24]
 8004598:	6923      	ldr	r3, [r4, #16]
 800459a:	b943      	cbnz	r3, 80045ae <__swsetup_r+0xc6>
 800459c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80045a0:	d1ba      	bne.n	8004518 <__swsetup_r+0x30>
 80045a2:	bd70      	pop	{r4, r5, r6, pc}
 80045a4:	0781      	lsls	r1, r0, #30
 80045a6:	bf58      	it	pl
 80045a8:	6963      	ldrpl	r3, [r4, #20]
 80045aa:	60a3      	str	r3, [r4, #8]
 80045ac:	e7f4      	b.n	8004598 <__swsetup_r+0xb0>
 80045ae:	2000      	movs	r0, #0
 80045b0:	e7f7      	b.n	80045a2 <__swsetup_r+0xba>
 80045b2:	bf00      	nop
 80045b4:	20000014 	.word	0x20000014
 80045b8:	08004e1c 	.word	0x08004e1c
 80045bc:	08004e3c 	.word	0x08004e3c
 80045c0:	08004dfc 	.word	0x08004dfc

080045c4 <__sflush_r>:
 80045c4:	898a      	ldrh	r2, [r1, #12]
 80045c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ca:	4605      	mov	r5, r0
 80045cc:	0710      	lsls	r0, r2, #28
 80045ce:	460c      	mov	r4, r1
 80045d0:	d458      	bmi.n	8004684 <__sflush_r+0xc0>
 80045d2:	684b      	ldr	r3, [r1, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dc05      	bgt.n	80045e4 <__sflush_r+0x20>
 80045d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	dc02      	bgt.n	80045e4 <__sflush_r+0x20>
 80045de:	2000      	movs	r0, #0
 80045e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045e6:	2e00      	cmp	r6, #0
 80045e8:	d0f9      	beq.n	80045de <__sflush_r+0x1a>
 80045ea:	2300      	movs	r3, #0
 80045ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80045f0:	682f      	ldr	r7, [r5, #0]
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	d032      	beq.n	800465c <__sflush_r+0x98>
 80045f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80045f8:	89a3      	ldrh	r3, [r4, #12]
 80045fa:	075a      	lsls	r2, r3, #29
 80045fc:	d505      	bpl.n	800460a <__sflush_r+0x46>
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	1ac0      	subs	r0, r0, r3
 8004602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004604:	b10b      	cbz	r3, 800460a <__sflush_r+0x46>
 8004606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004608:	1ac0      	subs	r0, r0, r3
 800460a:	2300      	movs	r3, #0
 800460c:	4602      	mov	r2, r0
 800460e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004610:	6a21      	ldr	r1, [r4, #32]
 8004612:	4628      	mov	r0, r5
 8004614:	47b0      	blx	r6
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	d106      	bne.n	800462a <__sflush_r+0x66>
 800461c:	6829      	ldr	r1, [r5, #0]
 800461e:	291d      	cmp	r1, #29
 8004620:	d82c      	bhi.n	800467c <__sflush_r+0xb8>
 8004622:	4a2a      	ldr	r2, [pc, #168]	; (80046cc <__sflush_r+0x108>)
 8004624:	40ca      	lsrs	r2, r1
 8004626:	07d6      	lsls	r6, r2, #31
 8004628:	d528      	bpl.n	800467c <__sflush_r+0xb8>
 800462a:	2200      	movs	r2, #0
 800462c:	6062      	str	r2, [r4, #4]
 800462e:	04d9      	lsls	r1, r3, #19
 8004630:	6922      	ldr	r2, [r4, #16]
 8004632:	6022      	str	r2, [r4, #0]
 8004634:	d504      	bpl.n	8004640 <__sflush_r+0x7c>
 8004636:	1c42      	adds	r2, r0, #1
 8004638:	d101      	bne.n	800463e <__sflush_r+0x7a>
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	b903      	cbnz	r3, 8004640 <__sflush_r+0x7c>
 800463e:	6560      	str	r0, [r4, #84]	; 0x54
 8004640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004642:	602f      	str	r7, [r5, #0]
 8004644:	2900      	cmp	r1, #0
 8004646:	d0ca      	beq.n	80045de <__sflush_r+0x1a>
 8004648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800464c:	4299      	cmp	r1, r3
 800464e:	d002      	beq.n	8004656 <__sflush_r+0x92>
 8004650:	4628      	mov	r0, r5
 8004652:	f000 f9d7 	bl	8004a04 <_free_r>
 8004656:	2000      	movs	r0, #0
 8004658:	6360      	str	r0, [r4, #52]	; 0x34
 800465a:	e7c1      	b.n	80045e0 <__sflush_r+0x1c>
 800465c:	6a21      	ldr	r1, [r4, #32]
 800465e:	2301      	movs	r3, #1
 8004660:	4628      	mov	r0, r5
 8004662:	47b0      	blx	r6
 8004664:	1c41      	adds	r1, r0, #1
 8004666:	d1c7      	bne.n	80045f8 <__sflush_r+0x34>
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0c4      	beq.n	80045f8 <__sflush_r+0x34>
 800466e:	2b1d      	cmp	r3, #29
 8004670:	d001      	beq.n	8004676 <__sflush_r+0xb2>
 8004672:	2b16      	cmp	r3, #22
 8004674:	d101      	bne.n	800467a <__sflush_r+0xb6>
 8004676:	602f      	str	r7, [r5, #0]
 8004678:	e7b1      	b.n	80045de <__sflush_r+0x1a>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	e7ad      	b.n	80045e0 <__sflush_r+0x1c>
 8004684:	690f      	ldr	r7, [r1, #16]
 8004686:	2f00      	cmp	r7, #0
 8004688:	d0a9      	beq.n	80045de <__sflush_r+0x1a>
 800468a:	0793      	lsls	r3, r2, #30
 800468c:	680e      	ldr	r6, [r1, #0]
 800468e:	bf08      	it	eq
 8004690:	694b      	ldreq	r3, [r1, #20]
 8004692:	600f      	str	r7, [r1, #0]
 8004694:	bf18      	it	ne
 8004696:	2300      	movne	r3, #0
 8004698:	eba6 0807 	sub.w	r8, r6, r7
 800469c:	608b      	str	r3, [r1, #8]
 800469e:	f1b8 0f00 	cmp.w	r8, #0
 80046a2:	dd9c      	ble.n	80045de <__sflush_r+0x1a>
 80046a4:	6a21      	ldr	r1, [r4, #32]
 80046a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80046a8:	4643      	mov	r3, r8
 80046aa:	463a      	mov	r2, r7
 80046ac:	4628      	mov	r0, r5
 80046ae:	47b0      	blx	r6
 80046b0:	2800      	cmp	r0, #0
 80046b2:	dc06      	bgt.n	80046c2 <__sflush_r+0xfe>
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ba:	81a3      	strh	r3, [r4, #12]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	e78e      	b.n	80045e0 <__sflush_r+0x1c>
 80046c2:	4407      	add	r7, r0
 80046c4:	eba8 0800 	sub.w	r8, r8, r0
 80046c8:	e7e9      	b.n	800469e <__sflush_r+0xda>
 80046ca:	bf00      	nop
 80046cc:	20400001 	.word	0x20400001

080046d0 <_fflush_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	690b      	ldr	r3, [r1, #16]
 80046d4:	4605      	mov	r5, r0
 80046d6:	460c      	mov	r4, r1
 80046d8:	b913      	cbnz	r3, 80046e0 <_fflush_r+0x10>
 80046da:	2500      	movs	r5, #0
 80046dc:	4628      	mov	r0, r5
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	b118      	cbz	r0, 80046ea <_fflush_r+0x1a>
 80046e2:	6983      	ldr	r3, [r0, #24]
 80046e4:	b90b      	cbnz	r3, 80046ea <_fflush_r+0x1a>
 80046e6:	f000 f887 	bl	80047f8 <__sinit>
 80046ea:	4b14      	ldr	r3, [pc, #80]	; (800473c <_fflush_r+0x6c>)
 80046ec:	429c      	cmp	r4, r3
 80046ee:	d11b      	bne.n	8004728 <_fflush_r+0x58>
 80046f0:	686c      	ldr	r4, [r5, #4]
 80046f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0ef      	beq.n	80046da <_fflush_r+0xa>
 80046fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80046fc:	07d0      	lsls	r0, r2, #31
 80046fe:	d404      	bmi.n	800470a <_fflush_r+0x3a>
 8004700:	0599      	lsls	r1, r3, #22
 8004702:	d402      	bmi.n	800470a <_fflush_r+0x3a>
 8004704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004706:	f000 f915 	bl	8004934 <__retarget_lock_acquire_recursive>
 800470a:	4628      	mov	r0, r5
 800470c:	4621      	mov	r1, r4
 800470e:	f7ff ff59 	bl	80045c4 <__sflush_r>
 8004712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004714:	07da      	lsls	r2, r3, #31
 8004716:	4605      	mov	r5, r0
 8004718:	d4e0      	bmi.n	80046dc <_fflush_r+0xc>
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	059b      	lsls	r3, r3, #22
 800471e:	d4dd      	bmi.n	80046dc <_fflush_r+0xc>
 8004720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004722:	f000 f908 	bl	8004936 <__retarget_lock_release_recursive>
 8004726:	e7d9      	b.n	80046dc <_fflush_r+0xc>
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <_fflush_r+0x70>)
 800472a:	429c      	cmp	r4, r3
 800472c:	d101      	bne.n	8004732 <_fflush_r+0x62>
 800472e:	68ac      	ldr	r4, [r5, #8]
 8004730:	e7df      	b.n	80046f2 <_fflush_r+0x22>
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <_fflush_r+0x74>)
 8004734:	429c      	cmp	r4, r3
 8004736:	bf08      	it	eq
 8004738:	68ec      	ldreq	r4, [r5, #12]
 800473a:	e7da      	b.n	80046f2 <_fflush_r+0x22>
 800473c:	08004e1c 	.word	0x08004e1c
 8004740:	08004e3c 	.word	0x08004e3c
 8004744:	08004dfc 	.word	0x08004dfc

08004748 <std>:
 8004748:	2300      	movs	r3, #0
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	e9c0 3300 	strd	r3, r3, [r0]
 8004752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004756:	6083      	str	r3, [r0, #8]
 8004758:	8181      	strh	r1, [r0, #12]
 800475a:	6643      	str	r3, [r0, #100]	; 0x64
 800475c:	81c2      	strh	r2, [r0, #14]
 800475e:	6183      	str	r3, [r0, #24]
 8004760:	4619      	mov	r1, r3
 8004762:	2208      	movs	r2, #8
 8004764:	305c      	adds	r0, #92	; 0x5c
 8004766:	f7ff fdef 	bl	8004348 <memset>
 800476a:	4b05      	ldr	r3, [pc, #20]	; (8004780 <std+0x38>)
 800476c:	6263      	str	r3, [r4, #36]	; 0x24
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <std+0x3c>)
 8004770:	62a3      	str	r3, [r4, #40]	; 0x28
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <std+0x40>)
 8004774:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <std+0x44>)
 8004778:	6224      	str	r4, [r4, #32]
 800477a:	6323      	str	r3, [r4, #48]	; 0x30
 800477c:	bd10      	pop	{r4, pc}
 800477e:	bf00      	nop
 8004780:	08004be5 	.word	0x08004be5
 8004784:	08004c07 	.word	0x08004c07
 8004788:	08004c3f 	.word	0x08004c3f
 800478c:	08004c63 	.word	0x08004c63

08004790 <_cleanup_r>:
 8004790:	4901      	ldr	r1, [pc, #4]	; (8004798 <_cleanup_r+0x8>)
 8004792:	f000 b8af 	b.w	80048f4 <_fwalk_reent>
 8004796:	bf00      	nop
 8004798:	080046d1 	.word	0x080046d1

0800479c <__sfmoreglue>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	2268      	movs	r2, #104	; 0x68
 80047a0:	1e4d      	subs	r5, r1, #1
 80047a2:	4355      	muls	r5, r2
 80047a4:	460e      	mov	r6, r1
 80047a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047aa:	f000 f997 	bl	8004adc <_malloc_r>
 80047ae:	4604      	mov	r4, r0
 80047b0:	b140      	cbz	r0, 80047c4 <__sfmoreglue+0x28>
 80047b2:	2100      	movs	r1, #0
 80047b4:	e9c0 1600 	strd	r1, r6, [r0]
 80047b8:	300c      	adds	r0, #12
 80047ba:	60a0      	str	r0, [r4, #8]
 80047bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047c0:	f7ff fdc2 	bl	8004348 <memset>
 80047c4:	4620      	mov	r0, r4
 80047c6:	bd70      	pop	{r4, r5, r6, pc}

080047c8 <__sfp_lock_acquire>:
 80047c8:	4801      	ldr	r0, [pc, #4]	; (80047d0 <__sfp_lock_acquire+0x8>)
 80047ca:	f000 b8b3 	b.w	8004934 <__retarget_lock_acquire_recursive>
 80047ce:	bf00      	nop
 80047d0:	20012e85 	.word	0x20012e85

080047d4 <__sfp_lock_release>:
 80047d4:	4801      	ldr	r0, [pc, #4]	; (80047dc <__sfp_lock_release+0x8>)
 80047d6:	f000 b8ae 	b.w	8004936 <__retarget_lock_release_recursive>
 80047da:	bf00      	nop
 80047dc:	20012e85 	.word	0x20012e85

080047e0 <__sinit_lock_acquire>:
 80047e0:	4801      	ldr	r0, [pc, #4]	; (80047e8 <__sinit_lock_acquire+0x8>)
 80047e2:	f000 b8a7 	b.w	8004934 <__retarget_lock_acquire_recursive>
 80047e6:	bf00      	nop
 80047e8:	20012e86 	.word	0x20012e86

080047ec <__sinit_lock_release>:
 80047ec:	4801      	ldr	r0, [pc, #4]	; (80047f4 <__sinit_lock_release+0x8>)
 80047ee:	f000 b8a2 	b.w	8004936 <__retarget_lock_release_recursive>
 80047f2:	bf00      	nop
 80047f4:	20012e86 	.word	0x20012e86

080047f8 <__sinit>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	4604      	mov	r4, r0
 80047fc:	f7ff fff0 	bl	80047e0 <__sinit_lock_acquire>
 8004800:	69a3      	ldr	r3, [r4, #24]
 8004802:	b11b      	cbz	r3, 800480c <__sinit+0x14>
 8004804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004808:	f7ff bff0 	b.w	80047ec <__sinit_lock_release>
 800480c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004810:	6523      	str	r3, [r4, #80]	; 0x50
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <__sinit+0x68>)
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <__sinit+0x6c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	62a2      	str	r2, [r4, #40]	; 0x28
 800481a:	42a3      	cmp	r3, r4
 800481c:	bf04      	itt	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	61a3      	streq	r3, [r4, #24]
 8004822:	4620      	mov	r0, r4
 8004824:	f000 f820 	bl	8004868 <__sfp>
 8004828:	6060      	str	r0, [r4, #4]
 800482a:	4620      	mov	r0, r4
 800482c:	f000 f81c 	bl	8004868 <__sfp>
 8004830:	60a0      	str	r0, [r4, #8]
 8004832:	4620      	mov	r0, r4
 8004834:	f000 f818 	bl	8004868 <__sfp>
 8004838:	2200      	movs	r2, #0
 800483a:	60e0      	str	r0, [r4, #12]
 800483c:	2104      	movs	r1, #4
 800483e:	6860      	ldr	r0, [r4, #4]
 8004840:	f7ff ff82 	bl	8004748 <std>
 8004844:	68a0      	ldr	r0, [r4, #8]
 8004846:	2201      	movs	r2, #1
 8004848:	2109      	movs	r1, #9
 800484a:	f7ff ff7d 	bl	8004748 <std>
 800484e:	68e0      	ldr	r0, [r4, #12]
 8004850:	2202      	movs	r2, #2
 8004852:	2112      	movs	r1, #18
 8004854:	f7ff ff78 	bl	8004748 <std>
 8004858:	2301      	movs	r3, #1
 800485a:	61a3      	str	r3, [r4, #24]
 800485c:	e7d2      	b.n	8004804 <__sinit+0xc>
 800485e:	bf00      	nop
 8004860:	08004df8 	.word	0x08004df8
 8004864:	08004791 	.word	0x08004791

08004868 <__sfp>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	4607      	mov	r7, r0
 800486c:	f7ff ffac 	bl	80047c8 <__sfp_lock_acquire>
 8004870:	4b1e      	ldr	r3, [pc, #120]	; (80048ec <__sfp+0x84>)
 8004872:	681e      	ldr	r6, [r3, #0]
 8004874:	69b3      	ldr	r3, [r6, #24]
 8004876:	b913      	cbnz	r3, 800487e <__sfp+0x16>
 8004878:	4630      	mov	r0, r6
 800487a:	f7ff ffbd 	bl	80047f8 <__sinit>
 800487e:	3648      	adds	r6, #72	; 0x48
 8004880:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004884:	3b01      	subs	r3, #1
 8004886:	d503      	bpl.n	8004890 <__sfp+0x28>
 8004888:	6833      	ldr	r3, [r6, #0]
 800488a:	b30b      	cbz	r3, 80048d0 <__sfp+0x68>
 800488c:	6836      	ldr	r6, [r6, #0]
 800488e:	e7f7      	b.n	8004880 <__sfp+0x18>
 8004890:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004894:	b9d5      	cbnz	r5, 80048cc <__sfp+0x64>
 8004896:	4b16      	ldr	r3, [pc, #88]	; (80048f0 <__sfp+0x88>)
 8004898:	60e3      	str	r3, [r4, #12]
 800489a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800489e:	6665      	str	r5, [r4, #100]	; 0x64
 80048a0:	f000 f847 	bl	8004932 <__retarget_lock_init_recursive>
 80048a4:	f7ff ff96 	bl	80047d4 <__sfp_lock_release>
 80048a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048b0:	6025      	str	r5, [r4, #0]
 80048b2:	61a5      	str	r5, [r4, #24]
 80048b4:	2208      	movs	r2, #8
 80048b6:	4629      	mov	r1, r5
 80048b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048bc:	f7ff fd44 	bl	8004348 <memset>
 80048c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048c8:	4620      	mov	r0, r4
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048cc:	3468      	adds	r4, #104	; 0x68
 80048ce:	e7d9      	b.n	8004884 <__sfp+0x1c>
 80048d0:	2104      	movs	r1, #4
 80048d2:	4638      	mov	r0, r7
 80048d4:	f7ff ff62 	bl	800479c <__sfmoreglue>
 80048d8:	4604      	mov	r4, r0
 80048da:	6030      	str	r0, [r6, #0]
 80048dc:	2800      	cmp	r0, #0
 80048de:	d1d5      	bne.n	800488c <__sfp+0x24>
 80048e0:	f7ff ff78 	bl	80047d4 <__sfp_lock_release>
 80048e4:	230c      	movs	r3, #12
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	e7ee      	b.n	80048c8 <__sfp+0x60>
 80048ea:	bf00      	nop
 80048ec:	08004df8 	.word	0x08004df8
 80048f0:	ffff0001 	.word	0xffff0001

080048f4 <_fwalk_reent>:
 80048f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f8:	4606      	mov	r6, r0
 80048fa:	4688      	mov	r8, r1
 80048fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004900:	2700      	movs	r7, #0
 8004902:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004906:	f1b9 0901 	subs.w	r9, r9, #1
 800490a:	d505      	bpl.n	8004918 <_fwalk_reent+0x24>
 800490c:	6824      	ldr	r4, [r4, #0]
 800490e:	2c00      	cmp	r4, #0
 8004910:	d1f7      	bne.n	8004902 <_fwalk_reent+0xe>
 8004912:	4638      	mov	r0, r7
 8004914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004918:	89ab      	ldrh	r3, [r5, #12]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d907      	bls.n	800492e <_fwalk_reent+0x3a>
 800491e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004922:	3301      	adds	r3, #1
 8004924:	d003      	beq.n	800492e <_fwalk_reent+0x3a>
 8004926:	4629      	mov	r1, r5
 8004928:	4630      	mov	r0, r6
 800492a:	47c0      	blx	r8
 800492c:	4307      	orrs	r7, r0
 800492e:	3568      	adds	r5, #104	; 0x68
 8004930:	e7e9      	b.n	8004906 <_fwalk_reent+0x12>

08004932 <__retarget_lock_init_recursive>:
 8004932:	4770      	bx	lr

08004934 <__retarget_lock_acquire_recursive>:
 8004934:	4770      	bx	lr

08004936 <__retarget_lock_release_recursive>:
 8004936:	4770      	bx	lr

08004938 <__swhatbuf_r>:
 8004938:	b570      	push	{r4, r5, r6, lr}
 800493a:	460e      	mov	r6, r1
 800493c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004940:	2900      	cmp	r1, #0
 8004942:	b096      	sub	sp, #88	; 0x58
 8004944:	4614      	mov	r4, r2
 8004946:	461d      	mov	r5, r3
 8004948:	da08      	bge.n	800495c <__swhatbuf_r+0x24>
 800494a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	061a      	lsls	r2, r3, #24
 8004954:	d410      	bmi.n	8004978 <__swhatbuf_r+0x40>
 8004956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800495a:	e00e      	b.n	800497a <__swhatbuf_r+0x42>
 800495c:	466a      	mov	r2, sp
 800495e:	f000 f9a7 	bl	8004cb0 <_fstat_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	dbf1      	blt.n	800494a <__swhatbuf_r+0x12>
 8004966:	9a01      	ldr	r2, [sp, #4]
 8004968:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800496c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004970:	425a      	negs	r2, r3
 8004972:	415a      	adcs	r2, r3
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	e7ee      	b.n	8004956 <__swhatbuf_r+0x1e>
 8004978:	2340      	movs	r3, #64	; 0x40
 800497a:	2000      	movs	r0, #0
 800497c:	6023      	str	r3, [r4, #0]
 800497e:	b016      	add	sp, #88	; 0x58
 8004980:	bd70      	pop	{r4, r5, r6, pc}
	...

08004984 <__smakebuf_r>:
 8004984:	898b      	ldrh	r3, [r1, #12]
 8004986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004988:	079d      	lsls	r5, r3, #30
 800498a:	4606      	mov	r6, r0
 800498c:	460c      	mov	r4, r1
 800498e:	d507      	bpl.n	80049a0 <__smakebuf_r+0x1c>
 8004990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004994:	6023      	str	r3, [r4, #0]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2301      	movs	r3, #1
 800499a:	6163      	str	r3, [r4, #20]
 800499c:	b002      	add	sp, #8
 800499e:	bd70      	pop	{r4, r5, r6, pc}
 80049a0:	ab01      	add	r3, sp, #4
 80049a2:	466a      	mov	r2, sp
 80049a4:	f7ff ffc8 	bl	8004938 <__swhatbuf_r>
 80049a8:	9900      	ldr	r1, [sp, #0]
 80049aa:	4605      	mov	r5, r0
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f895 	bl	8004adc <_malloc_r>
 80049b2:	b948      	cbnz	r0, 80049c8 <__smakebuf_r+0x44>
 80049b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b8:	059a      	lsls	r2, r3, #22
 80049ba:	d4ef      	bmi.n	800499c <__smakebuf_r+0x18>
 80049bc:	f023 0303 	bic.w	r3, r3, #3
 80049c0:	f043 0302 	orr.w	r3, r3, #2
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	e7e3      	b.n	8004990 <__smakebuf_r+0xc>
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <__smakebuf_r+0x7c>)
 80049ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	9b00      	ldr	r3, [sp, #0]
 80049d8:	6163      	str	r3, [r4, #20]
 80049da:	9b01      	ldr	r3, [sp, #4]
 80049dc:	6120      	str	r0, [r4, #16]
 80049de:	b15b      	cbz	r3, 80049f8 <__smakebuf_r+0x74>
 80049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e4:	4630      	mov	r0, r6
 80049e6:	f000 f975 	bl	8004cd4 <_isatty_r>
 80049ea:	b128      	cbz	r0, 80049f8 <__smakebuf_r+0x74>
 80049ec:	89a3      	ldrh	r3, [r4, #12]
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	f043 0301 	orr.w	r3, r3, #1
 80049f6:	81a3      	strh	r3, [r4, #12]
 80049f8:	89a0      	ldrh	r0, [r4, #12]
 80049fa:	4305      	orrs	r5, r0
 80049fc:	81a5      	strh	r5, [r4, #12]
 80049fe:	e7cd      	b.n	800499c <__smakebuf_r+0x18>
 8004a00:	08004791 	.word	0x08004791

08004a04 <_free_r>:
 8004a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a06:	2900      	cmp	r1, #0
 8004a08:	d044      	beq.n	8004a94 <_free_r+0x90>
 8004a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0e:	9001      	str	r0, [sp, #4]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f1a1 0404 	sub.w	r4, r1, #4
 8004a16:	bfb8      	it	lt
 8004a18:	18e4      	addlt	r4, r4, r3
 8004a1a:	f000 f97d 	bl	8004d18 <__malloc_lock>
 8004a1e:	4a1e      	ldr	r2, [pc, #120]	; (8004a98 <_free_r+0x94>)
 8004a20:	9801      	ldr	r0, [sp, #4]
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	b933      	cbnz	r3, 8004a34 <_free_r+0x30>
 8004a26:	6063      	str	r3, [r4, #4]
 8004a28:	6014      	str	r4, [r2, #0]
 8004a2a:	b003      	add	sp, #12
 8004a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a30:	f000 b978 	b.w	8004d24 <__malloc_unlock>
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	d908      	bls.n	8004a4a <_free_r+0x46>
 8004a38:	6825      	ldr	r5, [r4, #0]
 8004a3a:	1961      	adds	r1, r4, r5
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	bf01      	itttt	eq
 8004a40:	6819      	ldreq	r1, [r3, #0]
 8004a42:	685b      	ldreq	r3, [r3, #4]
 8004a44:	1949      	addeq	r1, r1, r5
 8004a46:	6021      	streq	r1, [r4, #0]
 8004a48:	e7ed      	b.n	8004a26 <_free_r+0x22>
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	b10b      	cbz	r3, 8004a54 <_free_r+0x50>
 8004a50:	42a3      	cmp	r3, r4
 8004a52:	d9fa      	bls.n	8004a4a <_free_r+0x46>
 8004a54:	6811      	ldr	r1, [r2, #0]
 8004a56:	1855      	adds	r5, r2, r1
 8004a58:	42a5      	cmp	r5, r4
 8004a5a:	d10b      	bne.n	8004a74 <_free_r+0x70>
 8004a5c:	6824      	ldr	r4, [r4, #0]
 8004a5e:	4421      	add	r1, r4
 8004a60:	1854      	adds	r4, r2, r1
 8004a62:	42a3      	cmp	r3, r4
 8004a64:	6011      	str	r1, [r2, #0]
 8004a66:	d1e0      	bne.n	8004a2a <_free_r+0x26>
 8004a68:	681c      	ldr	r4, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	6053      	str	r3, [r2, #4]
 8004a6e:	4421      	add	r1, r4
 8004a70:	6011      	str	r1, [r2, #0]
 8004a72:	e7da      	b.n	8004a2a <_free_r+0x26>
 8004a74:	d902      	bls.n	8004a7c <_free_r+0x78>
 8004a76:	230c      	movs	r3, #12
 8004a78:	6003      	str	r3, [r0, #0]
 8004a7a:	e7d6      	b.n	8004a2a <_free_r+0x26>
 8004a7c:	6825      	ldr	r5, [r4, #0]
 8004a7e:	1961      	adds	r1, r4, r5
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf04      	itt	eq
 8004a84:	6819      	ldreq	r1, [r3, #0]
 8004a86:	685b      	ldreq	r3, [r3, #4]
 8004a88:	6063      	str	r3, [r4, #4]
 8004a8a:	bf04      	itt	eq
 8004a8c:	1949      	addeq	r1, r1, r5
 8004a8e:	6021      	streq	r1, [r4, #0]
 8004a90:	6054      	str	r4, [r2, #4]
 8004a92:	e7ca      	b.n	8004a2a <_free_r+0x26>
 8004a94:	b003      	add	sp, #12
 8004a96:	bd30      	pop	{r4, r5, pc}
 8004a98:	20012e88 	.word	0x20012e88

08004a9c <sbrk_aligned>:
 8004a9c:	b570      	push	{r4, r5, r6, lr}
 8004a9e:	4e0e      	ldr	r6, [pc, #56]	; (8004ad8 <sbrk_aligned+0x3c>)
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	6831      	ldr	r1, [r6, #0]
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	b911      	cbnz	r1, 8004aae <sbrk_aligned+0x12>
 8004aa8:	f000 f88c 	bl	8004bc4 <_sbrk_r>
 8004aac:	6030      	str	r0, [r6, #0]
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	f000 f887 	bl	8004bc4 <_sbrk_r>
 8004ab6:	1c43      	adds	r3, r0, #1
 8004ab8:	d00a      	beq.n	8004ad0 <sbrk_aligned+0x34>
 8004aba:	1cc4      	adds	r4, r0, #3
 8004abc:	f024 0403 	bic.w	r4, r4, #3
 8004ac0:	42a0      	cmp	r0, r4
 8004ac2:	d007      	beq.n	8004ad4 <sbrk_aligned+0x38>
 8004ac4:	1a21      	subs	r1, r4, r0
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f000 f87c 	bl	8004bc4 <_sbrk_r>
 8004acc:	3001      	adds	r0, #1
 8004ace:	d101      	bne.n	8004ad4 <sbrk_aligned+0x38>
 8004ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	20012e8c 	.word	0x20012e8c

08004adc <_malloc_r>:
 8004adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae0:	1ccd      	adds	r5, r1, #3
 8004ae2:	f025 0503 	bic.w	r5, r5, #3
 8004ae6:	3508      	adds	r5, #8
 8004ae8:	2d0c      	cmp	r5, #12
 8004aea:	bf38      	it	cc
 8004aec:	250c      	movcc	r5, #12
 8004aee:	2d00      	cmp	r5, #0
 8004af0:	4607      	mov	r7, r0
 8004af2:	db01      	blt.n	8004af8 <_malloc_r+0x1c>
 8004af4:	42a9      	cmp	r1, r5
 8004af6:	d905      	bls.n	8004b04 <_malloc_r+0x28>
 8004af8:	230c      	movs	r3, #12
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	2600      	movs	r6, #0
 8004afe:	4630      	mov	r0, r6
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b04:	4e2e      	ldr	r6, [pc, #184]	; (8004bc0 <_malloc_r+0xe4>)
 8004b06:	f000 f907 	bl	8004d18 <__malloc_lock>
 8004b0a:	6833      	ldr	r3, [r6, #0]
 8004b0c:	461c      	mov	r4, r3
 8004b0e:	bb34      	cbnz	r4, 8004b5e <_malloc_r+0x82>
 8004b10:	4629      	mov	r1, r5
 8004b12:	4638      	mov	r0, r7
 8004b14:	f7ff ffc2 	bl	8004a9c <sbrk_aligned>
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	d14d      	bne.n	8004bba <_malloc_r+0xde>
 8004b1e:	6834      	ldr	r4, [r6, #0]
 8004b20:	4626      	mov	r6, r4
 8004b22:	2e00      	cmp	r6, #0
 8004b24:	d140      	bne.n	8004ba8 <_malloc_r+0xcc>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	eb04 0803 	add.w	r8, r4, r3
 8004b30:	f000 f848 	bl	8004bc4 <_sbrk_r>
 8004b34:	4580      	cmp	r8, r0
 8004b36:	d13a      	bne.n	8004bae <_malloc_r+0xd2>
 8004b38:	6821      	ldr	r1, [r4, #0]
 8004b3a:	3503      	adds	r5, #3
 8004b3c:	1a6d      	subs	r5, r5, r1
 8004b3e:	f025 0503 	bic.w	r5, r5, #3
 8004b42:	3508      	adds	r5, #8
 8004b44:	2d0c      	cmp	r5, #12
 8004b46:	bf38      	it	cc
 8004b48:	250c      	movcc	r5, #12
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7ff ffa5 	bl	8004a9c <sbrk_aligned>
 8004b52:	3001      	adds	r0, #1
 8004b54:	d02b      	beq.n	8004bae <_malloc_r+0xd2>
 8004b56:	6823      	ldr	r3, [r4, #0]
 8004b58:	442b      	add	r3, r5
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e00e      	b.n	8004b7c <_malloc_r+0xa0>
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	1b52      	subs	r2, r2, r5
 8004b62:	d41e      	bmi.n	8004ba2 <_malloc_r+0xc6>
 8004b64:	2a0b      	cmp	r2, #11
 8004b66:	d916      	bls.n	8004b96 <_malloc_r+0xba>
 8004b68:	1961      	adds	r1, r4, r5
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	6025      	str	r5, [r4, #0]
 8004b6e:	bf18      	it	ne
 8004b70:	6059      	strne	r1, [r3, #4]
 8004b72:	6863      	ldr	r3, [r4, #4]
 8004b74:	bf08      	it	eq
 8004b76:	6031      	streq	r1, [r6, #0]
 8004b78:	5162      	str	r2, [r4, r5]
 8004b7a:	604b      	str	r3, [r1, #4]
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	f104 060b 	add.w	r6, r4, #11
 8004b82:	f000 f8cf 	bl	8004d24 <__malloc_unlock>
 8004b86:	f026 0607 	bic.w	r6, r6, #7
 8004b8a:	1d23      	adds	r3, r4, #4
 8004b8c:	1af2      	subs	r2, r6, r3
 8004b8e:	d0b6      	beq.n	8004afe <_malloc_r+0x22>
 8004b90:	1b9b      	subs	r3, r3, r6
 8004b92:	50a3      	str	r3, [r4, r2]
 8004b94:	e7b3      	b.n	8004afe <_malloc_r+0x22>
 8004b96:	6862      	ldr	r2, [r4, #4]
 8004b98:	42a3      	cmp	r3, r4
 8004b9a:	bf0c      	ite	eq
 8004b9c:	6032      	streq	r2, [r6, #0]
 8004b9e:	605a      	strne	r2, [r3, #4]
 8004ba0:	e7ec      	b.n	8004b7c <_malloc_r+0xa0>
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	6864      	ldr	r4, [r4, #4]
 8004ba6:	e7b2      	b.n	8004b0e <_malloc_r+0x32>
 8004ba8:	4634      	mov	r4, r6
 8004baa:	6876      	ldr	r6, [r6, #4]
 8004bac:	e7b9      	b.n	8004b22 <_malloc_r+0x46>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	f000 f8b6 	bl	8004d24 <__malloc_unlock>
 8004bb8:	e7a1      	b.n	8004afe <_malloc_r+0x22>
 8004bba:	6025      	str	r5, [r4, #0]
 8004bbc:	e7de      	b.n	8004b7c <_malloc_r+0xa0>
 8004bbe:	bf00      	nop
 8004bc0:	20012e88 	.word	0x20012e88

08004bc4 <_sbrk_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4d06      	ldr	r5, [pc, #24]	; (8004be0 <_sbrk_r+0x1c>)
 8004bc8:	2300      	movs	r3, #0
 8004bca:	4604      	mov	r4, r0
 8004bcc:	4608      	mov	r0, r1
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	f000 f8c0 	bl	8004d54 <_sbrk>
 8004bd4:	1c43      	adds	r3, r0, #1
 8004bd6:	d102      	bne.n	8004bde <_sbrk_r+0x1a>
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	b103      	cbz	r3, 8004bde <_sbrk_r+0x1a>
 8004bdc:	6023      	str	r3, [r4, #0]
 8004bde:	bd38      	pop	{r3, r4, r5, pc}
 8004be0:	20012e90 	.word	0x20012e90

08004be4 <__sread>:
 8004be4:	b510      	push	{r4, lr}
 8004be6:	460c      	mov	r4, r1
 8004be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bec:	f000 f8a0 	bl	8004d30 <_read_r>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	bfab      	itete	ge
 8004bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8004bf8:	181b      	addge	r3, r3, r0
 8004bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bfe:	bfac      	ite	ge
 8004c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c02:	81a3      	strhlt	r3, [r4, #12]
 8004c04:	bd10      	pop	{r4, pc}

08004c06 <__swrite>:
 8004c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	898b      	ldrh	r3, [r1, #12]
 8004c0e:	05db      	lsls	r3, r3, #23
 8004c10:	4605      	mov	r5, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	4616      	mov	r6, r2
 8004c16:	d505      	bpl.n	8004c24 <__swrite+0x1e>
 8004c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f000 f868 	bl	8004cf4 <_lseek_r>
 8004c24:	89a3      	ldrh	r3, [r4, #12]
 8004c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c2e:	81a3      	strh	r3, [r4, #12]
 8004c30:	4632      	mov	r2, r6
 8004c32:	463b      	mov	r3, r7
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3a:	f000 b817 	b.w	8004c6c <_write_r>

08004c3e <__sseek>:
 8004c3e:	b510      	push	{r4, lr}
 8004c40:	460c      	mov	r4, r1
 8004c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c46:	f000 f855 	bl	8004cf4 <_lseek_r>
 8004c4a:	1c43      	adds	r3, r0, #1
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	bf15      	itete	ne
 8004c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c5a:	81a3      	strheq	r3, [r4, #12]
 8004c5c:	bf18      	it	ne
 8004c5e:	81a3      	strhne	r3, [r4, #12]
 8004c60:	bd10      	pop	{r4, pc}

08004c62 <__sclose>:
 8004c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c66:	f000 b813 	b.w	8004c90 <_close_r>
	...

08004c6c <_write_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4d07      	ldr	r5, [pc, #28]	; (8004c8c <_write_r+0x20>)
 8004c70:	4604      	mov	r4, r0
 8004c72:	4608      	mov	r0, r1
 8004c74:	4611      	mov	r1, r2
 8004c76:	2200      	movs	r2, #0
 8004c78:	602a      	str	r2, [r5, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f7fb ff83 	bl	8000b86 <_write>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_write_r+0x1e>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_write_r+0x1e>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	20012e90 	.word	0x20012e90

08004c90 <_close_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4d06      	ldr	r5, [pc, #24]	; (8004cac <_close_r+0x1c>)
 8004c94:	2300      	movs	r3, #0
 8004c96:	4604      	mov	r4, r0
 8004c98:	4608      	mov	r0, r1
 8004c9a:	602b      	str	r3, [r5, #0]
 8004c9c:	f7fb ff8f 	bl	8000bbe <_close>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_close_r+0x1a>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_close_r+0x1a>
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	20012e90 	.word	0x20012e90

08004cb0 <_fstat_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4d07      	ldr	r5, [pc, #28]	; (8004cd0 <_fstat_r+0x20>)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	4608      	mov	r0, r1
 8004cba:	4611      	mov	r1, r2
 8004cbc:	602b      	str	r3, [r5, #0]
 8004cbe:	f7fb ff8a 	bl	8000bd6 <_fstat>
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	d102      	bne.n	8004ccc <_fstat_r+0x1c>
 8004cc6:	682b      	ldr	r3, [r5, #0]
 8004cc8:	b103      	cbz	r3, 8004ccc <_fstat_r+0x1c>
 8004cca:	6023      	str	r3, [r4, #0]
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
 8004cce:	bf00      	nop
 8004cd0:	20012e90 	.word	0x20012e90

08004cd4 <_isatty_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4d06      	ldr	r5, [pc, #24]	; (8004cf0 <_isatty_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	f7fb ff89 	bl	8000bf6 <_isatty>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_isatty_r+0x1a>
 8004ce8:	682b      	ldr	r3, [r5, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_isatty_r+0x1a>
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	20012e90 	.word	0x20012e90

08004cf4 <_lseek_r>:
 8004cf4:	b538      	push	{r3, r4, r5, lr}
 8004cf6:	4d07      	ldr	r5, [pc, #28]	; (8004d14 <_lseek_r+0x20>)
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	4608      	mov	r0, r1
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	602a      	str	r2, [r5, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	f7fb ff82 	bl	8000c0c <_lseek>
 8004d08:	1c43      	adds	r3, r0, #1
 8004d0a:	d102      	bne.n	8004d12 <_lseek_r+0x1e>
 8004d0c:	682b      	ldr	r3, [r5, #0]
 8004d0e:	b103      	cbz	r3, 8004d12 <_lseek_r+0x1e>
 8004d10:	6023      	str	r3, [r4, #0]
 8004d12:	bd38      	pop	{r3, r4, r5, pc}
 8004d14:	20012e90 	.word	0x20012e90

08004d18 <__malloc_lock>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__malloc_lock+0x8>)
 8004d1a:	f7ff be0b 	b.w	8004934 <__retarget_lock_acquire_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20012e84 	.word	0x20012e84

08004d24 <__malloc_unlock>:
 8004d24:	4801      	ldr	r0, [pc, #4]	; (8004d2c <__malloc_unlock+0x8>)
 8004d26:	f7ff be06 	b.w	8004936 <__retarget_lock_release_recursive>
 8004d2a:	bf00      	nop
 8004d2c:	20012e84 	.word	0x20012e84

08004d30 <_read_r>:
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	4d07      	ldr	r5, [pc, #28]	; (8004d50 <_read_r+0x20>)
 8004d34:	4604      	mov	r4, r0
 8004d36:	4608      	mov	r0, r1
 8004d38:	4611      	mov	r1, r2
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f7fb ff04 	bl	8000b4c <_read>
 8004d44:	1c43      	adds	r3, r0, #1
 8004d46:	d102      	bne.n	8004d4e <_read_r+0x1e>
 8004d48:	682b      	ldr	r3, [r5, #0]
 8004d4a:	b103      	cbz	r3, 8004d4e <_read_r+0x1e>
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
 8004d50:	20012e90 	.word	0x20012e90

08004d54 <_sbrk>:
 8004d54:	4a04      	ldr	r2, [pc, #16]	; (8004d68 <_sbrk+0x14>)
 8004d56:	6811      	ldr	r1, [r2, #0]
 8004d58:	4603      	mov	r3, r0
 8004d5a:	b909      	cbnz	r1, 8004d60 <_sbrk+0xc>
 8004d5c:	4903      	ldr	r1, [pc, #12]	; (8004d6c <_sbrk+0x18>)
 8004d5e:	6011      	str	r1, [r2, #0]
 8004d60:	6810      	ldr	r0, [r2, #0]
 8004d62:	4403      	add	r3, r0
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4770      	bx	lr
 8004d68:	20012e94 	.word	0x20012e94
 8004d6c:	20012e98 	.word	0x20012e98

08004d70 <_init>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr

08004d7c <_fini>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	bf00      	nop
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr
