
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e88  08007e88  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e90  08007e90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00014498  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014510  20014510  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015da3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030fc  00000000  00000000  00035e4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  00038f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001290  00000000  00000000  0003a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244b5  00000000  00000000  0003b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e3f  00000000  00000000  0005fab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9be5  00000000  00000000  000758f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014f4d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c80  00000000  00000000  0014f52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c6c 	.word	0x08007c6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007c6c 	.word	0x08007c6c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f28 	.word	0x20012f28
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fbc3 	bl	8000da4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f851 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8b9 	bl	8000798 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000632:	f004 f84d 	bl	80046d0 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000636:	f005 fcc3 	bl	8005fc0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x98>)
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	4919      	ldr	r1, [pc, #100]	; (80006b0 <main+0x9c>)
 800064a:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	f002 f990 	bl	8002970 <xTaskCreate>
 8000650:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00a      	beq.n	800066e <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065c:	f383 8811 	msr	BASEPRI, r3
 8000660:	f3bf 8f6f 	isb	sy
 8000664:	f3bf 8f4f 	dsb	sy
 8000668:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066a:	bf00      	nop
 800066c:	e7fe      	b.n	800066c <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	9301      	str	r3, [sp, #4]
 8000672:	2302      	movs	r3, #2
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	4b10      	ldr	r3, [pc, #64]	; (80006b8 <main+0xa4>)
 8000678:	22c8      	movs	r2, #200	; 0xc8
 800067a:	4910      	ldr	r1, [pc, #64]	; (80006bc <main+0xa8>)
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	f002 f977 	bl	8002970 <xTaskCreate>
 8000682:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d00a      	beq.n	80006a0 <main+0x8c>
        __asm volatile
 800068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068e:	f383 8811 	msr	BASEPRI, r3
 8000692:	f3bf 8f6f 	isb	sy
 8000696:	f3bf 8f4f 	dsb	sy
 800069a:	60fb      	str	r3, [r7, #12]
    }
 800069c:	bf00      	nop
 800069e:	e7fe      	b.n	800069e <main+0x8a>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a0:	f002 fae0 	bl	8002c64 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <main+0x90>
 80006a6:	bf00      	nop
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	08007c84 	.word	0x08007c84
 80006b0:	08007c9c 	.word	0x08007c9c
 80006b4:	08000a55 	.word	0x08000a55
 80006b8:	08007ca4 	.word	0x08007ca4
 80006bc:	08007cbc 	.word	0x08007cbc
 80006c0:	08000a91 	.word	0x08000a91

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	; 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 fa52 	bl	8006b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	; (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000738:	2332      	movs	r3, #50	; 0x32
 800073a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000740:	2307      	movs	r3, #7
 8000742:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fe05 	bl	8001358 <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9ce 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f866 	bl	8001848 <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9b7 	bl	8000af4 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	; 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	; 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4ba2      	ldr	r3, [pc, #648]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4aa1      	ldr	r2, [pc, #644]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b9f      	ldr	r3, [pc, #636]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b9b      	ldr	r3, [pc, #620]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a9a      	ldr	r2, [pc, #616]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b98      	ldr	r3, [pc, #608]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b94      	ldr	r3, [pc, #592]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a93      	ldr	r2, [pc, #588]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b91      	ldr	r3, [pc, #580]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b8d      	ldr	r3, [pc, #564]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a8c      	ldr	r2, [pc, #560]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b8a      	ldr	r3, [pc, #552]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b86      	ldr	r3, [pc, #536]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a85      	ldr	r2, [pc, #532]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b83      	ldr	r3, [pc, #524]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b7f      	ldr	r3, [pc, #508]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a7e      	ldr	r2, [pc, #504]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b7c      	ldr	r3, [pc, #496]	; (8000a3c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4879      	ldr	r0, [pc, #484]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800085c:	f000 fd62 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4877      	ldr	r0, [pc, #476]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fd5d 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000870:	4875      	ldr	r0, [pc, #468]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 8000872:	f000 fd57 	bl	8001324 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000876:	2308      	movs	r3, #8
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	486c      	ldr	r0, [pc, #432]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 800088e:	f000 fbad 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4866      	ldr	r0, [pc, #408]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008aa:	f000 fb9f 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ae:	2308      	movs	r3, #8
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008be:	2305      	movs	r3, #5
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 80008ca:	f000 fb8f 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	485a      	ldr	r0, [pc, #360]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80008e4:	f000 fb82 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e8:	2310      	movs	r3, #16
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f8:	2306      	movs	r3, #6
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4852      	ldr	r0, [pc, #328]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000904:	f000 fb72 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000908:	23e0      	movs	r3, #224	; 0xe0
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000914:	2300      	movs	r3, #0
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000918:	2305      	movs	r3, #5
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	484a      	ldr	r0, [pc, #296]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 8000924:	f000 fb62 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000928:	2304      	movs	r3, #4
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	4845      	ldr	r0, [pc, #276]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800093c:	f000 fb56 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000952:	2305      	movs	r3, #5
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	483c      	ldr	r0, [pc, #240]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 800095e:	f000 fb45 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000962:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000966:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4833      	ldr	r0, [pc, #204]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 800097c:	f000 fb36 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000980:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000992:	2306      	movs	r3, #6
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <MX_GPIO_Init+0x2ac>)
 800099e:	f000 fb25 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4825      	ldr	r0, [pc, #148]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009b8:	f000 fb18 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ce:	230a      	movs	r3, #10
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	481c      	ldr	r0, [pc, #112]	; (8000a4c <MX_GPIO_Init+0x2b4>)
 80009da:	f000 fb07 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <MX_GPIO_Init+0x2b0>)
 80009f2:	f000 fafb 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	480f      	ldr	r0, [pc, #60]	; (8000a50 <MX_GPIO_Init+0x2b8>)
 8000a14:	f000 faea 	bl	8000fec <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a1c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0x2a8>)
 8000a2e:	f000 fadd 	bl	8000fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <task1_handler+0x34>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f006 f907 	bl	8006c78 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f005 ffc0 	bl	80069f4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <task1_handler+0x38>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a84:	e7ea      	b.n	8000a5c <task1_handler+0x8>
 8000a86:	bf00      	nop
 8000a88:	08007cc4 	.word	0x08007cc4
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <task2_handler>:
	}
}

static void task2_handler(void* parameters) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	; 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <task2_handler+0x38>)
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	f006 f8e9 	bl	8006c78 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f005 ffa2 	bl	80069f4 <SEGGER_SYSVIEW_PrintfTarget>
		printf("%s\n", (char*)parameters);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f006 f8d9 	bl	8006c68 <puts>
		taskYIELD();
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <task2_handler+0x3c>)
 8000ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	f3bf 8f4f 	dsb	sy
 8000ac2:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000ac6:	e7e7      	b.n	8000a98 <task2_handler+0x8>
 8000ac8:	08007cc4 	.word	0x08007cc4
 8000acc:	e000ed04 	.word	0xe000ed04

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 f981 	bl	8000de8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001000 	.word	0x40001000

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b3e:	f003 fa43 	bl	8003fc8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08e      	sub	sp, #56	; 0x38
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <HAL_InitTick+0xe4>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_InitTick+0xe4>)
 8000b6a:	f043 0310 	orr.w	r3, r3, #16
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b30      	ldr	r3, [pc, #192]	; (8000c34 <HAL_InitTick+0xe4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f001 f86a 	bl	8001c60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d103      	bne.n	8000b9e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b96:	f001 f84f 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	6378      	str	r0, [r7, #52]	; 0x34
 8000b9c:	e004      	b.n	8000ba8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b9e:	f001 f84b 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000baa:	4a23      	ldr	r2, [pc, #140]	; (8000c38 <HAL_InitTick+0xe8>)
 8000bac:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb0:	0c9b      	lsrs	r3, r3, #18
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_InitTick+0xec>)
 8000bb8:	4a21      	ldr	r2, [pc, #132]	; (8000c40 <HAL_InitTick+0xf0>)
 8000bba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <HAL_InitTick+0xec>)
 8000bbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <HAL_InitTick+0xec>)
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <HAL_InitTick+0xec>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_InitTick+0xec>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <HAL_InitTick+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <HAL_InitTick+0xec>)
 8000bde:	f001 f871 	bl	8001cc4 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000be8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d11b      	bne.n	8000c28 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bf0:	4812      	ldr	r0, [pc, #72]	; (8000c3c <HAL_InitTick+0xec>)
 8000bf2:	f001 f8c1 	bl	8001d78 <HAL_TIM_Base_Start_IT>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d111      	bne.n	8000c28 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c04:	2036      	movs	r0, #54	; 0x36
 8000c06:	f000 f9e3 	bl	8000fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b0f      	cmp	r3, #15
 8000c0e:	d808      	bhi.n	8000c22 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c10:	2200      	movs	r2, #0
 8000c12:	6879      	ldr	r1, [r7, #4]
 8000c14:	2036      	movs	r0, #54	; 0x36
 8000c16:	f000 f9bf 	bl	8000f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <HAL_InitTick+0xf4>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	e002      	b.n	8000c28 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	431bde83 	.word	0x431bde83
 8000c3c:	20000094 	.word	0x20000094
 8000c40:	40001000 	.word	0x40001000
 8000c44:	20000004 	.word	0x20000004

08000c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <NMI_Handler+0x4>

08000c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5e:	e7fe      	b.n	8000c5e <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c78:	4802      	ldr	r0, [pc, #8]	; (8000c84 <TIM6_DAC_IRQHandler+0x10>)
 8000c7a:	f001 f8ed 	bl	8001e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000094 	.word	0x20000094

08000c88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e00a      	b.n	8000cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9a:	f3af 8000 	nop.w
 8000c9e:	4601      	mov	r1, r0
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	1c5a      	adds	r2, r3, #1
 8000ca4:	60ba      	str	r2, [r7, #8]
 8000ca6:	b2ca      	uxtb	r2, r1
 8000ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf0      	blt.n	8000c9a <_read+0x12>
  }

  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <SystemInit+0x20>)
 8000d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d36:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <SystemInit+0x20>)
 8000d38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480d      	ldr	r0, [pc, #52]	; (8000d8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d56:	490e      	ldr	r1, [pc, #56]	; (8000d90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d6c:	4c0b      	ldr	r4, [pc, #44]	; (8000d9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7a:	f7ff ffd7 	bl	8000d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7e:	f005 febb 	bl	8006af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d82:	f7ff fc47 	bl	8000614 <main>
  bx  lr    
 8000d86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d90:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d94:	08007e98 	.word	0x08007e98
  ldr r2, =_sbss
 8000d98:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000d9c:	20014510 	.word	0x20014510

08000da0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da0:	e7fe      	b.n	8000da0 <ADC_IRQHandler>
	...

08000da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_Init+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_Init+0x40>)
 8000dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_Init+0x40>)
 8000dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_Init+0x40>)
 8000dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dcc:	2003      	movs	r0, #3
 8000dce:	f000 f8d8 	bl	8000f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	f7ff febc 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd8:	f7ff fe92 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023c00 	.word	0x40023c00

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	200000dc 	.word	0x200000dc

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200000dc 	.word	0x200000dc

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff4c 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000faa:	f7ff ff61 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	6978      	ldr	r0, [r7, #20]
 8000fb6:	f7ff ffb1 	bl	8000f1c <NVIC_EncodePriority>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff80 	bl	8000ec8 <__NVIC_SetPriority>
}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ff54 	bl	8000e8c <__NVIC_EnableIRQ>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	e16b      	b.n	80012e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001008:	2201      	movs	r2, #1
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	429a      	cmp	r2, r3
 8001022:	f040 815a 	bne.w	80012da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	2b01      	cmp	r3, #1
 8001030:	d005      	beq.n	800103e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103a:	2b02      	cmp	r3, #2
 800103c:	d130      	bne.n	80010a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001074:	2201      	movs	r2, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	091b      	lsrs	r3, r3, #4
 800108a:	f003 0201 	and.w	r2, r3, #1
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d017      	beq.n	80010dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d123      	bne.n	8001130 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	08da      	lsrs	r2, r3, #3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3208      	adds	r2, #8
 80010f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	220f      	movs	r2, #15
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	691a      	ldr	r2, [r3, #16]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	08da      	lsrs	r2, r3, #3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3208      	adds	r2, #8
 800112a:	69b9      	ldr	r1, [r7, #24]
 800112c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 0203 	and.w	r2, r3, #3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80b4 	beq.w	80012da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b60      	ldr	r3, [pc, #384]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	4a5f      	ldr	r2, [pc, #380]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 800117c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001180:	6453      	str	r3, [r2, #68]	; 0x44
 8001182:	4b5d      	ldr	r3, [pc, #372]	; (80012f8 <HAL_GPIO_Init+0x30c>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118e:	4a5b      	ldr	r2, [pc, #364]	; (80012fc <HAL_GPIO_Init+0x310>)
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	220f      	movs	r2, #15
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a52      	ldr	r2, [pc, #328]	; (8001300 <HAL_GPIO_Init+0x314>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d02b      	beq.n	8001212 <HAL_GPIO_Init+0x226>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a51      	ldr	r2, [pc, #324]	; (8001304 <HAL_GPIO_Init+0x318>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x222>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a50      	ldr	r2, [pc, #320]	; (8001308 <HAL_GPIO_Init+0x31c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x21e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a4f      	ldr	r2, [pc, #316]	; (800130c <HAL_GPIO_Init+0x320>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x21a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a4e      	ldr	r2, [pc, #312]	; (8001310 <HAL_GPIO_Init+0x324>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x216>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4d      	ldr	r2, [pc, #308]	; (8001314 <HAL_GPIO_Init+0x328>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x212>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	; (8001318 <HAL_GPIO_Init+0x32c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x20e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4b      	ldr	r2, [pc, #300]	; (800131c <HAL_GPIO_Init+0x330>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x20a>
 80011f2:	2307      	movs	r3, #7
 80011f4:	e00e      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011f6:	2308      	movs	r3, #8
 80011f8:	e00c      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011fa:	2306      	movs	r3, #6
 80011fc:	e00a      	b.n	8001214 <HAL_GPIO_Init+0x228>
 80011fe:	2305      	movs	r3, #5
 8001200:	e008      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001202:	2304      	movs	r3, #4
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001206:	2303      	movs	r3, #3
 8001208:	e004      	b.n	8001214 <HAL_GPIO_Init+0x228>
 800120a:	2302      	movs	r3, #2
 800120c:	e002      	b.n	8001214 <HAL_GPIO_Init+0x228>
 800120e:	2301      	movs	r3, #1
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x228>
 8001212:	2300      	movs	r3, #0
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	f002 0203 	and.w	r2, r2, #3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4093      	lsls	r3, r2
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001224:	4935      	ldr	r1, [pc, #212]	; (80012fc <HAL_GPIO_Init+0x310>)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a32      	ldr	r2, [pc, #200]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b30      	ldr	r3, [pc, #192]	; (8001320 <HAL_GPIO_Init+0x334>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a27      	ldr	r2, [pc, #156]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001286:	4b26      	ldr	r3, [pc, #152]	; (8001320 <HAL_GPIO_Init+0x334>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	43db      	mvns	r3, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012aa:	4a1d      	ldr	r2, [pc, #116]	; (8001320 <HAL_GPIO_Init+0x334>)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <HAL_GPIO_Init+0x334>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <HAL_GPIO_Init+0x334>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3301      	adds	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	f67f ae90 	bls.w	8001008 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3724      	adds	r7, #36	; 0x24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40013800 	.word	0x40013800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400
 8001308:	40020800 	.word	0x40020800
 800130c:	40020c00 	.word	0x40020c00
 8001310:	40021000 	.word	0x40021000
 8001314:	40021400 	.word	0x40021400
 8001318:	40021800 	.word	0x40021800
 800131c:	40021c00 	.word	0x40021c00
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e267      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d075      	beq.n	8001462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b85      	ldr	r3, [pc, #532]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139a:	d10b      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d05b      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d157      	bne.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e242      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x74>
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a75      	ldr	r2, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6f      	ldr	r2, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6c      	ldr	r2, [pc, #432]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a68      	ldr	r2, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b66      	ldr	r3, [pc, #408]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a65      	ldr	r2, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fcfe 	bl	8000e10 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fcfa 	bl	8000e10 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e207      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xc0>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fcea 	bl	8000e10 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fce6 	bl	8000e10 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1f3      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146e:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c7      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4937      	ldr	r1, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc9f 	bl	8000e10 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc9b 	bl	8000e10 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a8      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4925      	ldr	r1, [pc, #148]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fc7e 	bl	8000e10 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fc7a 	bl	8000e10 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e187      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d036      	beq.n	80015b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_RCC_OscConfig+0x248>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fc5e 	bl	8000e10 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fc5a 	bl	8000e10 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e167      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x200>
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x248>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fc47 	bl	8000e10 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	e00e      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fc43 	bl	8000e10 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d907      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e150      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	42470000 	.word	0x42470000
 80015a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ea      	bne.n	8001586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8097 	beq.w	80016ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a7c      	ldr	r2, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b77      	ldr	r3, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a73      	ldr	r2, [pc, #460]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fc03 	bl	8000e10 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fbff 	bl	8000e10 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e10c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x2ea>
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x30c>
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a5e      	ldr	r2, [pc, #376]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a5b      	ldr	r2, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fbc4 	bl	8000e10 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fbc0 	bl	8000e10 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0cb      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <HAL_RCC_OscConfig+0x334>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fbae 	bl	8000e10 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fbaa 	bl	8000e10 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0b5      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ee      	bne.n	80016b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a1 	beq.w	8001838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d05c      	beq.n	80017bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d141      	bne.n	800178e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb7e 	bl	8000e10 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fb7a 	bl	8000e10 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e087      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	491b      	ldr	r1, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fb53 	bl	8000e10 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fb4f 	bl	8000e10 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e05c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x416>
 800178c:	e054      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb3c 	bl	8000e10 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fb38 	bl	8000e10 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e045      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e038      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d121      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800180a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff fa6a 	bl	8000e10 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff fa66 	bl	8000e10 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f821 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f8ae 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08007da0 	.word	0x08007da0
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b094      	sub	sp, #80	; 0x50
 8001a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a20:	2300      	movs	r3, #0
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2c:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d00d      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x40>
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	f200 80e1 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x34>
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a46:	e0db      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a4c:	e0db      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a52:	e0d8      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
 8001a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a86:	4622      	mov	r2, r4
 8001a88:	462b      	mov	r3, r5
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	0159      	lsls	r1, r3, #5
 8001a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a98:	0150      	lsls	r0, r2, #5
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	1a51      	subs	r1, r2, r1
 8001aa2:	6139      	str	r1, [r7, #16]
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab8:	4659      	mov	r1, fp
 8001aba:	018b      	lsls	r3, r1, #6
 8001abc:	4651      	mov	r1, sl
 8001abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	018a      	lsls	r2, r1, #6
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8001acc:	4659      	mov	r1, fp
 8001ace:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae6:	4690      	mov	r8, r2
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	eb18 0303 	adds.w	r3, r8, r3
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	462b      	mov	r3, r5
 8001af4:	eb49 0303 	adc.w	r3, r9, r3
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b06:	4629      	mov	r1, r5
 8001b08:	024b      	lsls	r3, r1, #9
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b10:	4621      	mov	r1, r4
 8001b12:	024a      	lsls	r2, r1, #9
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b24:	f7fe fbf4 	bl	8000310 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b30:	e058      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	464b      	mov	r3, r9
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	0159      	lsls	r1, r3, #5
 8001b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5e:	0150      	lsls	r0, r2, #5
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4641      	mov	r1, r8
 8001b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b84:	ebb2 040a 	subs.w	r4, r2, sl
 8001b88:	eb63 050b 	sbc.w	r5, r3, fp
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	00eb      	lsls	r3, r5, #3
 8001b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9a:	00e2      	lsls	r2, r4, #3
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	18e3      	adds	r3, r4, r3
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	eb45 0303 	adc.w	r3, r5, r3
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	61fa      	str	r2, [r7, #28]
 8001bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd8:	f7fe fb9a 	bl	8000310 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3750      	adds	r7, #80	; 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	007a1200 	.word	0x007a1200

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08007db0 	.word	0x08007db0

08001c60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	08db      	lsrs	r3, r3, #3
 8001c9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_RCC_GetClockConfig+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0207 	and.w	r2, r3, #7
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e041      	b.n	8001d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f839 	bl	8001d62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 f9d8 	bl	80020b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d001      	beq.n	8001d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e04e      	b.n	8001e2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a23      	ldr	r2, [pc, #140]	; (8001e3c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d022      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d01d      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d018      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1e      	ldr	r2, [pc, #120]	; (8001e44 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d013      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00e      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d004      	beq.n	8001df8 <HAL_TIM_Base_Start_IT+0x80>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a18      	ldr	r2, [pc, #96]	; (8001e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d111      	bne.n	8001e1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d010      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0201 	orr.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1a:	e007      	b.n	8001e2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0201 	orr.w	r2, r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3714      	adds	r7, #20
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40000800 	.word	0x40000800
 8001e48:	40000c00 	.word	0x40000c00
 8001e4c:	40010400 	.word	0x40010400
 8001e50:	40014000 	.word	0x40014000
 8001e54:	40001800 	.word	0x40001800

08001e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0202 	mvn.w	r2, #2
 8001e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8ee 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8e0 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8f1 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0204 	mvn.w	r2, #4
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f8c4 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8b6 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8c7 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b08      	cmp	r3, #8
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0208 	mvn.w	r2, #8
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2204      	movs	r2, #4
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f89a 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f88c 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f89d 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d122      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0310 	and.w	r3, r3, #16
 8001f74:	2b10      	cmp	r3, #16
 8001f76:	d11b      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0210 	mvn.w	r2, #16
 8001f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2208      	movs	r2, #8
 8001f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f870 	bl	800207c <HAL_TIM_IC_CaptureCallback>
 8001f9c:	e005      	b.n	8001faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f000 f862 	bl	8002068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 f873 	bl	8002090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0201 	mvn.w	r2, #1
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe fd7a 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe6:	2b80      	cmp	r3, #128	; 0x80
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff4:	2b80      	cmp	r3, #128	; 0x80
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f902 	bl	800220c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002012:	2b40      	cmp	r3, #64	; 0x40
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f838 	bl	80020a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b20      	cmp	r3, #32
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b20      	cmp	r3, #32
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0220 	mvn.w	r2, #32
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8cc 	bl	80021f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a40      	ldr	r2, [pc, #256]	; (80021cc <TIM_Base_SetConfig+0x114>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d013      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020d6:	d00f      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <TIM_Base_SetConfig+0x118>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00b      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a3c      	ldr	r2, [pc, #240]	; (80021d4 <TIM_Base_SetConfig+0x11c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d007      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <TIM_Base_SetConfig+0x120>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d003      	beq.n	80020f8 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <TIM_Base_SetConfig+0x124>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d108      	bne.n	800210a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	4313      	orrs	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a2f      	ldr	r2, [pc, #188]	; (80021cc <TIM_Base_SetConfig+0x114>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002118:	d027      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a2c      	ldr	r2, [pc, #176]	; (80021d0 <TIM_Base_SetConfig+0x118>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d023      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a2b      	ldr	r2, [pc, #172]	; (80021d4 <TIM_Base_SetConfig+0x11c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01f      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a2a      	ldr	r2, [pc, #168]	; (80021d8 <TIM_Base_SetConfig+0x120>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a29      	ldr	r2, [pc, #164]	; (80021dc <TIM_Base_SetConfig+0x124>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d017      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <TIM_Base_SetConfig+0x128>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d013      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <TIM_Base_SetConfig+0x12c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00f      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <TIM_Base_SetConfig+0x130>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00b      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a25      	ldr	r2, [pc, #148]	; (80021ec <TIM_Base_SetConfig+0x134>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d007      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <TIM_Base_SetConfig+0x138>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d003      	beq.n	800216a <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a23      	ldr	r2, [pc, #140]	; (80021f4 <TIM_Base_SetConfig+0x13c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d108      	bne.n	800217c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	4313      	orrs	r3, r2
 800217a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a0a      	ldr	r2, [pc, #40]	; (80021cc <TIM_Base_SetConfig+0x114>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0xf8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <TIM_Base_SetConfig+0x124>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d103      	bne.n	80021b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	615a      	str	r2, [r3, #20]
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40010400 	.word	0x40010400
 80021e0:	40014000 	.word	0x40014000
 80021e4:	40014400 	.word	0x40014400
 80021e8:	40014800 	.word	0x40014800
 80021ec:	40001800 	.word	0x40001800
 80021f0:	40001c00 	.word	0x40001c00
 80021f4:	40002000 	.word	0x40002000

080021f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0208 	add.w	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0208 	add.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d103      	bne.n	800229a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e00c      	b.n	80022b4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3308      	adds	r3, #8
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	e002      	b.n	80022a8 <vListInsert+0x2e>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d2f6      	bcs.n	80022a2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	601a      	str	r2, [r3, #0]
}
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6892      	ldr	r2, [r2, #8]
 8002302:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6852      	ldr	r2, [r2, #4]
 800230c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d103      	bne.n	8002320 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800234a:	2301      	movs	r3, #1
 800234c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10a      	bne.n	800236e <xQueueGenericReset+0x2e>
        __asm volatile
 8002358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	60fb      	str	r3, [r7, #12]
    }
 800236a:	bf00      	nop
 800236c:	e7fe      	b.n	800236c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d052      	beq.n	800241a <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002378:	2b00      	cmp	r3, #0
 800237a:	d04e      	beq.n	800241a <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002384:	2100      	movs	r1, #0
 8002386:	fba3 2302 	umull	r2, r3, r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d000      	beq.n	8002390 <xQueueGenericReset+0x50>
 800238e:	2101      	movs	r1, #1
 8002390:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d141      	bne.n	800241a <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002396:	f001 fe95 	bl	80040c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	6939      	ldr	r1, [r7, #16]
 80023a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023a6:	fb01 f303 	mul.w	r3, r1, r3
 80023aa:	441a      	add	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	2200      	movs	r2, #0
 80023b4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c6:	3b01      	subs	r3, #1
 80023c8:	6939      	ldr	r1, [r7, #16]
 80023ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	441a      	add	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	22ff      	movs	r2, #255	; 0xff
 80023e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00f      	beq.n	8002414 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	3310      	adds	r3, #16
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 ff85 	bl	8003308 <xTaskRemoveFromEventList>
 80023fe:	e009      	b.n	8002414 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3310      	adds	r3, #16
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff0b 	bl	8002220 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	3324      	adds	r3, #36	; 0x24
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff06 	bl	8002220 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002414:	f001 fe86 	bl	8004124 <vPortExitCritical>
 8002418:	e001      	b.n	800241e <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10a      	bne.n	800243a <xQueueGenericReset+0xfa>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	60bb      	str	r3, [r7, #8]
    }
 8002436:	bf00      	nop
 8002438:	e7fe      	b.n	8002438 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800243a:	697b      	ldr	r3, [r7, #20]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002444:	b580      	push	{r7, lr}
 8002446:	b08a      	sub	sp, #40	; 0x28
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d02e      	beq.n	80024ba <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800245c:	2100      	movs	r1, #0
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	fba3 2302 	umull	r2, r3, r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d000      	beq.n	800246c <xQueueGenericCreate+0x28>
 800246a:	2101      	movs	r1, #1
 800246c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d123      	bne.n	80024ba <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800247a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800247e:	d81c      	bhi.n	80024ba <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	fb02 f303 	mul.w	r3, r2, r3
 8002488:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	3350      	adds	r3, #80	; 0x50
 800248e:	4618      	mov	r0, r3
 8002490:	f001 ff44 	bl	800431c <pvPortMalloc>
 8002494:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01c      	beq.n	80024d6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3350      	adds	r3, #80	; 0x50
 80024a4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024a6:	79fa      	ldrb	r2, [r7, #7]
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f814 	bl	80024e0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80024b8:	e00d      	b.n	80024d6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <xQueueGenericCreate+0x92>
        __asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	613b      	str	r3, [r7, #16]
    }
 80024d2:	bf00      	nop
 80024d4:	e7fe      	b.n	80024d4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024d6:	69fb      	ldr	r3, [r7, #28]
    }
 80024d8:	4618      	mov	r0, r3
 80024da:	3720      	adds	r7, #32
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e002      	b.n	8002502 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800250e:	2101      	movs	r1, #1
 8002510:	69b8      	ldr	r0, [r7, #24]
 8002512:	f7ff ff15 	bl	8002340 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	68f9      	ldr	r1, [r7, #12]
 8002524:	2073      	movs	r0, #115	; 0x73
 8002526:	f003 fc43 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b08f      	sub	sp, #60	; 0x3c
 8002538:	af02      	add	r7, sp, #8
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10a      	bne.n	8002564 <xQueueReceive+0x30>
        __asm volatile
 800254e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002552:	f383 8811 	msr	BASEPRI, r3
 8002556:	f3bf 8f6f 	isb	sy
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	623b      	str	r3, [r7, #32]
    }
 8002560:	bf00      	nop
 8002562:	e7fe      	b.n	8002562 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <xQueueReceive+0x3e>
 800256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <xQueueReceive+0x42>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <xQueueReceive+0x44>
 8002576:	2300      	movs	r3, #0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <xQueueReceive+0x5e>
        __asm volatile
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	61fb      	str	r3, [r7, #28]
    }
 800258e:	bf00      	nop
 8002590:	e7fe      	b.n	8002590 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002592:	f001 f8c5 	bl	8003720 <xTaskGetSchedulerState>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <xQueueReceive+0x6e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <xQueueReceive+0x72>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <xQueueReceive+0x74>
 80025a6:	2300      	movs	r3, #0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueReceive+0x8e>
        __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	61bb      	str	r3, [r7, #24]
    }
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025c2:	f001 fd7f 	bl	80040c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d024      	beq.n	800261c <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025d2:	68b9      	ldr	r1, [r7, #8]
 80025d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d6:	f000 f8b3 	bl	8002740 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80025da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 f913 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 80025e2:	4604      	mov	r4, r0
 80025e4:	2000      	movs	r0, #0
 80025e6:	f004 f90f 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2101      	movs	r1, #1
 80025f0:	9100      	str	r1, [sp, #0]
 80025f2:	4621      	mov	r1, r4
 80025f4:	205c      	movs	r0, #92	; 0x5c
 80025f6:	f003 fc51 	bl	8005e9c <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	1e5a      	subs	r2, r3, #1
 80025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002600:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d004      	beq.n	8002614 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	3310      	adds	r3, #16
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fe7a 	bl	8003308 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002614:	f001 fd86 	bl	8004124 <vPortExitCritical>
                return pdPASS;
 8002618:	2301      	movs	r3, #1
 800261a:	e08a      	b.n	8002732 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d113      	bne.n	800264a <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002622:	f001 fd7f 	bl	8004124 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	4618      	mov	r0, r3
 800262a:	f004 f8ed 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 800262e:	4604      	mov	r4, r0
 8002630:	2000      	movs	r0, #0
 8002632:	f004 f8e9 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 8002636:	4602      	mov	r2, r0
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2101      	movs	r1, #1
 800263c:	9100      	str	r1, [sp, #0]
 800263e:	4621      	mov	r1, r4
 8002640:	205c      	movs	r0, #92	; 0x5c
 8002642:	f003 fc2b 	bl	8005e9c <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002646:	2300      	movs	r3, #0
 8002648:	e073      	b.n	8002732 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002650:	f107 0310 	add.w	r3, r7, #16
 8002654:	4618      	mov	r0, r3
 8002656:	f000 ff2f 	bl	80034b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800265a:	2301      	movs	r3, #1
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800265e:	f001 fd61 	bl	8004124 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002662:	f000 fb61 	bl	8002d28 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002666:	f001 fd2d 	bl	80040c4 <vPortEnterCritical>
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002670:	b25b      	sxtb	r3, r3
 8002672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002676:	d103      	bne.n	8002680 <xQueueReceive+0x14c>
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <xQueueReceive+0x162>
 800268e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002696:	f001 fd45 	bl	8004124 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800269a:	1d3a      	adds	r2, r7, #4
 800269c:	f107 0310 	add.w	r3, r7, #16
 80026a0:	4611      	mov	r1, r2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 ff1e 	bl	80034e4 <xTaskCheckForTimeOut>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d124      	bne.n	80026f8 <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b0:	f000 f8be 	bl	8002830 <prvIsQueueEmpty>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d018      	beq.n	80026ec <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	3324      	adds	r3, #36	; 0x24
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fdb4 	bl	8003230 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ca:	f000 f85f 	bl	800278c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026ce:	f000 fb39 	bl	8002d44 <xTaskResumeAll>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f47f af74 	bne.w	80025c2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80026da:	4b18      	ldr	r3, [pc, #96]	; (800273c <xQueueReceive+0x208>)
 80026dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	e76a      	b.n	80025c2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ee:	f000 f84d 	bl	800278c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026f2:	f000 fb27 	bl	8002d44 <xTaskResumeAll>
 80026f6:	e764      	b.n	80025c2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026fa:	f000 f847 	bl	800278c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026fe:	f000 fb21 	bl	8002d44 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002704:	f000 f894 	bl	8002830 <prvIsQueueEmpty>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f43f af59 	beq.w	80025c2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002712:	4618      	mov	r0, r3
 8002714:	f004 f878 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 8002718:	4604      	mov	r4, r0
 800271a:	2000      	movs	r0, #0
 800271c:	f004 f874 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 8002720:	4602      	mov	r2, r0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2101      	movs	r1, #1
 8002726:	9100      	str	r1, [sp, #0]
 8002728:	4621      	mov	r1, r4
 800272a:	205c      	movs	r0, #92	; 0x5c
 800272c:	f003 fbb6 	bl	8005e9c <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002730:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002732:	4618      	mov	r0, r3
 8002734:	3734      	adds	r7, #52	; 0x34
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	e000ed04 	.word	0xe000ed04

08002740 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d018      	beq.n	8002784 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68da      	ldr	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	441a      	add	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	429a      	cmp	r2, r3
 800276a:	d303      	bcc.n	8002774 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68d9      	ldr	r1, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	461a      	mov	r2, r3
 800277e:	6838      	ldr	r0, [r7, #0]
 8002780:	f004 f9ee 	bl	8006b60 <memcpy>
    }
}
 8002784:	bf00      	nop
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002794:	f001 fc96 	bl	80040c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800279e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a0:	e011      	b.n	80027c6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d012      	beq.n	80027d0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3324      	adds	r3, #36	; 0x24
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fdaa 	bl	8003308 <xTaskRemoveFromEventList>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80027ba:	f000 fef9 	bl	80035b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	dce9      	bgt.n	80027a2 <prvUnlockQueue+0x16>
 80027ce:	e000      	b.n	80027d2 <prvUnlockQueue+0x46>
                    break;
 80027d0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	22ff      	movs	r2, #255	; 0xff
 80027d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80027da:	f001 fca3 	bl	8004124 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027de:	f001 fc71 	bl	80040c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027e8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ea:	e011      	b.n	8002810 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3310      	adds	r3, #16
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fd85 	bl	8003308 <xTaskRemoveFromEventList>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002804:	f000 fed4 	bl	80035b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	3b01      	subs	r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002814:	2b00      	cmp	r3, #0
 8002816:	dce9      	bgt.n	80027ec <prvUnlockQueue+0x60>
 8002818:	e000      	b.n	800281c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800281a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	22ff      	movs	r2, #255	; 0xff
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002824:	f001 fc7e 	bl	8004124 <vPortExitCritical>
}
 8002828:	bf00      	nop
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002838:	f001 fc44 	bl	80040c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002844:	2301      	movs	r3, #1
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e001      	b.n	800284e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800284e:	f001 fc69 	bl	8004124 <vPortExitCritical>

    return xReturn;
 8002852:	68fb      	ldr	r3, [r7, #12]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002874:	f383 8811 	msr	BASEPRI, r3
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	f3bf 8f4f 	dsb	sy
 8002880:	60fb      	str	r3, [r7, #12]
    }
 8002882:	bf00      	nop
 8002884:	e7fe      	b.n	8002884 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d024      	beq.n	80028d6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	e01e      	b.n	80028d0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002892:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <vQueueAddToRegistry+0xa8>)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	4413      	add	r3, r2
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d105      	bne.n	80028ae <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4a17      	ldr	r2, [pc, #92]	; (8002904 <vQueueAddToRegistry+0xa8>)
 80028a8:	4413      	add	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
                    break;
 80028ac:	e013      	b.n	80028d6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <vQueueAddToRegistry+0x6e>
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <vQueueAddToRegistry+0xa8>)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <vQueueAddToRegistry+0xa8>)
 80028c6:	4413      	add	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2b07      	cmp	r3, #7
 80028d4:	d9dd      	bls.n	8002892 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00f      	beq.n	80028fc <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f003 ff8c 	bl	8006808 <SEGGER_SYSVIEW_ShrinkId>
 80028f0:	4601      	mov	r1, r0
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	2071      	movs	r0, #113	; 0x71
 80028f8:	f003 fa00 	bl	8005cfc <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200000e0 	.word	0x200000e0

08002908 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002918:	f001 fbd4 	bl	80040c4 <vPortEnterCritical>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002922:	b25b      	sxtb	r3, r3
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d103      	bne.n	8002932 <vQueueWaitForMessageRestricted+0x2a>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002938:	b25b      	sxtb	r3, r3
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d103      	bne.n	8002948 <vQueueWaitForMessageRestricted+0x40>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002948:	f001 fbec 	bl	8004124 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	3324      	adds	r3, #36	; 0x24
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fc8b 	bl	8003278 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff12 	bl	800278c <prvUnlockQueue>
    }
 8002968:	bf00      	nop
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af04      	add	r7, sp, #16
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4618      	mov	r0, r3
 8002986:	f001 fcc9 	bl	800431c <pvPortMalloc>
 800298a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d013      	beq.n	80029ba <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002992:	2058      	movs	r0, #88	; 0x58
 8002994:	f001 fcc2 	bl	800431c <pvPortMalloc>
 8002998:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029a0:	2258      	movs	r2, #88	; 0x58
 80029a2:	2100      	movs	r1, #0
 80029a4:	69f8      	ldr	r0, [r7, #28]
 80029a6:	f004 f8e9 	bl	8006b7c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	e005      	b.n	80029be <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f001 fd6c 	bl	8004490 <vPortFree>
 80029b8:	e001      	b.n	80029be <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d013      	beq.n	80029ec <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029c4:	88fa      	ldrh	r2, [r7, #6]
 80029c6:	2300      	movs	r3, #0
 80029c8:	9303      	str	r3, [sp, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	9302      	str	r3, [sp, #8]
 80029ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f80e 	bl	80029fc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029e0:	69f8      	ldr	r0, [r7, #28]
 80029e2:	f000 f899 	bl	8002b18 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	e002      	b.n	80029f2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029f2:	69bb      	ldr	r3, [r7, #24]
    }
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	461a      	mov	r2, r3
 8002a14:	21a5      	movs	r1, #165	; 0xa5
 8002a16:	f004 f8b1 	bl	8006b7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a24:	3b01      	subs	r3, #1
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f023 0307 	bic.w	r3, r3, #7
 8002a32:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00a      	beq.n	8002a54 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	617b      	str	r3, [r7, #20]
    }
 8002a50:	bf00      	nop
 8002a52:	e7fe      	b.n	8002a52 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01e      	beq.n	8002a98 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e012      	b.n	8002a86 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	7819      	ldrb	r1, [r3, #0]
 8002a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3334      	adds	r3, #52	; 0x34
 8002a70:	460a      	mov	r2, r1
 8002a72:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	4413      	add	r3, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d006      	beq.n	8002a8e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	3301      	adds	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	d9e9      	bls.n	8002a60 <prvInitialiseNewTask+0x64>
 8002a8c:	e000      	b.n	8002a90 <prvInitialiseNewTask+0x94>
            {
                break;
 8002a8e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d90a      	bls.n	8002ab4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	613b      	str	r3, [r7, #16]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d901      	bls.n	8002abe <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002aba:	2304      	movs	r3, #4
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	3304      	adds	r3, #4
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fbc6 	bl	8002260 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	3318      	adds	r3, #24
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fbc1 	bl	8002260 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	f1c3 0205 	rsb	r2, r3, #5
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	69b8      	ldr	r0, [r7, #24]
 8002afa:	f001 f933 	bl	8003d64 <pxPortInitialiseStack>
 8002afe:	4602      	mov	r2, r0
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b10:	bf00      	nop
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b20:	f001 fad0 	bl	80040c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b24:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <prvAddNewTaskToReadyList+0x134>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	4a48      	ldr	r2, [pc, #288]	; (8002c4c <prvAddNewTaskToReadyList+0x134>)
 8002b2c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b2e:	4b48      	ldr	r3, [pc, #288]	; (8002c50 <prvAddNewTaskToReadyList+0x138>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b36:	4a46      	ldr	r2, [pc, #280]	; (8002c50 <prvAddNewTaskToReadyList+0x138>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b3c:	4b43      	ldr	r3, [pc, #268]	; (8002c4c <prvAddNewTaskToReadyList+0x134>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d110      	bne.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b44:	f000 fd52 	bl	80035ec <prvInitialiseTaskLists>
 8002b48:	e00d      	b.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b4a:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <prvAddNewTaskToReadyList+0x13c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b52:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <prvAddNewTaskToReadyList+0x138>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d802      	bhi.n	8002b66 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b60:	4a3b      	ldr	r2, [pc, #236]	; (8002c50 <prvAddNewTaskToReadyList+0x138>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b66:	4b3c      	ldr	r3, [pc, #240]	; (8002c58 <prvAddNewTaskToReadyList+0x140>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	4a3a      	ldr	r2, [pc, #232]	; (8002c58 <prvAddNewTaskToReadyList+0x140>)
 8002b6e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <prvAddNewTaskToReadyList+0x140>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <prvAddNewTaskToReadyList+0x94>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 fd7b 	bl	800667c <SEGGER_SYSVIEW_OnTaskCreate>
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	461d      	mov	r5, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	461c      	mov	r4, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	1ae3      	subs	r3, r4, r3
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	462b      	mov	r3, r5
 8002ba8:	f001 fe34 	bl	8004814 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 fde8 	bl	8006784 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb8:	2201      	movs	r2, #1
 8002bba:	409a      	lsls	r2, r3
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <prvAddNewTaskToReadyList+0x144>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <prvAddNewTaskToReadyList+0x144>)
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bca:	4925      	ldr	r1, [pc, #148]	; (8002c60 <prvAddNewTaskToReadyList+0x148>)
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	3204      	adds	r2, #4
 8002bf2:	605a      	str	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	1d1a      	adds	r2, r3, #4
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <prvAddNewTaskToReadyList+0x148>)
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4912      	ldr	r1, [pc, #72]	; (8002c60 <prvAddNewTaskToReadyList+0x148>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	480e      	ldr	r0, [pc, #56]	; (8002c60 <prvAddNewTaskToReadyList+0x148>)
 8002c26:	4613      	mov	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4403      	add	r3, r0
 8002c30:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c32:	f001 fa77 	bl	8004124 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c36:	4b07      	ldr	r3, [pc, #28]	; (8002c54 <prvAddNewTaskToReadyList+0x13c>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <prvAddNewTaskToReadyList+0x138>)
 8002c40:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	200001f8 	.word	0x200001f8
 8002c50:	20000120 	.word	0x20000120
 8002c54:	20000204 	.word	0x20000204
 8002c58:	20000214 	.word	0x20000214
 8002c5c:	20000200 	.word	0x20000200
 8002c60:	20000124 	.word	0x20000124

08002c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <vTaskStartScheduler+0xa4>)
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2300      	movs	r3, #0
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	2300      	movs	r3, #0
 8002c74:	2282      	movs	r2, #130	; 0x82
 8002c76:	4925      	ldr	r1, [pc, #148]	; (8002d0c <vTaskStartScheduler+0xa8>)
 8002c78:	4825      	ldr	r0, [pc, #148]	; (8002d10 <vTaskStartScheduler+0xac>)
 8002c7a:	f7ff fe79 	bl	8002970 <xTaskCreate>
 8002c7e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002c86:	f000 fde9 	bl	800385c <xTimerCreateTimerTask>
 8002c8a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d124      	bne.n	8002cdc <vTaskStartScheduler+0x78>
        __asm volatile
 8002c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c96:	f383 8811 	msr	BASEPRI, r3
 8002c9a:	f3bf 8f6f 	isb	sy
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	60bb      	str	r3, [r7, #8]
    }
 8002ca4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <vTaskStartScheduler+0xb0>)
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cac:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <vTaskStartScheduler+0xb4>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cb4:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <vTaskStartScheduler+0xb8>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <vTaskStartScheduler+0xbc>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <vTaskStartScheduler+0xa4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d102      	bne.n	8002ccc <vTaskStartScheduler+0x68>
 8002cc6:	f003 fcbd 	bl	8006644 <SEGGER_SYSVIEW_OnIdle>
 8002cca:	e004      	b.n	8002cd6 <vTaskStartScheduler+0x72>
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <vTaskStartScheduler+0xbc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 fd15 	bl	8006700 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002cd6:	f001 f8d5 	bl	8003e84 <xPortStartScheduler>
 8002cda:	e00e      	b.n	8002cfa <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce2:	d10a      	bne.n	8002cfa <vTaskStartScheduler+0x96>
        __asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	607b      	str	r3, [r7, #4]
    }
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <vTaskStartScheduler+0xc0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	2000021c 	.word	0x2000021c
 8002d0c:	08007cc8 	.word	0x08007cc8
 8002d10:	080035c9 	.word	0x080035c9
 8002d14:	20000218 	.word	0x20000218
 8002d18:	20000204 	.word	0x20000204
 8002d1c:	200001fc 	.word	0x200001fc
 8002d20:	20000120 	.word	0x20000120
 8002d24:	2000000c 	.word	0x2000000c

08002d28 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <vTaskSuspendAll+0x18>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3301      	adds	r3, #1
 8002d32:	4a03      	ldr	r2, [pc, #12]	; (8002d40 <vTaskSuspendAll+0x18>)
 8002d34:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d36:	bf00      	nop
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	20000220 	.word	0x20000220

08002d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d52:	4b6d      	ldr	r3, [pc, #436]	; (8002f08 <xTaskResumeAll+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	607b      	str	r3, [r7, #4]
    }
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d70:	f001 f9a8 	bl	80040c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d74:	4b64      	ldr	r3, [pc, #400]	; (8002f08 <xTaskResumeAll+0x1c4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	4a63      	ldr	r2, [pc, #396]	; (8002f08 <xTaskResumeAll+0x1c4>)
 8002d7c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7e:	4b62      	ldr	r3, [pc, #392]	; (8002f08 <xTaskResumeAll+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 80b8 	bne.w	8002ef8 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d88:	4b60      	ldr	r3, [pc, #384]	; (8002f0c <xTaskResumeAll+0x1c8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80b3 	beq.w	8002ef8 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d92:	e08e      	b.n	8002eb2 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d94:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <xTaskResumeAll+0x1cc>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	6a12      	ldr	r2, [r2, #32]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	69d2      	ldr	r2, [r2, #28]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d103      	bne.n	8002dca <xTaskResumeAll+0x86>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	605a      	str	r2, [r3, #4]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	1e5a      	subs	r2, r3, #1
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	68d2      	ldr	r2, [r2, #12]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3304      	adds	r3, #4
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d103      	bne.n	8002e08 <xTaskResumeAll+0xc4>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	615a      	str	r2, [r3, #20]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fcb2 	bl	8006784 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	2201      	movs	r2, #1
 8002e26:	409a      	lsls	r2, r3
 8002e28:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <xTaskResumeAll+0x1d0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	4a39      	ldr	r2, [pc, #228]	; (8002f14 <xTaskResumeAll+0x1d0>)
 8002e30:	6013      	str	r3, [r2, #0]
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e36:	4938      	ldr	r1, [pc, #224]	; (8002f18 <xTaskResumeAll+0x1d4>)
 8002e38:	4613      	mov	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	4413      	add	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3304      	adds	r3, #4
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	3204      	adds	r2, #4
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	1d1a      	adds	r2, r3, #4
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a28      	ldr	r2, [pc, #160]	; (8002f18 <xTaskResumeAll+0x1d4>)
 8002e76:	441a      	add	r2, r3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	615a      	str	r2, [r3, #20]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	4925      	ldr	r1, [pc, #148]	; (8002f18 <xTaskResumeAll+0x1d4>)
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	4821      	ldr	r0, [pc, #132]	; (8002f18 <xTaskResumeAll+0x1d4>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4403      	add	r3, r0
 8002e9c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <xTaskResumeAll+0x1d8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d302      	bcc.n	8002eb2 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002eac:	4b1c      	ldr	r3, [pc, #112]	; (8002f20 <xTaskResumeAll+0x1dc>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb2:	4b17      	ldr	r3, [pc, #92]	; (8002f10 <xTaskResumeAll+0x1cc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f47f af6c 	bne.w	8002d94 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ec2:	f000 fc11 	bl	80036e8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <xTaskResumeAll+0x1e0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d010      	beq.n	8002ef4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ed2:	f000 f84b 	bl	8002f6c <xTaskIncrementTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <xTaskResumeAll+0x1dc>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f1      	bne.n	8002ed2 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <xTaskResumeAll+0x1e0>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <xTaskResumeAll+0x1dc>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ef8:	f001 f914 	bl	8004124 <vPortExitCritical>

    return xAlreadyYielded;
 8002efc:	697b      	ldr	r3, [r7, #20]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3720      	adds	r7, #32
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	20000220 	.word	0x20000220
 8002f0c:	200001f8 	.word	0x200001f8
 8002f10:	200001b8 	.word	0x200001b8
 8002f14:	20000200 	.word	0x20000200
 8002f18:	20000124 	.word	0x20000124
 8002f1c:	20000120 	.word	0x20000120
 8002f20:	2000020c 	.word	0x2000020c
 8002f24:	20000208 	.word	0x20000208

08002f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <xTaskGetTickCount+0x1c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	200001fc 	.word	0x200001fc

08002f48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f4e:	f001 f9a5 	bl	800429c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <xTaskGetTickCountFromISR+0x20>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f5c:	683b      	ldr	r3, [r7, #0]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	200001fc 	.word	0x200001fc

08002f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <xTaskIncrementTick+0x1cc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f040 80d1 	bne.w	8003122 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f80:	4b6e      	ldr	r3, [pc, #440]	; (800313c <xTaskIncrementTick+0x1d0>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f88:	4a6c      	ldr	r2, [pc, #432]	; (800313c <xTaskIncrementTick+0x1d0>)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d120      	bne.n	8002fd6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f94:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <xTaskIncrementTick+0x1d4>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <xTaskIncrementTick+0x48>
        __asm volatile
 8002f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa2:	f383 8811 	msr	BASEPRI, r3
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	607b      	str	r3, [r7, #4]
    }
 8002fb0:	bf00      	nop
 8002fb2:	e7fe      	b.n	8002fb2 <xTaskIncrementTick+0x46>
 8002fb4:	4b62      	ldr	r3, [pc, #392]	; (8003140 <xTaskIncrementTick+0x1d4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61fb      	str	r3, [r7, #28]
 8002fba:	4b62      	ldr	r3, [pc, #392]	; (8003144 <xTaskIncrementTick+0x1d8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a60      	ldr	r2, [pc, #384]	; (8003140 <xTaskIncrementTick+0x1d4>)
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4a60      	ldr	r2, [pc, #384]	; (8003144 <xTaskIncrementTick+0x1d8>)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <xTaskIncrementTick+0x1dc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a5e      	ldr	r2, [pc, #376]	; (8003148 <xTaskIncrementTick+0x1dc>)
 8002fd0:	6013      	str	r3, [r2, #0]
 8002fd2:	f000 fb89 	bl	80036e8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fd6:	4b5d      	ldr	r3, [pc, #372]	; (800314c <xTaskIncrementTick+0x1e0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a3a      	ldr	r2, [r7, #32]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f0c0 80a5 	bcc.w	800312c <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe2:	4b57      	ldr	r3, [pc, #348]	; (8003140 <xTaskIncrementTick+0x1d4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fec:	4b57      	ldr	r3, [pc, #348]	; (800314c <xTaskIncrementTick+0x1e0>)
 8002fee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff2:	601a      	str	r2, [r3, #0]
                    break;
 8002ff4:	e09a      	b.n	800312c <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ff6:	4b52      	ldr	r3, [pc, #328]	; (8003140 <xTaskIncrementTick+0x1d4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003006:	6a3a      	ldr	r2, [r7, #32]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	429a      	cmp	r2, r3
 800300c:	d203      	bcs.n	8003016 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800300e:	4a4f      	ldr	r2, [pc, #316]	; (800314c <xTaskIncrementTick+0x1e0>)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003014:	e08a      	b.n	800312c <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	6892      	ldr	r2, [r2, #8]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	3304      	adds	r3, #4
 8003038:	429a      	cmp	r2, r3
 800303a:	d103      	bne.n	8003044 <xTaskIncrementTick+0xd8>
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2200      	movs	r2, #0
 8003048:	615a      	str	r2, [r3, #20]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01e      	beq.n	800309a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	6a12      	ldr	r2, [r2, #32]
 800306a:	609a      	str	r2, [r3, #8]
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	69d2      	ldr	r2, [r2, #28]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	3318      	adds	r3, #24
 800307e:	429a      	cmp	r2, r3
 8003080:	d103      	bne.n	800308a <xTaskIncrementTick+0x11e>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	6a1a      	ldr	r2, [r3, #32]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2200      	movs	r2, #0
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	1e5a      	subs	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fb71 	bl	8006784 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	2201      	movs	r2, #1
 80030a8:	409a      	lsls	r2, r3
 80030aa:	4b29      	ldr	r3, [pc, #164]	; (8003150 <xTaskIncrementTick+0x1e4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	4a27      	ldr	r2, [pc, #156]	; (8003150 <xTaskIncrementTick+0x1e4>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	4926      	ldr	r1, [pc, #152]	; (8003154 <xTaskIncrementTick+0x1e8>)
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	3304      	adds	r3, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	60da      	str	r2, [r3, #12]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	3204      	adds	r2, #4
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	609a      	str	r2, [r3, #8]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4a17      	ldr	r2, [pc, #92]	; (8003154 <xTaskIncrementTick+0x1e8>)
 80030f8:	441a      	add	r2, r3
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003102:	4914      	ldr	r1, [pc, #80]	; (8003154 <xTaskIncrementTick+0x1e8>)
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	1c59      	adds	r1, r3, #1
 8003112:	4810      	ldr	r0, [pc, #64]	; (8003154 <xTaskIncrementTick+0x1e8>)
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4403      	add	r3, r0
 800311e:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003120:	e75f      	b.n	8002fe2 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <xTaskIncrementTick+0x1ec>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3301      	adds	r3, #1
 8003128:	4a0b      	ldr	r2, [pc, #44]	; (8003158 <xTaskIncrementTick+0x1ec>)
 800312a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800312e:	4618      	mov	r0, r3
 8003130:	3728      	adds	r7, #40	; 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20000220 	.word	0x20000220
 800313c:	200001fc 	.word	0x200001fc
 8003140:	200001b0 	.word	0x200001b0
 8003144:	200001b4 	.word	0x200001b4
 8003148:	20000210 	.word	0x20000210
 800314c:	20000218 	.word	0x20000218
 8003150:	20000200 	.word	0x20000200
 8003154:	20000124 	.word	0x20000124
 8003158:	20000208 	.word	0x20000208

0800315c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <vTaskSwitchContext+0xbc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <vTaskSwitchContext+0xc0>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003170:	e04d      	b.n	800320e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003172:	4b2a      	ldr	r3, [pc, #168]	; (800321c <vTaskSwitchContext+0xc0>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003178:	4b29      	ldr	r3, [pc, #164]	; (8003220 <vTaskSwitchContext+0xc4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003186:	7afb      	ldrb	r3, [r7, #11]
 8003188:	f1c3 031f 	rsb	r3, r3, #31
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	4925      	ldr	r1, [pc, #148]	; (8003224 <vTaskSwitchContext+0xc8>)
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10a      	bne.n	80031b8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	607b      	str	r3, [r7, #4]
    }
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <vTaskSwitchContext+0x5a>
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	4613      	mov	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4a18      	ldr	r2, [pc, #96]	; (8003224 <vTaskSwitchContext+0xc8>)
 80031c4:	4413      	add	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3308      	adds	r3, #8
 80031da:	429a      	cmp	r2, r3
 80031dc:	d104      	bne.n	80031e8 <vTaskSwitchContext+0x8c>
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <vTaskSwitchContext+0xcc>)
 80031f0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <vTaskSwitchContext+0xcc>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <vTaskSwitchContext+0xd0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d102      	bne.n	8003204 <vTaskSwitchContext+0xa8>
 80031fe:	f003 fa21 	bl	8006644 <SEGGER_SYSVIEW_OnIdle>
}
 8003202:	e004      	b.n	800320e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <vTaskSwitchContext+0xcc>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fa79 	bl	8006700 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800320e:	bf00      	nop
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000220 	.word	0x20000220
 800321c:	2000020c 	.word	0x2000020c
 8003220:	20000200 	.word	0x20000200
 8003224:	20000124 	.word	0x20000124
 8003228:	20000120 	.word	0x20000120
 800322c:	2000021c 	.word	0x2000021c

08003230 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	60fb      	str	r3, [r7, #12]
    }
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <vTaskPlaceOnEventList+0x44>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3318      	adds	r3, #24
 800325c:	4619      	mov	r1, r3
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff f80b 	bl	800227a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003264:	2101      	movs	r1, #1
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f000 fa78 	bl	800375c <prvAddCurrentTaskToDelayedList>
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	20000120 	.word	0x20000120

08003278 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003278:	b580      	push	{r7, lr}
 800327a:	b086      	sub	sp, #24
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	613b      	str	r3, [r7, #16]
    }
 800329c:	bf00      	nop
 800329e:	e7fe      	b.n	800329e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	61da      	str	r2, [r3, #28]
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	621a      	str	r2, [r3, #32]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	3218      	adds	r2, #24
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f103 0218 	add.w	r2, r3, #24
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ec:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80032ee:	2024      	movs	r0, #36	; 0x24
 80032f0:	f002 fcaa 	bl	8005c48 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	68b8      	ldr	r0, [r7, #8]
 80032f8:	f000 fa30 	bl	800375c <prvAddCurrentTaskToDelayedList>
    }
 80032fc:	bf00      	nop
 80032fe:	3718      	adds	r7, #24
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000120 	.word	0x20000120

08003308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08a      	sub	sp, #40	; 0x28
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10a      	bne.n	8003334 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	60fb      	str	r3, [r7, #12]
    }
 8003330:	bf00      	nop
 8003332:	e7fe      	b.n	8003332 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	6a3a      	ldr	r2, [r7, #32]
 8003340:	6a12      	ldr	r2, [r2, #32]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	69d2      	ldr	r2, [r2, #28]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	3318      	adds	r3, #24
 8003356:	429a      	cmp	r2, r3
 8003358:	d103      	bne.n	8003362 <xTaskRemoveFromEventList+0x5a>
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	2200      	movs	r2, #0
 8003366:	629a      	str	r2, [r3, #40]	; 0x28
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	1e5a      	subs	r2, r3, #1
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003372:	4b4b      	ldr	r3, [pc, #300]	; (80034a0 <xTaskRemoveFromEventList+0x198>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d162      	bne.n	8003440 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	617b      	str	r3, [r7, #20]
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	68d2      	ldr	r2, [r2, #12]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	6a3b      	ldr	r3, [r7, #32]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	6892      	ldr	r2, [r2, #8]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	3304      	adds	r3, #4
 800339c:	429a      	cmp	r2, r3
 800339e:	d103      	bne.n	80033a8 <xTaskRemoveFromEventList+0xa0>
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2200      	movs	r2, #0
 80033ac:	615a      	str	r2, [r3, #20]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	1e5a      	subs	r2, r3, #1
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f003 f9e2 	bl	8006784 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	2201      	movs	r2, #1
 80033c6:	409a      	lsls	r2, r3
 80033c8:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <xTaskRemoveFromEventList+0x19c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <xTaskRemoveFromEventList+0x19c>)
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d6:	4934      	ldr	r1, [pc, #208]	; (80034a8 <xTaskRemoveFromEventList+0x1a0>)
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3304      	adds	r3, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	60da      	str	r2, [r3, #12]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	6a3a      	ldr	r2, [r7, #32]
 80033fc:	3204      	adds	r2, #4
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	1d1a      	adds	r2, r3, #4
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <xTaskRemoveFromEventList+0x1a0>)
 8003416:	441a      	add	r2, r3
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	615a      	str	r2, [r3, #20]
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	4921      	ldr	r1, [pc, #132]	; (80034a8 <xTaskRemoveFromEventList+0x1a0>)
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1c59      	adds	r1, r3, #1
 8003430:	481d      	ldr	r0, [pc, #116]	; (80034a8 <xTaskRemoveFromEventList+0x1a0>)
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4403      	add	r3, r0
 800343c:	6019      	str	r1, [r3, #0]
 800343e:	e01b      	b.n	8003478 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <xTaskRemoveFromEventList+0x1a4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	61da      	str	r2, [r3, #28]
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	621a      	str	r2, [r3, #32]
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	3218      	adds	r2, #24
 800345c:	605a      	str	r2, [r3, #4]
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f103 0218 	add.w	r2, r3, #24
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <xTaskRemoveFromEventList+0x1a4>)
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
 800346e:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <xTaskRemoveFromEventList+0x1a4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3301      	adds	r3, #1
 8003474:	4a0d      	ldr	r2, [pc, #52]	; (80034ac <xTaskRemoveFromEventList+0x1a4>)
 8003476:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003478:	6a3b      	ldr	r3, [r7, #32]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <xTaskRemoveFromEventList+0x1a8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	429a      	cmp	r2, r3
 8003484:	d905      	bls.n	8003492 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003486:	2301      	movs	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <xTaskRemoveFromEventList+0x1ac>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	e001      	b.n	8003496 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003492:	2300      	movs	r3, #0
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003498:	4618      	mov	r0, r3
 800349a:	3728      	adds	r7, #40	; 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000220 	.word	0x20000220
 80034a4:	20000200 	.word	0x20000200
 80034a8:	20000124 	.word	0x20000124
 80034ac:	200001b8 	.word	0x200001b8
 80034b0:	20000120 	.word	0x20000120
 80034b4:	2000020c 	.word	0x2000020c

080034b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <vTaskInternalSetTimeOutState+0x24>)
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <vTaskInternalSetTimeOutState+0x28>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	605a      	str	r2, [r3, #4]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000210 	.word	0x20000210
 80034e0:	200001fc 	.word	0x200001fc

080034e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b088      	sub	sp, #32
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	613b      	str	r3, [r7, #16]
    }
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	60fb      	str	r3, [r7, #12]
    }
 8003522:	bf00      	nop
 8003524:	e7fe      	b.n	8003524 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003526:	f000 fdcd 	bl	80040c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800352a:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <xTaskCheckForTimeOut+0xc4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003542:	d102      	bne.n	800354a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e026      	b.n	8003598 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	4b17      	ldr	r3, [pc, #92]	; (80035ac <xTaskCheckForTimeOut+0xc8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	429a      	cmp	r2, r3
 8003554:	d00a      	beq.n	800356c <xTaskCheckForTimeOut+0x88>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	429a      	cmp	r2, r3
 800355e:	d305      	bcc.n	800356c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003560:	2301      	movs	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	e015      	b.n	8003598 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20b      	bcs.n	800358e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff ff98 	bl	80034b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	e004      	b.n	8003598 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003594:	2301      	movs	r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003598:	f000 fdc4 	bl	8004124 <vPortExitCritical>

    return xReturn;
 800359c:	69fb      	ldr	r3, [r7, #28]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	200001fc 	.word	0x200001fc
 80035ac:	20000210 	.word	0x20000210

080035b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <vTaskMissedYield+0x14>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
}
 80035ba:	bf00      	nop
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	2000020c 	.word	0x2000020c

080035c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035d0:	f000 f84c 	bl	800366c <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <prvIdleTask+0x20>)
 80035d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80035e4:	e7f4      	b.n	80035d0 <prvIdleTask+0x8>
 80035e6:	bf00      	nop
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	e00c      	b.n	8003612 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <prvInitialiseTaskLists+0x60>)
 8003604:	4413      	add	r3, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe fe0a 	bl	8002220 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3301      	adds	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d9ef      	bls.n	80035f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003618:	480d      	ldr	r0, [pc, #52]	; (8003650 <prvInitialiseTaskLists+0x64>)
 800361a:	f7fe fe01 	bl	8002220 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800361e:	480d      	ldr	r0, [pc, #52]	; (8003654 <prvInitialiseTaskLists+0x68>)
 8003620:	f7fe fdfe 	bl	8002220 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003624:	480c      	ldr	r0, [pc, #48]	; (8003658 <prvInitialiseTaskLists+0x6c>)
 8003626:	f7fe fdfb 	bl	8002220 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800362a:	480c      	ldr	r0, [pc, #48]	; (800365c <prvInitialiseTaskLists+0x70>)
 800362c:	f7fe fdf8 	bl	8002220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003630:	480b      	ldr	r0, [pc, #44]	; (8003660 <prvInitialiseTaskLists+0x74>)
 8003632:	f7fe fdf5 	bl	8002220 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <prvInitialiseTaskLists+0x78>)
 8003638:	4a05      	ldr	r2, [pc, #20]	; (8003650 <prvInitialiseTaskLists+0x64>)
 800363a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800363c:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <prvInitialiseTaskLists+0x7c>)
 800363e:	4a05      	ldr	r2, [pc, #20]	; (8003654 <prvInitialiseTaskLists+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000124 	.word	0x20000124
 8003650:	20000188 	.word	0x20000188
 8003654:	2000019c 	.word	0x2000019c
 8003658:	200001b8 	.word	0x200001b8
 800365c:	200001cc 	.word	0x200001cc
 8003660:	200001e4 	.word	0x200001e4
 8003664:	200001b0 	.word	0x200001b0
 8003668:	200001b4 	.word	0x200001b4

0800366c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003672:	e019      	b.n	80036a8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003674:	f000 fd26 	bl	80040c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <prvCheckTasksWaitingTermination+0x50>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fe31 	bl	80022ec <uxListRemove>
                --uxCurrentNumberOfTasks;
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <prvCheckTasksWaitingTermination+0x54>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3b01      	subs	r3, #1
 8003690:	4a0b      	ldr	r2, [pc, #44]	; (80036c0 <prvCheckTasksWaitingTermination+0x54>)
 8003692:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003694:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <prvCheckTasksWaitingTermination+0x58>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <prvCheckTasksWaitingTermination+0x58>)
 800369c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800369e:	f000 fd41 	bl	8004124 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f810 	bl	80036c8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036a8:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <prvCheckTasksWaitingTermination+0x58>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e1      	bne.n	8003674 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	200001cc 	.word	0x200001cc
 80036c0:	200001f8 	.word	0x200001f8
 80036c4:	200001e0 	.word	0x200001e0

080036c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 fedb 	bl	8004490 <vPortFree>
            vPortFree( pxTCB );
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fed8 	bl	8004490 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036ec:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <prvResetNextTaskUnblockTime+0x30>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d104      	bne.n	8003700 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <prvResetNextTaskUnblockTime+0x34>)
 80036f8:	f04f 32ff 	mov.w	r2, #4294967295
 80036fc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80036fe:	e005      	b.n	800370c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <prvResetNextTaskUnblockTime+0x30>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <prvResetNextTaskUnblockTime+0x34>)
 800370a:	6013      	str	r3, [r2, #0]
}
 800370c:	bf00      	nop
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200001b0 	.word	0x200001b0
 800371c:	20000218 	.word	0x20000218

08003720 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <xTaskGetSchedulerState+0x34>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d102      	bne.n	8003734 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800372e:	2301      	movs	r3, #1
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	e008      	b.n	8003746 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <xTaskGetSchedulerState+0x38>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d102      	bne.n	8003742 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800373c:	2302      	movs	r3, #2
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	e001      	b.n	8003746 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003746:	687b      	ldr	r3, [r7, #4]
    }
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	20000204 	.word	0x20000204
 8003758:	20000220 	.word	0x20000220

0800375c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003766:	4b36      	ldr	r3, [pc, #216]	; (8003840 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3304      	adds	r3, #4
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fdba 	bl	80022ec <uxListRemove>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003784:	2201      	movs	r2, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	4b2e      	ldr	r3, [pc, #184]	; (8003848 <prvAddCurrentTaskToDelayedList+0xec>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4013      	ands	r3, r2
 8003792:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <prvAddCurrentTaskToDelayedList+0xec>)
 8003794:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800379c:	d124      	bne.n	80037e8 <prvAddCurrentTaskToDelayedList+0x8c>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d021      	beq.n	80037e8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a4:	4b29      	ldr	r3, [pc, #164]	; (800384c <prvAddCurrentTaskToDelayedList+0xf0>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	613b      	str	r3, [r7, #16]
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	6892      	ldr	r2, [r2, #8]
 80037ba:	60da      	str	r2, [r3, #12]
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	3204      	adds	r2, #4
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1d1a      	adds	r2, r3, #4
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	609a      	str	r2, [r3, #8]
 80037d2:	4b1c      	ldr	r3, [pc, #112]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <prvAddCurrentTaskToDelayedList+0xf0>)
 80037d8:	615a      	str	r2, [r3, #20]
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <prvAddCurrentTaskToDelayedList+0xf0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <prvAddCurrentTaskToDelayedList+0xf0>)
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037e6:	e026      	b.n	8003836 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037f0:	4b14      	ldr	r3, [pc, #80]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d209      	bcs.n	8003814 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003800:	4b13      	ldr	r3, [pc, #76]	; (8003850 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b0f      	ldr	r3, [pc, #60]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7fe fd34 	bl	800227a <vListInsert>
}
 8003812:	e010      	b.n	8003836 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b0a      	ldr	r3, [pc, #40]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3304      	adds	r3, #4
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7fe fd2a 	bl	800227a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	429a      	cmp	r2, r3
 800382e:	d202      	bcs.n	8003836 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003830:	4a09      	ldr	r2, [pc, #36]	; (8003858 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6013      	str	r3, [r2, #0]
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200001fc 	.word	0x200001fc
 8003844:	20000120 	.word	0x20000120
 8003848:	20000200 	.word	0x20000200
 800384c:	200001e4 	.word	0x200001e4
 8003850:	200001b4 	.word	0x200001b4
 8003854:	200001b0 	.word	0x200001b0
 8003858:	20000218 	.word	0x20000218

0800385c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003866:	f000 fa47 	bl	8003cf8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800386a:	4b11      	ldr	r3, [pc, #68]	; (80038b0 <xTimerCreateTimerTask+0x54>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00b      	beq.n	800388a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <xTimerCreateTimerTask+0x58>)
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	2302      	movs	r3, #2
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	2300      	movs	r3, #0
 800387c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003880:	490d      	ldr	r1, [pc, #52]	; (80038b8 <xTimerCreateTimerTask+0x5c>)
 8003882:	480e      	ldr	r0, [pc, #56]	; (80038bc <xTimerCreateTimerTask+0x60>)
 8003884:	f7ff f874 	bl	8002970 <xTaskCreate>
 8003888:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	603b      	str	r3, [r7, #0]
    }
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038a6:	687b      	ldr	r3, [r7, #4]
    }
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000254 	.word	0x20000254
 80038b4:	20000258 	.word	0x20000258
 80038b8:	08007cd0 	.word	0x08007cd0
 80038bc:	08003965 	.word	0x08003965

080038c0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038cc:	e008      	b.n	80038e0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	4413      	add	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	699a      	ldr	r2, [r3, #24]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	18d1      	adds	r1, r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f8dd 	bl	8003aac <prvInsertTimerInActiveList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ea      	bne.n	80038ce <prvReloadTimer+0xe>
        }
    }
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <prvProcessExpiredTimer+0x5c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	3304      	adds	r3, #4
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fce5 	bl	80022ec <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7ff ffc3 	bl	80038c0 <prvReloadTimer>
 800393a:	e008      	b.n	800394e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	b2da      	uxtb	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	4798      	blx	r3
    }
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	2000024c 	.word	0x2000024c

08003964 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800396c:	f107 0308 	add.w	r3, r7, #8
 8003970:	4618      	mov	r0, r3
 8003972:	f000 f857 	bl	8003a24 <prvGetNextExpireTime>
 8003976:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4619      	mov	r1, r3
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f803 	bl	8003988 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003982:	f000 f8d5 	bl	8003b30 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003986:	e7f1      	b.n	800396c <prvTimerTask+0x8>

08003988 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003992:	f7ff f9c9 	bl	8002d28 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003996:	f107 0308 	add.w	r3, r7, #8
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f866 	bl	8003a6c <prvSampleTimeNow>
 80039a0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d130      	bne.n	8003a0a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <prvProcessTimerOrBlockTask+0x3c>
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d806      	bhi.n	80039c4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039b6:	f7ff f9c5 	bl	8002d44 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039ba:	68f9      	ldr	r1, [r7, #12]
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ffa1 	bl	8003904 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039c2:	e024      	b.n	8003a0e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039ca:	4b13      	ldr	r3, [pc, #76]	; (8003a18 <prvProcessTimerOrBlockTask+0x90>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <prvProcessTimerOrBlockTask+0x50>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <prvProcessTimerOrBlockTask+0x52>
 80039d8:	2300      	movs	r3, #0
 80039da:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039dc:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <prvProcessTimerOrBlockTask+0x94>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	4619      	mov	r1, r3
 80039ea:	f7fe ff8d 	bl	8002908 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80039ee:	f7ff f9a9 	bl	8002d44 <xTaskResumeAll>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <prvProcessTimerOrBlockTask+0x98>)
 80039fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	f3bf 8f6f 	isb	sy
    }
 8003a08:	e001      	b.n	8003a0e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a0a:	f7ff f99b 	bl	8002d44 <xTaskResumeAll>
    }
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000250 	.word	0x20000250
 8003a1c:	20000254 	.word	0x20000254
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <prvGetNextExpireTime+0x44>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <prvGetNextExpireTime+0x16>
 8003a36:	2201      	movs	r2, #1
 8003a38:	e000      	b.n	8003a3c <prvGetNextExpireTime+0x18>
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d105      	bne.n	8003a54 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a48:	4b07      	ldr	r3, [pc, #28]	; (8003a68 <prvGetNextExpireTime+0x44>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e001      	b.n	8003a58 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a58:	68fb      	ldr	r3, [r7, #12]
    }
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2000024c 	.word	0x2000024c

08003a6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a74:	f7ff fa58 	bl	8002f28 <xTaskGetTickCount>
 8003a78:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <prvSampleTimeNow+0x3c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d205      	bcs.n	8003a90 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a84:	f000 f912 	bl	8003cac <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e002      	b.n	8003a96 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <prvSampleTimeNow+0x3c>)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000025c 	.word	0x2000025c

08003aac <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d812      	bhi.n	8003af8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad2      	subs	r2, r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d302      	bcc.n	8003ae6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e01b      	b.n	8003b1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <prvInsertTimerInActiveList+0x7c>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	3304      	adds	r3, #4
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f7fe fbc2 	bl	800227a <vListInsert>
 8003af6:	e012      	b.n	8003b1e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d206      	bcs.n	8003b0e <prvInsertTimerInActiveList+0x62>
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d302      	bcc.n	8003b0e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e007      	b.n	8003b1e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b0e:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <prvInsertTimerInActiveList+0x80>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe fbae 	bl	800227a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b1e:	697b      	ldr	r3, [r7, #20]
    }
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000250 	.word	0x20000250
 8003b2c:	2000024c 	.word	0x2000024c

08003b30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b088      	sub	sp, #32
 8003b34:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b36:	e0a6      	b.n	8003c86 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f2c0 80a2 	blt.w	8003c84 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fbcb 	bl	80022ec <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b56:	1d3b      	adds	r3, r7, #4
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff87 	bl	8003a6c <prvSampleTimeNow>
 8003b5e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	f200 808e 	bhi.w	8003c86 <prvProcessReceivedCommands+0x156>
 8003b6a:	a201      	add	r2, pc, #4	; (adr r2, 8003b70 <prvProcessReceivedCommands+0x40>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003b95 	.word	0x08003b95
 8003b74:	08003b95 	.word	0x08003b95
 8003b78:	08003bfd 	.word	0x08003bfd
 8003b7c:	08003c11 	.word	0x08003c11
 8003b80:	08003c5b 	.word	0x08003c5b
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003b95 	.word	0x08003b95
 8003b8c:	08003bfd 	.word	0x08003bfd
 8003b90:	08003c11 	.word	0x08003c11
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	18d1      	adds	r1, r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	69f8      	ldr	r0, [r7, #28]
 8003bb4:	f7ff ff7a 	bl	8003aac <prvInsertTimerInActiveList>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d063      	beq.n	8003c86 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d009      	beq.n	8003be0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	69f8      	ldr	r0, [r7, #28]
 8003bda:	f7ff fe71 	bl	80038c0 <prvReloadTimer>
 8003bde:	e008      	b.n	8003bf2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	69f8      	ldr	r0, [r7, #28]
 8003bf8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003bfa:	e044      	b.n	8003c86 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c02:	f023 0301 	bic.w	r3, r3, #1
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c0e:	e03a      	b.n	8003c86 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	617b      	str	r3, [r7, #20]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	699a      	ldr	r2, [r3, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	18d1      	adds	r1, r2, r3
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	69f8      	ldr	r0, [r7, #28]
 8003c54:	f7ff ff2a 	bl	8003aac <prvInsertTimerInActiveList>
                        break;
 8003c58:	e015      	b.n	8003c86 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003c68:	69f8      	ldr	r0, [r7, #28]
 8003c6a:	f000 fc11 	bl	8004490 <vPortFree>
 8003c6e:	e00a      	b.n	8003c86 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c82:	e000      	b.n	8003c86 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003c84:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <prvProcessReceivedCommands+0x178>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f107 0108 	add.w	r1, r7, #8
 8003c8e:	2200      	movs	r2, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fe fc4f 	bl	8002534 <xQueueReceive>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f af4d 	bne.w	8003b38 <prvProcessReceivedCommands+0x8>
        }
    }
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	3720      	adds	r7, #32
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000254 	.word	0x20000254

08003cac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cb2:	e009      	b.n	8003cc8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <prvSwitchTimerLists+0x44>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f7ff fe1e 	bl	8003904 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <prvSwitchTimerLists+0x44>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <prvSwitchTimerLists+0x44>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <prvSwitchTimerLists+0x48>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <prvSwitchTimerLists+0x44>)
 8003cde:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <prvSwitchTimerLists+0x48>)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6013      	str	r3, [r2, #0]
    }
 8003ce6:	bf00      	nop
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000024c 	.word	0x2000024c
 8003cf4:	20000250 	.word	0x20000250

08003cf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003cfc:	f000 f9e2 	bl	80040c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <prvCheckForValidListAndQueue+0x54>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11d      	bne.n	8003d44 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d08:	4811      	ldr	r0, [pc, #68]	; (8003d50 <prvCheckForValidListAndQueue+0x58>)
 8003d0a:	f7fe fa89 	bl	8002220 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d0e:	4811      	ldr	r0, [pc, #68]	; (8003d54 <prvCheckForValidListAndQueue+0x5c>)
 8003d10:	f7fe fa86 	bl	8002220 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d14:	4b10      	ldr	r3, [pc, #64]	; (8003d58 <prvCheckForValidListAndQueue+0x60>)
 8003d16:	4a0e      	ldr	r2, [pc, #56]	; (8003d50 <prvCheckForValidListAndQueue+0x58>)
 8003d18:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <prvCheckForValidListAndQueue+0x64>)
 8003d1c:	4a0d      	ldr	r2, [pc, #52]	; (8003d54 <prvCheckForValidListAndQueue+0x5c>)
 8003d1e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d20:	2200      	movs	r2, #0
 8003d22:	210c      	movs	r1, #12
 8003d24:	200a      	movs	r0, #10
 8003d26:	f7fe fb8d 	bl	8002444 <xQueueGenericCreate>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <prvCheckForValidListAndQueue+0x54>)
 8003d2e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <prvCheckForValidListAndQueue+0x54>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <prvCheckForValidListAndQueue+0x54>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4908      	ldr	r1, [pc, #32]	; (8003d60 <prvCheckForValidListAndQueue+0x68>)
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f7fe fd8c 	bl	800285c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d44:	f000 f9ee 	bl	8004124 <vPortExitCritical>
    }
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000254 	.word	0x20000254
 8003d50:	20000224 	.word	0x20000224
 8003d54:	20000238 	.word	0x20000238
 8003d58:	2000024c 	.word	0x2000024c
 8003d5c:	20000250 	.word	0x20000250
 8003d60:	08007cd8 	.word	0x08007cd8

08003d64 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3b04      	subs	r3, #4
 8003d74:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3b04      	subs	r3, #4
 8003d82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f023 0201 	bic.w	r2, r3, #1
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b04      	subs	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d94:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <pxPortInitialiseStack+0x64>)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b14      	subs	r3, #20
 8003d9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3b04      	subs	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f06f 0202 	mvn.w	r2, #2
 8003db2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3b20      	subs	r3, #32
 8003db8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dba:	68fb      	ldr	r3, [r7, #12]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	08003dcd 	.word	0x08003dcd

08003dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <prvTaskExitError+0x54>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d00a      	beq.n	8003df6 <prvTaskExitError+0x2a>
        __asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	60fb      	str	r3, [r7, #12]
    }
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <prvTaskExitError+0x28>
        __asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60bb      	str	r3, [r7, #8]
    }
 8003e08:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e0a:	bf00      	nop
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0fc      	beq.n	8003e0c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr
 8003e20:	20000010 	.word	0x20000010
	...

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	4770      	bx	lr
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst2>:
 8003e50:	20000120 	.word	0x20000120
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <prvPortStartFirstTask+0x24>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8814 	msr	CONTROL, r0
 8003e6a:	b662      	cpsie	i
 8003e6c:	b661      	cpsie	f
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	df00      	svc	0
 8003e78:	bf00      	nop
 8003e7a:	0000      	.short	0x0000
 8003e7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop

08003e84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e8a:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <xPortStartScheduler+0x120>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a46      	ldr	r2, [pc, #280]	; (8003fa8 <xPortStartScheduler+0x124>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10a      	bne.n	8003eaa <xPortStartScheduler+0x26>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	613b      	str	r3, [r7, #16]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <xPortStartScheduler+0x120>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <xPortStartScheduler+0x128>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10a      	bne.n	8003eca <xPortStartScheduler+0x46>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
    }
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <xPortStartScheduler+0x12c>)
 8003ecc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <xPortStartScheduler+0x130>)
 8003ef0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ef8:	e009      	b.n	8003f0e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f02:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d0ef      	beq.n	8003efa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f1a:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1c3 0307 	rsb	r3, r3, #7
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00a      	beq.n	8003f3c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
    }
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f44:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f50:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f72:	f000 f963 	bl	800423c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <xPortStartScheduler+0x13c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f7c:	f000 f982 	bl	8004284 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <xPortStartScheduler+0x140>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <xPortStartScheduler+0x140>)
 8003f86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f8c:	f7ff ff64 	bl	8003e58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f90:	f7ff f8e4 	bl	800315c <vTaskSwitchContext>
    prvTaskExitError();
 8003f94:	f7ff ff1a 	bl	8003dcc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	e000ed00 	.word	0xe000ed00
 8003fa8:	410fc271 	.word	0x410fc271
 8003fac:	410fc270 	.word	0x410fc270
 8003fb0:	e000e400 	.word	0xe000e400
 8003fb4:	20000260 	.word	0x20000260
 8003fb8:	20000264 	.word	0x20000264
 8003fbc:	e000ed20 	.word	0xe000ed20
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	e000ef34 	.word	0xe000ef34

08003fc8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <vInitPrioGroupValue+0xe4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <vInitPrioGroupValue+0xe8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10a      	bne.n	8003fee <vInitPrioGroupValue+0x26>
        __asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	613b      	str	r3, [r7, #16]
    }
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <vInitPrioGroupValue+0xe4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <vInitPrioGroupValue+0xec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10a      	bne.n	800400e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60fb      	str	r3, [r7, #12]
    }
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <vInitPrioGroupValue+0xf0>)
 8004010:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <vInitPrioGroupValue+0xf4>)
 8004034:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403c:	e009      	b.n	8004052 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3b01      	subs	r3, #1
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004046:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d0ef      	beq.n	800403e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	d00a      	beq.n	8004080 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
    }
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004088:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004094:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000ed00 	.word	0xe000ed00
 80040b0:	410fc271 	.word	0x410fc271
 80040b4:	410fc270 	.word	0x410fc270
 80040b8:	e000e400 	.word	0xe000e400
 80040bc:	20000260 	.word	0x20000260
 80040c0:	20000264 	.word	0x20000264

080040c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	607b      	str	r3, [r7, #4]
    }
 80040dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <vPortEnterCritical+0x58>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <vPortEnterCritical+0x58>)
 80040e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <vPortEnterCritical+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10f      	bne.n	8004110 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <vPortEnterCritical+0x5c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <vPortEnterCritical+0x4c>
        __asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
    }
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <vPortEnterCritical+0x4a>
    }
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000010 	.word	0x20000010
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <vPortExitCritical+0x50>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <vPortExitCritical+0x24>
        __asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
    }
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <vPortExitCritical+0x50>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <vPortExitCritical+0x50>)
 8004150:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <vPortExitCritical+0x50>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <vPortExitCritical+0x42>
 800415a:	2300      	movs	r3, #0
 800415c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004164:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000010 	.word	0x20000010
	...

08004180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004180:	f3ef 8009 	mrs	r0, PSP
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <pxCurrentTCBConst>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f01e 0f10 	tst.w	lr, #16
 8004190:	bf08      	it	eq
 8004192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419a:	6010      	str	r0, [r2, #0]
 800419c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041a4:	f380 8811 	msr	BASEPRI, r0
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f7fe ffd4 	bl	800315c <vTaskSwitchContext>
 80041b4:	f04f 0000 	mov.w	r0, #0
 80041b8:	f380 8811 	msr	BASEPRI, r0
 80041bc:	bc09      	pop	{r0, r3}
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	6808      	ldr	r0, [r1, #0]
 80041c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c6:	f01e 0f10 	tst.w	lr, #16
 80041ca:	bf08      	it	eq
 80041cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041d0:	f380 8809 	msr	PSP, r0
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	f3af 8000 	nop.w

080041e0 <pxCurrentTCBConst>:
 80041e0:	20000120 	.word	0x20000120
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop

080041e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
        __asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
    }
 8004200:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004202:	f002 f9a5 	bl	8006550 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004206:	f7fe feb1 	bl	8002f6c <xTaskIncrementTick>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004210:	f002 f9fc 	bl	800660c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <SysTick_Handler+0x50>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	e001      	b.n	8004222 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800421e:	f002 f9d9 	bl	80065d4 <SEGGER_SYSVIEW_RecordExitISR>
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f383 8811 	msr	BASEPRI, r3
    }
 800422c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <vPortSetupTimerInterrupt+0x38>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <vPortSetupTimerInterrupt+0x3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <vPortSetupTimerInterrupt+0x40>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <vPortSetupTimerInterrupt+0x44>)
 800425a:	3b01      	subs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000e010 	.word	0xe000e010
 8004274:	e000e018 	.word	0xe000e018
 8004278:	20000000 	.word	0x20000000
 800427c:	10624dd3 	.word	0x10624dd3
 8004280:	e000e014 	.word	0xe000e014

08004284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004294 <vPortEnableVFP+0x10>
 8004288:	6801      	ldr	r1, [r0, #0]
 800428a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800428e:	6001      	str	r1, [r0, #0]
 8004290:	4770      	bx	lr
 8004292:	0000      	.short	0x0000
 8004294:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop

0800429c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80042a2:	f3ef 8305 	mrs	r3, IPSR
 80042a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d914      	bls.n	80042d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ae:	4a17      	ldr	r2, [pc, #92]	; (800430c <vPortValidateInterruptPriority+0x70>)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <vPortValidateInterruptPriority+0x74>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	7afa      	ldrb	r2, [r7, #11]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20a      	bcs.n	80042d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
    }
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <vPortValidateInterruptPriority+0x78>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <vPortValidateInterruptPriority+0x7c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d90a      	bls.n	80042fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	603b      	str	r3, [r7, #0]
    }
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <vPortValidateInterruptPriority+0x60>
    }
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e3f0 	.word	0xe000e3f0
 8004310:	20000260 	.word	0x20000260
 8004314:	e000ed0c 	.word	0xe000ed0c
 8004318:	20000264 	.word	0x20000264

0800431c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004328:	f7fe fcfe 	bl	8002d28 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <pvPortMalloc+0x160>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004334:	f000 f908 	bl	8004548 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d012      	beq.n	8004364 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800433e:	2208      	movs	r2, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	3308      	adds	r3, #8
 800434a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	43db      	mvns	r3, r3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d804      	bhi.n	8004360 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	e001      	b.n	8004364 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db70      	blt.n	800444c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06d      	beq.n	800444c <pvPortMalloc+0x130>
 8004370:	4b43      	ldr	r3, [pc, #268]	; (8004480 <pvPortMalloc+0x164>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d868      	bhi.n	800444c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <pvPortMalloc+0x168>)
 800437c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <pvPortMalloc+0x168>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004384:	e004      	b.n	8004390 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d903      	bls.n	80043a2 <pvPortMalloc+0x86>
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f1      	bne.n	8004386 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <pvPortMalloc+0x160>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d04f      	beq.n	800444c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2208      	movs	r2, #8
 80043b2:	4413      	add	r3, r2
 80043b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1ad2      	subs	r2, r2, r3
 80043c6:	2308      	movs	r3, #8
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d91f      	bls.n	800440e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <pvPortMalloc+0xda>
        __asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	613b      	str	r3, [r7, #16]
    }
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004408:	6978      	ldr	r0, [r7, #20]
 800440a:	f000 f8f9 	bl	8004600 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <pvPortMalloc+0x164>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <pvPortMalloc+0x164>)
 800441a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <pvPortMalloc+0x164>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <pvPortMalloc+0x16c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d203      	bcs.n	8004430 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <pvPortMalloc+0x164>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <pvPortMalloc+0x16c>)
 800442e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <pvPortMalloc+0x170>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	4a10      	ldr	r2, [pc, #64]	; (800448c <pvPortMalloc+0x170>)
 800444a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800444c:	f7fe fc7a 	bl	8002d44 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <pvPortMalloc+0x154>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <pvPortMalloc+0x152>
    return pvReturn;
 8004470:	69fb      	ldr	r3, [r7, #28]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3728      	adds	r7, #40	; 0x28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20012e70 	.word	0x20012e70
 8004480:	20012e74 	.word	0x20012e74
 8004484:	20012e68 	.word	0x20012e68
 8004488:	20012e78 	.word	0x20012e78
 800448c:	20012e7c 	.word	0x20012e7c

08004490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d049      	beq.n	8004536 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044a2:	2308      	movs	r3, #8
 80044a4:	425b      	negs	r3, r3
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <vPortFree+0x3e>
        __asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60fb      	str	r3, [r7, #12]
    }
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <vPortFree+0x5c>
        __asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60bb      	str	r3, [r7, #8]
    }
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0fdb      	lsrs	r3, r3, #31
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d118      	bne.n	8004536 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004510:	f7fe fc0a 	bl	8002d28 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <vPortFree+0xb0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4413      	add	r3, r2
 800451e:	4a08      	ldr	r2, [pc, #32]	; (8004540 <vPortFree+0xb0>)
 8004520:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004522:	6938      	ldr	r0, [r7, #16]
 8004524:	f000 f86c 	bl	8004600 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <vPortFree+0xb4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <vPortFree+0xb4>)
 8004530:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004532:	f7fe fc07 	bl	8002d44 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20012e74 	.word	0x20012e74
 8004544:	20012e80 	.word	0x20012e80

08004548 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800454e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004552:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <prvHeapInit+0xa4>)
 8004556:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3307      	adds	r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <prvHeapInit+0xa4>)
 8004578:	4413      	add	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <prvHeapInit+0xa8>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <prvHeapInit+0xa8>)
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004594:	2208      	movs	r2, #8
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <prvHeapInit+0xac>)
 80045a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <prvHeapInit+0xac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <prvHeapInit+0xac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	1ad2      	subs	r2, r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvHeapInit+0xac>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <prvHeapInit+0xb0>)
 80045d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <prvHeapInit+0xb4>)
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000268 	.word	0x20000268
 80045f0:	20012e68 	.word	0x20012e68
 80045f4:	20012e70 	.word	0x20012e70
 80045f8:	20012e78 	.word	0x20012e78
 80045fc:	20012e74 	.word	0x20012e74

08004600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <prvInsertBlockIntoFreeList+0xac>)
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e002      	b.n	8004614 <prvInsertBlockIntoFreeList+0x14>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d8f7      	bhi.n	800460e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4413      	add	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d108      	bne.n	8004642 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d118      	bne.n	8004688 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d00d      	beq.n	800467e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e008      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e003      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d002      	beq.n	800469e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20012e68 	.word	0x20012e68
 80046b0:	20012e70 	.word	0x20012e70

080046b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046b8:	4803      	ldr	r0, [pc, #12]	; (80046c8 <_cbSendSystemDesc+0x14>)
 80046ba:	f001 fef3 	bl	80064a4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046be:	4803      	ldr	r0, [pc, #12]	; (80046cc <_cbSendSystemDesc+0x18>)
 80046c0:	f001 fef0 	bl	80064a4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	08007ce0 	.word	0x08007ce0
 80046cc:	08007d1c 	.word	0x08007d1c

080046d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80046de:	4a06      	ldr	r2, [pc, #24]	; (80046f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80046e0:	f001 fa5e 	bl	8005ba0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80046e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80046e8:	f001 fa9e 	bl	8005c28 <SEGGER_SYSVIEW_SetRAMBase>
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000000 	.word	0x20000000
 80046f4:	080046b5 	.word	0x080046b5
 80046f8:	08007db8 	.word	0x08007db8

080046fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	e033      	b.n	8004770 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004708:	491e      	ldr	r1, [pc, #120]	; (8004784 <_cbSendTaskList+0x88>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	491a      	ldr	r1, [pc, #104]	; (8004784 <_cbSendTaskList+0x88>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	3304      	adds	r3, #4
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	4c16      	ldr	r4, [pc, #88]	; (8004784 <_cbSendTaskList+0x88>)
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4423      	add	r3, r4
 8004738:	3308      	adds	r3, #8
 800473a:	681c      	ldr	r4, [r3, #0]
 800473c:	4d11      	ldr	r5, [pc, #68]	; (8004784 <_cbSendTaskList+0x88>)
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	442b      	add	r3, r5
 800474a:	330c      	adds	r3, #12
 800474c:	681d      	ldr	r5, [r3, #0]
 800474e:	4e0d      	ldr	r6, [pc, #52]	; (8004784 <_cbSendTaskList+0x88>)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4433      	add	r3, r6
 800475c:	3310      	adds	r3, #16
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	462b      	mov	r3, r5
 8004764:	4622      	mov	r2, r4
 8004766:	f000 f8bd 	bl	80048e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3301      	adds	r3, #1
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <_cbSendTaskList+0x8c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3c6      	bcc.n	8004708 <_cbSendTaskList+0xc>
  }
}
 800477a:	bf00      	nop
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	20012e84 	.word	0x20012e84
 8004788:	20012f24 	.word	0x20012f24

0800478c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004794:	f7fe fbd8 	bl	8002f48 <xTaskGetTickCountFromISR>
 8004798:	4603      	mov	r3, r0
 800479a:	2200      	movs	r2, #0
 800479c:	469a      	mov	sl, r3
 800479e:	4693      	mov	fp, r2
 80047a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	f04f 0a00 	mov.w	sl, #0
 80047b0:	f04f 0b00 	mov.w	fp, #0
 80047b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047c0:	4652      	mov	r2, sl
 80047c2:	465b      	mov	r3, fp
 80047c4:	1a14      	subs	r4, r2, r0
 80047c6:	eb63 0501 	sbc.w	r5, r3, r1
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	00ab      	lsls	r3, r5, #2
 80047d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047d8:	00a2      	lsls	r2, r4, #2
 80047da:	4614      	mov	r4, r2
 80047dc:	461d      	mov	r5, r3
 80047de:	eb14 0800 	adds.w	r8, r4, r0
 80047e2:	eb45 0901 	adc.w	r9, r5, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fa:	4690      	mov	r8, r2
 80047fc:	4699      	mov	r9, r3
 80047fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004814 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004822:	2205      	movs	r2, #5
 8004824:	492b      	ldr	r1, [pc, #172]	; (80048d4 <SYSVIEW_AddTask+0xc0>)
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f002 f98a 	bl	8006b40 <memcmp>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04b      	beq.n	80048ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d903      	bls.n	8004842 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800483a:	4828      	ldr	r0, [pc, #160]	; (80048dc <SYSVIEW_AddTask+0xc8>)
 800483c:	f002 f8ee 	bl	8006a1c <SEGGER_SYSVIEW_Warn>
    return;
 8004840:	e044      	b.n	80048cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004842:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4926      	ldr	r1, [pc, #152]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4921      	ldr	r1, [pc, #132]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3304      	adds	r3, #4
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	491b      	ldr	r1, [pc, #108]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3308      	adds	r3, #8
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4916      	ldr	r1, [pc, #88]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	330c      	adds	r3, #12
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4910      	ldr	r1, [pc, #64]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3310      	adds	r3, #16
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 80048b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f80e 	bl	80048e4 <SYSVIEW_SendTaskInfo>
 80048c8:	e000      	b.n	80048cc <SYSVIEW_AddTask+0xb8>
    return;
 80048ca:	bf00      	nop

}
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	08007d2c 	.word	0x08007d2c
 80048d8:	20012f24 	.word	0x20012f24
 80048dc:	08007d34 	.word	0x08007d34
 80048e0:	20012e84 	.word	0x20012e84

080048e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80048f2:	f107 0314 	add.w	r3, r7, #20
 80048f6:	2214      	movs	r2, #20
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 f93e 	bl	8006b7c <memset>
  TaskInfo.TaskID     = TaskID;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fccb 	bl	80062b4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800491e:	bf00      	nop
 8004920:	3728      	adds	r7, #40	; 0x28
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800492e:	4b26      	ldr	r3, [pc, #152]	; (80049c8 <_DoInit+0xa0>)
 8004930:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004932:	22a8      	movs	r2, #168	; 0xa8
 8004934:	2100      	movs	r1, #0
 8004936:	6838      	ldr	r0, [r7, #0]
 8004938:	f002 f920 	bl	8006b7c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2203      	movs	r2, #3
 8004940:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2203      	movs	r2, #3
 8004946:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	4a20      	ldr	r2, [pc, #128]	; (80049cc <_DoInit+0xa4>)
 800494c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <_DoInit+0xa8>)
 8004952:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800495a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2200      	movs	r2, #0
 8004966:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	4a16      	ldr	r2, [pc, #88]	; (80049cc <_DoInit+0xa4>)
 8004972:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <_DoInit+0xac>)
 8004978:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2210      	movs	r2, #16
 800497e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2200      	movs	r2, #0
 800498a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004992:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004996:	2300      	movs	r3, #0
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	e00c      	b.n	80049b6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1c3 030f 	rsb	r3, r3, #15
 80049a2:	4a0d      	ldr	r2, [pc, #52]	; (80049d8 <_DoInit+0xb0>)
 80049a4:	5cd1      	ldrb	r1, [r2, r3]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4413      	add	r3, r2
 80049ac:	460a      	mov	r2, r1
 80049ae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3301      	adds	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b0f      	cmp	r3, #15
 80049ba:	d9ef      	bls.n	800499c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80049bc:	f3bf 8f5f 	dmb	sy
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20012f28 	.word	0x20012f28
 80049cc:	08007d84 	.word	0x08007d84
 80049d0:	20012fd0 	.word	0x20012fd0
 80049d4:	200133d0 	.word	0x200133d0
 80049d8:	08007dc0 	.word	0x08007dc0

080049dc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80049e8:	2300      	movs	r3, #0
 80049ea:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d905      	bls.n	8004a0c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0a:	e007      	b.n	8004a1c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	69b9      	ldr	r1, [r7, #24]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	1acb      	subs	r3, r1, r3
 8004a16:	4413      	add	r3, r2
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bf28      	it	cs
 8004a2a:	4613      	movcs	r3, r2
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	4293      	cmp	r3, r2
 8004a34:	bf28      	it	cs
 8004a36:	4613      	movcs	r3, r2
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	4413      	add	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	6978      	ldr	r0, [r7, #20]
 8004a4a:	f002 f889 	bl	8006b60 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004a4e:	6a3a      	ldr	r2, [r7, #32]
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	4413      	add	r3, r2
 8004a54:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	4413      	add	r3, r2
 8004a5c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	4413      	add	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	69fa      	ldr	r2, [r7, #28]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d101      	bne.n	8004a7c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a7c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1b2      	bne.n	80049f2 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3728      	adds	r7, #40	; 0x28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b088      	sub	sp, #32
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d911      	bls.n	8004ade <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	6938      	ldr	r0, [r7, #16]
 8004aca:	f002 f849 	bl	8006b60 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ace:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004adc:	e01f      	b.n	8004b1e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4413      	add	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	6938      	ldr	r0, [r7, #16]
 8004af2:	f002 f835 	bl	8006b60 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	4413      	add	r3, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	6938      	ldr	r0, [r7, #16]
 8004b10:	f002 f826 	bl	8006b60 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b14:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	60da      	str	r2, [r3, #12]
}
 8004b1e:	bf00      	nop
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004b26:	b480      	push	{r7}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d808      	bhi.n	8004b54 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad2      	subs	r2, r2, r3
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	e004      	b.n	8004b5e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004b5e:	697b      	ldr	r3, [r7, #20]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08c      	sub	sp, #48	; 0x30
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004b78:	4b3e      	ldr	r3, [pc, #248]	; (8004c74 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b7a:	623b      	str	r3, [r7, #32]
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b53      	cmp	r3, #83	; 0x53
 8004b84:	d001      	beq.n	8004b8a <SEGGER_RTT_ReadNoLock+0x1e>
 8004b86:	f7ff fecf 	bl	8004928 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	005b      	lsls	r3, r3, #1
 8004b90:	4413      	add	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	3360      	adds	r3, #96	; 0x60
 8004b96:	4a37      	ldr	r2, [pc, #220]	; (8004c74 <SEGGER_RTT_ReadNoLock+0x108>)
 8004b98:	4413      	add	r3, r2
 8004b9a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d92b      	bls.n	8004c10 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	bf28      	it	cs
 8004bca:	4613      	movcs	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	4413      	add	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	6939      	ldr	r1, [r7, #16]
 8004bdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bde:	f001 ffbf 	bl	8006b60 <memcpy>
    NumBytesRead += NumBytesRem;
 8004be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	4413      	add	r3, r2
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4413      	add	r3, r2
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d101      	bne.n	8004c10 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf28      	it	cs
 8004c20:	4613      	movcs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d019      	beq.n	8004c5e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	4413      	add	r3, r2
 8004c32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	6939      	ldr	r1, [r7, #16]
 8004c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c3a:	f001 ff91 	bl	8006b60 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	4413      	add	r3, r2
 8004c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c68:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3730      	adds	r7, #48	; 0x30
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20012f28 	.word	0x20012f28

08004c78 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	4413      	add	r3, r2
 8004c92:	00db      	lsls	r3, r3, #3
 8004c94:	4a1f      	ldr	r2, [pc, #124]	; (8004d14 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004c96:	4413      	add	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d029      	beq.n	8004cf6 <SEGGER_RTT_WriteNoLock+0x7e>
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d82e      	bhi.n	8004d04 <SEGGER_RTT_WriteNoLock+0x8c>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d002      	beq.n	8004cb0 <SEGGER_RTT_WriteNoLock+0x38>
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d013      	beq.n	8004cd6 <SEGGER_RTT_WriteNoLock+0x5e>
 8004cae:	e029      	b.n	8004d04 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004cb0:	6978      	ldr	r0, [r7, #20]
 8004cb2:	f7ff ff38 	bl	8004b26 <_GetAvailWriteSpace>
 8004cb6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d202      	bcs.n	8004cc6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004cc4:	e021      	b.n	8004d0a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69b9      	ldr	r1, [r7, #24]
 8004cce:	6978      	ldr	r0, [r7, #20]
 8004cd0:	f7ff fee1 	bl	8004a96 <_WriteNoCheck>
    break;
 8004cd4:	e019      	b.n	8004d0a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff25 	bl	8004b26 <_GetAvailWriteSpace>
 8004cdc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	bf28      	it	cs
 8004ce6:	4613      	movcs	r3, r2
 8004ce8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	69b9      	ldr	r1, [r7, #24]
 8004cee:	6978      	ldr	r0, [r7, #20]
 8004cf0:	f7ff fed1 	bl	8004a96 <_WriteNoCheck>
    break;
 8004cf4:	e009      	b.n	8004d0a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	69b9      	ldr	r1, [r7, #24]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff fe6e 	bl	80049dc <_WriteBlocking>
 8004d00:	61f8      	str	r0, [r7, #28]
    break;
 8004d02:	e002      	b.n	8004d0a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004d04:	2300      	movs	r3, #0
 8004d06:	61fb      	str	r3, [r7, #28]
    break;
 8004d08:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20012f28 	.word	0x20012f28

08004d18 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004d24:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <SEGGER_RTT_Write+0x48>)
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b53      	cmp	r3, #83	; 0x53
 8004d30:	d001      	beq.n	8004d36 <SEGGER_RTT_Write+0x1e>
 8004d32:	f7ff fdf9 	bl	8004928 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d36:	f3ef 8311 	mrs	r3, BASEPRI
 8004d3a:	f04f 0120 	mov.w	r1, #32
 8004d3e:	f381 8811 	msr	BASEPRI, r1
 8004d42:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f7ff ff95 	bl	8004c78 <SEGGER_RTT_WriteNoLock>
 8004d4e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004d56:	697b      	ldr	r3, [r7, #20]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20012f28 	.word	0x20012f28

08004d64 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004d72:	4b3d      	ldr	r3, [pc, #244]	; (8004e68 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b53      	cmp	r3, #83	; 0x53
 8004d7e:	d001      	beq.n	8004d84 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004d80:	f7ff fdd2 	bl	8004928 <_DoInit>
  SEGGER_RTT_LOCK();
 8004d84:	f3ef 8311 	mrs	r3, BASEPRI
 8004d88:	f04f 0120 	mov.w	r1, #32
 8004d8c:	f381 8811 	msr	BASEPRI, r1
 8004d90:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d92:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004d94:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004d9a:	6939      	ldr	r1, [r7, #16]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	00db      	lsls	r3, r3, #3
 8004da8:	440b      	add	r3, r1
 8004daa:	3304      	adds	r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3301      	adds	r3, #1
 8004db6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	dbeb      	blt.n	8004d9a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004dc2:	e000      	b.n	8004dc6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004dc4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	da3f      	bge.n	8004e50 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004dd0:	6939      	ldr	r1, [r7, #16]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	440b      	add	r3, r1
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004de4:	6939      	ldr	r1, [r7, #16]
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	440b      	add	r3, r1
 8004df4:	3304      	adds	r3, #4
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	69fa      	ldr	r2, [r7, #28]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	005b      	lsls	r3, r3, #1
 8004e02:	4413      	add	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	440b      	add	r3, r1
 8004e08:	3320      	adds	r3, #32
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004e0e:	6939      	ldr	r1, [r7, #16]
 8004e10:	69fa      	ldr	r2, [r7, #28]
 8004e12:	4613      	mov	r3, r2
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	4413      	add	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	440b      	add	r3, r1
 8004e1c:	3328      	adds	r3, #40	; 0x28
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004e22:	6939      	ldr	r1, [r7, #16]
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	440b      	add	r3, r1
 8004e30:	3324      	adds	r3, #36	; 0x24
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004e36:	6939      	ldr	r1, [r7, #16]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	4413      	add	r3, r2
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	440b      	add	r3, r1
 8004e44:	332c      	adds	r3, #44	; 0x2c
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e4a:	f3bf 8f5f 	dmb	sy
 8004e4e:	e002      	b.n	8004e56 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004e50:	f04f 33ff 	mov.w	r3, #4294967295
 8004e54:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20012f28 	.word	0x20012f28

08004e6c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004e7c:	623b      	str	r3, [r7, #32]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b53      	cmp	r3, #83	; 0x53
 8004e86:	d001      	beq.n	8004e8c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004e88:	f7ff fd4e 	bl	8004928 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004e8e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d82c      	bhi.n	8004ef0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004e96:	f3ef 8311 	mrs	r3, BASEPRI
 8004e9a:	f04f 0120 	mov.w	r1, #32
 8004e9e:	f381 8811 	msr	BASEPRI, r1
 8004ea2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	3360      	adds	r3, #96	; 0x60
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00e      	beq.n	8004eda <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ede:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ee0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	627b      	str	r3, [r7, #36]	; 0x24
 8004eee:	e002      	b.n	8004ef6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3728      	adds	r7, #40	; 0x28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	20012f28 	.word	0x20012f28

08004f04 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004f04:	b480      	push	{r7}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	60fa      	str	r2, [r7, #12]
 8004f1a:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b80      	cmp	r3, #128	; 0x80
 8004f20:	d90a      	bls.n	8004f38 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004f22:	2380      	movs	r3, #128	; 0x80
 8004f24:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004f26:	e007      	b.n	8004f38 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	1c53      	adds	r3, r2, #1
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	1c59      	adds	r1, r3, #1
 8004f32:	60f9      	str	r1, [r7, #12]
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1e5a      	subs	r2, r3, #1
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <_EncodeStr+0x46>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1ee      	bne.n	8004f28 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8004f56:	68fb      	ldr	r3, [r7, #12]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	371c      	adds	r7, #28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3307      	adds	r3, #7
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004f82:	4b35      	ldr	r3, [pc, #212]	; (8005058 <_HandleIncomingPacket+0xdc>)
 8004f84:	7e1b      	ldrb	r3, [r3, #24]
 8004f86:	4618      	mov	r0, r3
 8004f88:	1cfb      	adds	r3, r7, #3
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f7ff fded 	bl	8004b6c <SEGGER_RTT_ReadNoLock>
 8004f92:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d052      	beq.n	8005040 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8004f9a:	78fb      	ldrb	r3, [r7, #3]
 8004f9c:	2b80      	cmp	r3, #128	; 0x80
 8004f9e:	d031      	beq.n	8005004 <_HandleIncomingPacket+0x88>
 8004fa0:	2b80      	cmp	r3, #128	; 0x80
 8004fa2:	dc40      	bgt.n	8005026 <_HandleIncomingPacket+0xaa>
 8004fa4:	2b07      	cmp	r3, #7
 8004fa6:	dc15      	bgt.n	8004fd4 <_HandleIncomingPacket+0x58>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dd3c      	ble.n	8005026 <_HandleIncomingPacket+0xaa>
 8004fac:	3b01      	subs	r3, #1
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d839      	bhi.n	8005026 <_HandleIncomingPacket+0xaa>
 8004fb2:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <_HandleIncomingPacket+0x3c>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fdb 	.word	0x08004fdb
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe7 	.word	0x08004fe7
 8004fc4:	08004fed 	.word	0x08004fed
 8004fc8:	08004ff3 	.word	0x08004ff3
 8004fcc:	08004ff9 	.word	0x08004ff9
 8004fd0:	08004fff 	.word	0x08004fff
 8004fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004fd6:	d035      	beq.n	8005044 <_HandleIncomingPacket+0xc8>
 8004fd8:	e025      	b.n	8005026 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004fda:	f000 fff1 	bl	8005fc0 <SEGGER_SYSVIEW_Start>
      break;
 8004fde:	e036      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004fe0:	f001 f8a8 	bl	8006134 <SEGGER_SYSVIEW_Stop>
      break;
 8004fe4:	e033      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004fe6:	f001 fa81 	bl	80064ec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004fea:	e030      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004fec:	f001 fa46 	bl	800647c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ff0:	e02d      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ff2:	f001 f8c5 	bl	8006180 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004ff6:	e02a      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004ff8:	f001 fcbe 	bl	8006978 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004ffc:	e027      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004ffe:	f001 fc9d 	bl	800693c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005002:	e024      	b.n	800504e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005004:	4b14      	ldr	r3, [pc, #80]	; (8005058 <_HandleIncomingPacket+0xdc>)
 8005006:	7e1b      	ldrb	r3, [r3, #24]
 8005008:	4618      	mov	r0, r3
 800500a:	1cfb      	adds	r3, r7, #3
 800500c:	2201      	movs	r2, #1
 800500e:	4619      	mov	r1, r3
 8005010:	f7ff fdac 	bl	8004b6c <SEGGER_RTT_ReadNoLock>
 8005014:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fc02 	bl	8006828 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005024:	e010      	b.n	8005048 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	b25b      	sxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	da0e      	bge.n	800504c <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <_HandleIncomingPacket+0xdc>)
 8005030:	7e1b      	ldrb	r3, [r3, #24]
 8005032:	4618      	mov	r0, r3
 8005034:	1cfb      	adds	r3, r7, #3
 8005036:	2201      	movs	r2, #1
 8005038:	4619      	mov	r1, r3
 800503a:	f7ff fd97 	bl	8004b6c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800503e:	e005      	b.n	800504c <_HandleIncomingPacket+0xd0>
    }
  }
 8005040:	bf00      	nop
 8005042:	e004      	b.n	800504e <_HandleIncomingPacket+0xd2>
      break;
 8005044:	bf00      	nop
 8005046:	e002      	b.n	800504e <_HandleIncomingPacket+0xd2>
      break;
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <_HandleIncomingPacket+0xd2>
      break;
 800504c:	bf00      	nop
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200143e8 	.word	0x200143e8

0800505c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	; 0x30
 8005060:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005062:	2301      	movs	r3, #1
 8005064:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005066:	1d3b      	adds	r3, r7, #4
 8005068:	3301      	adds	r3, #1
 800506a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005070:	4b31      	ldr	r3, [pc, #196]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 8005076:	e00b      	b.n	8005090 <_TrySendOverflowPacket+0x34>
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	09db      	lsrs	r3, r3, #7
 800508e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005092:	2b7f      	cmp	r3, #127	; 0x7f
 8005094:	d8f0      	bhi.n	8005078 <_TrySendOverflowPacket+0x1c>
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800509c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80050a6:	4b25      	ldr	r3, [pc, #148]	; (800513c <_TrySendOverflowPacket+0xe0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80050ac:	4b22      	ldr	r3, [pc, #136]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	623b      	str	r3, [r7, #32]
 80050be:	e00b      	b.n	80050d8 <_TrySendOverflowPacket+0x7c>
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	1c59      	adds	r1, r3, #1
 80050c8:	6279      	str	r1, [r7, #36]	; 0x24
 80050ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	09db      	lsrs	r3, r3, #7
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b7f      	cmp	r3, #127	; 0x7f
 80050dc:	d8f0      	bhi.n	80050c0 <_TrySendOverflowPacket+0x64>
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	627a      	str	r2, [r7, #36]	; 0x24
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80050ee:	4b12      	ldr	r3, [pc, #72]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 80050f0:	785b      	ldrb	r3, [r3, #1]
 80050f2:	4618      	mov	r0, r3
 80050f4:	1d3b      	adds	r3, r7, #4
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	1d3b      	adds	r3, r7, #4
 80050fe:	4619      	mov	r1, r3
 8005100:	f7fb f866 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005104:	4603      	mov	r3, r0
 8005106:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d009      	beq.n	8005122 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800510e:	4a0a      	ldr	r2, [pc, #40]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	4b06      	ldr	r3, [pc, #24]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e004      	b.n	800512c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005122:	4b05      	ldr	r3, [pc, #20]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	3301      	adds	r3, #1
 8005128:	4a03      	ldr	r2, [pc, #12]	; (8005138 <_TrySendOverflowPacket+0xdc>)
 800512a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800512c:	693b      	ldr	r3, [r7, #16]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3730      	adds	r7, #48	; 0x30
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	200143e8 	.word	0x200143e8
 800513c:	e0001004 	.word	0xe0001004

08005140 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	; 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800514c:	4b98      	ldr	r3, [pc, #608]	; (80053b0 <_SendPacket+0x270>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d010      	beq.n	8005176 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005154:	4b96      	ldr	r3, [pc, #600]	; (80053b0 <_SendPacket+0x270>)
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 812d 	beq.w	80053b8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800515e:	4b94      	ldr	r3, [pc, #592]	; (80053b0 <_SendPacket+0x270>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d109      	bne.n	800517a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005166:	f7ff ff79 	bl	800505c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800516a:	4b91      	ldr	r3, [pc, #580]	; (80053b0 <_SendPacket+0x270>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	f040 8124 	bne.w	80053bc <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8005174:	e001      	b.n	800517a <_SendPacket+0x3a>
    goto Send;
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <_SendPacket+0x3c>
Send:
 800517a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b1f      	cmp	r3, #31
 8005180:	d809      	bhi.n	8005196 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005182:	4b8b      	ldr	r3, [pc, #556]	; (80053b0 <_SendPacket+0x270>)
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	fa22 f303 	lsr.w	r3, r2, r3
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 8115 	bne.w	80053c0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b17      	cmp	r3, #23
 800519a:	d807      	bhi.n	80051ac <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	3b01      	subs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	701a      	strb	r2, [r3, #0]
 80051aa:	e0c4      	b.n	8005336 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b7f      	cmp	r3, #127	; 0x7f
 80051b8:	d912      	bls.n	80051e0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	09da      	lsrs	r2, r3, #7
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	3a01      	subs	r2, #1
 80051d2:	60fa      	str	r2, [r7, #12]
 80051d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	701a      	strb	r2, [r3, #0]
 80051de:	e006      	b.n	80051ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b7e      	cmp	r3, #126	; 0x7e
 80051f2:	d807      	bhi.n	8005204 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e098      	b.n	8005336 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800520a:	d212      	bcs.n	8005232 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	09da      	lsrs	r2, r3, #7
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3b01      	subs	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	3a01      	subs	r2, #1
 8005224:	60fa      	str	r2, [r7, #12]
 8005226:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	e081      	b.n	8005336 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005238:	d21d      	bcs.n	8005276 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	0b9a      	lsrs	r2, r3, #14
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3b01      	subs	r3, #1
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	09db      	lsrs	r3, r3, #7
 800524e:	b2db      	uxtb	r3, r3
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	3a01      	subs	r2, #1
 8005254:	60fa      	str	r2, [r7, #12]
 8005256:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800525a:	b2da      	uxtb	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	3a01      	subs	r2, #1
 8005268:	60fa      	str	r2, [r7, #12]
 800526a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800526e:	b2da      	uxtb	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e05f      	b.n	8005336 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800527c:	d228      	bcs.n	80052d0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	0d5a      	lsrs	r2, r3, #21
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3b01      	subs	r3, #1
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	0b9b      	lsrs	r3, r3, #14
 8005292:	b2db      	uxtb	r3, r3
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	3a01      	subs	r2, #1
 8005298:	60fa      	str	r2, [r7, #12]
 800529a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	09db      	lsrs	r3, r3, #7
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	3a01      	subs	r2, #1
 80052ae:	60fa      	str	r2, [r7, #12]
 80052b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	3a01      	subs	r2, #1
 80052c2:	60fa      	str	r2, [r7, #12]
 80052c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	e032      	b.n	8005336 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	0f1a      	lsrs	r2, r3, #28
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3b01      	subs	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	0d5b      	lsrs	r3, r3, #21
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	3a01      	subs	r2, #1
 80052ea:	60fa      	str	r2, [r7, #12]
 80052ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0b9b      	lsrs	r3, r3, #14
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	3a01      	subs	r2, #1
 8005300:	60fa      	str	r2, [r7, #12]
 8005302:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005306:	b2da      	uxtb	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	09db      	lsrs	r3, r3, #7
 8005310:	b2db      	uxtb	r3, r3
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	3a01      	subs	r2, #1
 8005316:	60fa      	str	r2, [r7, #12]
 8005318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	3a01      	subs	r2, #1
 800532a:	60fa      	str	r2, [r7, #12]
 800532c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005330:	b2da      	uxtb	r2, r3
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005336:	4b1f      	ldr	r3, [pc, #124]	; (80053b4 <_SendPacket+0x274>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800533c:	4b1c      	ldr	r3, [pc, #112]	; (80053b0 <_SendPacket+0x270>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	627b      	str	r3, [r7, #36]	; 0x24
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	e00b      	b.n	8005368 <_SendPacket+0x228>
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	6279      	str	r1, [r7, #36]	; 0x24
 800535a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	09db      	lsrs	r3, r3, #7
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	2b7f      	cmp	r3, #127	; 0x7f
 800536c:	d8f0      	bhi.n	8005350 <_SendPacket+0x210>
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	627a      	str	r2, [r7, #36]	; 0x24
 8005374:	6a3a      	ldr	r2, [r7, #32]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <_SendPacket+0x270>)
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	4618      	mov	r0, r3
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	461a      	mov	r2, r3
 800538c:	68f9      	ldr	r1, [r7, #12]
 800538e:	f7fa ff1f 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005392:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800539a:	4a05      	ldr	r2, [pc, #20]	; (80053b0 <_SendPacket+0x270>)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	60d3      	str	r3, [r2, #12]
 80053a0:	e00f      	b.n	80053c2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053a2:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <_SendPacket+0x270>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b01      	ldr	r3, [pc, #4]	; (80053b0 <_SendPacket+0x270>)
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e008      	b.n	80053c2 <_SendPacket+0x282>
 80053b0:	200143e8 	.word	0x200143e8
 80053b4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80053b8:	bf00      	nop
 80053ba:	e002      	b.n	80053c2 <_SendPacket+0x282>
      goto SendDone;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <_SendPacket+0x282>
      goto SendDone;
 80053c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <_SendPacket+0x2d4>)
 80053c4:	7e1b      	ldrb	r3, [r3, #24]
 80053c6:	4619      	mov	r1, r3
 80053c8:	4a13      	ldr	r2, [pc, #76]	; (8005418 <_SendPacket+0x2d8>)
 80053ca:	460b      	mov	r3, r1
 80053cc:	005b      	lsls	r3, r3, #1
 80053ce:	440b      	add	r3, r1
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	336c      	adds	r3, #108	; 0x6c
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <_SendPacket+0x2d4>)
 80053da:	7e1b      	ldrb	r3, [r3, #24]
 80053dc:	4618      	mov	r0, r3
 80053de:	490e      	ldr	r1, [pc, #56]	; (8005418 <_SendPacket+0x2d8>)
 80053e0:	4603      	mov	r3, r0
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	4403      	add	r3, r0
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	440b      	add	r3, r1
 80053ea:	3370      	adds	r3, #112	; 0x70
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d00b      	beq.n	800540a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80053f2:	4b08      	ldr	r3, [pc, #32]	; (8005414 <_SendPacket+0x2d4>)
 80053f4:	789b      	ldrb	r3, [r3, #2]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d107      	bne.n	800540a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80053fa:	4b06      	ldr	r3, [pc, #24]	; (8005414 <_SendPacket+0x2d4>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005400:	f7ff fdbc 	bl	8004f7c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <_SendPacket+0x2d4>)
 8005406:	2200      	movs	r2, #0
 8005408:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800540a:	bf00      	nop
 800540c:	3728      	adds	r7, #40	; 0x28
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	200143e8 	.word	0x200143e8
 8005418:	20012f28 	.word	0x20012f28

0800541c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	3301      	adds	r3, #1
 8005432:	2b80      	cmp	r3, #128	; 0x80
 8005434:	d80a      	bhi.n	800544c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	1c59      	adds	r1, r3, #1
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6051      	str	r1, [r2, #4]
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1c5a      	adds	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d15a      	bne.n	800550a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	627b      	str	r3, [r7, #36]	; 0x24
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	623b      	str	r3, [r7, #32]
 8005474:	e00b      	b.n	800548e <_StoreChar+0x72>
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	b2da      	uxtb	r2, r3
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	1c59      	adds	r1, r3, #1
 800547e:	6279      	str	r1, [r7, #36]	; 0x24
 8005480:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005484:	b2d2      	uxtb	r2, r2
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	6a3b      	ldr	r3, [r7, #32]
 800548a:	09db      	lsrs	r3, r3, #7
 800548c:	623b      	str	r3, [r7, #32]
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2b7f      	cmp	r3, #127	; 0x7f
 8005492:	d8f0      	bhi.n	8005476 <_StoreChar+0x5a>
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	627a      	str	r2, [r7, #36]	; 0x24
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	701a      	strb	r2, [r3, #0]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	2300      	movs	r3, #0
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e00b      	b.n	80054c6 <_StoreChar+0xaa>
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	61f9      	str	r1, [r7, #28]
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <_StoreChar+0x92>
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	221a      	movs	r2, #26
 80054e2:	6939      	ldr	r1, [r7, #16]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7ff fe2b 	bl	8005140 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fd38 	bl	8004f64 <_PreparePacket>
 80054f4:	4602      	mov	r2, r0
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
  }
}
 800550a:	bf00      	nop
 800550c:	3728      	adds	r7, #40	; 0x28
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005526:	2301      	movs	r3, #1
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800552a:	2301      	movs	r3, #1
 800552c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800552e:	e007      	b.n	8005540 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005530:	6a3a      	ldr	r2, [r7, #32]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	fbb2 f3f3 	udiv	r3, r2, r3
 8005538:	623b      	str	r3, [r7, #32]
    Width++;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3301      	adds	r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d2f3      	bcs.n	8005530 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	429a      	cmp	r2, r3
 800554e:	d901      	bls.n	8005554 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	f003 0301 	and.w	r3, r3, #1
 800555a:	2b00      	cmp	r3, #0
 800555c:	d11f      	bne.n	800559e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01c      	beq.n	800559e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <_PrintUnsigned+0x66>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <_PrintUnsigned+0x66>
        c = '0';
 8005574:	2330      	movs	r3, #48	; 0x30
 8005576:	76fb      	strb	r3, [r7, #27]
 8005578:	e001      	b.n	800557e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800557a:	2320      	movs	r3, #32
 800557c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800557e:	e007      	b.n	8005590 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	3b01      	subs	r3, #1
 8005584:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005586:	7efb      	ldrb	r3, [r7, #27]
 8005588:	4619      	mov	r1, r3
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff ff46 	bl	800541c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <_PrintUnsigned+0x8a>
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	429a      	cmp	r2, r3
 800559c:	d3f0      	bcc.n	8005580 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d903      	bls.n	80055ac <_PrintUnsigned+0x98>
      NumDigits--;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	603b      	str	r3, [r7, #0]
 80055aa:	e009      	b.n	80055c0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d200      	bcs.n	80055c0 <_PrintUnsigned+0xac>
        break;
 80055be:	e005      	b.n	80055cc <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	fb02 f303 	mul.w	r3, r2, r3
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055ca:	e7e8      	b.n	800559e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80055e4:	4a15      	ldr	r2, [pc, #84]	; (800563c <_PrintUnsigned+0x128>)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	4413      	add	r3, r2
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	4619      	mov	r1, r3
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f7ff ff14 	bl	800541c <_StoreChar>
    Digit /= Base;
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e3      	bne.n	80055cc <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d011      	beq.n	8005632 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005614:	e006      	b.n	8005624 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	3b01      	subs	r3, #1
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800561c:	2120      	movs	r1, #32
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f7ff fefc 	bl	800541c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	2b00      	cmp	r3, #0
 8005628:	d003      	beq.n	8005632 <_PrintUnsigned+0x11e>
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562e:	429a      	cmp	r2, r3
 8005630:	d3f1      	bcc.n	8005616 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005632:	bf00      	nop
 8005634:	3728      	adds	r7, #40	; 0x28
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	08007de0 	.word	0x08007de0

08005640 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
 800564c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfb8      	it	lt
 8005654:	425b      	neglt	r3, r3
 8005656:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005658:	2301      	movs	r3, #1
 800565a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800565c:	e007      	b.n	800566e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	fb92 f3f3 	sdiv	r3, r2, r3
 8005666:	613b      	str	r3, [r7, #16]
    Width++;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	3301      	adds	r3, #1
 800566c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	429a      	cmp	r2, r3
 8005674:	daf3      	bge.n	800565e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	429a      	cmp	r2, r3
 800567c:	d901      	bls.n	8005682 <_PrintInt+0x42>
    Width = NumDigits;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005682:	6a3b      	ldr	r3, [r7, #32]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <_PrintInt+0x5e>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	db04      	blt.n	8005698 <_PrintInt+0x58>
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <_PrintInt+0x5e>
    FieldWidth--;
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	3b01      	subs	r3, #1
 800569c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d002      	beq.n	80056ae <_PrintInt+0x6e>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d016      	beq.n	80056dc <_PrintInt+0x9c>
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d111      	bne.n	80056dc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00e      	beq.n	80056dc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056be:	e006      	b.n	80056ce <_PrintInt+0x8e>
        FieldWidth--;
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80056c6:	2120      	movs	r1, #32
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fea7 	bl	800541c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <_PrintInt+0x9c>
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d3f1      	bcc.n	80056c0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da07      	bge.n	80056f2 <_PrintInt+0xb2>
    v = -v;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	425b      	negs	r3, r3
 80056e6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80056e8:	212d      	movs	r1, #45	; 0x2d
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7ff fe96 	bl	800541c <_StoreChar>
 80056f0:	e008      	b.n	8005704 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80056fc:	212b      	movs	r1, #43	; 0x2b
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff fe8c 	bl	800541c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d019      	beq.n	8005742 <_PrintInt+0x102>
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <_PrintInt+0x102>
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d111      	bne.n	8005742 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00e      	beq.n	8005742 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005724:	e006      	b.n	8005734 <_PrintInt+0xf4>
        FieldWidth--;
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	3b01      	subs	r3, #1
 800572a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800572c:	2130      	movs	r1, #48	; 0x30
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fe74 	bl	800541c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <_PrintInt+0x102>
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3f1      	bcc.n	8005726 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	9301      	str	r3, [sp, #4]
 8005748:	6a3b      	ldr	r3, [r7, #32]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	f7ff fedf 	bl	8005514 <_PrintUnsigned>
}
 8005756:	bf00      	nop
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b098      	sub	sp, #96	; 0x60
 8005764:	af02      	add	r7, sp, #8
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800576c:	f3ef 8311 	mrs	r3, BASEPRI
 8005770:	f04f 0120 	mov.w	r1, #32
 8005774:	f381 8811 	msr	BASEPRI, r1
 8005778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577a:	48b7      	ldr	r0, [pc, #732]	; (8005a58 <_VPrintTarget+0x2f8>)
 800577c:	f7ff fbf2 	bl	8004f64 <_PreparePacket>
 8005780:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005782:	4bb5      	ldr	r3, [pc, #724]	; (8005a58 <_VPrintTarget+0x2f8>)
 8005784:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005786:	2300      	movs	r3, #0
 8005788:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800578a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	3301      	adds	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80057a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 81a8 	beq.w	8005b00 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80057b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b4:	2b25      	cmp	r3, #37	; 0x25
 80057b6:	f040 8195 	bne.w	8005ae4 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80057ba:	2300      	movs	r3, #0
 80057bc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80057be:	2301      	movs	r3, #1
 80057c0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80057ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057ce:	3b23      	subs	r3, #35	; 0x23
 80057d0:	2b0d      	cmp	r3, #13
 80057d2:	d83f      	bhi.n	8005854 <_VPrintTarget+0xf4>
 80057d4:	a201      	add	r2, pc, #4	; (adr r2, 80057dc <_VPrintTarget+0x7c>)
 80057d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057da:	bf00      	nop
 80057dc:	08005845 	.word	0x08005845
 80057e0:	08005855 	.word	0x08005855
 80057e4:	08005855 	.word	0x08005855
 80057e8:	08005855 	.word	0x08005855
 80057ec:	08005855 	.word	0x08005855
 80057f0:	08005855 	.word	0x08005855
 80057f4:	08005855 	.word	0x08005855
 80057f8:	08005855 	.word	0x08005855
 80057fc:	08005835 	.word	0x08005835
 8005800:	08005855 	.word	0x08005855
 8005804:	08005815 	.word	0x08005815
 8005808:	08005855 	.word	0x08005855
 800580c:	08005855 	.word	0x08005855
 8005810:	08005825 	.word	0x08005825
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3301      	adds	r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e01a      	b.n	800585a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005826:	f043 0302 	orr.w	r3, r3, #2
 800582a:	64bb      	str	r3, [r7, #72]	; 0x48
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3301      	adds	r3, #1
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e012      	b.n	800585a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005836:	f043 0304 	orr.w	r3, r3, #4
 800583a:	64bb      	str	r3, [r7, #72]	; 0x48
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
 8005842:	e00a      	b.n	800585a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005846:	f043 0308 	orr.w	r3, r3, #8
 800584a:	64bb      	str	r3, [r7, #72]	; 0x48
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3301      	adds	r3, #1
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e002      	b.n	800585a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005854:	2300      	movs	r3, #0
 8005856:	653b      	str	r3, [r7, #80]	; 0x50
 8005858:	bf00      	nop
        }
      } while (v);
 800585a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1b0      	bne.n	80057c2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005860:	2300      	movs	r3, #0
 8005862:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 800586c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005870:	2b2f      	cmp	r3, #47	; 0x2f
 8005872:	d912      	bls.n	800589a <_VPrintTarget+0x13a>
 8005874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005878:	2b39      	cmp	r3, #57	; 0x39
 800587a:	d80e      	bhi.n	800589a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3301      	adds	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005884:	4613      	mov	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	461a      	mov	r2, r3
 800588e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005892:	4413      	add	r3, r2
 8005894:	3b30      	subs	r3, #48	; 0x30
 8005896:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005898:	e7e4      	b.n	8005864 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800589a:	2300      	movs	r3, #0
 800589c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80058a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058aa:	2b2e      	cmp	r3, #46	; 0x2e
 80058ac:	d11d      	bne.n	80058ea <_VPrintTarget+0x18a>
        sFormat++;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80058bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c0:	2b2f      	cmp	r3, #47	; 0x2f
 80058c2:	d912      	bls.n	80058ea <_VPrintTarget+0x18a>
 80058c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b39      	cmp	r3, #57	; 0x39
 80058ca:	d80e      	bhi.n	80058ea <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80058d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	461a      	mov	r2, r3
 80058de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058e2:	4413      	add	r3, r2
 80058e4:	3b30      	subs	r3, #48	; 0x30
 80058e6:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80058e8:	e7e4      	b.n	80058b4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80058f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058f6:	2b6c      	cmp	r3, #108	; 0x6c
 80058f8:	d003      	beq.n	8005902 <_VPrintTarget+0x1a2>
 80058fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058fe:	2b68      	cmp	r3, #104	; 0x68
 8005900:	d107      	bne.n	8005912 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	3301      	adds	r3, #1
 800590e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005910:	e7ef      	b.n	80058f2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005912:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005916:	2b25      	cmp	r3, #37	; 0x25
 8005918:	f000 80d8 	beq.w	8005acc <_VPrintTarget+0x36c>
 800591c:	2b25      	cmp	r3, #37	; 0x25
 800591e:	f2c0 80dc 	blt.w	8005ada <_VPrintTarget+0x37a>
 8005922:	2b78      	cmp	r3, #120	; 0x78
 8005924:	f300 80d9 	bgt.w	8005ada <_VPrintTarget+0x37a>
 8005928:	2b58      	cmp	r3, #88	; 0x58
 800592a:	f2c0 80d6 	blt.w	8005ada <_VPrintTarget+0x37a>
 800592e:	3b58      	subs	r3, #88	; 0x58
 8005930:	2b20      	cmp	r3, #32
 8005932:	f200 80d2 	bhi.w	8005ada <_VPrintTarget+0x37a>
 8005936:	a201      	add	r2, pc, #4	; (adr r2, 800593c <_VPrintTarget+0x1dc>)
 8005938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593c:	08005a33 	.word	0x08005a33
 8005940:	08005adb 	.word	0x08005adb
 8005944:	08005adb 	.word	0x08005adb
 8005948:	08005adb 	.word	0x08005adb
 800594c:	08005adb 	.word	0x08005adb
 8005950:	08005adb 	.word	0x08005adb
 8005954:	08005adb 	.word	0x08005adb
 8005958:	08005adb 	.word	0x08005adb
 800595c:	08005adb 	.word	0x08005adb
 8005960:	08005adb 	.word	0x08005adb
 8005964:	08005adb 	.word	0x08005adb
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059e7 	.word	0x080059e7
 8005970:	08005adb 	.word	0x08005adb
 8005974:	08005adb 	.word	0x08005adb
 8005978:	08005adb 	.word	0x08005adb
 800597c:	08005adb 	.word	0x08005adb
 8005980:	08005adb 	.word	0x08005adb
 8005984:	08005adb 	.word	0x08005adb
 8005988:	08005adb 	.word	0x08005adb
 800598c:	08005adb 	.word	0x08005adb
 8005990:	08005adb 	.word	0x08005adb
 8005994:	08005adb 	.word	0x08005adb
 8005998:	08005adb 	.word	0x08005adb
 800599c:	08005aa7 	.word	0x08005aa7
 80059a0:	08005adb 	.word	0x08005adb
 80059a4:	08005adb 	.word	0x08005adb
 80059a8:	08005a5d 	.word	0x08005a5d
 80059ac:	08005adb 	.word	0x08005adb
 80059b0:	08005a0d 	.word	0x08005a0d
 80059b4:	08005adb 	.word	0x08005adb
 80059b8:	08005adb 	.word	0x08005adb
 80059bc:	08005a33 	.word	0x08005a33
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	1d19      	adds	r1, r3, #4
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6011      	str	r1, [r2, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 80059ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 80059d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80059d8:	f107 0310 	add.w	r3, r7, #16
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fd1c 	bl	800541c <_StoreChar>
        break;
 80059e4:	e07a      	b.n	8005adc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	1d19      	adds	r1, r3, #4
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6011      	str	r1, [r2, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80059f4:	f107 0010 	add.w	r0, r7, #16
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a02:	220a      	movs	r2, #10
 8005a04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a06:	f7ff fe1b 	bl	8005640 <_PrintInt>
        break;
 8005a0a:	e067      	b.n	8005adc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	1d19      	adds	r1, r3, #4
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6011      	str	r1, [r2, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a1c:	f107 0010 	add.w	r0, r7, #16
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	9301      	str	r3, [sp, #4]
 8005a24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	220a      	movs	r2, #10
 8005a2c:	f7ff fd72 	bl	8005514 <_PrintUnsigned>
        break;
 8005a30:	e054      	b.n	8005adc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	1d19      	adds	r1, r3, #4
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6011      	str	r1, [r2, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005a40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a42:	f107 0010 	add.w	r0, r7, #16
 8005a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a4c:	9300      	str	r3, [sp, #0]
 8005a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a50:	2210      	movs	r2, #16
 8005a52:	f7ff fd5f 	bl	8005514 <_PrintUnsigned>
        break;
 8005a56:	e041      	b.n	8005adc <_VPrintTarget+0x37c>
 8005a58:	20014418 	.word	0x20014418
      case 's':
        s = va_arg(*pParamList, const char*);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	1d19      	adds	r1, r3, #4
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6011      	str	r1, [r2, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <_VPrintTarget+0x314>
          s = "(null)";
 8005a70:	4b4a      	ldr	r3, [pc, #296]	; (8005b9c <_VPrintTarget+0x43c>)
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005a74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a7e:	3301      	adds	r3, #1
 8005a80:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005a82:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005a8a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005a8e:	f107 0310 	add.w	r3, r7, #16
 8005a92:	4611      	mov	r1, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fcc1 	bl	800541c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9e:	d9e9      	bls.n	8005a74 <_VPrintTarget+0x314>
        break;
 8005aa0:	e01c      	b.n	8005adc <_VPrintTarget+0x37c>
            break;
 8005aa2:	bf00      	nop
        break;
 8005aa4:	e01a      	b.n	8005adc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6011      	str	r1, [r2, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005ab4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ab6:	f107 0010 	add.w	r0, r7, #16
 8005aba:	2300      	movs	r3, #0
 8005abc:	9301      	str	r3, [sp, #4]
 8005abe:	2308      	movs	r3, #8
 8005ac0:	9300      	str	r3, [sp, #0]
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	f7ff fd25 	bl	8005514 <_PrintUnsigned>
        break;
 8005aca:	e007      	b.n	8005adc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	2125      	movs	r1, #37	; 0x25
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff fca2 	bl	800541c <_StoreChar>
        break;
 8005ad8:	e000      	b.n	8005adc <_VPrintTarget+0x37c>
      default:
        break;
 8005ada:	bf00      	nop
      }
      sFormat++;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e007      	b.n	8005af4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005ae4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ae8:	f107 0310 	add.w	r3, r7, #16
 8005aec:	4611      	mov	r1, r2
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fc94 	bl	800541c <_StoreChar>
    }
  } while (*sFormat);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f47f ae4d 	bne.w	8005798 <_VPrintTarget+0x38>
 8005afe:	e000      	b.n	8005b02 <_VPrintTarget+0x3a2>
      break;
 8005b00:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d041      	beq.n	8005b8c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005b08:	6a3a      	ldr	r2, [r7, #32]
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b18:	e00b      	b.n	8005b32 <_VPrintTarget+0x3d2>
 8005b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b20:	1c59      	adds	r1, r3, #1
 8005b22:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2e:	09db      	lsrs	r3, r3, #7
 8005b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	2b7f      	cmp	r3, #127	; 0x7f
 8005b36:	d8f0      	bhi.n	8005b1a <_VPrintTarget+0x3ba>
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b40:	b2d2      	uxtb	r2, r2
 8005b42:	701a      	strb	r2, [r3, #0]
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005b50:	e00b      	b.n	8005b6a <_VPrintTarget+0x40a>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	1c59      	adds	r1, r3, #1
 8005b5a:	6379      	str	r1, [r7, #52]	; 0x34
 8005b5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	09db      	lsrs	r3, r3, #7
 8005b68:	633b      	str	r3, [r7, #48]	; 0x30
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b6e:	d8f0      	bhi.n	8005b52 <_VPrintTarget+0x3f2>
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	1c5a      	adds	r2, r3, #1
 8005b74:	637a      	str	r2, [r7, #52]	; 0x34
 8005b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]
 8005b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	6979      	ldr	r1, [r7, #20]
 8005b84:	221a      	movs	r2, #26
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fada 	bl	8005140 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005b92:	bf00      	nop
 8005b94:	3758      	adds	r7, #88	; 0x58
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	08007d90 	.word	0x08007d90

08005ba0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
 8005bac:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005bb4:	4917      	ldr	r1, [pc, #92]	; (8005c14 <SEGGER_SYSVIEW_Init+0x74>)
 8005bb6:	4818      	ldr	r0, [pc, #96]	; (8005c18 <SEGGER_SYSVIEW_Init+0x78>)
 8005bb8:	f7ff f8d4 	bl	8004d64 <SEGGER_RTT_AllocUpBuffer>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bc2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005bc4:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bc6:	785a      	ldrb	r2, [r3, #1]
 8005bc8:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bca:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bcc:	4b13      	ldr	r3, [pc, #76]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bce:	7e1b      	ldrb	r3, [r3, #24]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <SEGGER_SYSVIEW_Init+0x80>)
 8005bda:	490f      	ldr	r1, [pc, #60]	; (8005c18 <SEGGER_SYSVIEW_Init+0x78>)
 8005bdc:	f7ff f946 	bl	8004e6c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005be0:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005be6:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <SEGGER_SYSVIEW_Init+0x84>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bec:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005bee:	4a0b      	ldr	r2, [pc, #44]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005bf4:	4a09      	ldr	r2, [pc, #36]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005bfa:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005c00:	4a06      	ldr	r2, [pc, #24]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <SEGGER_SYSVIEW_Init+0x7c>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	200133e0 	.word	0x200133e0
 8005c18:	08007d98 	.word	0x08007d98
 8005c1c:	200143e8 	.word	0x200143e8
 8005c20:	200143e0 	.word	0x200143e0
 8005c24:	e0001004 	.word	0xe0001004

08005c28 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005c30:	4a04      	ldr	r2, [pc, #16]	; (8005c44 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6113      	str	r3, [r2, #16]
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	200143e8 	.word	0x200143e8

08005c48 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c50:	f3ef 8311 	mrs	r3, BASEPRI
 8005c54:	f04f 0120 	mov.w	r1, #32
 8005c58:	f381 8811 	msr	BASEPRI, r1
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	4808      	ldr	r0, [pc, #32]	; (8005c80 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c60:	f7ff f980 	bl	8004f64 <_PreparePacket>
 8005c64:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	68b8      	ldr	r0, [r7, #8]
 8005c6c:	f7ff fa68 	bl	8005140 <_SendPacket>
  RECORD_END();
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f383 8811 	msr	BASEPRI, r3
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20014418 	.word	0x20014418

08005c84 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c8e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c92:	f04f 0120 	mov.w	r1, #32
 8005c96:	f381 8811 	msr	BASEPRI, r1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	4816      	ldr	r0, [pc, #88]	; (8005cf8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005c9e:	f7ff f961 	bl	8004f64 <_PreparePacket>
 8005ca2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
 8005cb0:	e00b      	b.n	8005cca <SEGGER_SYSVIEW_RecordU32+0x46>
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	b2da      	uxtb	r2, r3
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	1c59      	adds	r1, r3, #1
 8005cba:	61f9      	str	r1, [r7, #28]
 8005cbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc0:	b2d2      	uxtb	r2, r2
 8005cc2:	701a      	strb	r2, [r3, #0]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	09db      	lsrs	r3, r3, #7
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cce:	d8f0      	bhi.n	8005cb2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	61fa      	str	r2, [r7, #28]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	68f9      	ldr	r1, [r7, #12]
 8005ce4:	6938      	ldr	r0, [r7, #16]
 8005ce6:	f7ff fa2b 	bl	8005140 <_SendPacket>
  RECORD_END();
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f383 8811 	msr	BASEPRI, r3
}
 8005cf0:	bf00      	nop
 8005cf2:	3720      	adds	r7, #32
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	20014418 	.word	0x20014418

08005cfc <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08c      	sub	sp, #48	; 0x30
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d08:	f3ef 8311 	mrs	r3, BASEPRI
 8005d0c:	f04f 0120 	mov.w	r1, #32
 8005d10:	f381 8811 	msr	BASEPRI, r1
 8005d14:	61fb      	str	r3, [r7, #28]
 8005d16:	4825      	ldr	r0, [pc, #148]	; (8005dac <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d18:	f7ff f924 	bl	8004f64 <_PreparePacket>
 8005d1c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d2a:	e00b      	b.n	8005d44 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	09db      	lsrs	r3, r3, #7
 8005d42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	2b7f      	cmp	r3, #127	; 0x7f
 8005d48:	d8f0      	bhi.n	8005d2c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	1c5a      	adds	r2, r3, #1
 8005d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	701a      	strb	r2, [r3, #0]
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	e00b      	b.n	8005d7c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d64:	6a3b      	ldr	r3, [r7, #32]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	6279      	str	r1, [r7, #36]	; 0x24
 8005d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	09db      	lsrs	r3, r3, #7
 8005d7a:	623b      	str	r3, [r7, #32]
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d8f0      	bhi.n	8005d64 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	627a      	str	r2, [r7, #36]	; 0x24
 8005d88:	6a3a      	ldr	r2, [r7, #32]
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	6979      	ldr	r1, [r7, #20]
 8005d96:	69b8      	ldr	r0, [r7, #24]
 8005d98:	f7ff f9d2 	bl	8005140 <_SendPacket>
  RECORD_END();
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	f383 8811 	msr	BASEPRI, r3
}
 8005da2:	bf00      	nop
 8005da4:	3730      	adds	r7, #48	; 0x30
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20014418 	.word	0x20014418

08005db0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08e      	sub	sp, #56	; 0x38
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbe:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc2:	f04f 0120 	mov.w	r1, #32
 8005dc6:	f381 8811 	msr	BASEPRI, r1
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	4832      	ldr	r0, [pc, #200]	; (8005e98 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005dce:	f7ff f8c9 	bl	8004f64 <_PreparePacket>
 8005dd2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	633b      	str	r3, [r7, #48]	; 0x30
 8005de0:	e00b      	b.n	8005dfa <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	6379      	str	r1, [r7, #52]	; 0x34
 8005dec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	633b      	str	r3, [r7, #48]	; 0x30
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfe:	d8f0      	bhi.n	8005de2 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	637a      	str	r2, [r7, #52]	; 0x34
 8005e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e18:	e00b      	b.n	8005e32 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	1c59      	adds	r1, r3, #1
 8005e22:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e28:	b2d2      	uxtb	r2, r2
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2e:	09db      	lsrs	r3, r3, #7
 8005e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	2b7f      	cmp	r3, #127	; 0x7f
 8005e36:	d8f0      	bhi.n	8005e1a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	e00b      	b.n	8005e6a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e52:	6a3b      	ldr	r3, [r7, #32]
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e58:	1c59      	adds	r1, r3, #1
 8005e5a:	6279      	str	r1, [r7, #36]	; 0x24
 8005e5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e60:	b2d2      	uxtb	r2, r2
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	09db      	lsrs	r3, r3, #7
 8005e68:	623b      	str	r3, [r7, #32]
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6e:	d8f0      	bhi.n	8005e52 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	627a      	str	r2, [r7, #36]	; 0x24
 8005e76:	6a3a      	ldr	r2, [r7, #32]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	6979      	ldr	r1, [r7, #20]
 8005e84:	69b8      	ldr	r0, [r7, #24]
 8005e86:	f7ff f95b 	bl	8005140 <_SendPacket>
  RECORD_END();
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f383 8811 	msr	BASEPRI, r3
}
 8005e90:	bf00      	nop
 8005e92:	3738      	adds	r7, #56	; 0x38
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	20014418 	.word	0x20014418

08005e9c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b090      	sub	sp, #64	; 0x40
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eaa:	f3ef 8311 	mrs	r3, BASEPRI
 8005eae:	f04f 0120 	mov.w	r1, #32
 8005eb2:	f381 8811 	msr	BASEPRI, r1
 8005eb6:	61fb      	str	r3, [r7, #28]
 8005eb8:	4840      	ldr	r0, [pc, #256]	; (8005fbc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005eba:	f7ff f853 	bl	8004f64 <_PreparePacket>
 8005ebe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ecc:	e00b      	b.n	8005ee6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eea:	d8f0      	bhi.n	8005ece <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ef2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005efa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	633b      	str	r3, [r7, #48]	; 0x30
 8005f04:	e00b      	b.n	8005f1e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0c:	1c59      	adds	r1, r3, #1
 8005f0e:	6379      	str	r1, [r7, #52]	; 0x34
 8005f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	2b7f      	cmp	r3, #127	; 0x7f
 8005f22:	d8f0      	bhi.n	8005f06 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	637a      	str	r2, [r7, #52]	; 0x34
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3c:	e00b      	b.n	8005f56 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	1c59      	adds	r1, r3, #1
 8005f46:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f4c:	b2d2      	uxtb	r2, r2
 8005f4e:	701a      	strb	r2, [r3, #0]
 8005f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f52:	09db      	lsrs	r3, r3, #7
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	d8f0      	bhi.n	8005f3e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	701a      	strb	r2, [r3, #0]
 8005f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f72:	623b      	str	r3, [r7, #32]
 8005f74:	e00b      	b.n	8005f8e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7c:	1c59      	adds	r1, r3, #1
 8005f7e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	701a      	strb	r2, [r3, #0]
 8005f88:	6a3b      	ldr	r3, [r7, #32]
 8005f8a:	09db      	lsrs	r3, r3, #7
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	2b7f      	cmp	r3, #127	; 0x7f
 8005f92:	d8f0      	bhi.n	8005f76 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	1c5a      	adds	r2, r3, #1
 8005f98:	627a      	str	r2, [r7, #36]	; 0x24
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	6979      	ldr	r1, [r7, #20]
 8005fa8:	69b8      	ldr	r0, [r7, #24]
 8005faa:	f7ff f8c9 	bl	8005140 <_SendPacket>
  RECORD_END();
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f383 8811 	msr	BASEPRI, r3
}
 8005fb4:	bf00      	nop
 8005fb6:	3740      	adds	r7, #64	; 0x40
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20014418 	.word	0x20014418

08005fc0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005fc6:	4b58      	ldr	r3, [pc, #352]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd0:	f04f 0120 	mov.w	r1, #32
 8005fd4:	f381 8811 	msr	BASEPRI, r1
 8005fd8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005fda:	4b53      	ldr	r3, [pc, #332]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	220a      	movs	r2, #10
 8005fe0:	4952      	ldr	r1, [pc, #328]	; (800612c <SEGGER_SYSVIEW_Start+0x16c>)
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fa f8f4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005fee:	200a      	movs	r0, #10
 8005ff0:	f7ff fe2a 	bl	8005c48 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff8:	f04f 0120 	mov.w	r1, #32
 8005ffc:	f381 8811 	msr	BASEPRI, r1
 8006000:	60bb      	str	r3, [r7, #8]
 8006002:	484b      	ldr	r0, [pc, #300]	; (8006130 <SEGGER_SYSVIEW_Start+0x170>)
 8006004:	f7fe ffae 	bl	8004f64 <_PreparePacket>
 8006008:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006012:	4b45      	ldr	r3, [pc, #276]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	62bb      	str	r3, [r7, #40]	; 0x28
 8006018:	e00b      	b.n	8006032 <SEGGER_SYSVIEW_Start+0x72>
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	b2da      	uxtb	r2, r3
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	1c59      	adds	r1, r3, #1
 8006022:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
 8006032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006034:	2b7f      	cmp	r3, #127	; 0x7f
 8006036:	d8f0      	bhi.n	800601a <SEGGER_SYSVIEW_Start+0x5a>
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800603e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
 800604c:	4b36      	ldr	r3, [pc, #216]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	623b      	str	r3, [r7, #32]
 8006052:	e00b      	b.n	800606c <SEGGER_SYSVIEW_Start+0xac>
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	b2da      	uxtb	r2, r3
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	6279      	str	r1, [r7, #36]	; 0x24
 800605e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6a3b      	ldr	r3, [r7, #32]
 8006068:	09db      	lsrs	r3, r3, #7
 800606a:	623b      	str	r3, [r7, #32]
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	2b7f      	cmp	r3, #127	; 0x7f
 8006070:	d8f0      	bhi.n	8006054 <SEGGER_SYSVIEW_Start+0x94>
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	627a      	str	r2, [r7, #36]	; 0x24
 8006078:	6a3a      	ldr	r2, [r7, #32]
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	61fb      	str	r3, [r7, #28]
 8006086:	4b28      	ldr	r3, [pc, #160]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	61bb      	str	r3, [r7, #24]
 800608c:	e00b      	b.n	80060a6 <SEGGER_SYSVIEW_Start+0xe6>
 800608e:	69bb      	ldr	r3, [r7, #24]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	1c59      	adds	r1, r3, #1
 8006096:	61f9      	str	r1, [r7, #28]
 8006098:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	09db      	lsrs	r3, r3, #7
 80060a4:	61bb      	str	r3, [r7, #24]
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	2b7f      	cmp	r3, #127	; 0x7f
 80060aa:	d8f0      	bhi.n	800608e <SEGGER_SYSVIEW_Start+0xce>
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	61fa      	str	r2, [r7, #28]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	2300      	movs	r3, #0
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	e00b      	b.n	80060de <SEGGER_SYSVIEW_Start+0x11e>
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	1c59      	adds	r1, r3, #1
 80060ce:	6179      	str	r1, [r7, #20]
 80060d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	09db      	lsrs	r3, r3, #7
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	2b7f      	cmp	r3, #127	; 0x7f
 80060e2:	d8f0      	bhi.n	80060c6 <SEGGER_SYSVIEW_Start+0x106>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	617a      	str	r2, [r7, #20]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80060f4:	2218      	movs	r2, #24
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f7ff f821 	bl	8005140 <_SendPacket>
      RECORD_END();
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 8006106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800610c:	4b06      	ldr	r3, [pc, #24]	; (8006128 <SEGGER_SYSVIEW_Start+0x168>)
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006112:	f000 f9eb 	bl	80064ec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006116:	f000 f9b1 	bl	800647c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800611a:	f000 fc2d 	bl	8006978 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800611e:	bf00      	nop
 8006120:	3730      	adds	r7, #48	; 0x30
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	200143e8 	.word	0x200143e8
 800612c:	08007dd4 	.word	0x08007dd4
 8006130:	20014418 	.word	0x20014418

08006134 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800613a:	f3ef 8311 	mrs	r3, BASEPRI
 800613e:	f04f 0120 	mov.w	r1, #32
 8006142:	f381 8811 	msr	BASEPRI, r1
 8006146:	607b      	str	r3, [r7, #4]
 8006148:	480b      	ldr	r0, [pc, #44]	; (8006178 <SEGGER_SYSVIEW_Stop+0x44>)
 800614a:	f7fe ff0b 	bl	8004f64 <_PreparePacket>
 800614e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <SEGGER_SYSVIEW_Stop+0x48>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006158:	220b      	movs	r2, #11
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6838      	ldr	r0, [r7, #0]
 800615e:	f7fe ffef 	bl	8005140 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <SEGGER_SYSVIEW_Stop+0x48>)
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f383 8811 	msr	BASEPRI, r3
}
 800616e:	bf00      	nop
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20014418 	.word	0x20014418
 800617c:	200143e8 	.word	0x200143e8

08006180 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08c      	sub	sp, #48	; 0x30
 8006184:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	f04f 0120 	mov.w	r1, #32
 800618e:	f381 8811 	msr	BASEPRI, r1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	4845      	ldr	r0, [pc, #276]	; (80062ac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006196:	f7fe fee5 	bl	8004f64 <_PreparePacket>
 800619a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061a4:	4b42      	ldr	r3, [pc, #264]	; (80062b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061aa:	e00b      	b.n	80061c4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	1c59      	adds	r1, r3, #1
 80061b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c0:	09db      	lsrs	r3, r3, #7
 80061c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80061c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c6:	2b7f      	cmp	r3, #127	; 0x7f
 80061c8:	d8f0      	bhi.n	80061ac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
 80061de:	4b34      	ldr	r3, [pc, #208]	; (80062b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	623b      	str	r3, [r7, #32]
 80061e4:	e00b      	b.n	80061fe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	6279      	str	r1, [r7, #36]	; 0x24
 80061f0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	09db      	lsrs	r3, r3, #7
 80061fc:	623b      	str	r3, [r7, #32]
 80061fe:	6a3b      	ldr	r3, [r7, #32]
 8006200:	2b7f      	cmp	r3, #127	; 0x7f
 8006202:	d8f0      	bhi.n	80061e6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	627a      	str	r2, [r7, #36]	; 0x24
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	61bb      	str	r3, [r7, #24]
 800621e:	e00b      	b.n	8006238 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	b2da      	uxtb	r2, r3
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	1c59      	adds	r1, r3, #1
 8006228:	61f9      	str	r1, [r7, #28]
 800622a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	09db      	lsrs	r3, r3, #7
 8006236:	61bb      	str	r3, [r7, #24]
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b7f      	cmp	r3, #127	; 0x7f
 800623c:	d8f0      	bhi.n	8006220 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	1c5a      	adds	r2, r3, #1
 8006242:	61fa      	str	r2, [r7, #28]
 8006244:	69ba      	ldr	r2, [r7, #24]
 8006246:	b2d2      	uxtb	r2, r2
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	2300      	movs	r3, #0
 8006254:	613b      	str	r3, [r7, #16]
 8006256:	e00b      	b.n	8006270 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	b2da      	uxtb	r2, r3
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	1c59      	adds	r1, r3, #1
 8006260:	6179      	str	r1, [r7, #20]
 8006262:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	09db      	lsrs	r3, r3, #7
 800626e:	613b      	str	r3, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	2b7f      	cmp	r3, #127	; 0x7f
 8006274:	d8f0      	bhi.n	8006258 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	1c5a      	adds	r2, r3, #1
 800627a:	617a      	str	r2, [r7, #20]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006286:	2218      	movs	r2, #24
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	68b8      	ldr	r0, [r7, #8]
 800628c:	f7fe ff58 	bl	8005140 <_SendPacket>
  RECORD_END();
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800629e:	4b04      	ldr	r3, [pc, #16]	; (80062b0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a2:	4798      	blx	r3
  }
}
 80062a4:	bf00      	nop
 80062a6:	3730      	adds	r7, #48	; 0x30
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20014418 	.word	0x20014418
 80062b0:	200143e8 	.word	0x200143e8

080062b4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b092      	sub	sp, #72	; 0x48
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062bc:	f3ef 8311 	mrs	r3, BASEPRI
 80062c0:	f04f 0120 	mov.w	r1, #32
 80062c4:	f381 8811 	msr	BASEPRI, r1
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	486a      	ldr	r0, [pc, #424]	; (8006474 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062cc:	f7fe fe4a 	bl	8004f64 <_PreparePacket>
 80062d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	647b      	str	r3, [r7, #68]	; 0x44
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b66      	ldr	r3, [pc, #408]	; (8006478 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	643b      	str	r3, [r7, #64]	; 0x40
 80062e6:	e00b      	b.n	8006300 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	6479      	str	r1, [r7, #68]	; 0x44
 80062f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fc:	09db      	lsrs	r3, r3, #7
 80062fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006302:	2b7f      	cmp	r3, #127	; 0x7f
 8006304:	d8f0      	bhi.n	80062e8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	647a      	str	r2, [r7, #68]	; 0x44
 800630c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006314:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006320:	e00b      	b.n	800633a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	b2da      	uxtb	r2, r3
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	1c59      	adds	r1, r3, #1
 800632a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800632c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	09db      	lsrs	r3, r3, #7
 8006338:	63bb      	str	r3, [r7, #56]	; 0x38
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	2b7f      	cmp	r3, #127	; 0x7f
 800633e:	d8f0      	bhi.n	8006322 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	1c5a      	adds	r2, r3, #1
 8006344:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	4619      	mov	r1, r3
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7fe fdd3 	bl	8004f04 <_EncodeStr>
 800635e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006360:	2209      	movs	r2, #9
 8006362:	68f9      	ldr	r1, [r7, #12]
 8006364:	6938      	ldr	r0, [r7, #16]
 8006366:	f7fe feeb 	bl	8005140 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	637b      	str	r3, [r7, #52]	; 0x34
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b40      	ldr	r3, [pc, #256]	; (8006478 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
 800637e:	e00b      	b.n	8006398 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006382:	b2da      	uxtb	r2, r3
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	1c59      	adds	r1, r3, #1
 8006388:	6379      	str	r1, [r7, #52]	; 0x34
 800638a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	09db      	lsrs	r3, r3, #7
 8006396:	633b      	str	r3, [r7, #48]	; 0x30
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	2b7f      	cmp	r3, #127	; 0x7f
 800639c:	d8f0      	bhi.n	8006380 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	637a      	str	r2, [r7, #52]	; 0x34
 80063a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a6:	b2d2      	uxtb	r2, r2
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b8:	e00b      	b.n	80063d2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d4:	2b7f      	cmp	r3, #127	; 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	627b      	str	r3, [r7, #36]	; 0x24
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	6279      	str	r1, [r7, #36]	; 0x24
 80063fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	2b7f      	cmp	r3, #127	; 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	627a      	str	r2, [r7, #36]	; 0x24
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	e00b      	b.n	8006444 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	1c59      	adds	r1, r3, #1
 8006434:	61f9      	str	r1, [r7, #28]
 8006436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	09db      	lsrs	r3, r3, #7
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b7f      	cmp	r3, #127	; 0x7f
 8006448:	d8f0      	bhi.n	800642c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	61fa      	str	r2, [r7, #28]
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800645a:	2215      	movs	r2, #21
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	6938      	ldr	r0, [r7, #16]
 8006460:	f7fe fe6e 	bl	8005140 <_SendPacket>
  RECORD_END();
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f383 8811 	msr	BASEPRI, r3
}
 800646a:	bf00      	nop
 800646c:	3748      	adds	r7, #72	; 0x48
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	20014418 	.word	0x20014418
 8006478:	200143e8 	.word	0x200143e8

0800647c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d008      	beq.n	800649a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006492:	4b03      	ldr	r3, [pc, #12]	; (80064a0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	4798      	blx	r3
  }
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200143e8 	.word	0x200143e8

080064a4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064ac:	f3ef 8311 	mrs	r3, BASEPRI
 80064b0:	f04f 0120 	mov.w	r1, #32
 80064b4:	f381 8811 	msr	BASEPRI, r1
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	480b      	ldr	r0, [pc, #44]	; (80064e8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80064bc:	f7fe fd52 	bl	8004f64 <_PreparePacket>
 80064c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064c2:	2280      	movs	r2, #128	; 0x80
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	6938      	ldr	r0, [r7, #16]
 80064c8:	f7fe fd1c 	bl	8004f04 <_EncodeStr>
 80064cc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80064ce:	220e      	movs	r2, #14
 80064d0:	68f9      	ldr	r1, [r7, #12]
 80064d2:	6938      	ldr	r0, [r7, #16]
 80064d4:	f7fe fe34 	bl	8005140 <_SendPacket>
  RECORD_END();
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	f383 8811 	msr	BASEPRI, r3
}
 80064de:	bf00      	nop
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20014418 	.word	0x20014418

080064ec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064ec:	b590      	push	{r4, r7, lr}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064f2:	4b15      	ldr	r3, [pc, #84]	; (8006548 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064f4:	6a1b      	ldr	r3, [r3, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01a      	beq.n	8006530 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80064fa:	4b13      	ldr	r3, [pc, #76]	; (8006548 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d015      	beq.n	8006530 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4798      	blx	r3
 800650c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006510:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006516:	f04f 0200 	mov.w	r2, #0
 800651a:	f04f 0300 	mov.w	r3, #0
 800651e:	000a      	movs	r2, r1
 8006520:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006522:	4613      	mov	r3, r2
 8006524:	461a      	mov	r2, r3
 8006526:	4621      	mov	r1, r4
 8006528:	200d      	movs	r0, #13
 800652a:	f7ff fbe7 	bl	8005cfc <SEGGER_SYSVIEW_RecordU32x2>
 800652e:	e006      	b.n	800653e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4619      	mov	r1, r3
 8006536:	200c      	movs	r0, #12
 8006538:	f7ff fba4 	bl	8005c84 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800653c:	bf00      	nop
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}
 8006546:	bf00      	nop
 8006548:	200143e8 	.word	0x200143e8
 800654c:	e0001004 	.word	0xe0001004

08006550 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006556:	f3ef 8311 	mrs	r3, BASEPRI
 800655a:	f04f 0120 	mov.w	r1, #32
 800655e:	f381 8811 	msr	BASEPRI, r1
 8006562:	60fb      	str	r3, [r7, #12]
 8006564:	4819      	ldr	r0, [pc, #100]	; (80065cc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006566:	f7fe fcfd 	bl	8004f64 <_PreparePacket>
 800656a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006570:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006578:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	617b      	str	r3, [r7, #20]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	e00b      	b.n	800659c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	b2da      	uxtb	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	1c59      	adds	r1, r3, #1
 800658c:	6179      	str	r1, [r7, #20]
 800658e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	09db      	lsrs	r3, r3, #7
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	2b7f      	cmp	r3, #127	; 0x7f
 80065a0:	d8f0      	bhi.n	8006584 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	617a      	str	r2, [r7, #20]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80065b2:	2202      	movs	r2, #2
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	68b8      	ldr	r0, [r7, #8]
 80065b8:	f7fe fdc2 	bl	8005140 <_SendPacket>
  RECORD_END();
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f383 8811 	msr	BASEPRI, r3
}
 80065c2:	bf00      	nop
 80065c4:	3718      	adds	r7, #24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	20014418 	.word	0x20014418
 80065d0:	e000ed04 	.word	0xe000ed04

080065d4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065da:	f3ef 8311 	mrs	r3, BASEPRI
 80065de:	f04f 0120 	mov.w	r1, #32
 80065e2:	f381 8811 	msr	BASEPRI, r1
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	4807      	ldr	r0, [pc, #28]	; (8006608 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065ea:	f7fe fcbb 	bl	8004f64 <_PreparePacket>
 80065ee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065f0:	2203      	movs	r2, #3
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f7fe fda3 	bl	8005140 <_SendPacket>
  RECORD_END();
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f383 8811 	msr	BASEPRI, r3
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	20014418 	.word	0x20014418

0800660c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006612:	f3ef 8311 	mrs	r3, BASEPRI
 8006616:	f04f 0120 	mov.w	r1, #32
 800661a:	f381 8811 	msr	BASEPRI, r1
 800661e:	607b      	str	r3, [r7, #4]
 8006620:	4807      	ldr	r0, [pc, #28]	; (8006640 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006622:	f7fe fc9f 	bl	8004f64 <_PreparePacket>
 8006626:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006628:	2212      	movs	r2, #18
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	6838      	ldr	r0, [r7, #0]
 800662e:	f7fe fd87 	bl	8005140 <_SendPacket>
  RECORD_END();
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f383 8811 	msr	BASEPRI, r3
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	20014418 	.word	0x20014418

08006644 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800664a:	f3ef 8311 	mrs	r3, BASEPRI
 800664e:	f04f 0120 	mov.w	r1, #32
 8006652:	f381 8811 	msr	BASEPRI, r1
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	4807      	ldr	r0, [pc, #28]	; (8006678 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800665a:	f7fe fc83 	bl	8004f64 <_PreparePacket>
 800665e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006660:	2211      	movs	r2, #17
 8006662:	6839      	ldr	r1, [r7, #0]
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f7fe fd6b 	bl	8005140 <_SendPacket>
  RECORD_END();
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f383 8811 	msr	BASEPRI, r3
}
 8006670:	bf00      	nop
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20014418 	.word	0x20014418

0800667c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006684:	f3ef 8311 	mrs	r3, BASEPRI
 8006688:	f04f 0120 	mov.w	r1, #32
 800668c:	f381 8811 	msr	BASEPRI, r1
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	4819      	ldr	r0, [pc, #100]	; (80066f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006694:	f7fe fc66 	bl	8004f64 <_PreparePacket>
 8006698:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800669e:	4b17      	ldr	r3, [pc, #92]	; (80066fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	61fb      	str	r3, [r7, #28]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e00b      	b.n	80066ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	1c59      	adds	r1, r3, #1
 80066ba:	61f9      	str	r1, [r7, #28]
 80066bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	09db      	lsrs	r3, r3, #7
 80066c8:	61bb      	str	r3, [r7, #24]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	2b7f      	cmp	r3, #127	; 0x7f
 80066ce:	d8f0      	bhi.n	80066b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	1c5a      	adds	r2, r3, #1
 80066d4:	61fa      	str	r2, [r7, #28]
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80066e0:	2208      	movs	r2, #8
 80066e2:	68f9      	ldr	r1, [r7, #12]
 80066e4:	6938      	ldr	r0, [r7, #16]
 80066e6:	f7fe fd2b 	bl	8005140 <_SendPacket>
  RECORD_END();
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f383 8811 	msr	BASEPRI, r3
}
 80066f0:	bf00      	nop
 80066f2:	3720      	adds	r7, #32
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20014418 	.word	0x20014418
 80066fc:	200143e8 	.word	0x200143e8

08006700 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006708:	f3ef 8311 	mrs	r3, BASEPRI
 800670c:	f04f 0120 	mov.w	r1, #32
 8006710:	f381 8811 	msr	BASEPRI, r1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	4819      	ldr	r0, [pc, #100]	; (800677c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006718:	f7fe fc24 	bl	8004f64 <_PreparePacket>
 800671c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006722:	4b17      	ldr	r3, [pc, #92]	; (8006780 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	61fb      	str	r3, [r7, #28]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e00b      	b.n	800674e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	b2da      	uxtb	r2, r3
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	1c59      	adds	r1, r3, #1
 800673e:	61f9      	str	r1, [r7, #28]
 8006740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006744:	b2d2      	uxtb	r2, r2
 8006746:	701a      	strb	r2, [r3, #0]
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	09db      	lsrs	r3, r3, #7
 800674c:	61bb      	str	r3, [r7, #24]
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b7f      	cmp	r3, #127	; 0x7f
 8006752:	d8f0      	bhi.n	8006736 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	1c5a      	adds	r2, r3, #1
 8006758:	61fa      	str	r2, [r7, #28]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006764:	2204      	movs	r2, #4
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	6938      	ldr	r0, [r7, #16]
 800676a:	f7fe fce9 	bl	8005140 <_SendPacket>
  RECORD_END();
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f383 8811 	msr	BASEPRI, r3
}
 8006774:	bf00      	nop
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20014418 	.word	0x20014418
 8006780:	200143e8 	.word	0x200143e8

08006784 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800678c:	f3ef 8311 	mrs	r3, BASEPRI
 8006790:	f04f 0120 	mov.w	r1, #32
 8006794:	f381 8811 	msr	BASEPRI, r1
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	4819      	ldr	r0, [pc, #100]	; (8006800 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800679c:	f7fe fbe2 	bl	8004f64 <_PreparePacket>
 80067a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067a6:	4b17      	ldr	r3, [pc, #92]	; (8006804 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	e00b      	b.n	80067d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	1c59      	adds	r1, r3, #1
 80067c2:	61f9      	str	r1, [r7, #28]
 80067c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	09db      	lsrs	r3, r3, #7
 80067d0:	61bb      	str	r3, [r7, #24]
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b7f      	cmp	r3, #127	; 0x7f
 80067d6:	d8f0      	bhi.n	80067ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	61fa      	str	r2, [r7, #28]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067e8:	2206      	movs	r2, #6
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	6938      	ldr	r0, [r7, #16]
 80067ee:	f7fe fca7 	bl	8005140 <_SendPacket>
  RECORD_END();
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f383 8811 	msr	BASEPRI, r3
}
 80067f8:	bf00      	nop
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20014418 	.word	0x20014418
 8006804:	200143e8 	.word	0x200143e8

08006808 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	1ad3      	subs	r3, r2, r3
}
 8006818:	4618      	mov	r0, r3
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	200143e8 	.word	0x200143e8

08006828 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b08c      	sub	sp, #48	; 0x30
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006832:	4b40      	ldr	r3, [pc, #256]	; (8006934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d077      	beq.n	800692a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800683a:	4b3e      	ldr	r3, [pc, #248]	; (8006934 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006840:	2300      	movs	r3, #0
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
 8006844:	e008      	b.n	8006858 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	2b00      	cmp	r3, #0
 8006850:	d007      	beq.n	8006862 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	3301      	adds	r3, #1
 8006856:	62bb      	str	r3, [r7, #40]	; 0x28
 8006858:	79fb      	ldrb	r3, [r7, #7]
 800685a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800685c:	429a      	cmp	r2, r3
 800685e:	d3f2      	bcc.n	8006846 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006860:	e000      	b.n	8006864 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006862:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d055      	beq.n	8006916 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800686a:	f3ef 8311 	mrs	r3, BASEPRI
 800686e:	f04f 0120 	mov.w	r1, #32
 8006872:	f381 8811 	msr	BASEPRI, r1
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	482f      	ldr	r0, [pc, #188]	; (8006938 <SEGGER_SYSVIEW_SendModule+0x110>)
 800687a:	f7fe fb73 	bl	8004f64 <_PreparePacket>
 800687e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
 8006888:	79fb      	ldrb	r3, [r7, #7]
 800688a:	623b      	str	r3, [r7, #32]
 800688c:	e00b      	b.n	80068a6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	1c59      	adds	r1, r3, #1
 8006896:	6279      	str	r1, [r7, #36]	; 0x24
 8006898:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	09db      	lsrs	r3, r3, #7
 80068a4:	623b      	str	r3, [r7, #32]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	2b7f      	cmp	r3, #127	; 0x7f
 80068aa:	d8f0      	bhi.n	800688e <SEGGER_SYSVIEW_SendModule+0x66>
 80068ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	627a      	str	r2, [r7, #36]	; 0x24
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	e00b      	b.n	80068e0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	1c59      	adds	r1, r3, #1
 80068d0:	61f9      	str	r1, [r7, #28]
 80068d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068d6:	b2d2      	uxtb	r2, r2
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	09db      	lsrs	r3, r3, #7
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	2b7f      	cmp	r3, #127	; 0x7f
 80068e4:	d8f0      	bhi.n	80068c8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	61fa      	str	r2, [r7, #28]
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	701a      	strb	r2, [r3, #0]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80068f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2280      	movs	r2, #128	; 0x80
 80068fc:	4619      	mov	r1, r3
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f7fe fb00 	bl	8004f04 <_EncodeStr>
 8006904:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006906:	2216      	movs	r2, #22
 8006908:	68f9      	ldr	r1, [r7, #12]
 800690a:	6938      	ldr	r0, [r7, #16]
 800690c:	f7fe fc18 	bl	8005140 <_SendPacket>
      RECORD_END();
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d006      	beq.n	800692a <SEGGER_SYSVIEW_SendModule+0x102>
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	4798      	blx	r3
    }
  }
}
 800692a:	bf00      	nop
 800692c:	3730      	adds	r7, #48	; 0x30
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20014410 	.word	0x20014410
 8006938:	20014418 	.word	0x20014418

0800693c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006942:	4b0c      	ldr	r3, [pc, #48]	; (8006974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00f      	beq.n	800696a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800694a:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f2      	bne.n	8006950 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20014410 	.word	0x20014410

08006978 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800697e:	f3ef 8311 	mrs	r3, BASEPRI
 8006982:	f04f 0120 	mov.w	r1, #32
 8006986:	f381 8811 	msr	BASEPRI, r1
 800698a:	60fb      	str	r3, [r7, #12]
 800698c:	4817      	ldr	r0, [pc, #92]	; (80069ec <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800698e:	f7fe fae9 	bl	8004f64 <_PreparePacket>
 8006992:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	e00b      	b.n	80069bc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	6179      	str	r1, [r7, #20]
 80069ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b2:	b2d2      	uxtb	r2, r2
 80069b4:	701a      	strb	r2, [r3, #0]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	09db      	lsrs	r3, r3, #7
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b7f      	cmp	r3, #127	; 0x7f
 80069c0:	d8f0      	bhi.n	80069a4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	617a      	str	r2, [r7, #20]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80069d2:	221b      	movs	r2, #27
 80069d4:	6879      	ldr	r1, [r7, #4]
 80069d6:	68b8      	ldr	r0, [r7, #8]
 80069d8:	f7fe fbb2 	bl	8005140 <_SendPacket>
  RECORD_END();
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f383 8811 	msr	BASEPRI, r3
}
 80069e2:	bf00      	nop
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20014418 	.word	0x20014418
 80069f0:	20014414 	.word	0x20014414

080069f4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80069f4:	b40f      	push	{r0, r1, r2, r3}
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006a02:	1d3b      	adds	r3, r7, #4
 8006a04:	461a      	mov	r2, r3
 8006a06:	2100      	movs	r1, #0
 8006a08:	6938      	ldr	r0, [r7, #16]
 8006a0a:	f7fe fea9 	bl	8005760 <_VPrintTarget>
  va_end(ParamList);
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a18:	b004      	add	sp, #16
 8006a1a:	4770      	bx	lr

08006a1c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a24:	f3ef 8311 	mrs	r3, BASEPRI
 8006a28:	f04f 0120 	mov.w	r1, #32
 8006a2c:	f381 8811 	msr	BASEPRI, r1
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	4827      	ldr	r0, [pc, #156]	; (8006ad0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006a34:	f7fe fa96 	bl	8004f64 <_PreparePacket>
 8006a38:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a3a:	2280      	movs	r2, #128	; 0x80
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	6938      	ldr	r0, [r7, #16]
 8006a40:	f7fe fa60 	bl	8004f04 <_EncodeStr>
 8006a44:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	623b      	str	r3, [r7, #32]
 8006a4e:	e00b      	b.n	8006a68 <SEGGER_SYSVIEW_Warn+0x4c>
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	1c59      	adds	r1, r3, #1
 8006a58:	6279      	str	r1, [r7, #36]	; 0x24
 8006a5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	09db      	lsrs	r3, r3, #7
 8006a66:	623b      	str	r3, [r7, #32]
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	d8f0      	bhi.n	8006a50 <SEGGER_SYSVIEW_Warn+0x34>
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	1c5a      	adds	r2, r3, #1
 8006a72:	627a      	str	r2, [r7, #36]	; 0x24
 8006a74:	6a3a      	ldr	r2, [r7, #32]
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	61fb      	str	r3, [r7, #28]
 8006a82:	2300      	movs	r3, #0
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	e00b      	b.n	8006aa0 <SEGGER_SYSVIEW_Warn+0x84>
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	1c59      	adds	r1, r3, #1
 8006a90:	61f9      	str	r1, [r7, #28]
 8006a92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	09db      	lsrs	r3, r3, #7
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8006aa4:	d8f0      	bhi.n	8006a88 <SEGGER_SYSVIEW_Warn+0x6c>
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	61fa      	str	r2, [r7, #28]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006ab6:	221a      	movs	r2, #26
 8006ab8:	68f9      	ldr	r1, [r7, #12]
 8006aba:	6938      	ldr	r0, [r7, #16]
 8006abc:	f7fe fb40 	bl	8005140 <_SendPacket>
  RECORD_END();
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f383 8811 	msr	BASEPRI, r3
}
 8006ac6:	bf00      	nop
 8006ac8:	3728      	adds	r7, #40	; 0x28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20014418 	.word	0x20014418

08006ad4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006ae2:	683a      	ldr	r2, [r7, #0]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f7fe f916 	bl	8004d18 <SEGGER_RTT_Write>
  return len;
 8006aec:	683b      	ldr	r3, [r7, #0]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
	...

08006af8 <__libc_init_array>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	4d0d      	ldr	r5, [pc, #52]	; (8006b30 <__libc_init_array+0x38>)
 8006afc:	4c0d      	ldr	r4, [pc, #52]	; (8006b34 <__libc_init_array+0x3c>)
 8006afe:	1b64      	subs	r4, r4, r5
 8006b00:	10a4      	asrs	r4, r4, #2
 8006b02:	2600      	movs	r6, #0
 8006b04:	42a6      	cmp	r6, r4
 8006b06:	d109      	bne.n	8006b1c <__libc_init_array+0x24>
 8006b08:	4d0b      	ldr	r5, [pc, #44]	; (8006b38 <__libc_init_array+0x40>)
 8006b0a:	4c0c      	ldr	r4, [pc, #48]	; (8006b3c <__libc_init_array+0x44>)
 8006b0c:	f001 f8ae 	bl	8007c6c <_init>
 8006b10:	1b64      	subs	r4, r4, r5
 8006b12:	10a4      	asrs	r4, r4, #2
 8006b14:	2600      	movs	r6, #0
 8006b16:	42a6      	cmp	r6, r4
 8006b18:	d105      	bne.n	8006b26 <__libc_init_array+0x2e>
 8006b1a:	bd70      	pop	{r4, r5, r6, pc}
 8006b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b20:	4798      	blx	r3
 8006b22:	3601      	adds	r6, #1
 8006b24:	e7ee      	b.n	8006b04 <__libc_init_array+0xc>
 8006b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2a:	4798      	blx	r3
 8006b2c:	3601      	adds	r6, #1
 8006b2e:	e7f2      	b.n	8006b16 <__libc_init_array+0x1e>
 8006b30:	08007e90 	.word	0x08007e90
 8006b34:	08007e90 	.word	0x08007e90
 8006b38:	08007e90 	.word	0x08007e90
 8006b3c:	08007e94 	.word	0x08007e94

08006b40 <memcmp>:
 8006b40:	b510      	push	{r4, lr}
 8006b42:	3901      	subs	r1, #1
 8006b44:	4402      	add	r2, r0
 8006b46:	4290      	cmp	r0, r2
 8006b48:	d101      	bne.n	8006b4e <memcmp+0xe>
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	e005      	b.n	8006b5a <memcmp+0x1a>
 8006b4e:	7803      	ldrb	r3, [r0, #0]
 8006b50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	d001      	beq.n	8006b5c <memcmp+0x1c>
 8006b58:	1b18      	subs	r0, r3, r4
 8006b5a:	bd10      	pop	{r4, pc}
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	e7f2      	b.n	8006b46 <memcmp+0x6>

08006b60 <memcpy>:
 8006b60:	440a      	add	r2, r1
 8006b62:	4291      	cmp	r1, r2
 8006b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	4770      	bx	lr
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b76:	4291      	cmp	r1, r2
 8006b78:	d1f9      	bne.n	8006b6e <memcpy+0xe>
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <memset>:
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d100      	bne.n	8006b86 <memset+0xa>
 8006b84:	4770      	bx	lr
 8006b86:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8a:	e7f9      	b.n	8006b80 <memset+0x4>

08006b8c <_puts_r>:
 8006b8c:	b570      	push	{r4, r5, r6, lr}
 8006b8e:	460e      	mov	r6, r1
 8006b90:	4605      	mov	r5, r0
 8006b92:	b118      	cbz	r0, 8006b9c <_puts_r+0x10>
 8006b94:	6983      	ldr	r3, [r0, #24]
 8006b96:	b90b      	cbnz	r3, 8006b9c <_puts_r+0x10>
 8006b98:	f000 fa7c 	bl	8007094 <__sinit>
 8006b9c:	69ab      	ldr	r3, [r5, #24]
 8006b9e:	68ac      	ldr	r4, [r5, #8]
 8006ba0:	b913      	cbnz	r3, 8006ba8 <_puts_r+0x1c>
 8006ba2:	4628      	mov	r0, r5
 8006ba4:	f000 fa76 	bl	8007094 <__sinit>
 8006ba8:	4b2c      	ldr	r3, [pc, #176]	; (8006c5c <_puts_r+0xd0>)
 8006baa:	429c      	cmp	r4, r3
 8006bac:	d120      	bne.n	8006bf0 <_puts_r+0x64>
 8006bae:	686c      	ldr	r4, [r5, #4]
 8006bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb2:	07db      	lsls	r3, r3, #31
 8006bb4:	d405      	bmi.n	8006bc2 <_puts_r+0x36>
 8006bb6:	89a3      	ldrh	r3, [r4, #12]
 8006bb8:	0598      	lsls	r0, r3, #22
 8006bba:	d402      	bmi.n	8006bc2 <_puts_r+0x36>
 8006bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bbe:	f000 fb07 	bl	80071d0 <__retarget_lock_acquire_recursive>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	0719      	lsls	r1, r3, #28
 8006bc6:	d51d      	bpl.n	8006c04 <_puts_r+0x78>
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	b1db      	cbz	r3, 8006c04 <_puts_r+0x78>
 8006bcc:	3e01      	subs	r6, #1
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	bb39      	cbnz	r1, 8006c2a <_puts_r+0x9e>
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da38      	bge.n	8006c50 <_puts_r+0xc4>
 8006bde:	4622      	mov	r2, r4
 8006be0:	210a      	movs	r1, #10
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f87c 	bl	8006ce0 <__swbuf_r>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d011      	beq.n	8006c10 <_puts_r+0x84>
 8006bec:	250a      	movs	r5, #10
 8006bee:	e011      	b.n	8006c14 <_puts_r+0x88>
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	; (8006c60 <_puts_r+0xd4>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <_puts_r+0x6e>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e7da      	b.n	8006bb0 <_puts_r+0x24>
 8006bfa:	4b1a      	ldr	r3, [pc, #104]	; (8006c64 <_puts_r+0xd8>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	e7d5      	b.n	8006bb0 <_puts_r+0x24>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4628      	mov	r0, r5
 8006c08:	f000 f8bc 	bl	8006d84 <__swsetup_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d0dd      	beq.n	8006bcc <_puts_r+0x40>
 8006c10:	f04f 35ff 	mov.w	r5, #4294967295
 8006c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c16:	07da      	lsls	r2, r3, #31
 8006c18:	d405      	bmi.n	8006c26 <_puts_r+0x9a>
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	059b      	lsls	r3, r3, #22
 8006c1e:	d402      	bmi.n	8006c26 <_puts_r+0x9a>
 8006c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c22:	f000 fad6 	bl	80071d2 <__retarget_lock_release_recursive>
 8006c26:	4628      	mov	r0, r5
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	da04      	bge.n	8006c38 <_puts_r+0xac>
 8006c2e:	69a2      	ldr	r2, [r4, #24]
 8006c30:	429a      	cmp	r2, r3
 8006c32:	dc06      	bgt.n	8006c42 <_puts_r+0xb6>
 8006c34:	290a      	cmp	r1, #10
 8006c36:	d004      	beq.n	8006c42 <_puts_r+0xb6>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	7019      	strb	r1, [r3, #0]
 8006c40:	e7c5      	b.n	8006bce <_puts_r+0x42>
 8006c42:	4622      	mov	r2, r4
 8006c44:	4628      	mov	r0, r5
 8006c46:	f000 f84b 	bl	8006ce0 <__swbuf_r>
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d1bf      	bne.n	8006bce <_puts_r+0x42>
 8006c4e:	e7df      	b.n	8006c10 <_puts_r+0x84>
 8006c50:	6823      	ldr	r3, [r4, #0]
 8006c52:	250a      	movs	r5, #10
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	6022      	str	r2, [r4, #0]
 8006c58:	701d      	strb	r5, [r3, #0]
 8006c5a:	e7db      	b.n	8006c14 <_puts_r+0x88>
 8006c5c:	08007e14 	.word	0x08007e14
 8006c60:	08007e34 	.word	0x08007e34
 8006c64:	08007df4 	.word	0x08007df4

08006c68 <puts>:
 8006c68:	4b02      	ldr	r3, [pc, #8]	; (8006c74 <puts+0xc>)
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	f7ff bf8d 	b.w	8006b8c <_puts_r>
 8006c72:	bf00      	nop
 8006c74:	20000014 	.word	0x20000014

08006c78 <sniprintf>:
 8006c78:	b40c      	push	{r2, r3}
 8006c7a:	b530      	push	{r4, r5, lr}
 8006c7c:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <sniprintf+0x64>)
 8006c7e:	1e0c      	subs	r4, r1, #0
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	b09d      	sub	sp, #116	; 0x74
 8006c84:	da08      	bge.n	8006c98 <sniprintf+0x20>
 8006c86:	238b      	movs	r3, #139	; 0x8b
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c8e:	b01d      	add	sp, #116	; 0x74
 8006c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c94:	b002      	add	sp, #8
 8006c96:	4770      	bx	lr
 8006c98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ca0:	bf14      	ite	ne
 8006ca2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ca6:	4623      	moveq	r3, r4
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006cb0:	9002      	str	r0, [sp, #8]
 8006cb2:	9006      	str	r0, [sp, #24]
 8006cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006cb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006cba:	ab21      	add	r3, sp, #132	; 0x84
 8006cbc:	a902      	add	r1, sp, #8
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	f000 fc29 	bl	8007518 <_svfiprintf_r>
 8006cc6:	1c43      	adds	r3, r0, #1
 8006cc8:	bfbc      	itt	lt
 8006cca:	238b      	movlt	r3, #139	; 0x8b
 8006ccc:	602b      	strlt	r3, [r5, #0]
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	d0dd      	beq.n	8006c8e <sniprintf+0x16>
 8006cd2:	9b02      	ldr	r3, [sp, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
 8006cd8:	e7d9      	b.n	8006c8e <sniprintf+0x16>
 8006cda:	bf00      	nop
 8006cdc:	20000014 	.word	0x20000014

08006ce0 <__swbuf_r>:
 8006ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce2:	460e      	mov	r6, r1
 8006ce4:	4614      	mov	r4, r2
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	b118      	cbz	r0, 8006cf2 <__swbuf_r+0x12>
 8006cea:	6983      	ldr	r3, [r0, #24]
 8006cec:	b90b      	cbnz	r3, 8006cf2 <__swbuf_r+0x12>
 8006cee:	f000 f9d1 	bl	8007094 <__sinit>
 8006cf2:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <__swbuf_r+0x98>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d12b      	bne.n	8006d50 <__swbuf_r+0x70>
 8006cf8:	686c      	ldr	r4, [r5, #4]
 8006cfa:	69a3      	ldr	r3, [r4, #24]
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	071a      	lsls	r2, r3, #28
 8006d02:	d52f      	bpl.n	8006d64 <__swbuf_r+0x84>
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	b36b      	cbz	r3, 8006d64 <__swbuf_r+0x84>
 8006d08:	6923      	ldr	r3, [r4, #16]
 8006d0a:	6820      	ldr	r0, [r4, #0]
 8006d0c:	1ac0      	subs	r0, r0, r3
 8006d0e:	6963      	ldr	r3, [r4, #20]
 8006d10:	b2f6      	uxtb	r6, r6
 8006d12:	4283      	cmp	r3, r0
 8006d14:	4637      	mov	r7, r6
 8006d16:	dc04      	bgt.n	8006d22 <__swbuf_r+0x42>
 8006d18:	4621      	mov	r1, r4
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f000 f926 	bl	8006f6c <_fflush_r>
 8006d20:	bb30      	cbnz	r0, 8006d70 <__swbuf_r+0x90>
 8006d22:	68a3      	ldr	r3, [r4, #8]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	60a3      	str	r3, [r4, #8]
 8006d28:	6823      	ldr	r3, [r4, #0]
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	6022      	str	r2, [r4, #0]
 8006d2e:	701e      	strb	r6, [r3, #0]
 8006d30:	6963      	ldr	r3, [r4, #20]
 8006d32:	3001      	adds	r0, #1
 8006d34:	4283      	cmp	r3, r0
 8006d36:	d004      	beq.n	8006d42 <__swbuf_r+0x62>
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	07db      	lsls	r3, r3, #31
 8006d3c:	d506      	bpl.n	8006d4c <__swbuf_r+0x6c>
 8006d3e:	2e0a      	cmp	r6, #10
 8006d40:	d104      	bne.n	8006d4c <__swbuf_r+0x6c>
 8006d42:	4621      	mov	r1, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f911 	bl	8006f6c <_fflush_r>
 8006d4a:	b988      	cbnz	r0, 8006d70 <__swbuf_r+0x90>
 8006d4c:	4638      	mov	r0, r7
 8006d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <__swbuf_r+0x9c>)
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d101      	bne.n	8006d5a <__swbuf_r+0x7a>
 8006d56:	68ac      	ldr	r4, [r5, #8]
 8006d58:	e7cf      	b.n	8006cfa <__swbuf_r+0x1a>
 8006d5a:	4b09      	ldr	r3, [pc, #36]	; (8006d80 <__swbuf_r+0xa0>)
 8006d5c:	429c      	cmp	r4, r3
 8006d5e:	bf08      	it	eq
 8006d60:	68ec      	ldreq	r4, [r5, #12]
 8006d62:	e7ca      	b.n	8006cfa <__swbuf_r+0x1a>
 8006d64:	4621      	mov	r1, r4
 8006d66:	4628      	mov	r0, r5
 8006d68:	f000 f80c 	bl	8006d84 <__swsetup_r>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d0cb      	beq.n	8006d08 <__swbuf_r+0x28>
 8006d70:	f04f 37ff 	mov.w	r7, #4294967295
 8006d74:	e7ea      	b.n	8006d4c <__swbuf_r+0x6c>
 8006d76:	bf00      	nop
 8006d78:	08007e14 	.word	0x08007e14
 8006d7c:	08007e34 	.word	0x08007e34
 8006d80:	08007df4 	.word	0x08007df4

08006d84 <__swsetup_r>:
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <__swsetup_r+0xcc>)
 8006d86:	b570      	push	{r4, r5, r6, lr}
 8006d88:	681d      	ldr	r5, [r3, #0]
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	b125      	cbz	r5, 8006d9a <__swsetup_r+0x16>
 8006d90:	69ab      	ldr	r3, [r5, #24]
 8006d92:	b913      	cbnz	r3, 8006d9a <__swsetup_r+0x16>
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 f97d 	bl	8007094 <__sinit>
 8006d9a:	4b2e      	ldr	r3, [pc, #184]	; (8006e54 <__swsetup_r+0xd0>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d10f      	bne.n	8006dc0 <__swsetup_r+0x3c>
 8006da0:	686c      	ldr	r4, [r5, #4]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da8:	0719      	lsls	r1, r3, #28
 8006daa:	d42c      	bmi.n	8006e06 <__swsetup_r+0x82>
 8006dac:	06dd      	lsls	r5, r3, #27
 8006dae:	d411      	bmi.n	8006dd4 <__swsetup_r+0x50>
 8006db0:	2309      	movs	r3, #9
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbe:	e03e      	b.n	8006e3e <__swsetup_r+0xba>
 8006dc0:	4b25      	ldr	r3, [pc, #148]	; (8006e58 <__swsetup_r+0xd4>)
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d101      	bne.n	8006dca <__swsetup_r+0x46>
 8006dc6:	68ac      	ldr	r4, [r5, #8]
 8006dc8:	e7eb      	b.n	8006da2 <__swsetup_r+0x1e>
 8006dca:	4b24      	ldr	r3, [pc, #144]	; (8006e5c <__swsetup_r+0xd8>)
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	bf08      	it	eq
 8006dd0:	68ec      	ldreq	r4, [r5, #12]
 8006dd2:	e7e6      	b.n	8006da2 <__swsetup_r+0x1e>
 8006dd4:	0758      	lsls	r0, r3, #29
 8006dd6:	d512      	bpl.n	8006dfe <__swsetup_r+0x7a>
 8006dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dda:	b141      	cbz	r1, 8006dee <__swsetup_r+0x6a>
 8006ddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de0:	4299      	cmp	r1, r3
 8006de2:	d002      	beq.n	8006dea <__swsetup_r+0x66>
 8006de4:	4630      	mov	r0, r6
 8006de6:	f000 fa5b 	bl	80072a0 <_free_r>
 8006dea:	2300      	movs	r3, #0
 8006dec:	6363      	str	r3, [r4, #52]	; 0x34
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006df4:	81a3      	strh	r3, [r4, #12]
 8006df6:	2300      	movs	r3, #0
 8006df8:	6063      	str	r3, [r4, #4]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f043 0308 	orr.w	r3, r3, #8
 8006e04:	81a3      	strh	r3, [r4, #12]
 8006e06:	6923      	ldr	r3, [r4, #16]
 8006e08:	b94b      	cbnz	r3, 8006e1e <__swsetup_r+0x9a>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d003      	beq.n	8006e1e <__swsetup_r+0x9a>
 8006e16:	4621      	mov	r1, r4
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 fa01 	bl	8007220 <__smakebuf_r>
 8006e1e:	89a0      	ldrh	r0, [r4, #12]
 8006e20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e24:	f010 0301 	ands.w	r3, r0, #1
 8006e28:	d00a      	beq.n	8006e40 <__swsetup_r+0xbc>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	6963      	ldr	r3, [r4, #20]
 8006e30:	425b      	negs	r3, r3
 8006e32:	61a3      	str	r3, [r4, #24]
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	b943      	cbnz	r3, 8006e4a <__swsetup_r+0xc6>
 8006e38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e3c:	d1ba      	bne.n	8006db4 <__swsetup_r+0x30>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	0781      	lsls	r1, r0, #30
 8006e42:	bf58      	it	pl
 8006e44:	6963      	ldrpl	r3, [r4, #20]
 8006e46:	60a3      	str	r3, [r4, #8]
 8006e48:	e7f4      	b.n	8006e34 <__swsetup_r+0xb0>
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	e7f7      	b.n	8006e3e <__swsetup_r+0xba>
 8006e4e:	bf00      	nop
 8006e50:	20000014 	.word	0x20000014
 8006e54:	08007e14 	.word	0x08007e14
 8006e58:	08007e34 	.word	0x08007e34
 8006e5c:	08007df4 	.word	0x08007df4

08006e60 <__sflush_r>:
 8006e60:	898a      	ldrh	r2, [r1, #12]
 8006e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e66:	4605      	mov	r5, r0
 8006e68:	0710      	lsls	r0, r2, #28
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	d458      	bmi.n	8006f20 <__sflush_r+0xc0>
 8006e6e:	684b      	ldr	r3, [r1, #4]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	dc05      	bgt.n	8006e80 <__sflush_r+0x20>
 8006e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dc02      	bgt.n	8006e80 <__sflush_r+0x20>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e82:	2e00      	cmp	r6, #0
 8006e84:	d0f9      	beq.n	8006e7a <__sflush_r+0x1a>
 8006e86:	2300      	movs	r3, #0
 8006e88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e8c:	682f      	ldr	r7, [r5, #0]
 8006e8e:	602b      	str	r3, [r5, #0]
 8006e90:	d032      	beq.n	8006ef8 <__sflush_r+0x98>
 8006e92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	075a      	lsls	r2, r3, #29
 8006e98:	d505      	bpl.n	8006ea6 <__sflush_r+0x46>
 8006e9a:	6863      	ldr	r3, [r4, #4]
 8006e9c:	1ac0      	subs	r0, r0, r3
 8006e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea0:	b10b      	cbz	r3, 8006ea6 <__sflush_r+0x46>
 8006ea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ea4:	1ac0      	subs	r0, r0, r3
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eac:	6a21      	ldr	r1, [r4, #32]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b0      	blx	r6
 8006eb2:	1c43      	adds	r3, r0, #1
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	d106      	bne.n	8006ec6 <__sflush_r+0x66>
 8006eb8:	6829      	ldr	r1, [r5, #0]
 8006eba:	291d      	cmp	r1, #29
 8006ebc:	d82c      	bhi.n	8006f18 <__sflush_r+0xb8>
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <__sflush_r+0x108>)
 8006ec0:	40ca      	lsrs	r2, r1
 8006ec2:	07d6      	lsls	r6, r2, #31
 8006ec4:	d528      	bpl.n	8006f18 <__sflush_r+0xb8>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	6062      	str	r2, [r4, #4]
 8006eca:	04d9      	lsls	r1, r3, #19
 8006ecc:	6922      	ldr	r2, [r4, #16]
 8006ece:	6022      	str	r2, [r4, #0]
 8006ed0:	d504      	bpl.n	8006edc <__sflush_r+0x7c>
 8006ed2:	1c42      	adds	r2, r0, #1
 8006ed4:	d101      	bne.n	8006eda <__sflush_r+0x7a>
 8006ed6:	682b      	ldr	r3, [r5, #0]
 8006ed8:	b903      	cbnz	r3, 8006edc <__sflush_r+0x7c>
 8006eda:	6560      	str	r0, [r4, #84]	; 0x54
 8006edc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ede:	602f      	str	r7, [r5, #0]
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	d0ca      	beq.n	8006e7a <__sflush_r+0x1a>
 8006ee4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ee8:	4299      	cmp	r1, r3
 8006eea:	d002      	beq.n	8006ef2 <__sflush_r+0x92>
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 f9d7 	bl	80072a0 <_free_r>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	6360      	str	r0, [r4, #52]	; 0x34
 8006ef6:	e7c1      	b.n	8006e7c <__sflush_r+0x1c>
 8006ef8:	6a21      	ldr	r1, [r4, #32]
 8006efa:	2301      	movs	r3, #1
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b0      	blx	r6
 8006f00:	1c41      	adds	r1, r0, #1
 8006f02:	d1c7      	bne.n	8006e94 <__sflush_r+0x34>
 8006f04:	682b      	ldr	r3, [r5, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0c4      	beq.n	8006e94 <__sflush_r+0x34>
 8006f0a:	2b1d      	cmp	r3, #29
 8006f0c:	d001      	beq.n	8006f12 <__sflush_r+0xb2>
 8006f0e:	2b16      	cmp	r3, #22
 8006f10:	d101      	bne.n	8006f16 <__sflush_r+0xb6>
 8006f12:	602f      	str	r7, [r5, #0]
 8006f14:	e7b1      	b.n	8006e7a <__sflush_r+0x1a>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1c:	81a3      	strh	r3, [r4, #12]
 8006f1e:	e7ad      	b.n	8006e7c <__sflush_r+0x1c>
 8006f20:	690f      	ldr	r7, [r1, #16]
 8006f22:	2f00      	cmp	r7, #0
 8006f24:	d0a9      	beq.n	8006e7a <__sflush_r+0x1a>
 8006f26:	0793      	lsls	r3, r2, #30
 8006f28:	680e      	ldr	r6, [r1, #0]
 8006f2a:	bf08      	it	eq
 8006f2c:	694b      	ldreq	r3, [r1, #20]
 8006f2e:	600f      	str	r7, [r1, #0]
 8006f30:	bf18      	it	ne
 8006f32:	2300      	movne	r3, #0
 8006f34:	eba6 0807 	sub.w	r8, r6, r7
 8006f38:	608b      	str	r3, [r1, #8]
 8006f3a:	f1b8 0f00 	cmp.w	r8, #0
 8006f3e:	dd9c      	ble.n	8006e7a <__sflush_r+0x1a>
 8006f40:	6a21      	ldr	r1, [r4, #32]
 8006f42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f44:	4643      	mov	r3, r8
 8006f46:	463a      	mov	r2, r7
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b0      	blx	r6
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	dc06      	bgt.n	8006f5e <__sflush_r+0xfe>
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f56:	81a3      	strh	r3, [r4, #12]
 8006f58:	f04f 30ff 	mov.w	r0, #4294967295
 8006f5c:	e78e      	b.n	8006e7c <__sflush_r+0x1c>
 8006f5e:	4407      	add	r7, r0
 8006f60:	eba8 0800 	sub.w	r8, r8, r0
 8006f64:	e7e9      	b.n	8006f3a <__sflush_r+0xda>
 8006f66:	bf00      	nop
 8006f68:	20400001 	.word	0x20400001

08006f6c <_fflush_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	690b      	ldr	r3, [r1, #16]
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b913      	cbnz	r3, 8006f7c <_fflush_r+0x10>
 8006f76:	2500      	movs	r5, #0
 8006f78:	4628      	mov	r0, r5
 8006f7a:	bd38      	pop	{r3, r4, r5, pc}
 8006f7c:	b118      	cbz	r0, 8006f86 <_fflush_r+0x1a>
 8006f7e:	6983      	ldr	r3, [r0, #24]
 8006f80:	b90b      	cbnz	r3, 8006f86 <_fflush_r+0x1a>
 8006f82:	f000 f887 	bl	8007094 <__sinit>
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <_fflush_r+0x6c>)
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	d11b      	bne.n	8006fc4 <_fflush_r+0x58>
 8006f8c:	686c      	ldr	r4, [r5, #4]
 8006f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d0ef      	beq.n	8006f76 <_fflush_r+0xa>
 8006f96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f98:	07d0      	lsls	r0, r2, #31
 8006f9a:	d404      	bmi.n	8006fa6 <_fflush_r+0x3a>
 8006f9c:	0599      	lsls	r1, r3, #22
 8006f9e:	d402      	bmi.n	8006fa6 <_fflush_r+0x3a>
 8006fa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fa2:	f000 f915 	bl	80071d0 <__retarget_lock_acquire_recursive>
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	4621      	mov	r1, r4
 8006faa:	f7ff ff59 	bl	8006e60 <__sflush_r>
 8006fae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb0:	07da      	lsls	r2, r3, #31
 8006fb2:	4605      	mov	r5, r0
 8006fb4:	d4e0      	bmi.n	8006f78 <_fflush_r+0xc>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	059b      	lsls	r3, r3, #22
 8006fba:	d4dd      	bmi.n	8006f78 <_fflush_r+0xc>
 8006fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fbe:	f000 f908 	bl	80071d2 <__retarget_lock_release_recursive>
 8006fc2:	e7d9      	b.n	8006f78 <_fflush_r+0xc>
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <_fflush_r+0x70>)
 8006fc6:	429c      	cmp	r4, r3
 8006fc8:	d101      	bne.n	8006fce <_fflush_r+0x62>
 8006fca:	68ac      	ldr	r4, [r5, #8]
 8006fcc:	e7df      	b.n	8006f8e <_fflush_r+0x22>
 8006fce:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <_fflush_r+0x74>)
 8006fd0:	429c      	cmp	r4, r3
 8006fd2:	bf08      	it	eq
 8006fd4:	68ec      	ldreq	r4, [r5, #12]
 8006fd6:	e7da      	b.n	8006f8e <_fflush_r+0x22>
 8006fd8:	08007e14 	.word	0x08007e14
 8006fdc:	08007e34 	.word	0x08007e34
 8006fe0:	08007df4 	.word	0x08007df4

08006fe4 <std>:
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	e9c0 3300 	strd	r3, r3, [r0]
 8006fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ff2:	6083      	str	r3, [r0, #8]
 8006ff4:	8181      	strh	r1, [r0, #12]
 8006ff6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ff8:	81c2      	strh	r2, [r0, #14]
 8006ffa:	6183      	str	r3, [r0, #24]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	2208      	movs	r2, #8
 8007000:	305c      	adds	r0, #92	; 0x5c
 8007002:	f7ff fdbb 	bl	8006b7c <memset>
 8007006:	4b05      	ldr	r3, [pc, #20]	; (800701c <std+0x38>)
 8007008:	6263      	str	r3, [r4, #36]	; 0x24
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <std+0x3c>)
 800700c:	62a3      	str	r3, [r4, #40]	; 0x28
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <std+0x40>)
 8007010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <std+0x44>)
 8007014:	6224      	str	r4, [r4, #32]
 8007016:	6323      	str	r3, [r4, #48]	; 0x30
 8007018:	bd10      	pop	{r4, pc}
 800701a:	bf00      	nop
 800701c:	08007a61 	.word	0x08007a61
 8007020:	08007a83 	.word	0x08007a83
 8007024:	08007abb 	.word	0x08007abb
 8007028:	08007adf 	.word	0x08007adf

0800702c <_cleanup_r>:
 800702c:	4901      	ldr	r1, [pc, #4]	; (8007034 <_cleanup_r+0x8>)
 800702e:	f000 b8af 	b.w	8007190 <_fwalk_reent>
 8007032:	bf00      	nop
 8007034:	08006f6d 	.word	0x08006f6d

08007038 <__sfmoreglue>:
 8007038:	b570      	push	{r4, r5, r6, lr}
 800703a:	2268      	movs	r2, #104	; 0x68
 800703c:	1e4d      	subs	r5, r1, #1
 800703e:	4355      	muls	r5, r2
 8007040:	460e      	mov	r6, r1
 8007042:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007046:	f000 f997 	bl	8007378 <_malloc_r>
 800704a:	4604      	mov	r4, r0
 800704c:	b140      	cbz	r0, 8007060 <__sfmoreglue+0x28>
 800704e:	2100      	movs	r1, #0
 8007050:	e9c0 1600 	strd	r1, r6, [r0]
 8007054:	300c      	adds	r0, #12
 8007056:	60a0      	str	r0, [r4, #8]
 8007058:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800705c:	f7ff fd8e 	bl	8006b7c <memset>
 8007060:	4620      	mov	r0, r4
 8007062:	bd70      	pop	{r4, r5, r6, pc}

08007064 <__sfp_lock_acquire>:
 8007064:	4801      	ldr	r0, [pc, #4]	; (800706c <__sfp_lock_acquire+0x8>)
 8007066:	f000 b8b3 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 800706a:	bf00      	nop
 800706c:	200144fc 	.word	0x200144fc

08007070 <__sfp_lock_release>:
 8007070:	4801      	ldr	r0, [pc, #4]	; (8007078 <__sfp_lock_release+0x8>)
 8007072:	f000 b8ae 	b.w	80071d2 <__retarget_lock_release_recursive>
 8007076:	bf00      	nop
 8007078:	200144fc 	.word	0x200144fc

0800707c <__sinit_lock_acquire>:
 800707c:	4801      	ldr	r0, [pc, #4]	; (8007084 <__sinit_lock_acquire+0x8>)
 800707e:	f000 b8a7 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 8007082:	bf00      	nop
 8007084:	200144fd 	.word	0x200144fd

08007088 <__sinit_lock_release>:
 8007088:	4801      	ldr	r0, [pc, #4]	; (8007090 <__sinit_lock_release+0x8>)
 800708a:	f000 b8a2 	b.w	80071d2 <__retarget_lock_release_recursive>
 800708e:	bf00      	nop
 8007090:	200144fd 	.word	0x200144fd

08007094 <__sinit>:
 8007094:	b510      	push	{r4, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	f7ff fff0 	bl	800707c <__sinit_lock_acquire>
 800709c:	69a3      	ldr	r3, [r4, #24]
 800709e:	b11b      	cbz	r3, 80070a8 <__sinit+0x14>
 80070a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a4:	f7ff bff0 	b.w	8007088 <__sinit_lock_release>
 80070a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070ac:	6523      	str	r3, [r4, #80]	; 0x50
 80070ae:	4b13      	ldr	r3, [pc, #76]	; (80070fc <__sinit+0x68>)
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <__sinit+0x6c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80070b6:	42a3      	cmp	r3, r4
 80070b8:	bf04      	itt	eq
 80070ba:	2301      	moveq	r3, #1
 80070bc:	61a3      	streq	r3, [r4, #24]
 80070be:	4620      	mov	r0, r4
 80070c0:	f000 f820 	bl	8007104 <__sfp>
 80070c4:	6060      	str	r0, [r4, #4]
 80070c6:	4620      	mov	r0, r4
 80070c8:	f000 f81c 	bl	8007104 <__sfp>
 80070cc:	60a0      	str	r0, [r4, #8]
 80070ce:	4620      	mov	r0, r4
 80070d0:	f000 f818 	bl	8007104 <__sfp>
 80070d4:	2200      	movs	r2, #0
 80070d6:	60e0      	str	r0, [r4, #12]
 80070d8:	2104      	movs	r1, #4
 80070da:	6860      	ldr	r0, [r4, #4]
 80070dc:	f7ff ff82 	bl	8006fe4 <std>
 80070e0:	68a0      	ldr	r0, [r4, #8]
 80070e2:	2201      	movs	r2, #1
 80070e4:	2109      	movs	r1, #9
 80070e6:	f7ff ff7d 	bl	8006fe4 <std>
 80070ea:	68e0      	ldr	r0, [r4, #12]
 80070ec:	2202      	movs	r2, #2
 80070ee:	2112      	movs	r1, #18
 80070f0:	f7ff ff78 	bl	8006fe4 <std>
 80070f4:	2301      	movs	r3, #1
 80070f6:	61a3      	str	r3, [r4, #24]
 80070f8:	e7d2      	b.n	80070a0 <__sinit+0xc>
 80070fa:	bf00      	nop
 80070fc:	08007df0 	.word	0x08007df0
 8007100:	0800702d 	.word	0x0800702d

08007104 <__sfp>:
 8007104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007106:	4607      	mov	r7, r0
 8007108:	f7ff ffac 	bl	8007064 <__sfp_lock_acquire>
 800710c:	4b1e      	ldr	r3, [pc, #120]	; (8007188 <__sfp+0x84>)
 800710e:	681e      	ldr	r6, [r3, #0]
 8007110:	69b3      	ldr	r3, [r6, #24]
 8007112:	b913      	cbnz	r3, 800711a <__sfp+0x16>
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ffbd 	bl	8007094 <__sinit>
 800711a:	3648      	adds	r6, #72	; 0x48
 800711c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007120:	3b01      	subs	r3, #1
 8007122:	d503      	bpl.n	800712c <__sfp+0x28>
 8007124:	6833      	ldr	r3, [r6, #0]
 8007126:	b30b      	cbz	r3, 800716c <__sfp+0x68>
 8007128:	6836      	ldr	r6, [r6, #0]
 800712a:	e7f7      	b.n	800711c <__sfp+0x18>
 800712c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007130:	b9d5      	cbnz	r5, 8007168 <__sfp+0x64>
 8007132:	4b16      	ldr	r3, [pc, #88]	; (800718c <__sfp+0x88>)
 8007134:	60e3      	str	r3, [r4, #12]
 8007136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800713a:	6665      	str	r5, [r4, #100]	; 0x64
 800713c:	f000 f847 	bl	80071ce <__retarget_lock_init_recursive>
 8007140:	f7ff ff96 	bl	8007070 <__sfp_lock_release>
 8007144:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007148:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800714c:	6025      	str	r5, [r4, #0]
 800714e:	61a5      	str	r5, [r4, #24]
 8007150:	2208      	movs	r2, #8
 8007152:	4629      	mov	r1, r5
 8007154:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007158:	f7ff fd10 	bl	8006b7c <memset>
 800715c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007160:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007164:	4620      	mov	r0, r4
 8007166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007168:	3468      	adds	r4, #104	; 0x68
 800716a:	e7d9      	b.n	8007120 <__sfp+0x1c>
 800716c:	2104      	movs	r1, #4
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff ff62 	bl	8007038 <__sfmoreglue>
 8007174:	4604      	mov	r4, r0
 8007176:	6030      	str	r0, [r6, #0]
 8007178:	2800      	cmp	r0, #0
 800717a:	d1d5      	bne.n	8007128 <__sfp+0x24>
 800717c:	f7ff ff78 	bl	8007070 <__sfp_lock_release>
 8007180:	230c      	movs	r3, #12
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	e7ee      	b.n	8007164 <__sfp+0x60>
 8007186:	bf00      	nop
 8007188:	08007df0 	.word	0x08007df0
 800718c:	ffff0001 	.word	0xffff0001

08007190 <_fwalk_reent>:
 8007190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007194:	4606      	mov	r6, r0
 8007196:	4688      	mov	r8, r1
 8007198:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800719c:	2700      	movs	r7, #0
 800719e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071a2:	f1b9 0901 	subs.w	r9, r9, #1
 80071a6:	d505      	bpl.n	80071b4 <_fwalk_reent+0x24>
 80071a8:	6824      	ldr	r4, [r4, #0]
 80071aa:	2c00      	cmp	r4, #0
 80071ac:	d1f7      	bne.n	800719e <_fwalk_reent+0xe>
 80071ae:	4638      	mov	r0, r7
 80071b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b4:	89ab      	ldrh	r3, [r5, #12]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d907      	bls.n	80071ca <_fwalk_reent+0x3a>
 80071ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071be:	3301      	adds	r3, #1
 80071c0:	d003      	beq.n	80071ca <_fwalk_reent+0x3a>
 80071c2:	4629      	mov	r1, r5
 80071c4:	4630      	mov	r0, r6
 80071c6:	47c0      	blx	r8
 80071c8:	4307      	orrs	r7, r0
 80071ca:	3568      	adds	r5, #104	; 0x68
 80071cc:	e7e9      	b.n	80071a2 <_fwalk_reent+0x12>

080071ce <__retarget_lock_init_recursive>:
 80071ce:	4770      	bx	lr

080071d0 <__retarget_lock_acquire_recursive>:
 80071d0:	4770      	bx	lr

080071d2 <__retarget_lock_release_recursive>:
 80071d2:	4770      	bx	lr

080071d4 <__swhatbuf_r>:
 80071d4:	b570      	push	{r4, r5, r6, lr}
 80071d6:	460e      	mov	r6, r1
 80071d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071dc:	2900      	cmp	r1, #0
 80071de:	b096      	sub	sp, #88	; 0x58
 80071e0:	4614      	mov	r4, r2
 80071e2:	461d      	mov	r5, r3
 80071e4:	da08      	bge.n	80071f8 <__swhatbuf_r+0x24>
 80071e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	061a      	lsls	r2, r3, #24
 80071f0:	d410      	bmi.n	8007214 <__swhatbuf_r+0x40>
 80071f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f6:	e00e      	b.n	8007216 <__swhatbuf_r+0x42>
 80071f8:	466a      	mov	r2, sp
 80071fa:	f000 fc85 	bl	8007b08 <_fstat_r>
 80071fe:	2800      	cmp	r0, #0
 8007200:	dbf1      	blt.n	80071e6 <__swhatbuf_r+0x12>
 8007202:	9a01      	ldr	r2, [sp, #4]
 8007204:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007208:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800720c:	425a      	negs	r2, r3
 800720e:	415a      	adcs	r2, r3
 8007210:	602a      	str	r2, [r5, #0]
 8007212:	e7ee      	b.n	80071f2 <__swhatbuf_r+0x1e>
 8007214:	2340      	movs	r3, #64	; 0x40
 8007216:	2000      	movs	r0, #0
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	b016      	add	sp, #88	; 0x58
 800721c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007220 <__smakebuf_r>:
 8007220:	898b      	ldrh	r3, [r1, #12]
 8007222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007224:	079d      	lsls	r5, r3, #30
 8007226:	4606      	mov	r6, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d507      	bpl.n	800723c <__smakebuf_r+0x1c>
 800722c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2301      	movs	r3, #1
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	b002      	add	sp, #8
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	ab01      	add	r3, sp, #4
 800723e:	466a      	mov	r2, sp
 8007240:	f7ff ffc8 	bl	80071d4 <__swhatbuf_r>
 8007244:	9900      	ldr	r1, [sp, #0]
 8007246:	4605      	mov	r5, r0
 8007248:	4630      	mov	r0, r6
 800724a:	f000 f895 	bl	8007378 <_malloc_r>
 800724e:	b948      	cbnz	r0, 8007264 <__smakebuf_r+0x44>
 8007250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007254:	059a      	lsls	r2, r3, #22
 8007256:	d4ef      	bmi.n	8007238 <__smakebuf_r+0x18>
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	e7e3      	b.n	800722c <__smakebuf_r+0xc>
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <__smakebuf_r+0x7c>)
 8007266:	62b3      	str	r3, [r6, #40]	; 0x28
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	6163      	str	r3, [r4, #20]
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	6120      	str	r0, [r4, #16]
 800727a:	b15b      	cbz	r3, 8007294 <__smakebuf_r+0x74>
 800727c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007280:	4630      	mov	r0, r6
 8007282:	f000 fc53 	bl	8007b2c <_isatty_r>
 8007286:	b128      	cbz	r0, 8007294 <__smakebuf_r+0x74>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	89a0      	ldrh	r0, [r4, #12]
 8007296:	4305      	orrs	r5, r0
 8007298:	81a5      	strh	r5, [r4, #12]
 800729a:	e7cd      	b.n	8007238 <__smakebuf_r+0x18>
 800729c:	0800702d 	.word	0x0800702d

080072a0 <_free_r>:
 80072a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072a2:	2900      	cmp	r1, #0
 80072a4:	d044      	beq.n	8007330 <_free_r+0x90>
 80072a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072aa:	9001      	str	r0, [sp, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f1a1 0404 	sub.w	r4, r1, #4
 80072b2:	bfb8      	it	lt
 80072b4:	18e4      	addlt	r4, r4, r3
 80072b6:	f000 fc75 	bl	8007ba4 <__malloc_lock>
 80072ba:	4a1e      	ldr	r2, [pc, #120]	; (8007334 <_free_r+0x94>)
 80072bc:	9801      	ldr	r0, [sp, #4]
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	b933      	cbnz	r3, 80072d0 <_free_r+0x30>
 80072c2:	6063      	str	r3, [r4, #4]
 80072c4:	6014      	str	r4, [r2, #0]
 80072c6:	b003      	add	sp, #12
 80072c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072cc:	f000 bc70 	b.w	8007bb0 <__malloc_unlock>
 80072d0:	42a3      	cmp	r3, r4
 80072d2:	d908      	bls.n	80072e6 <_free_r+0x46>
 80072d4:	6825      	ldr	r5, [r4, #0]
 80072d6:	1961      	adds	r1, r4, r5
 80072d8:	428b      	cmp	r3, r1
 80072da:	bf01      	itttt	eq
 80072dc:	6819      	ldreq	r1, [r3, #0]
 80072de:	685b      	ldreq	r3, [r3, #4]
 80072e0:	1949      	addeq	r1, r1, r5
 80072e2:	6021      	streq	r1, [r4, #0]
 80072e4:	e7ed      	b.n	80072c2 <_free_r+0x22>
 80072e6:	461a      	mov	r2, r3
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	b10b      	cbz	r3, 80072f0 <_free_r+0x50>
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	d9fa      	bls.n	80072e6 <_free_r+0x46>
 80072f0:	6811      	ldr	r1, [r2, #0]
 80072f2:	1855      	adds	r5, r2, r1
 80072f4:	42a5      	cmp	r5, r4
 80072f6:	d10b      	bne.n	8007310 <_free_r+0x70>
 80072f8:	6824      	ldr	r4, [r4, #0]
 80072fa:	4421      	add	r1, r4
 80072fc:	1854      	adds	r4, r2, r1
 80072fe:	42a3      	cmp	r3, r4
 8007300:	6011      	str	r1, [r2, #0]
 8007302:	d1e0      	bne.n	80072c6 <_free_r+0x26>
 8007304:	681c      	ldr	r4, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	6053      	str	r3, [r2, #4]
 800730a:	4421      	add	r1, r4
 800730c:	6011      	str	r1, [r2, #0]
 800730e:	e7da      	b.n	80072c6 <_free_r+0x26>
 8007310:	d902      	bls.n	8007318 <_free_r+0x78>
 8007312:	230c      	movs	r3, #12
 8007314:	6003      	str	r3, [r0, #0]
 8007316:	e7d6      	b.n	80072c6 <_free_r+0x26>
 8007318:	6825      	ldr	r5, [r4, #0]
 800731a:	1961      	adds	r1, r4, r5
 800731c:	428b      	cmp	r3, r1
 800731e:	bf04      	itt	eq
 8007320:	6819      	ldreq	r1, [r3, #0]
 8007322:	685b      	ldreq	r3, [r3, #4]
 8007324:	6063      	str	r3, [r4, #4]
 8007326:	bf04      	itt	eq
 8007328:	1949      	addeq	r1, r1, r5
 800732a:	6021      	streq	r1, [r4, #0]
 800732c:	6054      	str	r4, [r2, #4]
 800732e:	e7ca      	b.n	80072c6 <_free_r+0x26>
 8007330:	b003      	add	sp, #12
 8007332:	bd30      	pop	{r4, r5, pc}
 8007334:	20014500 	.word	0x20014500

08007338 <sbrk_aligned>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	4e0e      	ldr	r6, [pc, #56]	; (8007374 <sbrk_aligned+0x3c>)
 800733c:	460c      	mov	r4, r1
 800733e:	6831      	ldr	r1, [r6, #0]
 8007340:	4605      	mov	r5, r0
 8007342:	b911      	cbnz	r1, 800734a <sbrk_aligned+0x12>
 8007344:	f000 fb7c 	bl	8007a40 <_sbrk_r>
 8007348:	6030      	str	r0, [r6, #0]
 800734a:	4621      	mov	r1, r4
 800734c:	4628      	mov	r0, r5
 800734e:	f000 fb77 	bl	8007a40 <_sbrk_r>
 8007352:	1c43      	adds	r3, r0, #1
 8007354:	d00a      	beq.n	800736c <sbrk_aligned+0x34>
 8007356:	1cc4      	adds	r4, r0, #3
 8007358:	f024 0403 	bic.w	r4, r4, #3
 800735c:	42a0      	cmp	r0, r4
 800735e:	d007      	beq.n	8007370 <sbrk_aligned+0x38>
 8007360:	1a21      	subs	r1, r4, r0
 8007362:	4628      	mov	r0, r5
 8007364:	f000 fb6c 	bl	8007a40 <_sbrk_r>
 8007368:	3001      	adds	r0, #1
 800736a:	d101      	bne.n	8007370 <sbrk_aligned+0x38>
 800736c:	f04f 34ff 	mov.w	r4, #4294967295
 8007370:	4620      	mov	r0, r4
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	20014504 	.word	0x20014504

08007378 <_malloc_r>:
 8007378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800737c:	1ccd      	adds	r5, r1, #3
 800737e:	f025 0503 	bic.w	r5, r5, #3
 8007382:	3508      	adds	r5, #8
 8007384:	2d0c      	cmp	r5, #12
 8007386:	bf38      	it	cc
 8007388:	250c      	movcc	r5, #12
 800738a:	2d00      	cmp	r5, #0
 800738c:	4607      	mov	r7, r0
 800738e:	db01      	blt.n	8007394 <_malloc_r+0x1c>
 8007390:	42a9      	cmp	r1, r5
 8007392:	d905      	bls.n	80073a0 <_malloc_r+0x28>
 8007394:	230c      	movs	r3, #12
 8007396:	603b      	str	r3, [r7, #0]
 8007398:	2600      	movs	r6, #0
 800739a:	4630      	mov	r0, r6
 800739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073a0:	4e2e      	ldr	r6, [pc, #184]	; (800745c <_malloc_r+0xe4>)
 80073a2:	f000 fbff 	bl	8007ba4 <__malloc_lock>
 80073a6:	6833      	ldr	r3, [r6, #0]
 80073a8:	461c      	mov	r4, r3
 80073aa:	bb34      	cbnz	r4, 80073fa <_malloc_r+0x82>
 80073ac:	4629      	mov	r1, r5
 80073ae:	4638      	mov	r0, r7
 80073b0:	f7ff ffc2 	bl	8007338 <sbrk_aligned>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	4604      	mov	r4, r0
 80073b8:	d14d      	bne.n	8007456 <_malloc_r+0xde>
 80073ba:	6834      	ldr	r4, [r6, #0]
 80073bc:	4626      	mov	r6, r4
 80073be:	2e00      	cmp	r6, #0
 80073c0:	d140      	bne.n	8007444 <_malloc_r+0xcc>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	4631      	mov	r1, r6
 80073c6:	4638      	mov	r0, r7
 80073c8:	eb04 0803 	add.w	r8, r4, r3
 80073cc:	f000 fb38 	bl	8007a40 <_sbrk_r>
 80073d0:	4580      	cmp	r8, r0
 80073d2:	d13a      	bne.n	800744a <_malloc_r+0xd2>
 80073d4:	6821      	ldr	r1, [r4, #0]
 80073d6:	3503      	adds	r5, #3
 80073d8:	1a6d      	subs	r5, r5, r1
 80073da:	f025 0503 	bic.w	r5, r5, #3
 80073de:	3508      	adds	r5, #8
 80073e0:	2d0c      	cmp	r5, #12
 80073e2:	bf38      	it	cc
 80073e4:	250c      	movcc	r5, #12
 80073e6:	4629      	mov	r1, r5
 80073e8:	4638      	mov	r0, r7
 80073ea:	f7ff ffa5 	bl	8007338 <sbrk_aligned>
 80073ee:	3001      	adds	r0, #1
 80073f0:	d02b      	beq.n	800744a <_malloc_r+0xd2>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	442b      	add	r3, r5
 80073f6:	6023      	str	r3, [r4, #0]
 80073f8:	e00e      	b.n	8007418 <_malloc_r+0xa0>
 80073fa:	6822      	ldr	r2, [r4, #0]
 80073fc:	1b52      	subs	r2, r2, r5
 80073fe:	d41e      	bmi.n	800743e <_malloc_r+0xc6>
 8007400:	2a0b      	cmp	r2, #11
 8007402:	d916      	bls.n	8007432 <_malloc_r+0xba>
 8007404:	1961      	adds	r1, r4, r5
 8007406:	42a3      	cmp	r3, r4
 8007408:	6025      	str	r5, [r4, #0]
 800740a:	bf18      	it	ne
 800740c:	6059      	strne	r1, [r3, #4]
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	bf08      	it	eq
 8007412:	6031      	streq	r1, [r6, #0]
 8007414:	5162      	str	r2, [r4, r5]
 8007416:	604b      	str	r3, [r1, #4]
 8007418:	4638      	mov	r0, r7
 800741a:	f104 060b 	add.w	r6, r4, #11
 800741e:	f000 fbc7 	bl	8007bb0 <__malloc_unlock>
 8007422:	f026 0607 	bic.w	r6, r6, #7
 8007426:	1d23      	adds	r3, r4, #4
 8007428:	1af2      	subs	r2, r6, r3
 800742a:	d0b6      	beq.n	800739a <_malloc_r+0x22>
 800742c:	1b9b      	subs	r3, r3, r6
 800742e:	50a3      	str	r3, [r4, r2]
 8007430:	e7b3      	b.n	800739a <_malloc_r+0x22>
 8007432:	6862      	ldr	r2, [r4, #4]
 8007434:	42a3      	cmp	r3, r4
 8007436:	bf0c      	ite	eq
 8007438:	6032      	streq	r2, [r6, #0]
 800743a:	605a      	strne	r2, [r3, #4]
 800743c:	e7ec      	b.n	8007418 <_malloc_r+0xa0>
 800743e:	4623      	mov	r3, r4
 8007440:	6864      	ldr	r4, [r4, #4]
 8007442:	e7b2      	b.n	80073aa <_malloc_r+0x32>
 8007444:	4634      	mov	r4, r6
 8007446:	6876      	ldr	r6, [r6, #4]
 8007448:	e7b9      	b.n	80073be <_malloc_r+0x46>
 800744a:	230c      	movs	r3, #12
 800744c:	603b      	str	r3, [r7, #0]
 800744e:	4638      	mov	r0, r7
 8007450:	f000 fbae 	bl	8007bb0 <__malloc_unlock>
 8007454:	e7a1      	b.n	800739a <_malloc_r+0x22>
 8007456:	6025      	str	r5, [r4, #0]
 8007458:	e7de      	b.n	8007418 <_malloc_r+0xa0>
 800745a:	bf00      	nop
 800745c:	20014500 	.word	0x20014500

08007460 <__ssputs_r>:
 8007460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	688e      	ldr	r6, [r1, #8]
 8007466:	429e      	cmp	r6, r3
 8007468:	4682      	mov	sl, r0
 800746a:	460c      	mov	r4, r1
 800746c:	4690      	mov	r8, r2
 800746e:	461f      	mov	r7, r3
 8007470:	d838      	bhi.n	80074e4 <__ssputs_r+0x84>
 8007472:	898a      	ldrh	r2, [r1, #12]
 8007474:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007478:	d032      	beq.n	80074e0 <__ssputs_r+0x80>
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	6909      	ldr	r1, [r1, #16]
 800747e:	eba5 0901 	sub.w	r9, r5, r1
 8007482:	6965      	ldr	r5, [r4, #20]
 8007484:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007488:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800748c:	3301      	adds	r3, #1
 800748e:	444b      	add	r3, r9
 8007490:	106d      	asrs	r5, r5, #1
 8007492:	429d      	cmp	r5, r3
 8007494:	bf38      	it	cc
 8007496:	461d      	movcc	r5, r3
 8007498:	0553      	lsls	r3, r2, #21
 800749a:	d531      	bpl.n	8007500 <__ssputs_r+0xa0>
 800749c:	4629      	mov	r1, r5
 800749e:	f7ff ff6b 	bl	8007378 <_malloc_r>
 80074a2:	4606      	mov	r6, r0
 80074a4:	b950      	cbnz	r0, 80074bc <__ssputs_r+0x5c>
 80074a6:	230c      	movs	r3, #12
 80074a8:	f8ca 3000 	str.w	r3, [sl]
 80074ac:	89a3      	ldrh	r3, [r4, #12]
 80074ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	6921      	ldr	r1, [r4, #16]
 80074be:	464a      	mov	r2, r9
 80074c0:	f7ff fb4e 	bl	8006b60 <memcpy>
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074ce:	81a3      	strh	r3, [r4, #12]
 80074d0:	6126      	str	r6, [r4, #16]
 80074d2:	6165      	str	r5, [r4, #20]
 80074d4:	444e      	add	r6, r9
 80074d6:	eba5 0509 	sub.w	r5, r5, r9
 80074da:	6026      	str	r6, [r4, #0]
 80074dc:	60a5      	str	r5, [r4, #8]
 80074de:	463e      	mov	r6, r7
 80074e0:	42be      	cmp	r6, r7
 80074e2:	d900      	bls.n	80074e6 <__ssputs_r+0x86>
 80074e4:	463e      	mov	r6, r7
 80074e6:	6820      	ldr	r0, [r4, #0]
 80074e8:	4632      	mov	r2, r6
 80074ea:	4641      	mov	r1, r8
 80074ec:	f000 fb40 	bl	8007b70 <memmove>
 80074f0:	68a3      	ldr	r3, [r4, #8]
 80074f2:	1b9b      	subs	r3, r3, r6
 80074f4:	60a3      	str	r3, [r4, #8]
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	4433      	add	r3, r6
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	2000      	movs	r0, #0
 80074fe:	e7db      	b.n	80074b8 <__ssputs_r+0x58>
 8007500:	462a      	mov	r2, r5
 8007502:	f000 fb5b 	bl	8007bbc <_realloc_r>
 8007506:	4606      	mov	r6, r0
 8007508:	2800      	cmp	r0, #0
 800750a:	d1e1      	bne.n	80074d0 <__ssputs_r+0x70>
 800750c:	6921      	ldr	r1, [r4, #16]
 800750e:	4650      	mov	r0, sl
 8007510:	f7ff fec6 	bl	80072a0 <_free_r>
 8007514:	e7c7      	b.n	80074a6 <__ssputs_r+0x46>
	...

08007518 <_svfiprintf_r>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	4698      	mov	r8, r3
 800751e:	898b      	ldrh	r3, [r1, #12]
 8007520:	061b      	lsls	r3, r3, #24
 8007522:	b09d      	sub	sp, #116	; 0x74
 8007524:	4607      	mov	r7, r0
 8007526:	460d      	mov	r5, r1
 8007528:	4614      	mov	r4, r2
 800752a:	d50e      	bpl.n	800754a <_svfiprintf_r+0x32>
 800752c:	690b      	ldr	r3, [r1, #16]
 800752e:	b963      	cbnz	r3, 800754a <_svfiprintf_r+0x32>
 8007530:	2140      	movs	r1, #64	; 0x40
 8007532:	f7ff ff21 	bl	8007378 <_malloc_r>
 8007536:	6028      	str	r0, [r5, #0]
 8007538:	6128      	str	r0, [r5, #16]
 800753a:	b920      	cbnz	r0, 8007546 <_svfiprintf_r+0x2e>
 800753c:	230c      	movs	r3, #12
 800753e:	603b      	str	r3, [r7, #0]
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	e0d1      	b.n	80076ea <_svfiprintf_r+0x1d2>
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	616b      	str	r3, [r5, #20]
 800754a:	2300      	movs	r3, #0
 800754c:	9309      	str	r3, [sp, #36]	; 0x24
 800754e:	2320      	movs	r3, #32
 8007550:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007554:	f8cd 800c 	str.w	r8, [sp, #12]
 8007558:	2330      	movs	r3, #48	; 0x30
 800755a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007704 <_svfiprintf_r+0x1ec>
 800755e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007562:	f04f 0901 	mov.w	r9, #1
 8007566:	4623      	mov	r3, r4
 8007568:	469a      	mov	sl, r3
 800756a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800756e:	b10a      	cbz	r2, 8007574 <_svfiprintf_r+0x5c>
 8007570:	2a25      	cmp	r2, #37	; 0x25
 8007572:	d1f9      	bne.n	8007568 <_svfiprintf_r+0x50>
 8007574:	ebba 0b04 	subs.w	fp, sl, r4
 8007578:	d00b      	beq.n	8007592 <_svfiprintf_r+0x7a>
 800757a:	465b      	mov	r3, fp
 800757c:	4622      	mov	r2, r4
 800757e:	4629      	mov	r1, r5
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff ff6d 	bl	8007460 <__ssputs_r>
 8007586:	3001      	adds	r0, #1
 8007588:	f000 80aa 	beq.w	80076e0 <_svfiprintf_r+0x1c8>
 800758c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800758e:	445a      	add	r2, fp
 8007590:	9209      	str	r2, [sp, #36]	; 0x24
 8007592:	f89a 3000 	ldrb.w	r3, [sl]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f000 80a2 	beq.w	80076e0 <_svfiprintf_r+0x1c8>
 800759c:	2300      	movs	r3, #0
 800759e:	f04f 32ff 	mov.w	r2, #4294967295
 80075a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075a6:	f10a 0a01 	add.w	sl, sl, #1
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	9307      	str	r3, [sp, #28]
 80075ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075b2:	931a      	str	r3, [sp, #104]	; 0x68
 80075b4:	4654      	mov	r4, sl
 80075b6:	2205      	movs	r2, #5
 80075b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075bc:	4851      	ldr	r0, [pc, #324]	; (8007704 <_svfiprintf_r+0x1ec>)
 80075be:	f7f8 fe57 	bl	8000270 <memchr>
 80075c2:	9a04      	ldr	r2, [sp, #16]
 80075c4:	b9d8      	cbnz	r0, 80075fe <_svfiprintf_r+0xe6>
 80075c6:	06d0      	lsls	r0, r2, #27
 80075c8:	bf44      	itt	mi
 80075ca:	2320      	movmi	r3, #32
 80075cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075d0:	0711      	lsls	r1, r2, #28
 80075d2:	bf44      	itt	mi
 80075d4:	232b      	movmi	r3, #43	; 0x2b
 80075d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075da:	f89a 3000 	ldrb.w	r3, [sl]
 80075de:	2b2a      	cmp	r3, #42	; 0x2a
 80075e0:	d015      	beq.n	800760e <_svfiprintf_r+0xf6>
 80075e2:	9a07      	ldr	r2, [sp, #28]
 80075e4:	4654      	mov	r4, sl
 80075e6:	2000      	movs	r0, #0
 80075e8:	f04f 0c0a 	mov.w	ip, #10
 80075ec:	4621      	mov	r1, r4
 80075ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075f2:	3b30      	subs	r3, #48	; 0x30
 80075f4:	2b09      	cmp	r3, #9
 80075f6:	d94e      	bls.n	8007696 <_svfiprintf_r+0x17e>
 80075f8:	b1b0      	cbz	r0, 8007628 <_svfiprintf_r+0x110>
 80075fa:	9207      	str	r2, [sp, #28]
 80075fc:	e014      	b.n	8007628 <_svfiprintf_r+0x110>
 80075fe:	eba0 0308 	sub.w	r3, r0, r8
 8007602:	fa09 f303 	lsl.w	r3, r9, r3
 8007606:	4313      	orrs	r3, r2
 8007608:	9304      	str	r3, [sp, #16]
 800760a:	46a2      	mov	sl, r4
 800760c:	e7d2      	b.n	80075b4 <_svfiprintf_r+0x9c>
 800760e:	9b03      	ldr	r3, [sp, #12]
 8007610:	1d19      	adds	r1, r3, #4
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	9103      	str	r1, [sp, #12]
 8007616:	2b00      	cmp	r3, #0
 8007618:	bfbb      	ittet	lt
 800761a:	425b      	neglt	r3, r3
 800761c:	f042 0202 	orrlt.w	r2, r2, #2
 8007620:	9307      	strge	r3, [sp, #28]
 8007622:	9307      	strlt	r3, [sp, #28]
 8007624:	bfb8      	it	lt
 8007626:	9204      	strlt	r2, [sp, #16]
 8007628:	7823      	ldrb	r3, [r4, #0]
 800762a:	2b2e      	cmp	r3, #46	; 0x2e
 800762c:	d10c      	bne.n	8007648 <_svfiprintf_r+0x130>
 800762e:	7863      	ldrb	r3, [r4, #1]
 8007630:	2b2a      	cmp	r3, #42	; 0x2a
 8007632:	d135      	bne.n	80076a0 <_svfiprintf_r+0x188>
 8007634:	9b03      	ldr	r3, [sp, #12]
 8007636:	1d1a      	adds	r2, r3, #4
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	9203      	str	r2, [sp, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	bfb8      	it	lt
 8007640:	f04f 33ff 	movlt.w	r3, #4294967295
 8007644:	3402      	adds	r4, #2
 8007646:	9305      	str	r3, [sp, #20]
 8007648:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007714 <_svfiprintf_r+0x1fc>
 800764c:	7821      	ldrb	r1, [r4, #0]
 800764e:	2203      	movs	r2, #3
 8007650:	4650      	mov	r0, sl
 8007652:	f7f8 fe0d 	bl	8000270 <memchr>
 8007656:	b140      	cbz	r0, 800766a <_svfiprintf_r+0x152>
 8007658:	2340      	movs	r3, #64	; 0x40
 800765a:	eba0 000a 	sub.w	r0, r0, sl
 800765e:	fa03 f000 	lsl.w	r0, r3, r0
 8007662:	9b04      	ldr	r3, [sp, #16]
 8007664:	4303      	orrs	r3, r0
 8007666:	3401      	adds	r4, #1
 8007668:	9304      	str	r3, [sp, #16]
 800766a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800766e:	4826      	ldr	r0, [pc, #152]	; (8007708 <_svfiprintf_r+0x1f0>)
 8007670:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007674:	2206      	movs	r2, #6
 8007676:	f7f8 fdfb 	bl	8000270 <memchr>
 800767a:	2800      	cmp	r0, #0
 800767c:	d038      	beq.n	80076f0 <_svfiprintf_r+0x1d8>
 800767e:	4b23      	ldr	r3, [pc, #140]	; (800770c <_svfiprintf_r+0x1f4>)
 8007680:	bb1b      	cbnz	r3, 80076ca <_svfiprintf_r+0x1b2>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	3307      	adds	r3, #7
 8007686:	f023 0307 	bic.w	r3, r3, #7
 800768a:	3308      	adds	r3, #8
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007690:	4433      	add	r3, r6
 8007692:	9309      	str	r3, [sp, #36]	; 0x24
 8007694:	e767      	b.n	8007566 <_svfiprintf_r+0x4e>
 8007696:	fb0c 3202 	mla	r2, ip, r2, r3
 800769a:	460c      	mov	r4, r1
 800769c:	2001      	movs	r0, #1
 800769e:	e7a5      	b.n	80075ec <_svfiprintf_r+0xd4>
 80076a0:	2300      	movs	r3, #0
 80076a2:	3401      	adds	r4, #1
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	4619      	mov	r1, r3
 80076a8:	f04f 0c0a 	mov.w	ip, #10
 80076ac:	4620      	mov	r0, r4
 80076ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076b2:	3a30      	subs	r2, #48	; 0x30
 80076b4:	2a09      	cmp	r2, #9
 80076b6:	d903      	bls.n	80076c0 <_svfiprintf_r+0x1a8>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d0c5      	beq.n	8007648 <_svfiprintf_r+0x130>
 80076bc:	9105      	str	r1, [sp, #20]
 80076be:	e7c3      	b.n	8007648 <_svfiprintf_r+0x130>
 80076c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076c4:	4604      	mov	r4, r0
 80076c6:	2301      	movs	r3, #1
 80076c8:	e7f0      	b.n	80076ac <_svfiprintf_r+0x194>
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	462a      	mov	r2, r5
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <_svfiprintf_r+0x1f8>)
 80076d2:	a904      	add	r1, sp, #16
 80076d4:	4638      	mov	r0, r7
 80076d6:	f3af 8000 	nop.w
 80076da:	1c42      	adds	r2, r0, #1
 80076dc:	4606      	mov	r6, r0
 80076de:	d1d6      	bne.n	800768e <_svfiprintf_r+0x176>
 80076e0:	89ab      	ldrh	r3, [r5, #12]
 80076e2:	065b      	lsls	r3, r3, #25
 80076e4:	f53f af2c 	bmi.w	8007540 <_svfiprintf_r+0x28>
 80076e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ea:	b01d      	add	sp, #116	; 0x74
 80076ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	462a      	mov	r2, r5
 80076f6:	4b06      	ldr	r3, [pc, #24]	; (8007710 <_svfiprintf_r+0x1f8>)
 80076f8:	a904      	add	r1, sp, #16
 80076fa:	4638      	mov	r0, r7
 80076fc:	f000 f87a 	bl	80077f4 <_printf_i>
 8007700:	e7eb      	b.n	80076da <_svfiprintf_r+0x1c2>
 8007702:	bf00      	nop
 8007704:	08007e54 	.word	0x08007e54
 8007708:	08007e5e 	.word	0x08007e5e
 800770c:	00000000 	.word	0x00000000
 8007710:	08007461 	.word	0x08007461
 8007714:	08007e5a 	.word	0x08007e5a

08007718 <_printf_common>:
 8007718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800771c:	4616      	mov	r6, r2
 800771e:	4699      	mov	r9, r3
 8007720:	688a      	ldr	r2, [r1, #8]
 8007722:	690b      	ldr	r3, [r1, #16]
 8007724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007728:	4293      	cmp	r3, r2
 800772a:	bfb8      	it	lt
 800772c:	4613      	movlt	r3, r2
 800772e:	6033      	str	r3, [r6, #0]
 8007730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007734:	4607      	mov	r7, r0
 8007736:	460c      	mov	r4, r1
 8007738:	b10a      	cbz	r2, 800773e <_printf_common+0x26>
 800773a:	3301      	adds	r3, #1
 800773c:	6033      	str	r3, [r6, #0]
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	0699      	lsls	r1, r3, #26
 8007742:	bf42      	ittt	mi
 8007744:	6833      	ldrmi	r3, [r6, #0]
 8007746:	3302      	addmi	r3, #2
 8007748:	6033      	strmi	r3, [r6, #0]
 800774a:	6825      	ldr	r5, [r4, #0]
 800774c:	f015 0506 	ands.w	r5, r5, #6
 8007750:	d106      	bne.n	8007760 <_printf_common+0x48>
 8007752:	f104 0a19 	add.w	sl, r4, #25
 8007756:	68e3      	ldr	r3, [r4, #12]
 8007758:	6832      	ldr	r2, [r6, #0]
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	42ab      	cmp	r3, r5
 800775e:	dc26      	bgt.n	80077ae <_printf_common+0x96>
 8007760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007764:	1e13      	subs	r3, r2, #0
 8007766:	6822      	ldr	r2, [r4, #0]
 8007768:	bf18      	it	ne
 800776a:	2301      	movne	r3, #1
 800776c:	0692      	lsls	r2, r2, #26
 800776e:	d42b      	bmi.n	80077c8 <_printf_common+0xb0>
 8007770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007774:	4649      	mov	r1, r9
 8007776:	4638      	mov	r0, r7
 8007778:	47c0      	blx	r8
 800777a:	3001      	adds	r0, #1
 800777c:	d01e      	beq.n	80077bc <_printf_common+0xa4>
 800777e:	6823      	ldr	r3, [r4, #0]
 8007780:	68e5      	ldr	r5, [r4, #12]
 8007782:	6832      	ldr	r2, [r6, #0]
 8007784:	f003 0306 	and.w	r3, r3, #6
 8007788:	2b04      	cmp	r3, #4
 800778a:	bf08      	it	eq
 800778c:	1aad      	subeq	r5, r5, r2
 800778e:	68a3      	ldr	r3, [r4, #8]
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	bf0c      	ite	eq
 8007794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007798:	2500      	movne	r5, #0
 800779a:	4293      	cmp	r3, r2
 800779c:	bfc4      	itt	gt
 800779e:	1a9b      	subgt	r3, r3, r2
 80077a0:	18ed      	addgt	r5, r5, r3
 80077a2:	2600      	movs	r6, #0
 80077a4:	341a      	adds	r4, #26
 80077a6:	42b5      	cmp	r5, r6
 80077a8:	d11a      	bne.n	80077e0 <_printf_common+0xc8>
 80077aa:	2000      	movs	r0, #0
 80077ac:	e008      	b.n	80077c0 <_printf_common+0xa8>
 80077ae:	2301      	movs	r3, #1
 80077b0:	4652      	mov	r2, sl
 80077b2:	4649      	mov	r1, r9
 80077b4:	4638      	mov	r0, r7
 80077b6:	47c0      	blx	r8
 80077b8:	3001      	adds	r0, #1
 80077ba:	d103      	bne.n	80077c4 <_printf_common+0xac>
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	3501      	adds	r5, #1
 80077c6:	e7c6      	b.n	8007756 <_printf_common+0x3e>
 80077c8:	18e1      	adds	r1, r4, r3
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	2030      	movs	r0, #48	; 0x30
 80077ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077d2:	4422      	add	r2, r4
 80077d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077dc:	3302      	adds	r3, #2
 80077de:	e7c7      	b.n	8007770 <_printf_common+0x58>
 80077e0:	2301      	movs	r3, #1
 80077e2:	4622      	mov	r2, r4
 80077e4:	4649      	mov	r1, r9
 80077e6:	4638      	mov	r0, r7
 80077e8:	47c0      	blx	r8
 80077ea:	3001      	adds	r0, #1
 80077ec:	d0e6      	beq.n	80077bc <_printf_common+0xa4>
 80077ee:	3601      	adds	r6, #1
 80077f0:	e7d9      	b.n	80077a6 <_printf_common+0x8e>
	...

080077f4 <_printf_i>:
 80077f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077f8:	7e0f      	ldrb	r7, [r1, #24]
 80077fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80077fc:	2f78      	cmp	r7, #120	; 0x78
 80077fe:	4691      	mov	r9, r2
 8007800:	4680      	mov	r8, r0
 8007802:	460c      	mov	r4, r1
 8007804:	469a      	mov	sl, r3
 8007806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800780a:	d807      	bhi.n	800781c <_printf_i+0x28>
 800780c:	2f62      	cmp	r7, #98	; 0x62
 800780e:	d80a      	bhi.n	8007826 <_printf_i+0x32>
 8007810:	2f00      	cmp	r7, #0
 8007812:	f000 80d8 	beq.w	80079c6 <_printf_i+0x1d2>
 8007816:	2f58      	cmp	r7, #88	; 0x58
 8007818:	f000 80a3 	beq.w	8007962 <_printf_i+0x16e>
 800781c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007824:	e03a      	b.n	800789c <_printf_i+0xa8>
 8007826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800782a:	2b15      	cmp	r3, #21
 800782c:	d8f6      	bhi.n	800781c <_printf_i+0x28>
 800782e:	a101      	add	r1, pc, #4	; (adr r1, 8007834 <_printf_i+0x40>)
 8007830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007834:	0800788d 	.word	0x0800788d
 8007838:	080078a1 	.word	0x080078a1
 800783c:	0800781d 	.word	0x0800781d
 8007840:	0800781d 	.word	0x0800781d
 8007844:	0800781d 	.word	0x0800781d
 8007848:	0800781d 	.word	0x0800781d
 800784c:	080078a1 	.word	0x080078a1
 8007850:	0800781d 	.word	0x0800781d
 8007854:	0800781d 	.word	0x0800781d
 8007858:	0800781d 	.word	0x0800781d
 800785c:	0800781d 	.word	0x0800781d
 8007860:	080079ad 	.word	0x080079ad
 8007864:	080078d1 	.word	0x080078d1
 8007868:	0800798f 	.word	0x0800798f
 800786c:	0800781d 	.word	0x0800781d
 8007870:	0800781d 	.word	0x0800781d
 8007874:	080079cf 	.word	0x080079cf
 8007878:	0800781d 	.word	0x0800781d
 800787c:	080078d1 	.word	0x080078d1
 8007880:	0800781d 	.word	0x0800781d
 8007884:	0800781d 	.word	0x0800781d
 8007888:	08007997 	.word	0x08007997
 800788c:	682b      	ldr	r3, [r5, #0]
 800788e:	1d1a      	adds	r2, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	602a      	str	r2, [r5, #0]
 8007894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800789c:	2301      	movs	r3, #1
 800789e:	e0a3      	b.n	80079e8 <_printf_i+0x1f4>
 80078a0:	6820      	ldr	r0, [r4, #0]
 80078a2:	6829      	ldr	r1, [r5, #0]
 80078a4:	0606      	lsls	r6, r0, #24
 80078a6:	f101 0304 	add.w	r3, r1, #4
 80078aa:	d50a      	bpl.n	80078c2 <_printf_i+0xce>
 80078ac:	680e      	ldr	r6, [r1, #0]
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	da03      	bge.n	80078bc <_printf_i+0xc8>
 80078b4:	232d      	movs	r3, #45	; 0x2d
 80078b6:	4276      	negs	r6, r6
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078bc:	485e      	ldr	r0, [pc, #376]	; (8007a38 <_printf_i+0x244>)
 80078be:	230a      	movs	r3, #10
 80078c0:	e019      	b.n	80078f6 <_printf_i+0x102>
 80078c2:	680e      	ldr	r6, [r1, #0]
 80078c4:	602b      	str	r3, [r5, #0]
 80078c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80078ca:	bf18      	it	ne
 80078cc:	b236      	sxthne	r6, r6
 80078ce:	e7ef      	b.n	80078b0 <_printf_i+0xbc>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1d19      	adds	r1, r3, #4
 80078d6:	6029      	str	r1, [r5, #0]
 80078d8:	0601      	lsls	r1, r0, #24
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0xec>
 80078dc:	681e      	ldr	r6, [r3, #0]
 80078de:	e002      	b.n	80078e6 <_printf_i+0xf2>
 80078e0:	0646      	lsls	r6, r0, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0xe8>
 80078e4:	881e      	ldrh	r6, [r3, #0]
 80078e6:	4854      	ldr	r0, [pc, #336]	; (8007a38 <_printf_i+0x244>)
 80078e8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ea:	bf0c      	ite	eq
 80078ec:	2308      	moveq	r3, #8
 80078ee:	230a      	movne	r3, #10
 80078f0:	2100      	movs	r1, #0
 80078f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078f6:	6865      	ldr	r5, [r4, #4]
 80078f8:	60a5      	str	r5, [r4, #8]
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	bfa2      	ittt	ge
 80078fe:	6821      	ldrge	r1, [r4, #0]
 8007900:	f021 0104 	bicge.w	r1, r1, #4
 8007904:	6021      	strge	r1, [r4, #0]
 8007906:	b90e      	cbnz	r6, 800790c <_printf_i+0x118>
 8007908:	2d00      	cmp	r5, #0
 800790a:	d04d      	beq.n	80079a8 <_printf_i+0x1b4>
 800790c:	4615      	mov	r5, r2
 800790e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007912:	fb03 6711 	mls	r7, r3, r1, r6
 8007916:	5dc7      	ldrb	r7, [r0, r7]
 8007918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800791c:	4637      	mov	r7, r6
 800791e:	42bb      	cmp	r3, r7
 8007920:	460e      	mov	r6, r1
 8007922:	d9f4      	bls.n	800790e <_printf_i+0x11a>
 8007924:	2b08      	cmp	r3, #8
 8007926:	d10b      	bne.n	8007940 <_printf_i+0x14c>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	07de      	lsls	r6, r3, #31
 800792c:	d508      	bpl.n	8007940 <_printf_i+0x14c>
 800792e:	6923      	ldr	r3, [r4, #16]
 8007930:	6861      	ldr	r1, [r4, #4]
 8007932:	4299      	cmp	r1, r3
 8007934:	bfde      	ittt	le
 8007936:	2330      	movle	r3, #48	; 0x30
 8007938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800793c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007940:	1b52      	subs	r2, r2, r5
 8007942:	6122      	str	r2, [r4, #16]
 8007944:	f8cd a000 	str.w	sl, [sp]
 8007948:	464b      	mov	r3, r9
 800794a:	aa03      	add	r2, sp, #12
 800794c:	4621      	mov	r1, r4
 800794e:	4640      	mov	r0, r8
 8007950:	f7ff fee2 	bl	8007718 <_printf_common>
 8007954:	3001      	adds	r0, #1
 8007956:	d14c      	bne.n	80079f2 <_printf_i+0x1fe>
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	b004      	add	sp, #16
 800795e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007962:	4835      	ldr	r0, [pc, #212]	; (8007a38 <_printf_i+0x244>)
 8007964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007970:	6029      	str	r1, [r5, #0]
 8007972:	061d      	lsls	r5, r3, #24
 8007974:	d514      	bpl.n	80079a0 <_printf_i+0x1ac>
 8007976:	07df      	lsls	r7, r3, #31
 8007978:	bf44      	itt	mi
 800797a:	f043 0320 	orrmi.w	r3, r3, #32
 800797e:	6023      	strmi	r3, [r4, #0]
 8007980:	b91e      	cbnz	r6, 800798a <_printf_i+0x196>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	f023 0320 	bic.w	r3, r3, #32
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	2310      	movs	r3, #16
 800798c:	e7b0      	b.n	80078f0 <_printf_i+0xfc>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	f043 0320 	orr.w	r3, r3, #32
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	2378      	movs	r3, #120	; 0x78
 8007998:	4828      	ldr	r0, [pc, #160]	; (8007a3c <_printf_i+0x248>)
 800799a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800799e:	e7e3      	b.n	8007968 <_printf_i+0x174>
 80079a0:	0659      	lsls	r1, r3, #25
 80079a2:	bf48      	it	mi
 80079a4:	b2b6      	uxthmi	r6, r6
 80079a6:	e7e6      	b.n	8007976 <_printf_i+0x182>
 80079a8:	4615      	mov	r5, r2
 80079aa:	e7bb      	b.n	8007924 <_printf_i+0x130>
 80079ac:	682b      	ldr	r3, [r5, #0]
 80079ae:	6826      	ldr	r6, [r4, #0]
 80079b0:	6961      	ldr	r1, [r4, #20]
 80079b2:	1d18      	adds	r0, r3, #4
 80079b4:	6028      	str	r0, [r5, #0]
 80079b6:	0635      	lsls	r5, r6, #24
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	d501      	bpl.n	80079c0 <_printf_i+0x1cc>
 80079bc:	6019      	str	r1, [r3, #0]
 80079be:	e002      	b.n	80079c6 <_printf_i+0x1d2>
 80079c0:	0670      	lsls	r0, r6, #25
 80079c2:	d5fb      	bpl.n	80079bc <_printf_i+0x1c8>
 80079c4:	8019      	strh	r1, [r3, #0]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	4615      	mov	r5, r2
 80079cc:	e7ba      	b.n	8007944 <_printf_i+0x150>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	602a      	str	r2, [r5, #0]
 80079d4:	681d      	ldr	r5, [r3, #0]
 80079d6:	6862      	ldr	r2, [r4, #4]
 80079d8:	2100      	movs	r1, #0
 80079da:	4628      	mov	r0, r5
 80079dc:	f7f8 fc48 	bl	8000270 <memchr>
 80079e0:	b108      	cbz	r0, 80079e6 <_printf_i+0x1f2>
 80079e2:	1b40      	subs	r0, r0, r5
 80079e4:	6060      	str	r0, [r4, #4]
 80079e6:	6863      	ldr	r3, [r4, #4]
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	2300      	movs	r3, #0
 80079ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f0:	e7a8      	b.n	8007944 <_printf_i+0x150>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	462a      	mov	r2, r5
 80079f6:	4649      	mov	r1, r9
 80079f8:	4640      	mov	r0, r8
 80079fa:	47d0      	blx	sl
 80079fc:	3001      	adds	r0, #1
 80079fe:	d0ab      	beq.n	8007958 <_printf_i+0x164>
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	079b      	lsls	r3, r3, #30
 8007a04:	d413      	bmi.n	8007a2e <_printf_i+0x23a>
 8007a06:	68e0      	ldr	r0, [r4, #12]
 8007a08:	9b03      	ldr	r3, [sp, #12]
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	bfb8      	it	lt
 8007a0e:	4618      	movlt	r0, r3
 8007a10:	e7a4      	b.n	800795c <_printf_i+0x168>
 8007a12:	2301      	movs	r3, #1
 8007a14:	4632      	mov	r2, r6
 8007a16:	4649      	mov	r1, r9
 8007a18:	4640      	mov	r0, r8
 8007a1a:	47d0      	blx	sl
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d09b      	beq.n	8007958 <_printf_i+0x164>
 8007a20:	3501      	adds	r5, #1
 8007a22:	68e3      	ldr	r3, [r4, #12]
 8007a24:	9903      	ldr	r1, [sp, #12]
 8007a26:	1a5b      	subs	r3, r3, r1
 8007a28:	42ab      	cmp	r3, r5
 8007a2a:	dcf2      	bgt.n	8007a12 <_printf_i+0x21e>
 8007a2c:	e7eb      	b.n	8007a06 <_printf_i+0x212>
 8007a2e:	2500      	movs	r5, #0
 8007a30:	f104 0619 	add.w	r6, r4, #25
 8007a34:	e7f5      	b.n	8007a22 <_printf_i+0x22e>
 8007a36:	bf00      	nop
 8007a38:	08007e65 	.word	0x08007e65
 8007a3c:	08007e76 	.word	0x08007e76

08007a40 <_sbrk_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	; (8007a5c <_sbrk_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f000 f900 	bl	8007c50 <_sbrk>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_sbrk_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_sbrk_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	20014508 	.word	0x20014508

08007a60 <__sread>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	460c      	mov	r4, r1
 8007a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a68:	f000 f8d8 	bl	8007c1c <_read_r>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	bfab      	itete	ge
 8007a70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a72:	89a3      	ldrhlt	r3, [r4, #12]
 8007a74:	181b      	addge	r3, r3, r0
 8007a76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a7a:	bfac      	ite	ge
 8007a7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a7e:	81a3      	strhlt	r3, [r4, #12]
 8007a80:	bd10      	pop	{r4, pc}

08007a82 <__swrite>:
 8007a82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a86:	461f      	mov	r7, r3
 8007a88:	898b      	ldrh	r3, [r1, #12]
 8007a8a:	05db      	lsls	r3, r3, #23
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	4616      	mov	r6, r2
 8007a92:	d505      	bpl.n	8007aa0 <__swrite+0x1e>
 8007a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a98:	2302      	movs	r3, #2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f000 f856 	bl	8007b4c <_lseek_r>
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aaa:	81a3      	strh	r3, [r4, #12]
 8007aac:	4632      	mov	r2, r6
 8007aae:	463b      	mov	r3, r7
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	f7ff b80d 	b.w	8006ad4 <_write_r>

08007aba <__sseek>:
 8007aba:	b510      	push	{r4, lr}
 8007abc:	460c      	mov	r4, r1
 8007abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac2:	f000 f843 	bl	8007b4c <_lseek_r>
 8007ac6:	1c43      	adds	r3, r0, #1
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	bf15      	itete	ne
 8007acc:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ace:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ad2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ad6:	81a3      	strheq	r3, [r4, #12]
 8007ad8:	bf18      	it	ne
 8007ada:	81a3      	strhne	r3, [r4, #12]
 8007adc:	bd10      	pop	{r4, pc}

08007ade <__sclose>:
 8007ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ae2:	f000 b801 	b.w	8007ae8 <_close_r>
	...

08007ae8 <_close_r>:
 8007ae8:	b538      	push	{r3, r4, r5, lr}
 8007aea:	4d06      	ldr	r5, [pc, #24]	; (8007b04 <_close_r+0x1c>)
 8007aec:	2300      	movs	r3, #0
 8007aee:	4604      	mov	r4, r0
 8007af0:	4608      	mov	r0, r1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	f7f9 f8e5 	bl	8000cc2 <_close>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_close_r+0x1a>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_close_r+0x1a>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20014508 	.word	0x20014508

08007b08 <_fstat_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	; (8007b28 <_fstat_r+0x20>)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	4611      	mov	r1, r2
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	f7f9 f8e0 	bl	8000cda <_fstat>
 8007b1a:	1c43      	adds	r3, r0, #1
 8007b1c:	d102      	bne.n	8007b24 <_fstat_r+0x1c>
 8007b1e:	682b      	ldr	r3, [r5, #0]
 8007b20:	b103      	cbz	r3, 8007b24 <_fstat_r+0x1c>
 8007b22:	6023      	str	r3, [r4, #0]
 8007b24:	bd38      	pop	{r3, r4, r5, pc}
 8007b26:	bf00      	nop
 8007b28:	20014508 	.word	0x20014508

08007b2c <_isatty_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d06      	ldr	r5, [pc, #24]	; (8007b48 <_isatty_r+0x1c>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	f7f9 f8df 	bl	8000cfa <_isatty>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_isatty_r+0x1a>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_isatty_r+0x1a>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20014508 	.word	0x20014508

08007b4c <_lseek_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_lseek_r+0x20>)
 8007b50:	4604      	mov	r4, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7f9 f8d8 	bl	8000d10 <_lseek>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_lseek_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_lseek_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20014508 	.word	0x20014508

08007b70 <memmove>:
 8007b70:	4288      	cmp	r0, r1
 8007b72:	b510      	push	{r4, lr}
 8007b74:	eb01 0402 	add.w	r4, r1, r2
 8007b78:	d902      	bls.n	8007b80 <memmove+0x10>
 8007b7a:	4284      	cmp	r4, r0
 8007b7c:	4623      	mov	r3, r4
 8007b7e:	d807      	bhi.n	8007b90 <memmove+0x20>
 8007b80:	1e43      	subs	r3, r0, #1
 8007b82:	42a1      	cmp	r1, r4
 8007b84:	d008      	beq.n	8007b98 <memmove+0x28>
 8007b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b8e:	e7f8      	b.n	8007b82 <memmove+0x12>
 8007b90:	4402      	add	r2, r0
 8007b92:	4601      	mov	r1, r0
 8007b94:	428a      	cmp	r2, r1
 8007b96:	d100      	bne.n	8007b9a <memmove+0x2a>
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ba2:	e7f7      	b.n	8007b94 <memmove+0x24>

08007ba4 <__malloc_lock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__malloc_lock+0x8>)
 8007ba6:	f7ff bb13 	b.w	80071d0 <__retarget_lock_acquire_recursive>
 8007baa:	bf00      	nop
 8007bac:	200144fb 	.word	0x200144fb

08007bb0 <__malloc_unlock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	; (8007bb8 <__malloc_unlock+0x8>)
 8007bb2:	f7ff bb0e 	b.w	80071d2 <__retarget_lock_release_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	200144fb 	.word	0x200144fb

08007bbc <_realloc_r>:
 8007bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4614      	mov	r4, r2
 8007bc4:	460e      	mov	r6, r1
 8007bc6:	b921      	cbnz	r1, 8007bd2 <_realloc_r+0x16>
 8007bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bcc:	4611      	mov	r1, r2
 8007bce:	f7ff bbd3 	b.w	8007378 <_malloc_r>
 8007bd2:	b92a      	cbnz	r2, 8007be0 <_realloc_r+0x24>
 8007bd4:	f7ff fb64 	bl	80072a0 <_free_r>
 8007bd8:	4625      	mov	r5, r4
 8007bda:	4628      	mov	r0, r5
 8007bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007be0:	f000 f82e 	bl	8007c40 <_malloc_usable_size_r>
 8007be4:	4284      	cmp	r4, r0
 8007be6:	4607      	mov	r7, r0
 8007be8:	d802      	bhi.n	8007bf0 <_realloc_r+0x34>
 8007bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007bee:	d812      	bhi.n	8007c16 <_realloc_r+0x5a>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f7ff fbc0 	bl	8007378 <_malloc_r>
 8007bf8:	4605      	mov	r5, r0
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d0ed      	beq.n	8007bda <_realloc_r+0x1e>
 8007bfe:	42bc      	cmp	r4, r7
 8007c00:	4622      	mov	r2, r4
 8007c02:	4631      	mov	r1, r6
 8007c04:	bf28      	it	cs
 8007c06:	463a      	movcs	r2, r7
 8007c08:	f7fe ffaa 	bl	8006b60 <memcpy>
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4640      	mov	r0, r8
 8007c10:	f7ff fb46 	bl	80072a0 <_free_r>
 8007c14:	e7e1      	b.n	8007bda <_realloc_r+0x1e>
 8007c16:	4635      	mov	r5, r6
 8007c18:	e7df      	b.n	8007bda <_realloc_r+0x1e>
	...

08007c1c <_read_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4d07      	ldr	r5, [pc, #28]	; (8007c3c <_read_r+0x20>)
 8007c20:	4604      	mov	r4, r0
 8007c22:	4608      	mov	r0, r1
 8007c24:	4611      	mov	r1, r2
 8007c26:	2200      	movs	r2, #0
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7f9 f82c 	bl	8000c88 <_read>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_read_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_read_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20014508 	.word	0x20014508

08007c40 <_malloc_usable_size_r>:
 8007c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c44:	1f18      	subs	r0, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	bfbc      	itt	lt
 8007c4a:	580b      	ldrlt	r3, [r1, r0]
 8007c4c:	18c0      	addlt	r0, r0, r3
 8007c4e:	4770      	bx	lr

08007c50 <_sbrk>:
 8007c50:	4a04      	ldr	r2, [pc, #16]	; (8007c64 <_sbrk+0x14>)
 8007c52:	6811      	ldr	r1, [r2, #0]
 8007c54:	4603      	mov	r3, r0
 8007c56:	b909      	cbnz	r1, 8007c5c <_sbrk+0xc>
 8007c58:	4903      	ldr	r1, [pc, #12]	; (8007c68 <_sbrk+0x18>)
 8007c5a:	6011      	str	r1, [r2, #0]
 8007c5c:	6810      	ldr	r0, [r2, #0]
 8007c5e:	4403      	add	r3, r0
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	4770      	bx	lr
 8007c64:	2001450c 	.word	0x2001450c
 8007c68:	20014510 	.word	0x20014510

08007c6c <_init>:
 8007c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6e:	bf00      	nop
 8007c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c72:	bc08      	pop	{r3}
 8007c74:	469e      	mov	lr, r3
 8007c76:	4770      	bx	lr

08007c78 <_fini>:
 8007c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7a:	bf00      	nop
 8007c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c7e:	bc08      	pop	{r3}
 8007c80:	469e      	mov	lr, r3
 8007c82:	4770      	bx	lr
