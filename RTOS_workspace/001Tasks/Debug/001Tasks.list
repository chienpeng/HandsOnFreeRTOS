
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008074  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08008204  08008204  00018204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800840c  0800840c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800840c  0800840c  0001840c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008414  08008414  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008414  08008414  00018414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008418  08008418  00018418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800841c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000144a0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014520  20014520  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166e4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000339f  00000000  00000000  00036794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00039b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012e8  00000000  00000000  0003afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002492c  00000000  00000000  0003c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001698b  00000000  00000000  00060bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da2e5  00000000  00000000  00077567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015184c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005df8  00000000  00000000  0015189c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081ec 	.word	0x080081ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080081ec 	.word	0x080081ec

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f38 	.word	0x20012f38
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fbc5 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f853 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f000 f8bb 	bl	800079c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <main+0x94>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <main+0x94>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000632:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x98>)
 8000634:	f004 fa22 	bl	8004a7c <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000638:	f004 f84a 	bl	80046d0 <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <main+0x9c>)
 8000648:	22c8      	movs	r2, #200	; 0xc8
 800064a:	491a      	ldr	r1, [pc, #104]	; (80006b4 <main+0xa0>)
 800064c:	481a      	ldr	r0, [pc, #104]	; (80006b8 <main+0xa4>)
 800064e:	f002 f991 	bl	8002974 <xTaskCreate>
 8000652:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d00a      	beq.n	8000670 <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800066c:	bf00      	nop
 800066e:	e7fe      	b.n	800066e <main+0x5a>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <main+0xa8>)
 800067a:	22c8      	movs	r2, #200	; 0xc8
 800067c:	4910      	ldr	r1, [pc, #64]	; (80006c0 <main+0xac>)
 800067e:	4811      	ldr	r0, [pc, #68]	; (80006c4 <main+0xb0>)
 8000680:	f002 f978 	bl	8002974 <xTaskCreate>
 8000684:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d00a      	beq.n	80006a2 <main+0x8e>
        __asm volatile
 800068c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000690:	f383 8811 	msr	BASEPRI, r3
 8000694:	f3bf 8f6f 	isb	sy
 8000698:	f3bf 8f4f 	dsb	sy
 800069c:	60fb      	str	r3, [r7, #12]
    }
 800069e:	bf00      	nop
 80006a0:	e7fe      	b.n	80006a0 <main+0x8c>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80006a2:	f002 fae1 	bl	8002c68 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <main+0x92>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0007a120 	.word	0x0007a120
 80006b0:	08008204 	.word	0x08008204
 80006b4:	0800821c 	.word	0x0800821c
 80006b8:	08000a59 	.word	0x08000a59
 80006bc:	08008224 	.word	0x08008224
 80006c0:	0800823c 	.word	0x0800823c
 80006c4:	08000a95 	.word	0x08000a95

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fd10 	bl	80070fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b28      	ldr	r3, [pc, #160]	; (8000794 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a27      	ldr	r2, [pc, #156]	; (8000794 <SystemClock_Config+0xcc>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a21      	ldr	r2, [pc, #132]	; (8000798 <SystemClock_Config+0xd0>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	; (8000798 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000738:	2308      	movs	r3, #8
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800073c:	23a8      	movs	r3, #168	; 0xa8
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000744:	2307      	movs	r3, #7
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fe05 	bl	800135c <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f9ce 	bl	8000af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2105      	movs	r1, #5
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f866 	bl	800184c <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000786:	f000 f9b7 	bl	8000af8 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08c      	sub	sp, #48	; 0x30
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	4ba2      	ldr	r3, [pc, #648]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4aa1      	ldr	r2, [pc, #644]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007bc:	f043 0310 	orr.w	r3, r3, #16
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b9f      	ldr	r3, [pc, #636]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0310 	and.w	r3, r3, #16
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	4b9b      	ldr	r3, [pc, #620]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a9a      	ldr	r2, [pc, #616]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b98      	ldr	r3, [pc, #608]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	4b94      	ldr	r3, [pc, #592]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a93      	ldr	r2, [pc, #588]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b91      	ldr	r3, [pc, #580]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	4b8d      	ldr	r3, [pc, #564]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a8c      	ldr	r2, [pc, #560]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b8a      	ldr	r3, [pc, #552]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a85      	ldr	r2, [pc, #532]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b83      	ldr	r3, [pc, #524]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b7f      	ldr	r3, [pc, #508]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a7e      	ldr	r2, [pc, #504]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000848:	f043 0308 	orr.w	r3, r3, #8
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b7c      	ldr	r3, [pc, #496]	; (8000a40 <MX_GPIO_Init+0x2a4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0308 	and.w	r3, r3, #8
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2108      	movs	r1, #8
 800085e:	4879      	ldr	r0, [pc, #484]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000860:	f000 fd62 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2101      	movs	r1, #1
 8000868:	4877      	ldr	r0, [pc, #476]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 800086a:	f000 fd5d 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086e:	2200      	movs	r2, #0
 8000870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000874:	4875      	ldr	r0, [pc, #468]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000876:	f000 fd57 	bl	8001328 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800087a:	2308      	movs	r3, #8
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	486c      	ldr	r0, [pc, #432]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000892:	f000 fbad 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000896:	2301      	movs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4866      	ldr	r0, [pc, #408]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ae:	f000 fb9f 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b2:	2308      	movs	r3, #8
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c2:	2305      	movs	r3, #5
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	485e      	ldr	r0, [pc, #376]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80008ce:	f000 fb8f 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	2301      	movs	r3, #1
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	485a      	ldr	r0, [pc, #360]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80008e8:	f000 fb82 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008ec:	2310      	movs	r3, #16
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008fc:	2306      	movs	r3, #6
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4852      	ldr	r0, [pc, #328]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000908:	f000 fb72 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800090c:	23e0      	movs	r3, #224	; 0xe0
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	484a      	ldr	r0, [pc, #296]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 8000928:	f000 fb62 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000940:	f000 fb56 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	483c      	ldr	r0, [pc, #240]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000962:	f000 fb45 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000966:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 8000980:	f000 fb36 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000984:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000996:	2306      	movs	r3, #6
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	4619      	mov	r1, r3
 80009a0:	4829      	ldr	r0, [pc, #164]	; (8000a48 <MX_GPIO_Init+0x2ac>)
 80009a2:	f000 fb25 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4825      	ldr	r0, [pc, #148]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009bc:	f000 fb18 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009d2:	230a      	movs	r3, #10
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	481c      	ldr	r0, [pc, #112]	; (8000a50 <MX_GPIO_Init+0x2b4>)
 80009de:	f000 fb07 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4815      	ldr	r0, [pc, #84]	; (8000a4c <MX_GPIO_Init+0x2b0>)
 80009f6:	f000 fafb 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	; (8000a54 <MX_GPIO_Init+0x2b8>)
 8000a18:	f000 faea 	bl	8000ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a20:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0x2a8>)
 8000a32:	f000 fadd 	bl	8000ff0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020c00 	.word	0x40020c00
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40020400 	.word	0x40020400

08000a58 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a60:	f107 000c 	add.w	r0, r7, #12
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a09      	ldr	r2, [pc, #36]	; (8000a8c <task1_handler+0x34>)
 8000a68:	2164      	movs	r1, #100	; 0x64
 8000a6a:	f006 fbc5 	bl	80071f8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4618      	mov	r0, r3
 8000a74:	f006 fa50 	bl	8006f18 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <task1_handler+0x38>)
 8000a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	f3bf 8f4f 	dsb	sy
 8000a84:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a88:	e7ea      	b.n	8000a60 <task1_handler+0x8>
 8000a8a:	bf00      	nop
 8000a8c:	08008244 	.word	0x08008244
 8000a90:	e000ed04 	.word	0xe000ed04

08000a94 <task2_handler>:
	}
}

static void task2_handler(void* parameters) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09c      	sub	sp, #112	; 0x70
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000a9c:	f107 000c 	add.w	r0, r7, #12
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <task2_handler+0x38>)
 8000aa4:	2164      	movs	r1, #100	; 0x64
 8000aa6:	f006 fba7 	bl	80071f8 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f006 fa32 	bl	8006f18 <SEGGER_SYSVIEW_PrintfTarget>
		printf("%s\n", (char*)parameters);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f006 fb97 	bl	80071e8 <puts>
		taskYIELD();
 8000aba:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <task2_handler+0x3c>)
 8000abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char*)parameters);
 8000aca:	e7e7      	b.n	8000a9c <task2_handler+0x8>
 8000acc:	08008244 	.word	0x08008244
 8000ad0:	e000ed04 	.word	0xe000ed04

08000ad4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d101      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae6:	f000 f981 	bl	8000dec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40001000 	.word	0x40001000

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b42:	f003 fa41 	bl	8003fc8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800

08000b54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a32      	ldr	r2, [pc, #200]	; (8000c38 <HAL_InitTick+0xe4>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_InitTick+0xe4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b80:	f107 0210 	add.w	r2, r7, #16
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f001 f86a 	bl	8001c64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d103      	bne.n	8000ba2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b9a:	f001 f84f 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8000b9e:	6378      	str	r0, [r7, #52]	; 0x34
 8000ba0:	e004      	b.n	8000bac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ba2:	f001 f84b 	bl	8001c3c <HAL_RCC_GetPCLK1Freq>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <HAL_InitTick+0xe8>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	0c9b      	lsrs	r3, r3, #18
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <HAL_InitTick+0xec>)
 8000bbc:	4a21      	ldr	r2, [pc, #132]	; (8000c44 <HAL_InitTick+0xf0>)
 8000bbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc0:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_InitTick+0xec>)
 8000bc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_InitTick+0xec>)
 8000bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bcc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_InitTick+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_InitTick+0xec>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000be0:	4817      	ldr	r0, [pc, #92]	; (8000c40 <HAL_InitTick+0xec>)
 8000be2:	f001 f871 	bl	8001cc8 <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000bec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d11b      	bne.n	8000c2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bf4:	4812      	ldr	r0, [pc, #72]	; (8000c40 <HAL_InitTick+0xec>)
 8000bf6:	f001 f8c1 	bl	8001d7c <HAL_TIM_Base_Start_IT>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d111      	bne.n	8000c2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c08:	2036      	movs	r0, #54	; 0x36
 8000c0a:	f000 f9e3 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d808      	bhi.n	8000c26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2036      	movs	r0, #54	; 0x36
 8000c1a:	f000 f9bf 	bl	8000f9c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	; (8000c48 <HAL_InitTick+0xf4>)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	e002      	b.n	8000c2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	431bde83 	.word	0x431bde83
 8000c40:	2000009c 	.word	0x2000009c
 8000c44:	40001000 	.word	0x40001000
 8000c48:	20000004 	.word	0x20000004

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <NMI_Handler+0x4>

08000c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <HardFault_Handler+0x4>

08000c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <MemManage_Handler+0x4>

08000c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c7c:	4802      	ldr	r0, [pc, #8]	; (8000c88 <TIM6_DAC_IRQHandler+0x10>)
 8000c7e:	f001 f8ed 	bl	8001e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	2000009c 	.word	0x2000009c

08000c8c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	e00a      	b.n	8000cb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c9e:	f3af 8000 	nop.w
 8000ca2:	4601      	mov	r1, r0
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	60ba      	str	r2, [r7, #8]
 8000caa:	b2ca      	uxtb	r2, r1
 8000cac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbf0      	blt.n	8000c9e <_read+0x12>
  }

  return len;
 8000cbc:	687b      	ldr	r3, [r7, #4]
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3718      	adds	r7, #24
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cee:	605a      	str	r2, [r3, #4]
  return 0;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <_isatty>:

int _isatty(int file)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d06:	2301      	movs	r3, #1
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3714      	adds	r7, #20
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
	...

08000d30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <SystemInit+0x20>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <SystemInit+0x20>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff ffd7 	bl	8000d30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f006 f979 	bl	8007078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc45 	bl	8000614 <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d98:	0800841c 	.word	0x0800841c
  ldr r2, =_sbss
 8000d9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000da0:	20014520 	.word	0x20014520

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f8d8 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff febc 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fe92 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200000e4 	.word	0x200000e4

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200000e4 	.word	0x200000e4

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fae:	f7ff ff61 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff ffb1 	bl	8000f20 <NVIC_EncodePriority>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff80 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff54 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e16b      	b.n	80012e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800100c:	2201      	movs	r2, #1
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	429a      	cmp	r2, r3
 8001026:	f040 815a 	bne.w	80012de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	2b01      	cmp	r3, #1
 8001034:	d005      	beq.n	8001042 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800103e:	2b02      	cmp	r3, #2
 8001040:	d130      	bne.n	80010a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	2203      	movs	r2, #3
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68da      	ldr	r2, [r3, #12]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001078:	2201      	movs	r2, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 0201 	and.w	r2, r3, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d017      	beq.n	80010e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	2203      	movs	r2, #3
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d123      	bne.n	8001134 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	08da      	lsrs	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3208      	adds	r2, #8
 80010f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	f003 0307 	and.w	r3, r3, #7
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	691a      	ldr	r2, [r3, #16]
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f003 0203 	and.w	r2, r3, #3
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80b4 	beq.w	80012de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b60      	ldr	r3, [pc, #384]	; (80012fc <HAL_GPIO_Init+0x30c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <HAL_GPIO_Init+0x30c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <HAL_GPIO_Init+0x30c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001192:	4a5b      	ldr	r2, [pc, #364]	; (8001300 <HAL_GPIO_Init+0x310>)
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a52      	ldr	r2, [pc, #328]	; (8001304 <HAL_GPIO_Init+0x314>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d02b      	beq.n	8001216 <HAL_GPIO_Init+0x226>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a51      	ldr	r2, [pc, #324]	; (8001308 <HAL_GPIO_Init+0x318>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d025      	beq.n	8001212 <HAL_GPIO_Init+0x222>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a50      	ldr	r2, [pc, #320]	; (800130c <HAL_GPIO_Init+0x31c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01f      	beq.n	800120e <HAL_GPIO_Init+0x21e>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4f      	ldr	r2, [pc, #316]	; (8001310 <HAL_GPIO_Init+0x320>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x21a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4e      	ldr	r2, [pc, #312]	; (8001314 <HAL_GPIO_Init+0x324>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x216>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <HAL_GPIO_Init+0x328>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x212>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_GPIO_Init+0x32c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x20e>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a4b      	ldr	r2, [pc, #300]	; (8001320 <HAL_GPIO_Init+0x330>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x20a>
 80011f6:	2307      	movs	r3, #7
 80011f8:	e00e      	b.n	8001218 <HAL_GPIO_Init+0x228>
 80011fa:	2308      	movs	r3, #8
 80011fc:	e00c      	b.n	8001218 <HAL_GPIO_Init+0x228>
 80011fe:	2306      	movs	r3, #6
 8001200:	e00a      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001202:	2305      	movs	r3, #5
 8001204:	e008      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001206:	2304      	movs	r3, #4
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x228>
 800120a:	2303      	movs	r3, #3
 800120c:	e004      	b.n	8001218 <HAL_GPIO_Init+0x228>
 800120e:	2302      	movs	r3, #2
 8001210:	e002      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x228>
 8001216:	2300      	movs	r3, #0
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	f002 0203 	and.w	r2, r2, #3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4093      	lsls	r3, r2
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001228:	4935      	ldr	r1, [pc, #212]	; (8001300 <HAL_GPIO_Init+0x310>)
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3302      	adds	r3, #2
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001236:	4b3b      	ldr	r3, [pc, #236]	; (8001324 <HAL_GPIO_Init+0x334>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800125a:	4a32      	ldr	r2, [pc, #200]	; (8001324 <HAL_GPIO_Init+0x334>)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001260:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_GPIO_Init+0x334>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	43db      	mvns	r3, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4013      	ands	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001284:	4a27      	ldr	r2, [pc, #156]	; (8001324 <HAL_GPIO_Init+0x334>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <HAL_GPIO_Init+0x334>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ae:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_GPIO_Init+0x334>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_GPIO_Init+0x334>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <HAL_GPIO_Init+0x334>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	f67f ae90 	bls.w	800100c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40013800 	.word	0x40013800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	40020800 	.word	0x40020800
 8001310:	40020c00 	.word	0x40020c00
 8001314:	40021000 	.word	0x40021000
 8001318:	40021400 	.word	0x40021400
 800131c:	40021800 	.word	0x40021800
 8001320:	40021c00 	.word	0x40021c00
 8001324:	40013c00 	.word	0x40013c00

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001344:	e003      	b.n	800134e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001346:	887b      	ldrh	r3, [r7, #2]
 8001348:	041a      	lsls	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	619a      	str	r2, [r3, #24]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e267      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d075      	beq.n	8001466 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137a:	4b88      	ldr	r3, [pc, #544]	; (800159c <HAL_RCC_OscConfig+0x240>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	2b04      	cmp	r3, #4
 8001384:	d00c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001386:	4b85      	ldr	r3, [pc, #532]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138e:	2b08      	cmp	r3, #8
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001392:	4b82      	ldr	r3, [pc, #520]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139e:	d10b      	bne.n	80013b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	4b7e      	ldr	r3, [pc, #504]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d05b      	beq.n	8001464 <HAL_RCC_OscConfig+0x108>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d157      	bne.n	8001464 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e242      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x74>
 80013c2:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a75      	ldr	r2, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d8:	d10c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x98>
 80013da:	4b70      	ldr	r3, [pc, #448]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a6f      	ldr	r2, [pc, #444]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	4b6d      	ldr	r3, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a6c      	ldr	r2, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e00b      	b.n	800140c <HAL_RCC_OscConfig+0xb0>
 80013f4:	4b69      	ldr	r3, [pc, #420]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a68      	ldr	r2, [pc, #416]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80013fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b66      	ldr	r3, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a65      	ldr	r2, [pc, #404]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d013      	beq.n	800143c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001414:	f7ff fcfe 	bl	8000e14 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141c:	f7ff fcfa 	bl	8000e14 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b64      	cmp	r3, #100	; 0x64
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e207      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b5b      	ldr	r3, [pc, #364]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0xc0>
 800143a:	e014      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fcea 	bl	8000e14 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001444:	f7ff fce6 	bl	8000e14 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b64      	cmp	r3, #100	; 0x64
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1f3      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001456:	4b51      	ldr	r3, [pc, #324]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0xe8>
 8001462:	e000      	b.n	8001466 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d063      	beq.n	800153a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00b      	beq.n	8001496 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147e:	4b47      	ldr	r3, [pc, #284]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d11c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800148a:	4b44      	ldr	r3, [pc, #272]	; (800159c <HAL_RCC_OscConfig+0x240>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d116      	bne.n	80014c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001496:	4b41      	ldr	r3, [pc, #260]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d001      	beq.n	80014ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e1c7      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ae:	4b3b      	ldr	r3, [pc, #236]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4937      	ldr	r1, [pc, #220]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	e03a      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d020      	beq.n	800150e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014cc:	4b34      	ldr	r3, [pc, #208]	; (80015a0 <HAL_RCC_OscConfig+0x244>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fc9f 	bl	8000e14 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014da:	f7ff fc9b 	bl	8000e14 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e1a8      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f8:	4b28      	ldr	r3, [pc, #160]	; (800159c <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	4925      	ldr	r1, [pc, #148]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
 800150c:	e015      	b.n	800153a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <HAL_RCC_OscConfig+0x244>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001514:	f7ff fc7e 	bl	8000e14 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800151c:	f7ff fc7a 	bl	8000e14 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e187      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152e:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0308 	and.w	r3, r3, #8
 8001542:	2b00      	cmp	r3, #0
 8001544:	d036      	beq.n	80015b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d016      	beq.n	800157c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <HAL_RCC_OscConfig+0x248>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fc5e 	bl	8000e14 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fc5a 	bl	8000e14 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e167      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x240>)
 8001570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x200>
 800157a:	e01b      	b.n	80015b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <HAL_RCC_OscConfig+0x248>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001582:	f7ff fc47 	bl	8000e14 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	e00e      	b.n	80015a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fc43 	bl	8000e14 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d907      	bls.n	80015a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e150      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
 800159c:	40023800 	.word	0x40023800
 80015a0:	42470000 	.word	0x42470000
 80015a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1ea      	bne.n	800158a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8097 	beq.w	80016f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c2:	2300      	movs	r3, #0
 80015c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c6:	4b81      	ldr	r3, [pc, #516]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10f      	bne.n	80015f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b7d      	ldr	r3, [pc, #500]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a7c      	ldr	r2, [pc, #496]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b7a      	ldr	r3, [pc, #488]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ee:	2301      	movs	r3, #1
 80015f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b77      	ldr	r3, [pc, #476]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d118      	bne.n	8001630 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a73      	ldr	r2, [pc, #460]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff fc03 	bl	8000e14 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001612:	f7ff fbff 	bl	8000e14 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e10c      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	4b6a      	ldr	r3, [pc, #424]	; (80017d0 <HAL_RCC_OscConfig+0x474>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x2ea>
 8001638:	4b64      	ldr	r3, [pc, #400]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	4a63      	ldr	r2, [pc, #396]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6713      	str	r3, [r2, #112]	; 0x70
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x324>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x30c>
 800164e:	4b5f      	ldr	r3, [pc, #380]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	4a5e      	ldr	r2, [pc, #376]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6713      	str	r3, [r2, #112]	; 0x70
 800165a:	4b5c      	ldr	r3, [pc, #368]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	4a5b      	ldr	r2, [pc, #364]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6713      	str	r3, [r2, #112]	; 0x70
 8001666:	e00b      	b.n	8001680 <HAL_RCC_OscConfig+0x324>
 8001668:	4b58      	ldr	r3, [pc, #352]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800166a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166c:	4a57      	ldr	r2, [pc, #348]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6713      	str	r3, [r2, #112]	; 0x70
 8001674:	4b55      	ldr	r3, [pc, #340]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a54      	ldr	r2, [pc, #336]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 800167a:	f023 0304 	bic.w	r3, r3, #4
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d015      	beq.n	80016b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fbc4 	bl	8000e14 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fbc0 	bl	8000e14 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e0cb      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	4b49      	ldr	r3, [pc, #292]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0ee      	beq.n	8001690 <HAL_RCC_OscConfig+0x334>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b4:	f7ff fbae 	bl	8000e14 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff fbaa 	bl	8000e14 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0b5      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d2:	4b3e      	ldr	r3, [pc, #248]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ee      	bne.n	80016bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016de:	7dfb      	ldrb	r3, [r7, #23]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e4:	4b39      	ldr	r3, [pc, #228]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	4a38      	ldr	r2, [pc, #224]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80a1 	beq.w	800183c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b08      	cmp	r3, #8
 8001704:	d05c      	beq.n	80017c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d141      	bne.n	8001792 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <HAL_RCC_OscConfig+0x478>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fb7e 	bl	8000e14 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171c:	f7ff fb7a 	bl	8000e14 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e087      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69da      	ldr	r2, [r3, #28]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001748:	019b      	lsls	r3, r3, #6
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	085b      	lsrs	r3, r3, #1
 8001752:	3b01      	subs	r3, #1
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	061b      	lsls	r3, r3, #24
 800175e:	491b      	ldr	r1, [pc, #108]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x478>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7ff fb53 	bl	8000e14 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fb4f 	bl	8000e14 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e05c      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x416>
 8001790:	e054      	b.n	800183c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <HAL_RCC_OscConfig+0x478>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb3c 	bl	8000e14 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff fb38 	bl	8000e14 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e045      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x470>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x444>
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e038      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000
 80017d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x4ec>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d028      	beq.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d121      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d11a      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800180e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001810:	4293      	cmp	r3, r2
 8001812:	d111      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	085b      	lsrs	r3, r3, #1
 8001820:	3b01      	subs	r3, #1
 8001822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001824:	429a      	cmp	r2, r3
 8001826:	d107      	bne.n	8001838 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e000      	b.n	800183e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800

0800184c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0cc      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d90c      	bls.n	8001888 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0b8      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d020      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a0:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	4a58      	ldr	r2, [pc, #352]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b8:	4b53      	ldr	r3, [pc, #332]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a52      	ldr	r2, [pc, #328]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	494d      	ldr	r1, [pc, #308]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d044      	beq.n	800196c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d119      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e07f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d003      	beq.n	800190a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001906:	2b03      	cmp	r3, #3
 8001908:	d107      	bne.n	800191a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d109      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e06f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e067      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f023 0203 	bic.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4934      	ldr	r1, [pc, #208]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	4313      	orrs	r3, r2
 800193a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800193c:	f7ff fa6a 	bl	8000e14 <HAL_GetTick>
 8001940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001942:	e00a      	b.n	800195a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001944:	f7ff fa66 	bl	8000e14 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e04f      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f003 020c 	and.w	r2, r3, #12
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	429a      	cmp	r2, r3
 800196a:	d1eb      	bne.n	8001944 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d20c      	bcs.n	8001994 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e032      	b.n	80019fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d008      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4916      	ldr	r1, [pc, #88]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0308 	and.w	r3, r3, #8
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	490e      	ldr	r1, [pc, #56]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019d2:	f000 f821 	bl	8001a18 <HAL_RCC_GetSysClockFreq>
 80019d6:	4602      	mov	r2, r0
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	091b      	lsrs	r3, r3, #4
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	490a      	ldr	r1, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	5ccb      	ldrb	r3, [r1, r3]
 80019e6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff f8ae 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	08008320 	.word	0x08008320
 8001a10:	20000000 	.word	0x20000000
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a1c:	b094      	sub	sp, #80	; 0x50
 8001a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	647b      	str	r3, [r7, #68]	; 0x44
 8001a24:	2300      	movs	r3, #0
 8001a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a28:	2300      	movs	r3, #0
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a30:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d00d      	beq.n	8001a58 <HAL_RCC_GetSysClockFreq+0x40>
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f200 80e1 	bhi.w	8001c04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x34>
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d003      	beq.n	8001a52 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a4a:	e0db      	b.n	8001c04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a50:	e0db      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a52:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a56:	e0d8      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a58:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a62:	4b6d      	ldr	r3, [pc, #436]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d063      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6e:	4b6a      	ldr	r3, [pc, #424]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	099b      	lsrs	r3, r3, #6
 8001a74:	2200      	movs	r2, #0
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
 8001a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a8a:	4622      	mov	r2, r4
 8001a8c:	462b      	mov	r3, r5
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	0159      	lsls	r1, r3, #5
 8001a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a9c:	0150      	lsls	r0, r2, #5
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	1a51      	subs	r1, r2, r1
 8001aa6:	6139      	str	r1, [r7, #16]
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	eb63 0301 	sbc.w	r3, r3, r1
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001abc:	4659      	mov	r1, fp
 8001abe:	018b      	lsls	r3, r1, #6
 8001ac0:	4651      	mov	r1, sl
 8001ac2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	018a      	lsls	r2, r1, #6
 8001aca:	4651      	mov	r1, sl
 8001acc:	ebb2 0801 	subs.w	r8, r2, r1
 8001ad0:	4659      	mov	r1, fp
 8001ad2:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001aea:	4690      	mov	r8, r2
 8001aec:	4699      	mov	r9, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	eb18 0303 	adds.w	r3, r8, r3
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	462b      	mov	r3, r5
 8001af8:	eb49 0303 	adc.w	r3, r9, r3
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	024b      	lsls	r3, r1, #9
 8001b0e:	4621      	mov	r1, r4
 8001b10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b14:	4621      	mov	r1, r4
 8001b16:	024a      	lsls	r2, r1, #9
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1e:	2200      	movs	r2, #0
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b28:	f7fe fbf2 	bl	8000310 <__aeabi_uldivmod>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4613      	mov	r3, r2
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b34:	e058      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	4611      	mov	r1, r2
 8001b42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b46:	623b      	str	r3, [r7, #32]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b50:	4642      	mov	r2, r8
 8001b52:	464b      	mov	r3, r9
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0159      	lsls	r1, r3, #5
 8001b5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b62:	0150      	lsls	r0, r2, #5
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4641      	mov	r1, r8
 8001b6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b6e:	4649      	mov	r1, r9
 8001b70:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	f04f 0300 	mov.w	r3, #0
 8001b7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b88:	ebb2 040a 	subs.w	r4, r2, sl
 8001b8c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	00eb      	lsls	r3, r5, #3
 8001b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9e:	00e2      	lsls	r2, r4, #3
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	461d      	mov	r5, r3
 8001ba4:	4643      	mov	r3, r8
 8001ba6:	18e3      	adds	r3, r4, r3
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	464b      	mov	r3, r9
 8001bac:	eb45 0303 	adc.w	r3, r5, r3
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	028b      	lsls	r3, r1, #10
 8001bc2:	4621      	mov	r1, r4
 8001bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc8:	4621      	mov	r1, r4
 8001bca:	028a      	lsls	r2, r1, #10
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
 8001bd6:	61fa      	str	r2, [r7, #28]
 8001bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bdc:	f7fe fb98 	bl	8000310 <__aeabi_uldivmod>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4613      	mov	r3, r2
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c02:	e002      	b.n	8001c0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x204>)
 8001c06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3750      	adds	r7, #80	; 0x50
 8001c10:	46bd      	mov	sp, r7
 8001c12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	00f42400 	.word	0x00f42400
 8001c20:	007a1200 	.word	0x007a1200

08001c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c28:	4b03      	ldr	r3, [pc, #12]	; (8001c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c40:	f7ff fff0 	bl	8001c24 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	0a9b      	lsrs	r3, r3, #10
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	4903      	ldr	r1, [pc, #12]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c52:	5ccb      	ldrb	r3, [r1, r3]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	08008330 	.word	0x08008330

08001c64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	220f      	movs	r2, #15
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_RCC_GetClockConfig+0x60>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0207 	and.w	r2, r3, #7
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	601a      	str	r2, [r3, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e041      	b.n	8001d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d106      	bne.n	8001cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 f839 	bl	8001d66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3304      	adds	r3, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4610      	mov	r0, r2
 8001d08:	f000 f9d8 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2201      	movs	r2, #1
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d001      	beq.n	8001d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e04e      	b.n	8001e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a23      	ldr	r2, [pc, #140]	; (8001e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d022      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbe:	d01d      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d018      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d013      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a1c      	ldr	r2, [pc, #112]	; (8001e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00e      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d004      	beq.n	8001dfc <HAL_TIM_Base_Start_IT+0x80>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d111      	bne.n	8001e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d010      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1e:	e007      	b.n	8001e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40000800 	.word	0x40000800
 8001e4c:	40000c00 	.word	0x40000c00
 8001e50:	40010400 	.word	0x40010400
 8001e54:	40014000 	.word	0x40014000
 8001e58:	40001800 	.word	0x40001800

08001e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d122      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d11b      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0202 	mvn.w	r2, #2
 8001e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8ee 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f8e0 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f8f1 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d122      	bne.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d11b      	bne.n	8001f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0204 	mvn.w	r2, #4
 8001edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8c4 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8b6 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8c7 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d122      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d11b      	bne.n	8001f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0208 	mvn.w	r2, #8
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f89a 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f88c 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f89d 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f003 0310 	and.w	r3, r3, #16
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d122      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	d11b      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0210 	mvn.w	r2, #16
 8001f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f870 	bl	8002080 <HAL_TIM_IC_CaptureCallback>
 8001fa0:	e005      	b.n	8001fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f862 	bl	800206c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f873 	bl	8002094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0201 	mvn.w	r2, #1
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fd7a 	bl	8000ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f902 	bl	8002210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002016:	2b40      	cmp	r3, #64	; 0x40
 8002018:	d10e      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002024:	2b40      	cmp	r3, #64	; 0x40
 8002026:	d107      	bne.n	8002038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f838 	bl	80020a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b20      	cmp	r3, #32
 8002044:	d10e      	bne.n	8002064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b20      	cmp	r3, #32
 8002052:	d107      	bne.n	8002064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0220 	mvn.w	r2, #32
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f8cc 	bl	80021fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a40      	ldr	r2, [pc, #256]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d013      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d00f      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a3d      	ldr	r2, [pc, #244]	; (80021d4 <TIM_Base_SetConfig+0x118>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <TIM_Base_SetConfig+0x11c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a3b      	ldr	r2, [pc, #236]	; (80021dc <TIM_Base_SetConfig+0x120>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0x40>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d02b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800211c:	d027      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a2c      	ldr	r2, [pc, #176]	; (80021d4 <TIM_Base_SetConfig+0x118>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d023      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a2b      	ldr	r2, [pc, #172]	; (80021d8 <TIM_Base_SetConfig+0x11c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d01f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a2a      	ldr	r2, [pc, #168]	; (80021dc <TIM_Base_SetConfig+0x120>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a29      	ldr	r2, [pc, #164]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d017      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <TIM_Base_SetConfig+0x128>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <TIM_Base_SetConfig+0x12c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00f      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a26      	ldr	r2, [pc, #152]	; (80021ec <TIM_Base_SetConfig+0x130>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00b      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <TIM_Base_SetConfig+0x134>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <TIM_Base_SetConfig+0x138>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d003      	beq.n	800216e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <TIM_Base_SetConfig+0x13c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <TIM_Base_SetConfig+0x114>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d003      	beq.n	80021b4 <TIM_Base_SetConfig+0xf8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a0c      	ldr	r2, [pc, #48]	; (80021e0 <TIM_Base_SetConfig+0x124>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d103      	bne.n	80021bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	615a      	str	r2, [r3, #20]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40010000 	.word	0x40010000
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40000800 	.word	0x40000800
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	40010400 	.word	0x40010400
 80021e4:	40014000 	.word	0x40014000
 80021e8:	40014400 	.word	0x40014400
 80021ec:	40014800 	.word	0x40014800
 80021f0:	40001800 	.word	0x40001800
 80021f4:	40001c00 	.word	0x40001c00
 80021f8:	40002000 	.word	0x40002000

080021fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0208 	add.w	r2, r3, #8
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f103 0208 	add.w	r2, r3, #8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f103 0208 	add.w	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d103      	bne.n	800229e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	e00c      	b.n	80022b8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3308      	adds	r3, #8
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e002      	b.n	80022ac <vListInsert+0x2e>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d2f6      	bcs.n	80022a6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6892      	ldr	r2, [r2, #8]
 8002306:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6852      	ldr	r2, [r2, #4]
 8002310:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d103      	bne.n	8002324 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	1e5a      	subs	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800234e:	2301      	movs	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <xQueueGenericReset+0x2e>
        __asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	60fb      	str	r3, [r7, #12]
    }
 800236e:	bf00      	nop
 8002370:	e7fe      	b.n	8002370 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d052      	beq.n	800241e <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d04e      	beq.n	800241e <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	2100      	movs	r1, #0
 800238a:	fba3 2302 	umull	r2, r3, r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d000      	beq.n	8002394 <xQueueGenericReset+0x50>
 8002392:	2101      	movs	r1, #1
 8002394:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002396:	2b00      	cmp	r3, #0
 8002398:	d141      	bne.n	800241e <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 800239a:	f001 fe93 	bl	80040c4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a6:	6939      	ldr	r1, [r7, #16]
 80023a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023aa:	fb01 f303 	mul.w	r3, r1, r3
 80023ae:	441a      	add	r2, r3
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2200      	movs	r2, #0
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6939      	ldr	r1, [r7, #16]
 80023ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	441a      	add	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	22ff      	movs	r2, #255	; 0xff
 80023e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00f      	beq.n	8002418 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	3310      	adds	r3, #16
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 ff85 	bl	800330c <xTaskRemoveFromEventList>
 8002402:	e009      	b.n	8002418 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	3310      	adds	r3, #16
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff0b 	bl	8002224 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3324      	adds	r3, #36	; 0x24
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff06 	bl	8002224 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002418:	f001 fe84 	bl	8004124 <vPortExitCritical>
 800241c:	e001      	b.n	8002422 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10a      	bne.n	800243e <xQueueGenericReset+0xfa>
        __asm volatile
 8002428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242c:	f383 8811 	msr	BASEPRI, r3
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	f3bf 8f4f 	dsb	sy
 8002438:	60bb      	str	r3, [r7, #8]
    }
 800243a:	bf00      	nop
 800243c:	e7fe      	b.n	800243c <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800243e:	697b      	ldr	r3, [r7, #20]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	; 0x28
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d02e      	beq.n	80024be <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002460:	2100      	movs	r1, #0
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d000      	beq.n	8002470 <xQueueGenericCreate+0x28>
 800246e:	2101      	movs	r1, #1
 8002470:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002472:	2b00      	cmp	r3, #0
 8002474:	d123      	bne.n	80024be <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800247e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002482:	d81c      	bhi.n	80024be <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3350      	adds	r3, #80	; 0x50
 8002492:	4618      	mov	r0, r3
 8002494:	f001 ff42 	bl	800431c <pvPortMalloc>
 8002498:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01c      	beq.n	80024da <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3350      	adds	r3, #80	; 0x50
 80024a8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024aa:	79fa      	ldrb	r2, [r7, #7]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f814 	bl	80024e4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80024bc:	e00d      	b.n	80024da <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10a      	bne.n	80024da <xQueueGenericCreate+0x92>
        __asm volatile
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	613b      	str	r3, [r7, #16]
    }
 80024d6:	bf00      	nop
 80024d8:	e7fe      	b.n	80024d8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024da:	69fb      	ldr	r3, [r7, #28]
    }
 80024dc:	4618      	mov	r0, r3
 80024de:	3720      	adds	r7, #32
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d103      	bne.n	8002500 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e002      	b.n	8002506 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002512:	2101      	movs	r1, #1
 8002514:	69b8      	ldr	r0, [r7, #24]
 8002516:	f7ff ff15 	bl	8002344 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	68ba      	ldr	r2, [r7, #8]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	2073      	movs	r0, #115	; 0x73
 800252a:	f003 fed1 	bl	80062d0 <SEGGER_SYSVIEW_RecordU32x3>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002538:	b590      	push	{r4, r7, lr}
 800253a:	b08f      	sub	sp, #60	; 0x3c
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <xQueueReceive+0x30>
        __asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	623b      	str	r3, [r7, #32]
    }
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d103      	bne.n	8002576 <xQueueReceive+0x3e>
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <xQueueReceive+0x42>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueReceive+0x44>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10a      	bne.n	8002596 <xQueueReceive+0x5e>
        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	61fb      	str	r3, [r7, #28]
    }
 8002592:	bf00      	nop
 8002594:	e7fe      	b.n	8002594 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002596:	f001 f8c5 	bl	8003724 <xTaskGetSchedulerState>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <xQueueReceive+0x6e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <xQueueReceive+0x72>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <xQueueReceive+0x74>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueReceive+0x8e>
        __asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	61bb      	str	r3, [r7, #24]
    }
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025c6:	f001 fd7d 	bl	80040c4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d024      	beq.n	8002620 <xQueueReceive+0xe8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025d6:	68b9      	ldr	r1, [r7, #8]
 80025d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025da:	f000 f8b3 	bl	8002744 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80025de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fba3 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 80025e6:	4604      	mov	r4, r0
 80025e8:	2000      	movs	r0, #0
 80025ea:	f004 fb9f 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2101      	movs	r1, #1
 80025f4:	9100      	str	r1, [sp, #0]
 80025f6:	4621      	mov	r1, r4
 80025f8:	205c      	movs	r0, #92	; 0x5c
 80025fa:	f003 fedf 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <xQueueReceive+0xe0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	3310      	adds	r3, #16
 8002612:	4618      	mov	r0, r3
 8002614:	f000 fe7a 	bl	800330c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002618:	f001 fd84 	bl	8004124 <vPortExitCritical>
                return pdPASS;
 800261c:	2301      	movs	r3, #1
 800261e:	e08a      	b.n	8002736 <xQueueReceive+0x1fe>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d113      	bne.n	800264e <xQueueReceive+0x116>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002626:	f001 fd7d 	bl	8004124 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	4618      	mov	r0, r3
 800262e:	f004 fb7d 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002632:	4604      	mov	r4, r0
 8002634:	2000      	movs	r0, #0
 8002636:	f004 fb79 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 800263a:	4602      	mov	r2, r0
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2101      	movs	r1, #1
 8002640:	9100      	str	r1, [sp, #0]
 8002642:	4621      	mov	r1, r4
 8002644:	205c      	movs	r0, #92	; 0x5c
 8002646:	f003 feb9 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800264a:	2300      	movs	r3, #0
 800264c:	e073      	b.n	8002736 <xQueueReceive+0x1fe>
                }
                else if( xEntryTimeSet == pdFALSE )
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d106      	bne.n	8002662 <xQueueReceive+0x12a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4618      	mov	r0, r3
 800265a:	f000 ff2f 	bl	80034bc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800265e:	2301      	movs	r3, #1
 8002660:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002662:	f001 fd5f 	bl	8004124 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002666:	f000 fb61 	bl	8002d2c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800266a:	f001 fd2b 	bl	80040c4 <vPortEnterCritical>
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002674:	b25b      	sxtb	r3, r3
 8002676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267a:	d103      	bne.n	8002684 <xQueueReceive+0x14c>
 800267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800268a:	b25b      	sxtb	r3, r3
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d103      	bne.n	800269a <xQueueReceive+0x162>
 8002692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800269a:	f001 fd43 	bl	8004124 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800269e:	1d3a      	adds	r2, r7, #4
 80026a0:	f107 0310 	add.w	r3, r7, #16
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 ff1e 	bl	80034e8 <xTaskCheckForTimeOut>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d124      	bne.n	80026fc <xQueueReceive+0x1c4>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b4:	f000 f8be 	bl	8002834 <prvIsQueueEmpty>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d018      	beq.n	80026f0 <xQueueReceive+0x1b8>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c0:	3324      	adds	r3, #36	; 0x24
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fdb4 	bl	8003234 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026ce:	f000 f85f 	bl	8002790 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026d2:	f000 fb39 	bl	8002d48 <xTaskResumeAll>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f47f af74 	bne.w	80025c6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <xQueueReceive+0x208>)
 80026e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	e76a      	b.n	80025c6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80026f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f2:	f000 f84d 	bl	8002790 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026f6:	f000 fb27 	bl	8002d48 <xTaskResumeAll>
 80026fa:	e764      	b.n	80025c6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80026fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026fe:	f000 f847 	bl	8002790 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002702:	f000 fb21 	bl	8002d48 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002708:	f000 f894 	bl	8002834 <prvIsQueueEmpty>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f43f af59 	beq.w	80025c6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002716:	4618      	mov	r0, r3
 8002718:	f004 fb08 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 800271c:	4604      	mov	r4, r0
 800271e:	2000      	movs	r0, #0
 8002720:	f004 fb04 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002724:	4602      	mov	r2, r0
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2101      	movs	r1, #1
 800272a:	9100      	str	r1, [sp, #0]
 800272c:	4621      	mov	r1, r4
 800272e:	205c      	movs	r0, #92	; 0x5c
 8002730:	f003 fe44 	bl	80063bc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002734:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002736:	4618      	mov	r0, r3
 8002738:	3734      	adds	r7, #52	; 0x34
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	e000ed04 	.word	0xe000ed04

08002744 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d018      	beq.n	8002788 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	441a      	add	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	429a      	cmp	r2, r3
 800276e:	d303      	bcc.n	8002778 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68d9      	ldr	r1, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	461a      	mov	r2, r3
 8002782:	6838      	ldr	r0, [r7, #0]
 8002784:	f004 fcac 	bl	80070e0 <memcpy>
    }
}
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002798:	f001 fc94 	bl	80040c4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027a2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027a4:	e011      	b.n	80027ca <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3324      	adds	r3, #36	; 0x24
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fdaa 	bl	800330c <xTaskRemoveFromEventList>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80027be:	f000 fef9 	bl	80035b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	dce9      	bgt.n	80027a6 <prvUnlockQueue+0x16>
 80027d2:	e000      	b.n	80027d6 <prvUnlockQueue+0x46>
                    break;
 80027d4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	22ff      	movs	r2, #255	; 0xff
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80027de:	f001 fca1 	bl	8004124 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027e2:	f001 fc6f 	bl	80040c4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ec:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ee:	e011      	b.n	8002814 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d012      	beq.n	800281e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3310      	adds	r3, #16
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fd85 	bl	800330c <xTaskRemoveFromEventList>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002808:	f000 fed4 	bl	80035b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	3b01      	subs	r3, #1
 8002810:	b2db      	uxtb	r3, r3
 8002812:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002818:	2b00      	cmp	r3, #0
 800281a:	dce9      	bgt.n	80027f0 <prvUnlockQueue+0x60>
 800281c:	e000      	b.n	8002820 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800281e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002828:	f001 fc7c 	bl	8004124 <vPortExitCritical>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800283c:	f001 fc42 	bl	80040c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e001      	b.n	8002852 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002852:	f001 fc67 	bl	8004124 <vPortExitCritical>

    return xReturn;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	60fb      	str	r3, [r7, #12]
    }
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d024      	beq.n	80028da <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
 8002894:	e01e      	b.n	80028d4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002896:	4a1c      	ldr	r2, [pc, #112]	; (8002908 <vQueueAddToRegistry+0xa8>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	4413      	add	r3, r2
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d105      	bne.n	80028b2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4a17      	ldr	r2, [pc, #92]	; (8002908 <vQueueAddToRegistry+0xa8>)
 80028ac:	4413      	add	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
                    break;
 80028b0:	e013      	b.n	80028da <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d10a      	bne.n	80028ce <vQueueAddToRegistry+0x6e>
 80028b8:	4a13      	ldr	r2, [pc, #76]	; (8002908 <vQueueAddToRegistry+0xa8>)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d104      	bne.n	80028ce <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4a0f      	ldr	r2, [pc, #60]	; (8002908 <vQueueAddToRegistry+0xa8>)
 80028ca:	4413      	add	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b07      	cmp	r3, #7
 80028d8:	d9dd      	bls.n	8002896 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00f      	beq.n	8002900 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fa1c 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 80028f4:	4601      	mov	r1, r0
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	2071      	movs	r0, #113	; 0x71
 80028fc:	f003 fc8e 	bl	800621c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	200000e8 	.word	0x200000e8

0800290c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800291c:	f001 fbd2 	bl	80040c4 <vPortEnterCritical>
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002926:	b25b      	sxtb	r3, r3
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d103      	bne.n	8002936 <vQueueWaitForMessageRestricted+0x2a>
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293c:	b25b      	sxtb	r3, r3
 800293e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002942:	d103      	bne.n	800294c <vQueueWaitForMessageRestricted+0x40>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800294c:	f001 fbea 	bl	8004124 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	2b00      	cmp	r3, #0
 8002956:	d106      	bne.n	8002966 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3324      	adds	r3, #36	; 0x24
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fc8b 	bl	800327c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff12 	bl	8002790 <prvUnlockQueue>
    }
 800296c:	bf00      	nop
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002974:	b580      	push	{r7, lr}
 8002976:	b08c      	sub	sp, #48	; 0x30
 8002978:	af04      	add	r7, sp, #16
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002984:	88fb      	ldrh	r3, [r7, #6]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fcc7 	bl	800431c <pvPortMalloc>
 800298e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d013      	beq.n	80029be <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002996:	2058      	movs	r0, #88	; 0x58
 8002998:	f001 fcc0 	bl	800431c <pvPortMalloc>
 800299c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029a4:	2258      	movs	r2, #88	; 0x58
 80029a6:	2100      	movs	r1, #0
 80029a8:	69f8      	ldr	r0, [r7, #28]
 80029aa:	f004 fba7 	bl	80070fc <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
 80029b4:	e005      	b.n	80029c2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029b6:	6978      	ldr	r0, [r7, #20]
 80029b8:	f001 fd6a 	bl	8004490 <vPortFree>
 80029bc:	e001      	b.n	80029c2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	2300      	movs	r3, #0
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	9302      	str	r3, [sp, #8]
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d4:	9301      	str	r3, [sp, #4]
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f80e 	bl	8002a00 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029e4:	69f8      	ldr	r0, [r7, #28]
 80029e6:	f000 f899 	bl	8002b1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029ea:	2301      	movs	r3, #1
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	e002      	b.n	80029f6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80029f6:	69bb      	ldr	r3, [r7, #24]
    }
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b088      	sub	sp, #32
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a10:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	461a      	mov	r2, r3
 8002a18:	21a5      	movs	r1, #165	; 0xa5
 8002a1a:	f004 fb6f 	bl	80070fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f023 0307 	bic.w	r3, r3, #7
 8002a36:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	617b      	str	r3, [r7, #20]
    }
 8002a54:	bf00      	nop
 8002a56:	e7fe      	b.n	8002a56 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01e      	beq.n	8002a9c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	e012      	b.n	8002a8a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	7819      	ldrb	r1, [r3, #0]
 8002a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	4413      	add	r3, r2
 8002a72:	3334      	adds	r3, #52	; 0x34
 8002a74:	460a      	mov	r2, r1
 8002a76:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3301      	adds	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b09      	cmp	r3, #9
 8002a8e:	d9e9      	bls.n	8002a64 <prvInitialiseNewTask+0x64>
 8002a90:	e000      	b.n	8002a94 <prvInitialiseNewTask+0x94>
            {
                break;
 8002a92:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d90a      	bls.n	8002ab8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	613b      	str	r3, [r7, #16]
    }
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d901      	bls.n	8002ac2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002abe:	2304      	movs	r3, #4
 8002ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002acc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff fbc6 	bl	8002264 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	3318      	adds	r3, #24
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff fbc1 	bl	8002264 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aea:	f1c3 0205 	rsb	r2, r3, #5
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	69b8      	ldr	r0, [r7, #24]
 8002afe:	f001 f933 	bl	8003d68 <pxPortInitialiseStack>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b06:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b14:	bf00      	nop
 8002b16:	3720      	adds	r7, #32
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b24:	f001 face 	bl	80040c4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b28:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <prvAddNewTaskToReadyList+0x134>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	4a48      	ldr	r2, [pc, #288]	; (8002c50 <prvAddNewTaskToReadyList+0x134>)
 8002b30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b32:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <prvAddNewTaskToReadyList+0x138>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b3a:	4a46      	ldr	r2, [pc, #280]	; (8002c54 <prvAddNewTaskToReadyList+0x138>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b40:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <prvAddNewTaskToReadyList+0x134>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d110      	bne.n	8002b6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b48:	f000 fd52 	bl	80035f0 <prvInitialiseTaskLists>
 8002b4c:	e00d      	b.n	8002b6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b4e:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <prvAddNewTaskToReadyList+0x13c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b56:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <prvAddNewTaskToReadyList+0x138>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d802      	bhi.n	8002b6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b64:	4a3b      	ldr	r2, [pc, #236]	; (8002c54 <prvAddNewTaskToReadyList+0x138>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b6a:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <prvAddNewTaskToReadyList+0x140>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <prvAddNewTaskToReadyList+0x140>)
 8002b72:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <prvAddNewTaskToReadyList+0x140>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <prvAddNewTaskToReadyList+0x94>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 f80b 	bl	8006ba0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	461c      	mov	r4, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	1ae3      	subs	r3, r4, r3
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	462b      	mov	r3, r5
 8002bac:	f001 fe32 	bl	8004814 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f004 f878 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <prvAddNewTaskToReadyList+0x144>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	4a26      	ldr	r2, [pc, #152]	; (8002c60 <prvAddNewTaskToReadyList+0x144>)
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bce:	4925      	ldr	r1, [pc, #148]	; (8002c64 <prvAddNewTaskToReadyList+0x148>)
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	3204      	adds	r2, #4
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	1d1a      	adds	r2, r3, #4
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <prvAddNewTaskToReadyList+0x148>)
 8002c0e:	441a      	add	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	615a      	str	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	4912      	ldr	r1, [pc, #72]	; (8002c64 <prvAddNewTaskToReadyList+0x148>)
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	1c59      	adds	r1, r3, #1
 8002c28:	480e      	ldr	r0, [pc, #56]	; (8002c64 <prvAddNewTaskToReadyList+0x148>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4403      	add	r3, r0
 8002c34:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c36:	f001 fa75 	bl	8004124 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c3a:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <prvAddNewTaskToReadyList+0x13c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <prvAddNewTaskToReadyList+0x138>)
 8002c44:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000200 	.word	0x20000200
 8002c54:	20000128 	.word	0x20000128
 8002c58:	2000020c 	.word	0x2000020c
 8002c5c:	2000021c 	.word	0x2000021c
 8002c60:	20000208 	.word	0x20000208
 8002c64:	2000012c 	.word	0x2000012c

08002c68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <vTaskStartScheduler+0xa4>)
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2300      	movs	r3, #0
 8002c78:	2282      	movs	r2, #130	; 0x82
 8002c7a:	4925      	ldr	r1, [pc, #148]	; (8002d10 <vTaskStartScheduler+0xa8>)
 8002c7c:	4825      	ldr	r0, [pc, #148]	; (8002d14 <vTaskStartScheduler+0xac>)
 8002c7e:	f7ff fe79 	bl	8002974 <xTaskCreate>
 8002c82:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002c8a:	f000 fde9 	bl	8003860 <xTimerCreateTimerTask>
 8002c8e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d124      	bne.n	8002ce0 <vTaskStartScheduler+0x78>
        __asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	60bb      	str	r3, [r7, #8]
    }
 8002ca8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002caa:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <vTaskStartScheduler+0xb0>)
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <vTaskStartScheduler+0xb4>)
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <vTaskStartScheduler+0xb8>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cbe:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <vTaskStartScheduler+0xbc>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <vTaskStartScheduler+0xa4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d102      	bne.n	8002cd0 <vTaskStartScheduler+0x68>
 8002cca:	f003 ff4d 	bl	8006b68 <SEGGER_SYSVIEW_OnIdle>
 8002cce:	e004      	b.n	8002cda <vTaskStartScheduler+0x72>
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <vTaskStartScheduler+0xbc>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 ffa5 	bl	8006c24 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002cda:	f001 f8d3 	bl	8003e84 <xPortStartScheduler>
 8002cde:	e00e      	b.n	8002cfe <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce6:	d10a      	bne.n	8002cfe <vTaskStartScheduler+0x96>
        __asm volatile
 8002ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cec:	f383 8811 	msr	BASEPRI, r3
 8002cf0:	f3bf 8f6f 	isb	sy
 8002cf4:	f3bf 8f4f 	dsb	sy
 8002cf8:	607b      	str	r3, [r7, #4]
    }
 8002cfa:	bf00      	nop
 8002cfc:	e7fe      	b.n	8002cfc <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <vTaskStartScheduler+0xc0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000224 	.word	0x20000224
 8002d10:	08008248 	.word	0x08008248
 8002d14:	080035cd 	.word	0x080035cd
 8002d18:	20000220 	.word	0x20000220
 8002d1c:	2000020c 	.word	0x2000020c
 8002d20:	20000204 	.word	0x20000204
 8002d24:	20000128 	.word	0x20000128
 8002d28:	2000000c 	.word	0x2000000c

08002d2c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <vTaskSuspendAll+0x18>)
 8002d38:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	20000228 	.word	0x20000228

08002d48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002d56:	4b6d      	ldr	r3, [pc, #436]	; (8002f0c <xTaskResumeAll+0x1c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10a      	bne.n	8002d74 <xTaskResumeAll+0x2c>
        __asm volatile
 8002d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	607b      	str	r3, [r7, #4]
    }
 8002d70:	bf00      	nop
 8002d72:	e7fe      	b.n	8002d72 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002d74:	f001 f9a6 	bl	80040c4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002d78:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <xTaskResumeAll+0x1c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	4a63      	ldr	r2, [pc, #396]	; (8002f0c <xTaskResumeAll+0x1c4>)
 8002d80:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d82:	4b62      	ldr	r3, [pc, #392]	; (8002f0c <xTaskResumeAll+0x1c4>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f040 80b8 	bne.w	8002efc <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d8c:	4b60      	ldr	r3, [pc, #384]	; (8002f10 <xTaskResumeAll+0x1c8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80b3 	beq.w	8002efc <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d96:	e08e      	b.n	8002eb6 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d98:	4b5e      	ldr	r3, [pc, #376]	; (8002f14 <xTaskResumeAll+0x1cc>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	6a12      	ldr	r2, [r2, #32]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	69d2      	ldr	r2, [r2, #28]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d103      	bne.n	8002dce <xTaskResumeAll+0x86>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	68d2      	ldr	r2, [r2, #12]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	69fa      	ldr	r2, [r7, #28]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	605a      	str	r2, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d103      	bne.n	8002e0c <xTaskResumeAll+0xc4>
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	615a      	str	r2, [r3, #20]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1e5a      	subs	r2, r3, #1
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f003 ff42 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2201      	movs	r2, #1
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <xTaskResumeAll+0x1d0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	4a39      	ldr	r2, [pc, #228]	; (8002f18 <xTaskResumeAll+0x1d0>)
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3a:	4938      	ldr	r1, [pc, #224]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3304      	adds	r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	69fa      	ldr	r2, [r7, #28]
 8002e60:	3204      	adds	r2, #4
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	1d1a      	adds	r2, r3, #4
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002e7a:	441a      	add	r2, r3
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	615a      	str	r2, [r3, #20]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	4925      	ldr	r1, [pc, #148]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	1c59      	adds	r1, r3, #1
 8002e94:	4821      	ldr	r0, [pc, #132]	; (8002f1c <xTaskResumeAll+0x1d4>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4403      	add	r3, r0
 8002ea0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <xTaskResumeAll+0x1d8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <xTaskResumeAll+0x1dc>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <xTaskResumeAll+0x1cc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f47f af6c 	bne.w	8002d98 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002ec6:	f000 fc11 	bl	80036ec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002eca:	4b17      	ldr	r3, [pc, #92]	; (8002f28 <xTaskResumeAll+0x1e0>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d010      	beq.n	8002ef8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002ed6:	f000 f84b 	bl	8002f70 <xTaskIncrementTick>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d002      	beq.n	8002ee6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <xTaskResumeAll+0x1dc>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1f1      	bne.n	8002ed6 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002ef2:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <xTaskResumeAll+0x1e0>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <xTaskResumeAll+0x1dc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002efc:	f001 f912 	bl	8004124 <vPortExitCritical>

    return xAlreadyYielded;
 8002f00:	697b      	ldr	r3, [r7, #20]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000228 	.word	0x20000228
 8002f10:	20000200 	.word	0x20000200
 8002f14:	200001c0 	.word	0x200001c0
 8002f18:	20000208 	.word	0x20000208
 8002f1c:	2000012c 	.word	0x2000012c
 8002f20:	20000128 	.word	0x20000128
 8002f24:	20000214 	.word	0x20000214
 8002f28:	20000210 	.word	0x20000210

08002f2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <xTaskGetTickCount+0x1c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002f38:	687b      	ldr	r3, [r7, #4]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000204 	.word	0x20000204

08002f4c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f52:	f001 f9a3 	bl	800429c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002f5a:	4b04      	ldr	r3, [pc, #16]	; (8002f6c <xTaskGetTickCountFromISR+0x20>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002f60:	683b      	ldr	r3, [r7, #0]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20000204 	.word	0x20000204

08002f70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08a      	sub	sp, #40	; 0x28
 8002f74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f7a:	4b70      	ldr	r3, [pc, #448]	; (800313c <xTaskIncrementTick+0x1cc>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 80d1 	bne.w	8003126 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f84:	4b6e      	ldr	r3, [pc, #440]	; (8003140 <xTaskIncrementTick+0x1d0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002f8c:	4a6c      	ldr	r2, [pc, #432]	; (8003140 <xTaskIncrementTick+0x1d0>)
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d120      	bne.n	8002fda <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002f98:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <xTaskIncrementTick+0x1d4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa6:	f383 8811 	msr	BASEPRI, r3
 8002faa:	f3bf 8f6f 	isb	sy
 8002fae:	f3bf 8f4f 	dsb	sy
 8002fb2:	607b      	str	r3, [r7, #4]
    }
 8002fb4:	bf00      	nop
 8002fb6:	e7fe      	b.n	8002fb6 <xTaskIncrementTick+0x46>
 8002fb8:	4b62      	ldr	r3, [pc, #392]	; (8003144 <xTaskIncrementTick+0x1d4>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	4b62      	ldr	r3, [pc, #392]	; (8003148 <xTaskIncrementTick+0x1d8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a60      	ldr	r2, [pc, #384]	; (8003144 <xTaskIncrementTick+0x1d4>)
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	4a60      	ldr	r2, [pc, #384]	; (8003148 <xTaskIncrementTick+0x1d8>)
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b5f      	ldr	r3, [pc, #380]	; (800314c <xTaskIncrementTick+0x1dc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a5e      	ldr	r2, [pc, #376]	; (800314c <xTaskIncrementTick+0x1dc>)
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	f000 fb89 	bl	80036ec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002fda:	4b5d      	ldr	r3, [pc, #372]	; (8003150 <xTaskIncrementTick+0x1e0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a3a      	ldr	r2, [r7, #32]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	f0c0 80a5 	bcc.w	8003130 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe6:	4b57      	ldr	r3, [pc, #348]	; (8003144 <xTaskIncrementTick+0x1d4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d104      	bne.n	8002ffa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ff0:	4b57      	ldr	r3, [pc, #348]	; (8003150 <xTaskIncrementTick+0x1e0>)
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff6:	601a      	str	r2, [r3, #0]
                    break;
 8002ff8:	e09a      	b.n	8003130 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ffa:	4b52      	ldr	r3, [pc, #328]	; (8003144 <xTaskIncrementTick+0x1d4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	429a      	cmp	r2, r3
 8003010:	d203      	bcs.n	800301a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003012:	4a4f      	ldr	r2, [pc, #316]	; (8003150 <xTaskIncrementTick+0x1e0>)
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003018:	e08a      	b.n	8003130 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	68d2      	ldr	r2, [r2, #12]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3304      	adds	r3, #4
 800303c:	429a      	cmp	r2, r3
 800303e:	d103      	bne.n	8003048 <xTaskIncrementTick+0xd8>
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	605a      	str	r2, [r3, #4]
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2200      	movs	r2, #0
 800304c:	615a      	str	r2, [r3, #20]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	1e5a      	subs	r2, r3, #1
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01e      	beq.n	800309e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	6a12      	ldr	r2, [r2, #32]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	69d2      	ldr	r2, [r2, #28]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3318      	adds	r3, #24
 8003082:	429a      	cmp	r2, r3
 8003084:	d103      	bne.n	800308e <xTaskIncrementTick+0x11e>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	6a1a      	ldr	r2, [r3, #32]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2200      	movs	r2, #0
 8003092:	629a      	str	r2, [r3, #40]	; 0x28
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1e5a      	subs	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f003 fe01 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	4b29      	ldr	r3, [pc, #164]	; (8003154 <xTaskIncrementTick+0x1e4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <xTaskIncrementTick+0x1e4>)
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030bc:	4926      	ldr	r1, [pc, #152]	; (8003158 <xTaskIncrementTick+0x1e8>)
 80030be:	4613      	mov	r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	3304      	adds	r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	3204      	adds	r2, #4
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	4a17      	ldr	r2, [pc, #92]	; (8003158 <xTaskIncrementTick+0x1e8>)
 80030fc:	441a      	add	r2, r3
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	615a      	str	r2, [r3, #20]
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003106:	4914      	ldr	r1, [pc, #80]	; (8003158 <xTaskIncrementTick+0x1e8>)
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	1c59      	adds	r1, r3, #1
 8003116:	4810      	ldr	r0, [pc, #64]	; (8003158 <xTaskIncrementTick+0x1e8>)
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4403      	add	r3, r0
 8003122:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003124:	e75f      	b.n	8002fe6 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <xTaskIncrementTick+0x1ec>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3301      	adds	r3, #1
 800312c:	4a0b      	ldr	r2, [pc, #44]	; (800315c <xTaskIncrementTick+0x1ec>)
 800312e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003132:	4618      	mov	r0, r3
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000228 	.word	0x20000228
 8003140:	20000204 	.word	0x20000204
 8003144:	200001b8 	.word	0x200001b8
 8003148:	200001bc 	.word	0x200001bc
 800314c:	20000218 	.word	0x20000218
 8003150:	20000220 	.word	0x20000220
 8003154:	20000208 	.word	0x20000208
 8003158:	2000012c 	.word	0x2000012c
 800315c:	20000210 	.word	0x20000210

08003160 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003166:	4b2d      	ldr	r3, [pc, #180]	; (800321c <vTaskSwitchContext+0xbc>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <vTaskSwitchContext+0xc0>)
 8003170:	2201      	movs	r2, #1
 8003172:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003174:	e04d      	b.n	8003212 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003176:	4b2a      	ldr	r3, [pc, #168]	; (8003220 <vTaskSwitchContext+0xc0>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800317c:	4b29      	ldr	r3, [pc, #164]	; (8003224 <vTaskSwitchContext+0xc4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800318a:	7afb      	ldrb	r3, [r7, #11]
 800318c:	f1c3 031f 	rsb	r3, r3, #31
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	4925      	ldr	r1, [pc, #148]	; (8003228 <vTaskSwitchContext+0xc8>)
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4613      	mov	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	f383 8811 	msr	BASEPRI, r3
 80031ae:	f3bf 8f6f 	isb	sy
 80031b2:	f3bf 8f4f 	dsb	sy
 80031b6:	607b      	str	r3, [r7, #4]
    }
 80031b8:	bf00      	nop
 80031ba:	e7fe      	b.n	80031ba <vTaskSwitchContext+0x5a>
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <vTaskSwitchContext+0xc8>)
 80031c8:	4413      	add	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	3308      	adds	r3, #8
 80031de:	429a      	cmp	r2, r3
 80031e0:	d104      	bne.n	80031ec <vTaskSwitchContext+0x8c>
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a0e      	ldr	r2, [pc, #56]	; (800322c <vTaskSwitchContext+0xcc>)
 80031f4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <vTaskSwitchContext+0xcc>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <vTaskSwitchContext+0xd0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d102      	bne.n	8003208 <vTaskSwitchContext+0xa8>
 8003202:	f003 fcb1 	bl	8006b68 <SEGGER_SYSVIEW_OnIdle>
}
 8003206:	e004      	b.n	8003212 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003208:	4b08      	ldr	r3, [pc, #32]	; (800322c <vTaskSwitchContext+0xcc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fd09 	bl	8006c24 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000228 	.word	0x20000228
 8003220:	20000214 	.word	0x20000214
 8003224:	20000208 	.word	0x20000208
 8003228:	2000012c 	.word	0x2000012c
 800322c:	20000128 	.word	0x20000128
 8003230:	20000224 	.word	0x20000224

08003234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10a      	bne.n	800325a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003248:	f383 8811 	msr	BASEPRI, r3
 800324c:	f3bf 8f6f 	isb	sy
 8003250:	f3bf 8f4f 	dsb	sy
 8003254:	60fb      	str	r3, [r7, #12]
    }
 8003256:	bf00      	nop
 8003258:	e7fe      	b.n	8003258 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800325a:	4b07      	ldr	r3, [pc, #28]	; (8003278 <vTaskPlaceOnEventList+0x44>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	3318      	adds	r3, #24
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff f80b 	bl	800227e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003268:	2101      	movs	r1, #1
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	f000 fa78 	bl	8003760 <prvAddCurrentTaskToDelayedList>
}
 8003270:	bf00      	nop
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	20000128 	.word	0x20000128

0800327c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800327c:	b580      	push	{r7, lr}
 800327e:	b086      	sub	sp, #24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10a      	bne.n	80032a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	613b      	str	r3, [r7, #16]
    }
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	61da      	str	r2, [r3, #28]
 80032b2:	4b15      	ldr	r3, [pc, #84]	; (8003308 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	6892      	ldr	r2, [r2, #8]
 80032ba:	621a      	str	r2, [r3, #32]
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	3218      	adds	r2, #24
 80032c6:	605a      	str	r2, [r3, #4]
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f103 0218 	add.w	r2, r3, #24
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <vTaskPlaceOnEventListRestricted+0x8c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80032ec:	f04f 33ff 	mov.w	r3, #4294967295
 80032f0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80032f2:	2024      	movs	r0, #36	; 0x24
 80032f4:	f002 ff38 	bl	8006168 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68b8      	ldr	r0, [r7, #8]
 80032fc:	f000 fa30 	bl	8003760 <prvAddCurrentTaskToDelayedList>
    }
 8003300:	bf00      	nop
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000128 	.word	0x20000128

0800330c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08a      	sub	sp, #40	; 0x28
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	60fb      	str	r3, [r7, #12]
    }
 8003334:	bf00      	nop
 8003336:	e7fe      	b.n	8003336 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	6a3a      	ldr	r2, [r7, #32]
 8003344:	6a12      	ldr	r2, [r2, #32]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	6a3a      	ldr	r2, [r7, #32]
 800334e:	69d2      	ldr	r2, [r2, #28]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	3318      	adds	r3, #24
 800335a:	429a      	cmp	r2, r3
 800335c:	d103      	bne.n	8003366 <xTaskRemoveFromEventList+0x5a>
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	2200      	movs	r2, #0
 800336a:	629a      	str	r2, [r3, #40]	; 0x28
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1e5a      	subs	r2, r3, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003376:	4b4b      	ldr	r3, [pc, #300]	; (80034a4 <xTaskRemoveFromEventList+0x198>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d162      	bne.n	8003444 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	6a3a      	ldr	r2, [r7, #32]
 800338a:	68d2      	ldr	r2, [r2, #12]
 800338c:	609a      	str	r2, [r3, #8]
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	6892      	ldr	r2, [r2, #8]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	3304      	adds	r3, #4
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d103      	bne.n	80033ac <xTaskRemoveFromEventList+0xa0>
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	2200      	movs	r2, #0
 80033b0:	615a      	str	r2, [r3, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	1e5a      	subs	r2, r3, #1
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 fc72 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	4b36      	ldr	r3, [pc, #216]	; (80034a8 <xTaskRemoveFromEventList+0x19c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <xTaskRemoveFromEventList+0x19c>)
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033da:	4934      	ldr	r1, [pc, #208]	; (80034ac <xTaskRemoveFromEventList+0x1a0>)
 80033dc:	4613      	mov	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	3304      	adds	r3, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	689a      	ldr	r2, [r3, #8]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	6a3a      	ldr	r2, [r7, #32]
 8003400:	3204      	adds	r2, #4
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	1d1a      	adds	r2, r3, #4
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <xTaskRemoveFromEventList+0x1a0>)
 800341a:	441a      	add	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	615a      	str	r2, [r3, #20]
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003424:	4921      	ldr	r1, [pc, #132]	; (80034ac <xTaskRemoveFromEventList+0x1a0>)
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	1c59      	adds	r1, r3, #1
 8003434:	481d      	ldr	r0, [pc, #116]	; (80034ac <xTaskRemoveFromEventList+0x1a0>)
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4403      	add	r3, r0
 8003440:	6019      	str	r1, [r3, #0]
 8003442:	e01b      	b.n	800347c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <xTaskRemoveFromEventList+0x1a4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	61da      	str	r2, [r3, #28]
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	6a3b      	ldr	r3, [r7, #32]
 8003456:	621a      	str	r2, [r3, #32]
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	6a3a      	ldr	r2, [r7, #32]
 800345e:	3218      	adds	r2, #24
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f103 0218 	add.w	r2, r3, #24
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <xTaskRemoveFromEventList+0x1a4>)
 8003470:	629a      	str	r2, [r3, #40]	; 0x28
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <xTaskRemoveFromEventList+0x1a4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <xTaskRemoveFromEventList+0x1a4>)
 800347a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <xTaskRemoveFromEventList+0x1a8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	429a      	cmp	r2, r3
 8003488:	d905      	bls.n	8003496 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <xTaskRemoveFromEventList+0x1ac>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e001      	b.n	800349a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003496:	2300      	movs	r3, #0
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	; 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000228 	.word	0x20000228
 80034a8:	20000208 	.word	0x20000208
 80034ac:	2000012c 	.word	0x2000012c
 80034b0:	200001c0 	.word	0x200001c0
 80034b4:	20000128 	.word	0x20000128
 80034b8:	20000214 	.word	0x20000214

080034bc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c4:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <vTaskInternalSetTimeOutState+0x24>)
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <vTaskInternalSetTimeOutState+0x28>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	605a      	str	r2, [r3, #4]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	20000218 	.word	0x20000218
 80034e4:	20000204 	.word	0x20000204

080034e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	613b      	str	r3, [r7, #16]
    }
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	60fb      	str	r3, [r7, #12]
    }
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800352a:	f000 fdcb 	bl	80040c4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800352e:	4b1f      	ldr	r3, [pc, #124]	; (80035ac <xTaskCheckForTimeOut+0xc4>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d102      	bne.n	800354e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
 800354c:	e026      	b.n	800359c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <xTaskCheckForTimeOut+0xc8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d00a      	beq.n	8003570 <xTaskCheckForTimeOut+0x88>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	429a      	cmp	r2, r3
 8003562:	d305      	bcc.n	8003570 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003564:	2301      	movs	r3, #1
 8003566:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e015      	b.n	800359c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	429a      	cmp	r2, r3
 8003578:	d20b      	bcs.n	8003592 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	1ad2      	subs	r2, r2, r3
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ff98 	bl	80034bc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800358c:	2300      	movs	r3, #0
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	e004      	b.n	800359c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800359c:	f000 fdc2 	bl	8004124 <vPortExitCritical>

    return xReturn;
 80035a0:	69fb      	ldr	r3, [r7, #28]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000204 	.word	0x20000204
 80035b0:	20000218 	.word	0x20000218

080035b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <vTaskMissedYield+0x14>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	20000214 	.word	0x20000214

080035cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80035d4:	f000 f84c 	bl	8003670 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <prvIdleTask+0x20>)
 80035da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80035e8:	e7f4      	b.n	80035d4 <prvIdleTask+0x8>
 80035ea:	bf00      	nop
 80035ec:	e000ed04 	.word	0xe000ed04

080035f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	e00c      	b.n	8003616 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4a12      	ldr	r2, [pc, #72]	; (8003650 <prvInitialiseTaskLists+0x60>)
 8003608:	4413      	add	r3, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f7fe fe0a 	bl	8002224 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3301      	adds	r3, #1
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b04      	cmp	r3, #4
 800361a:	d9ef      	bls.n	80035fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800361c:	480d      	ldr	r0, [pc, #52]	; (8003654 <prvInitialiseTaskLists+0x64>)
 800361e:	f7fe fe01 	bl	8002224 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <prvInitialiseTaskLists+0x68>)
 8003624:	f7fe fdfe 	bl	8002224 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003628:	480c      	ldr	r0, [pc, #48]	; (800365c <prvInitialiseTaskLists+0x6c>)
 800362a:	f7fe fdfb 	bl	8002224 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800362e:	480c      	ldr	r0, [pc, #48]	; (8003660 <prvInitialiseTaskLists+0x70>)
 8003630:	f7fe fdf8 	bl	8002224 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003634:	480b      	ldr	r0, [pc, #44]	; (8003664 <prvInitialiseTaskLists+0x74>)
 8003636:	f7fe fdf5 	bl	8002224 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800363a:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <prvInitialiseTaskLists+0x78>)
 800363c:	4a05      	ldr	r2, [pc, #20]	; (8003654 <prvInitialiseTaskLists+0x64>)
 800363e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <prvInitialiseTaskLists+0x7c>)
 8003642:	4a05      	ldr	r2, [pc, #20]	; (8003658 <prvInitialiseTaskLists+0x68>)
 8003644:	601a      	str	r2, [r3, #0]
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	2000012c 	.word	0x2000012c
 8003654:	20000190 	.word	0x20000190
 8003658:	200001a4 	.word	0x200001a4
 800365c:	200001c0 	.word	0x200001c0
 8003660:	200001d4 	.word	0x200001d4
 8003664:	200001ec 	.word	0x200001ec
 8003668:	200001b8 	.word	0x200001b8
 800366c:	200001bc 	.word	0x200001bc

08003670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003676:	e019      	b.n	80036ac <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003678:	f000 fd24 	bl	80040c4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367c:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <prvCheckTasksWaitingTermination+0x50>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	4618      	mov	r0, r3
 800368a:	f7fe fe31 	bl	80022f0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <prvCheckTasksWaitingTermination+0x54>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3b01      	subs	r3, #1
 8003694:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <prvCheckTasksWaitingTermination+0x54>)
 8003696:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003698:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <prvCheckTasksWaitingTermination+0x58>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <prvCheckTasksWaitingTermination+0x58>)
 80036a0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80036a2:	f000 fd3f 	bl	8004124 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f810 	bl	80036cc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ac:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <prvCheckTasksWaitingTermination+0x58>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1e1      	bne.n	8003678 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200001d4 	.word	0x200001d4
 80036c4:	20000200 	.word	0x20000200
 80036c8:	200001e8 	.word	0x200001e8

080036cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fed9 	bl	8004490 <vPortFree>
            vPortFree( pxTCB );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fed6 	bl	8004490 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80036e4:	bf00      	nop
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036f0:	4b0a      	ldr	r3, [pc, #40]	; (800371c <prvResetNextTaskUnblockTime+0x30>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d104      	bne.n	8003704 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80036fa:	4b09      	ldr	r3, [pc, #36]	; (8003720 <prvResetNextTaskUnblockTime+0x34>)
 80036fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003700:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003702:	e005      	b.n	8003710 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <prvResetNextTaskUnblockTime+0x30>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a04      	ldr	r2, [pc, #16]	; (8003720 <prvResetNextTaskUnblockTime+0x34>)
 800370e:	6013      	str	r3, [r2, #0]
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	200001b8 	.word	0x200001b8
 8003720:	20000220 	.word	0x20000220

08003724 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800372a:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <xTaskGetSchedulerState+0x34>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d102      	bne.n	8003738 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003732:	2301      	movs	r3, #1
 8003734:	607b      	str	r3, [r7, #4]
 8003736:	e008      	b.n	800374a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003738:	4b08      	ldr	r3, [pc, #32]	; (800375c <xTaskGetSchedulerState+0x38>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003740:	2302      	movs	r3, #2
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	e001      	b.n	800374a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800374a:	687b      	ldr	r3, [r7, #4]
    }
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	2000020c 	.word	0x2000020c
 800375c:	20000228 	.word	0x20000228

08003760 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800376a:	4b36      	ldr	r3, [pc, #216]	; (8003844 <prvAddCurrentTaskToDelayedList+0xe4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3304      	adds	r3, #4
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fdba 	bl	80022f0 <uxListRemove>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	2201      	movs	r2, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	4b2e      	ldr	r3, [pc, #184]	; (800384c <prvAddCurrentTaskToDelayedList+0xec>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4013      	ands	r3, r2
 8003796:	4a2d      	ldr	r2, [pc, #180]	; (800384c <prvAddCurrentTaskToDelayedList+0xec>)
 8003798:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a0:	d124      	bne.n	80037ec <prvAddCurrentTaskToDelayedList+0x8c>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d021      	beq.n	80037ec <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	4b24      	ldr	r3, [pc, #144]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	3204      	adds	r2, #4
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1d1a      	adds	r2, r3, #4
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1d      	ldr	r2, [pc, #116]	; (8003850 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037dc:	615a      	str	r2, [r3, #20]
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	4a1a      	ldr	r2, [pc, #104]	; (8003850 <prvAddCurrentTaskToDelayedList+0xf0>)
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037ea:	e026      	b.n	800383a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	429a      	cmp	r2, r3
 8003802:	d209      	bcs.n	8003818 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003804:	4b13      	ldr	r3, [pc, #76]	; (8003854 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe fd34 	bl	800227e <vListInsert>
}
 8003816:	e010      	b.n	800383a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <prvAddCurrentTaskToDelayedList+0xf8>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <prvAddCurrentTaskToDelayedList+0xe8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3304      	adds	r3, #4
 8003822:	4619      	mov	r1, r3
 8003824:	4610      	mov	r0, r2
 8003826:	f7fe fd2a 	bl	800227e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800382a:	4b0c      	ldr	r3, [pc, #48]	; (800385c <prvAddCurrentTaskToDelayedList+0xfc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d202      	bcs.n	800383a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003834:	4a09      	ldr	r2, [pc, #36]	; (800385c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6013      	str	r3, [r2, #0]
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	20000204 	.word	0x20000204
 8003848:	20000128 	.word	0x20000128
 800384c:	20000208 	.word	0x20000208
 8003850:	200001ec 	.word	0x200001ec
 8003854:	200001bc 	.word	0x200001bc
 8003858:	200001b8 	.word	0x200001b8
 800385c:	20000220 	.word	0x20000220

08003860 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003866:	2300      	movs	r3, #0
 8003868:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800386a:	f000 fa47 	bl	8003cfc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <xTimerCreateTimerTask+0x54>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00b      	beq.n	800388e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003876:	4b10      	ldr	r3, [pc, #64]	; (80038b8 <xTimerCreateTimerTask+0x58>)
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	2302      	movs	r3, #2
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003884:	490d      	ldr	r1, [pc, #52]	; (80038bc <xTimerCreateTimerTask+0x5c>)
 8003886:	480e      	ldr	r0, [pc, #56]	; (80038c0 <xTimerCreateTimerTask+0x60>)
 8003888:	f7ff f874 	bl	8002974 <xTaskCreate>
 800388c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
 80038a4:	603b      	str	r3, [r7, #0]
    }
 80038a6:	bf00      	nop
 80038a8:	e7fe      	b.n	80038a8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038aa:	687b      	ldr	r3, [r7, #4]
    }
 80038ac:	4618      	mov	r0, r3
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	2000025c 	.word	0x2000025c
 80038b8:	20000260 	.word	0x20000260
 80038bc:	08008250 	.word	0x08008250
 80038c0:	08003969 	.word	0x08003969

080038c4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038d0:	e008      	b.n	80038e4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	699a      	ldr	r2, [r3, #24]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	18d1      	adds	r1, r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f8dd 	bl	8003ab0 <prvInsertTimerInActiveList>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ea      	bne.n	80038d2 <prvReloadTimer+0xe>
        }
    }
 80038fc:	bf00      	nop
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
	...

08003908 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <prvProcessExpiredTimer+0x5c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fce5 	bl	80022f0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7ff ffc3 	bl	80038c4 <prvReloadTimer>
 800393e:	e008      	b.n	8003952 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003946:	f023 0301 	bic.w	r3, r3, #1
 800394a:	b2da      	uxtb	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	4798      	blx	r3
    }
 800395a:	bf00      	nop
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000254 	.word	0x20000254

08003968 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4618      	mov	r0, r3
 8003976:	f000 f857 	bl	8003a28 <prvGetNextExpireTime>
 800397a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4619      	mov	r1, r3
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f803 	bl	800398c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003986:	f000 f8d5 	bl	8003b34 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800398a:	e7f1      	b.n	8003970 <prvTimerTask+0x8>

0800398c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003996:	f7ff f9c9 	bl	8002d2c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800399a:	f107 0308 	add.w	r3, r7, #8
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f866 	bl	8003a70 <prvSampleTimeNow>
 80039a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d130      	bne.n	8003a0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <prvProcessTimerOrBlockTask+0x3c>
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d806      	bhi.n	80039c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80039ba:	f7ff f9c5 	bl	8002d48 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80039be:	68f9      	ldr	r1, [r7, #12]
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7ff ffa1 	bl	8003908 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80039c6:	e024      	b.n	8003a12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <prvProcessTimerOrBlockTask+0x90>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <prvProcessTimerOrBlockTask+0x50>
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <prvProcessTimerOrBlockTask+0x52>
 80039dc:	2300      	movs	r3, #0
 80039de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <prvProcessTimerOrBlockTask+0x94>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	f7fe ff8d 	bl	800290c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80039f2:	f7ff f9a9 	bl	8002d48 <xTaskResumeAll>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10a      	bne.n	8003a12 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <prvProcessTimerOrBlockTask+0x98>)
 80039fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	f3bf 8f6f 	isb	sy
    }
 8003a0c:	e001      	b.n	8003a12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a0e:	f7ff f99b 	bl	8002d48 <xTaskResumeAll>
    }
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000258 	.word	0x20000258
 8003a20:	2000025c 	.word	0x2000025c
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <prvGetNextExpireTime+0x44>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <prvGetNextExpireTime+0x16>
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	e000      	b.n	8003a40 <prvGetNextExpireTime+0x18>
 8003a3e:	2200      	movs	r2, #0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d105      	bne.n	8003a58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <prvGetNextExpireTime+0x44>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e001      	b.n	8003a5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
    }
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000254 	.word	0x20000254

08003a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003a78:	f7ff fa58 	bl	8002f2c <xTaskGetTickCount>
 8003a7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <prvSampleTimeNow+0x3c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d205      	bcs.n	8003a94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003a88:	f000 f912 	bl	8003cb0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e002      	b.n	8003a9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003a9a:	4a04      	ldr	r2, [pc, #16]	; (8003aac <prvSampleTimeNow+0x3c>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    }
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20000264 	.word	0x20000264

08003ab0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d812      	bhi.n	8003afc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e01b      	b.n	8003b22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <prvInsertTimerInActiveList+0x7c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7fe fbc2 	bl	800227e <vListInsert>
 8003afa:	e012      	b.n	8003b22 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d206      	bcs.n	8003b12 <prvInsertTimerInActiveList+0x62>
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d302      	bcc.n	8003b12 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e007      	b.n	8003b22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <prvInsertTimerInActiveList+0x80>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	f7fe fbae 	bl	800227e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003b22:	697b      	ldr	r3, [r7, #20]
    }
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000258 	.word	0x20000258
 8003b30:	20000254 	.word	0x20000254

08003b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b3a:	e0a6      	b.n	8003c8a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f2c0 80a2 	blt.w	8003c88 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fbcb 	bl	80022f0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff ff87 	bl	8003a70 <prvSampleTimeNow>
 8003b62:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	f200 808e 	bhi.w	8003c8a <prvProcessReceivedCommands+0x156>
 8003b6e:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <prvProcessReceivedCommands+0x40>)
 8003b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b74:	08003b99 	.word	0x08003b99
 8003b78:	08003b99 	.word	0x08003b99
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003c15 	.word	0x08003c15
 8003b84:	08003c5f 	.word	0x08003c5f
 8003b88:	08003b99 	.word	0x08003b99
 8003b8c:	08003b99 	.word	0x08003b99
 8003b90:	08003c01 	.word	0x08003c01
 8003b94:	08003c15 	.word	0x08003c15
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	18d1      	adds	r1, r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	69f8      	ldr	r0, [r7, #28]
 8003bb8:	f7ff ff7a 	bl	8003ab0 <prvInsertTimerInActiveList>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d063      	beq.n	8003c8a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d009      	beq.n	8003be4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	69f8      	ldr	r0, [r7, #28]
 8003bde:	f7ff fe71 	bl	80038c4 <prvReloadTimer>
 8003be2:	e008      	b.n	8003bf6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	69f8      	ldr	r0, [r7, #28]
 8003bfc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003bfe:	e044      	b.n	8003c8a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003c12:	e03a      	b.n	8003c8a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c1a:	f043 0301 	orr.w	r3, r3, #1
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	617b      	str	r3, [r7, #20]
    }
 8003c46:	bf00      	nop
 8003c48:	e7fe      	b.n	8003c48 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	18d1      	adds	r1, r2, r3
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	69f8      	ldr	r0, [r7, #28]
 8003c58:	f7ff ff2a 	bl	8003ab0 <prvInsertTimerInActiveList>
                        break;
 8003c5c:	e015      	b.n	8003c8a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003c6c:	69f8      	ldr	r0, [r7, #28]
 8003c6e:	f000 fc0f 	bl	8004490 <vPortFree>
 8003c72:	e00a      	b.n	8003c8a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c7a:	f023 0301 	bic.w	r3, r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003c86:	e000      	b.n	8003c8a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003c88:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <prvProcessReceivedCommands+0x178>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f107 0108 	add.w	r1, r7, #8
 8003c92:	2200      	movs	r2, #0
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fe fc4f 	bl	8002538 <xQueueReceive>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f47f af4d 	bne.w	8003b3c <prvProcessReceivedCommands+0x8>
        }
    }
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2000025c 	.word	0x2000025c

08003cb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003cb6:	e009      	b.n	8003ccc <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	; (8003cf4 <prvSwitchTimerLists+0x44>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc6:	6838      	ldr	r0, [r7, #0]
 8003cc8:	f7ff fe1e 	bl	8003908 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <prvSwitchTimerLists+0x44>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003cd6:	4b07      	ldr	r3, [pc, #28]	; (8003cf4 <prvSwitchTimerLists+0x44>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <prvSwitchTimerLists+0x48>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <prvSwitchTimerLists+0x44>)
 8003ce2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ce4:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <prvSwitchTimerLists+0x48>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
    }
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000254 	.word	0x20000254
 8003cf8:	20000258 	.word	0x20000258

08003cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003d00:	f000 f9e0 	bl	80040c4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11d      	bne.n	8003d48 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003d0c:	4811      	ldr	r0, [pc, #68]	; (8003d54 <prvCheckForValidListAndQueue+0x58>)
 8003d0e:	f7fe fa89 	bl	8002224 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003d12:	4811      	ldr	r0, [pc, #68]	; (8003d58 <prvCheckForValidListAndQueue+0x5c>)
 8003d14:	f7fe fa86 	bl	8002224 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <prvCheckForValidListAndQueue+0x60>)
 8003d1a:	4a0e      	ldr	r2, [pc, #56]	; (8003d54 <prvCheckForValidListAndQueue+0x58>)
 8003d1c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <prvCheckForValidListAndQueue+0x64>)
 8003d20:	4a0d      	ldr	r2, [pc, #52]	; (8003d58 <prvCheckForValidListAndQueue+0x5c>)
 8003d22:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003d24:	2200      	movs	r2, #0
 8003d26:	210c      	movs	r1, #12
 8003d28:	200a      	movs	r0, #10
 8003d2a:	f7fe fb8d 	bl	8002448 <xQueueGenericCreate>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d32:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <prvCheckForValidListAndQueue+0x54>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4908      	ldr	r1, [pc, #32]	; (8003d64 <prvCheckForValidListAndQueue+0x68>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe fd8c 	bl	8002860 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003d48:	f000 f9ec 	bl	8004124 <vPortExitCritical>
    }
 8003d4c:	bf00      	nop
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	2000025c 	.word	0x2000025c
 8003d54:	2000022c 	.word	0x2000022c
 8003d58:	20000240 	.word	0x20000240
 8003d5c:	20000254 	.word	0x20000254
 8003d60:	20000258 	.word	0x20000258
 8003d64:	08008258 	.word	0x08008258

08003d68 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b04      	subs	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3b04      	subs	r3, #4
 8003d86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	f023 0201 	bic.w	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3b04      	subs	r3, #4
 8003d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <pxPortInitialiseStack+0x64>)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b14      	subs	r3, #20
 8003da2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b04      	subs	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f06f 0202 	mvn.w	r2, #2
 8003db6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3b20      	subs	r3, #32
 8003dbc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	08003dd1 	.word	0x08003dd1

08003dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003dda:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <prvTaskExitError+0x54>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d00a      	beq.n	8003dfa <prvTaskExitError+0x2a>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	60fb      	str	r3, [r7, #12]
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <prvTaskExitError+0x28>
        __asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	60bb      	str	r3, [r7, #8]
    }
 8003e0c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003e0e:	bf00      	nop
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0fc      	beq.n	8003e10 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	20000010 	.word	0x20000010
	...

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	4770      	bx	lr
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst2>:
 8003e50:	20000128 	.word	0x20000128
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003e58:	4808      	ldr	r0, [pc, #32]	; (8003e7c <prvPortStartFirstTask+0x24>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8814 	msr	CONTROL, r0
 8003e6a:	b662      	cpsie	i
 8003e6c:	b661      	cpsie	f
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	df00      	svc	0
 8003e78:	bf00      	nop
 8003e7a:	0000      	.short	0x0000
 8003e7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop

08003e84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e8a:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <xPortStartScheduler+0x120>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a46      	ldr	r2, [pc, #280]	; (8003fa8 <xPortStartScheduler+0x124>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10a      	bne.n	8003eaa <xPortStartScheduler+0x26>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	613b      	str	r3, [r7, #16]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <xPortStartScheduler+0x120>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a3f      	ldr	r2, [pc, #252]	; (8003fac <xPortStartScheduler+0x128>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d10a      	bne.n	8003eca <xPortStartScheduler+0x46>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60fb      	str	r3, [r7, #12]
    }
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eca:	4b39      	ldr	r3, [pc, #228]	; (8003fb0 <xPortStartScheduler+0x12c>)
 8003ecc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	22ff      	movs	r2, #255	; 0xff
 8003eda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <xPortStartScheduler+0x130>)
 8003ef0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ef8:	e009      	b.n	8003f0e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	4a2d      	ldr	r2, [pc, #180]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f02:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d0ef      	beq.n	8003efa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f1a:	4b27      	ldr	r3, [pc, #156]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f1c3 0307 	rsb	r3, r3, #7
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00a      	beq.n	8003f3c <xPortStartScheduler+0xb8>
        __asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60bb      	str	r3, [r7, #8]
    }
 8003f38:	bf00      	nop
 8003f3a:	e7fe      	b.n	8003f3a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	021b      	lsls	r3, r3, #8
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f44:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f4e:	4a1a      	ldr	r2, [pc, #104]	; (8003fb8 <xPortStartScheduler+0x134>)
 8003f50:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a17      	ldr	r2, [pc, #92]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003f66:	4b15      	ldr	r3, [pc, #84]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <xPortStartScheduler+0x138>)
 8003f6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003f72:	f000 f963 	bl	800423c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <xPortStartScheduler+0x13c>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003f7c:	f000 f982 	bl	8004284 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f80:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <xPortStartScheduler+0x140>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <xPortStartScheduler+0x140>)
 8003f86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f8c:	f7ff ff64 	bl	8003e58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f90:	f7ff f8e6 	bl	8003160 <vTaskSwitchContext>
    prvTaskExitError();
 8003f94:	f7ff ff1c 	bl	8003dd0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	e000ed00 	.word	0xe000ed00
 8003fa8:	410fc271 	.word	0x410fc271
 8003fac:	410fc270 	.word	0x410fc270
 8003fb0:	e000e400 	.word	0xe000e400
 8003fb4:	20000268 	.word	0x20000268
 8003fb8:	2000026c 	.word	0x2000026c
 8003fbc:	e000ed20 	.word	0xe000ed20
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	e000ef34 	.word	0xe000ef34

08003fc8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <vInitPrioGroupValue+0xe4>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a37      	ldr	r2, [pc, #220]	; (80040b0 <vInitPrioGroupValue+0xe8>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d10a      	bne.n	8003fee <vInitPrioGroupValue+0x26>
        __asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	613b      	str	r3, [r7, #16]
    }
 8003fea:	bf00      	nop
 8003fec:	e7fe      	b.n	8003fec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <vInitPrioGroupValue+0xe4>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a30      	ldr	r2, [pc, #192]	; (80040b4 <vInitPrioGroupValue+0xec>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10a      	bne.n	800400e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60fb      	str	r3, [r7, #12]
    }
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800400e:	4b2a      	ldr	r3, [pc, #168]	; (80040b8 <vInitPrioGroupValue+0xf0>)
 8004010:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	22ff      	movs	r2, #255	; 0xff
 800401e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004028:	78fb      	ldrb	r3, [r7, #3]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004030:	b2da      	uxtb	r2, r3
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <vInitPrioGroupValue+0xf4>)
 8004034:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004038:	2207      	movs	r2, #7
 800403a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800403c:	e009      	b.n	8004052 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3b01      	subs	r3, #1
 8004044:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004046:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004052:	78fb      	ldrb	r3, [r7, #3]
 8004054:	b2db      	uxtb	r3, r3
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b80      	cmp	r3, #128	; 0x80
 800405c:	d0ef      	beq.n	800403e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	d00a      	beq.n	8004080 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800406a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406e:	f383 8811 	msr	BASEPRI, r3
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	60bb      	str	r3, [r7, #8]
    }
 800407c:	bf00      	nop
 800407e:	e7fe      	b.n	800407e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	021b      	lsls	r3, r3, #8
 8004086:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004088:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004092:	4a0b      	ldr	r2, [pc, #44]	; (80040c0 <vInitPrioGroupValue+0xf8>)
 8004094:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	e000ed00 	.word	0xe000ed00
 80040b0:	410fc271 	.word	0x410fc271
 80040b4:	410fc270 	.word	0x410fc270
 80040b8:	e000e400 	.word	0xe000e400
 80040bc:	20000268 	.word	0x20000268
 80040c0:	2000026c 	.word	0x2000026c

080040c4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
        __asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	607b      	str	r3, [r7, #4]
    }
 80040dc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <vPortEnterCritical+0x58>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3301      	adds	r3, #1
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <vPortEnterCritical+0x58>)
 80040e6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040e8:	4b0c      	ldr	r3, [pc, #48]	; (800411c <vPortEnterCritical+0x58>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10f      	bne.n	8004110 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <vPortEnterCritical+0x5c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <vPortEnterCritical+0x4c>
        __asm volatile
 80040fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fe:	f383 8811 	msr	BASEPRI, r3
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	f3bf 8f4f 	dsb	sy
 800410a:	603b      	str	r3, [r7, #0]
    }
 800410c:	bf00      	nop
 800410e:	e7fe      	b.n	800410e <vPortEnterCritical+0x4a>
    }
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	20000010 	.word	0x20000010
 8004120:	e000ed04 	.word	0xe000ed04

08004124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <vPortExitCritical+0x50>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <vPortExitCritical+0x24>
        __asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	607b      	str	r3, [r7, #4]
    }
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <vPortExitCritical+0x50>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	3b01      	subs	r3, #1
 800414e:	4a09      	ldr	r2, [pc, #36]	; (8004174 <vPortExitCritical+0x50>)
 8004150:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <vPortExitCritical+0x50>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <vPortExitCritical+0x42>
 800415a:	2300      	movs	r3, #0
 800415c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004164:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	20000010 	.word	0x20000010
	...

08004180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004180:	f3ef 8009 	mrs	r0, PSP
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <pxCurrentTCBConst>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	f01e 0f10 	tst.w	lr, #16
 8004190:	bf08      	it	eq
 8004192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419a:	6010      	str	r0, [r2, #0]
 800419c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041a4:	f380 8811 	msr	BASEPRI, r0
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f7fe ffd6 	bl	8003160 <vTaskSwitchContext>
 80041b4:	f04f 0000 	mov.w	r0, #0
 80041b8:	f380 8811 	msr	BASEPRI, r0
 80041bc:	bc09      	pop	{r0, r3}
 80041be:	6819      	ldr	r1, [r3, #0]
 80041c0:	6808      	ldr	r0, [r1, #0]
 80041c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c6:	f01e 0f10 	tst.w	lr, #16
 80041ca:	bf08      	it	eq
 80041cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041d0:	f380 8809 	msr	PSP, r0
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	f3af 8000 	nop.w

080041e0 <pxCurrentTCBConst>:
 80041e0:	20000128 	.word	0x20000128
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop

080041e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
        __asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
    }
 8004200:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004202:	f002 fc37 	bl	8006a74 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004206:	f7fe feb3 	bl	8002f70 <xTaskIncrementTick>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d006      	beq.n	800421e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004210:	f002 fc8e 	bl	8006b30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004214:	4b08      	ldr	r3, [pc, #32]	; (8004238 <SysTick_Handler+0x50>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	e001      	b.n	8004222 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800421e:	f002 fc6b 	bl	8006af8 <SEGGER_SYSVIEW_RecordExitISR>
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f383 8811 	msr	BASEPRI, r3
    }
 800422c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800422e:	bf00      	nop
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <vPortSetupTimerInterrupt+0x38>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <vPortSetupTimerInterrupt+0x3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <vPortSetupTimerInterrupt+0x40>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <vPortSetupTimerInterrupt+0x44>)
 800425a:	3b01      	subs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000e010 	.word	0xe000e010
 8004274:	e000e018 	.word	0xe000e018
 8004278:	20000000 	.word	0x20000000
 800427c:	10624dd3 	.word	0x10624dd3
 8004280:	e000e014 	.word	0xe000e014

08004284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004294 <vPortEnableVFP+0x10>
 8004288:	6801      	ldr	r1, [r0, #0]
 800428a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800428e:	6001      	str	r1, [r0, #0]
 8004290:	4770      	bx	lr
 8004292:	0000      	.short	0x0000
 8004294:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop

0800429c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80042a2:	f3ef 8305 	mrs	r3, IPSR
 80042a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d914      	bls.n	80042d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ae:	4a17      	ldr	r2, [pc, #92]	; (800430c <vPortValidateInterruptPriority+0x70>)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <vPortValidateInterruptPriority+0x74>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	7afa      	ldrb	r2, [r7, #11]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20a      	bcs.n	80042d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
    }
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <vPortValidateInterruptPriority+0x78>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <vPortValidateInterruptPriority+0x7c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d90a      	bls.n	80042fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	603b      	str	r3, [r7, #0]
    }
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <vPortValidateInterruptPriority+0x60>
    }
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e3f0 	.word	0xe000e3f0
 8004310:	20000268 	.word	0x20000268
 8004314:	e000ed0c 	.word	0xe000ed0c
 8004318:	2000026c 	.word	0x2000026c

0800431c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004328:	f7fe fd00 	bl	8002d2c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800432c:	4b53      	ldr	r3, [pc, #332]	; (800447c <pvPortMalloc+0x160>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004334:	f000 f908 	bl	8004548 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d012      	beq.n	8004364 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800433e:	2208      	movs	r2, #8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	3308      	adds	r3, #8
 800434a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	43db      	mvns	r3, r3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d804      	bhi.n	8004360 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	607b      	str	r3, [r7, #4]
 800435e:	e001      	b.n	8004364 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db70      	blt.n	800444c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d06d      	beq.n	800444c <pvPortMalloc+0x130>
 8004370:	4b43      	ldr	r3, [pc, #268]	; (8004480 <pvPortMalloc+0x164>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d868      	bhi.n	800444c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <pvPortMalloc+0x168>)
 800437c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800437e:	4b41      	ldr	r3, [pc, #260]	; (8004484 <pvPortMalloc+0x168>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004384:	e004      	b.n	8004390 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	429a      	cmp	r2, r3
 8004398:	d903      	bls.n	80043a2 <pvPortMalloc+0x86>
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f1      	bne.n	8004386 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043a2:	4b36      	ldr	r3, [pc, #216]	; (800447c <pvPortMalloc+0x160>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d04f      	beq.n	800444c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2208      	movs	r2, #8
 80043b2:	4413      	add	r3, r2
 80043b4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	1ad2      	subs	r2, r2, r3
 80043c6:	2308      	movs	r3, #8
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d91f      	bls.n	800440e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00a      	beq.n	80043f6 <pvPortMalloc+0xda>
        __asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	613b      	str	r3, [r7, #16]
    }
 80043f2:	bf00      	nop
 80043f4:	e7fe      	b.n	80043f4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	685a      	ldr	r2, [r3, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004408:	6978      	ldr	r0, [r7, #20]
 800440a:	f000 f8f9 	bl	8004600 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800440e:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <pvPortMalloc+0x164>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <pvPortMalloc+0x164>)
 800441a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800441c:	4b18      	ldr	r3, [pc, #96]	; (8004480 <pvPortMalloc+0x164>)
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <pvPortMalloc+0x16c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d203      	bcs.n	8004430 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004428:	4b15      	ldr	r3, [pc, #84]	; (8004480 <pvPortMalloc+0x164>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a16      	ldr	r2, [pc, #88]	; (8004488 <pvPortMalloc+0x16c>)
 800442e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004442:	4b12      	ldr	r3, [pc, #72]	; (800448c <pvPortMalloc+0x170>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	4a10      	ldr	r2, [pc, #64]	; (800448c <pvPortMalloc+0x170>)
 800444a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800444c:	f7fe fc7c 	bl	8002d48 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <pvPortMalloc+0x154>
        __asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	60fb      	str	r3, [r7, #12]
    }
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <pvPortMalloc+0x152>
    return pvReturn;
 8004470:	69fb      	ldr	r3, [r7, #28]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3728      	adds	r7, #40	; 0x28
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20012e78 	.word	0x20012e78
 8004480:	20012e7c 	.word	0x20012e7c
 8004484:	20012e70 	.word	0x20012e70
 8004488:	20012e80 	.word	0x20012e80
 800448c:	20012e84 	.word	0x20012e84

08004490 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d049      	beq.n	8004536 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044a2:	2308      	movs	r3, #8
 80044a4:	425b      	negs	r3, r3
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	db0a      	blt.n	80044ce <vPortFree+0x3e>
        __asm volatile
 80044b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044bc:	f383 8811 	msr	BASEPRI, r3
 80044c0:	f3bf 8f6f 	isb	sy
 80044c4:	f3bf 8f4f 	dsb	sy
 80044c8:	60fb      	str	r3, [r7, #12]
    }
 80044ca:	bf00      	nop
 80044cc:	e7fe      	b.n	80044cc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <vPortFree+0x5c>
        __asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60bb      	str	r3, [r7, #8]
    }
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	0fdb      	lsrs	r3, r3, #31
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01c      	beq.n	8004536 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d118      	bne.n	8004536 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004510:	f7fe fc0c 	bl	8002d2c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	4b09      	ldr	r3, [pc, #36]	; (8004540 <vPortFree+0xb0>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4413      	add	r3, r2
 800451e:	4a08      	ldr	r2, [pc, #32]	; (8004540 <vPortFree+0xb0>)
 8004520:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004522:	6938      	ldr	r0, [r7, #16]
 8004524:	f000 f86c 	bl	8004600 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <vPortFree+0xb4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a05      	ldr	r2, [pc, #20]	; (8004544 <vPortFree+0xb4>)
 8004530:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004532:	f7fe fc09 	bl	8002d48 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20012e7c 	.word	0x20012e7c
 8004544:	20012e88 	.word	0x20012e88

08004548 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800454e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004552:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <prvHeapInit+0xa4>)
 8004556:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00c      	beq.n	800457c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3307      	adds	r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0307 	bic.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	4a1d      	ldr	r2, [pc, #116]	; (80045ec <prvHeapInit+0xa4>)
 8004578:	4413      	add	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004580:	4a1b      	ldr	r2, [pc, #108]	; (80045f0 <prvHeapInit+0xa8>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <prvHeapInit+0xa8>)
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004594:	2208      	movs	r2, #8
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <prvHeapInit+0xac>)
 80045a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <prvHeapInit+0xac>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <prvHeapInit+0xac>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	1ad2      	subs	r2, r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045c8:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <prvHeapInit+0xac>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <prvHeapInit+0xb0>)
 80045d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	4a07      	ldr	r2, [pc, #28]	; (80045fc <prvHeapInit+0xb4>)
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000270 	.word	0x20000270
 80045f0:	20012e70 	.word	0x20012e70
 80045f4:	20012e78 	.word	0x20012e78
 80045f8:	20012e80 	.word	0x20012e80
 80045fc:	20012e7c 	.word	0x20012e7c

08004600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <prvInsertBlockIntoFreeList+0xac>)
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	e002      	b.n	8004614 <prvInsertBlockIntoFreeList+0x14>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	d8f7      	bhi.n	800460e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4413      	add	r3, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d108      	bne.n	8004642 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	441a      	add	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d118      	bne.n	8004688 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4b15      	ldr	r3, [pc, #84]	; (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d00d      	beq.n	800467e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e008      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <prvInsertBlockIntoFreeList+0xb0>)
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e003      	b.n	8004690 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	429a      	cmp	r2, r3
 8004696:	d002      	beq.n	800469e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20012e70 	.word	0x20012e70
 80046b0:	20012e78 	.word	0x20012e78

080046b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80046b8:	4803      	ldr	r0, [pc, #12]	; (80046c8 <_cbSendSystemDesc+0x14>)
 80046ba:	f002 f985 	bl	80069c8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80046be:	4803      	ldr	r0, [pc, #12]	; (80046cc <_cbSendSystemDesc+0x18>)
 80046c0:	f002 f982 	bl	80069c8 <SEGGER_SYSVIEW_SendSysDesc>
}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	08008260 	.word	0x08008260
 80046cc:	0800829c 	.word	0x0800829c

080046d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80046da:	6819      	ldr	r1, [r3, #0]
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80046de:	4a06      	ldr	r2, [pc, #24]	; (80046f8 <SEGGER_SYSVIEW_Conf+0x28>)
 80046e0:	f001 fcee 	bl	80060c0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80046e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80046e8:	f001 fd2e 	bl	8006148 <SEGGER_SYSVIEW_SetRAMBase>
}
 80046ec:	bf00      	nop
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000000 	.word	0x20000000
 80046f4:	080046b5 	.word	0x080046b5
 80046f8:	08008338 	.word	0x08008338

080046fc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80046fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046fe:	b085      	sub	sp, #20
 8004700:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	e033      	b.n	8004770 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004708:	491e      	ldr	r1, [pc, #120]	; (8004784 <_cbSendTaskList+0x88>)
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	491a      	ldr	r1, [pc, #104]	; (8004784 <_cbSendTaskList+0x88>)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	3304      	adds	r3, #4
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	4c16      	ldr	r4, [pc, #88]	; (8004784 <_cbSendTaskList+0x88>)
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4423      	add	r3, r4
 8004738:	3308      	adds	r3, #8
 800473a:	681c      	ldr	r4, [r3, #0]
 800473c:	4d11      	ldr	r5, [pc, #68]	; (8004784 <_cbSendTaskList+0x88>)
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	442b      	add	r3, r5
 800474a:	330c      	adds	r3, #12
 800474c:	681d      	ldr	r5, [r3, #0]
 800474e:	4e0d      	ldr	r6, [pc, #52]	; (8004784 <_cbSendTaskList+0x88>)
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4433      	add	r3, r6
 800475c:	3310      	adds	r3, #16
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	462b      	mov	r3, r5
 8004764:	4622      	mov	r2, r4
 8004766:	f000 f8bd 	bl	80048e4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3301      	adds	r3, #1
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <_cbSendTaskList+0x8c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	429a      	cmp	r2, r3
 8004778:	d3c6      	bcc.n	8004708 <_cbSendTaskList+0xc>
  }
}
 800477a:	bf00      	nop
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004784:	20012e8c 	.word	0x20012e8c
 8004788:	20012f2c 	.word	0x20012f2c

0800478c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800478c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004790:	b082      	sub	sp, #8
 8004792:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004794:	f7fe fbda 	bl	8002f4c <xTaskGetTickCountFromISR>
 8004798:	4603      	mov	r3, r0
 800479a:	2200      	movs	r2, #0
 800479c:	469a      	mov	sl, r3
 800479e:	4693      	mov	fp, r2
 80047a0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80047a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	f04f 0a00 	mov.w	sl, #0
 80047b0:	f04f 0b00 	mov.w	fp, #0
 80047b4:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80047b8:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80047bc:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80047c0:	4652      	mov	r2, sl
 80047c2:	465b      	mov	r3, fp
 80047c4:	1a14      	subs	r4, r2, r0
 80047c6:	eb63 0501 	sbc.w	r5, r3, r1
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	00ab      	lsls	r3, r5, #2
 80047d4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80047d8:	00a2      	lsls	r2, r4, #2
 80047da:	4614      	mov	r4, r2
 80047dc:	461d      	mov	r5, r3
 80047de:	eb14 0800 	adds.w	r8, r4, r0
 80047e2:	eb45 0901 	adc.w	r9, r5, r1
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047fa:	4690      	mov	r8, r2
 80047fc:	4699      	mov	r9, r3
 80047fe:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004802:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004814 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b086      	sub	sp, #24
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004822:	2205      	movs	r2, #5
 8004824:	492b      	ldr	r1, [pc, #172]	; (80048d4 <SYSVIEW_AddTask+0xc0>)
 8004826:	68b8      	ldr	r0, [r7, #8]
 8004828:	f002 fc4a 	bl	80070c0 <memcmp>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d04b      	beq.n	80048ca <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004832:	4b29      	ldr	r3, [pc, #164]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d903      	bls.n	8004842 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800483a:	4828      	ldr	r0, [pc, #160]	; (80048dc <SYSVIEW_AddTask+0xc8>)
 800483c:	f002 fb80 	bl	8006f40 <SEGGER_SYSVIEW_Warn>
    return;
 8004840:	e044      	b.n	80048cc <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004842:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4926      	ldr	r1, [pc, #152]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	4921      	ldr	r1, [pc, #132]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	3304      	adds	r3, #4
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800486c:	4b1a      	ldr	r3, [pc, #104]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	491b      	ldr	r1, [pc, #108]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3308      	adds	r3, #8
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4916      	ldr	r1, [pc, #88]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	330c      	adds	r3, #12
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	4910      	ldr	r1, [pc, #64]	; (80048e0 <SYSVIEW_AddTask+0xcc>)
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3310      	adds	r3, #16
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <SYSVIEW_AddTask+0xc4>)
 80048b6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	68b9      	ldr	r1, [r7, #8]
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f80e 	bl	80048e4 <SYSVIEW_SendTaskInfo>
 80048c8:	e000      	b.n	80048cc <SYSVIEW_AddTask+0xb8>
    return;
 80048ca:	bf00      	nop

}
 80048cc:	3710      	adds	r7, #16
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	080082ac 	.word	0x080082ac
 80048d8:	20012f2c 	.word	0x20012f2c
 80048dc:	080082b4 	.word	0x080082b4
 80048e0:	20012e8c 	.word	0x20012e8c

080048e4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80048f2:	f107 0314 	add.w	r3, r7, #20
 80048f6:	2214      	movs	r2, #20
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f002 fbfe 	bl	80070fc <memset>
  TaskInfo.TaskID     = TaskID;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004914:	f107 0314 	add.w	r3, r7, #20
 8004918:	4618      	mov	r0, r3
 800491a:	f001 ff5d 	bl	80067d8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800491e:	bf00      	nop
 8004920:	3728      	adds	r7, #40	; 0x28
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <__NVIC_EnableIRQ>:
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004936:	2b00      	cmp	r3, #0
 8004938:	db0b      	blt.n	8004952 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	f003 021f 	and.w	r2, r3, #31
 8004940:	4907      	ldr	r1, [pc, #28]	; (8004960 <__NVIC_EnableIRQ+0x38>)
 8004942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004946:	095b      	lsrs	r3, r3, #5
 8004948:	2001      	movs	r0, #1
 800494a:	fa00 f202 	lsl.w	r2, r0, r2
 800494e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	e000e100 	.word	0xe000e100

08004964 <__NVIC_SetPriority>:
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	4603      	mov	r3, r0
 800496c:	6039      	str	r1, [r7, #0]
 800496e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004974:	2b00      	cmp	r3, #0
 8004976:	db0a      	blt.n	800498e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	b2da      	uxtb	r2, r3
 800497c:	490c      	ldr	r1, [pc, #48]	; (80049b0 <__NVIC_SetPriority+0x4c>)
 800497e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004982:	0112      	lsls	r2, r2, #4
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	440b      	add	r3, r1
 8004988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800498c:	e00a      	b.n	80049a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	4908      	ldr	r1, [pc, #32]	; (80049b4 <__NVIC_SetPriority+0x50>)
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	f003 030f 	and.w	r3, r3, #15
 800499a:	3b04      	subs	r3, #4
 800499c:	0112      	lsls	r2, r2, #4
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	440b      	add	r3, r1
 80049a2:	761a      	strb	r2, [r3, #24]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	e000e100 	.word	0xe000e100
 80049b4:	e000ed00 	.word	0xe000ed00

080049b8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80049be:	f002 fb1b 	bl	8006ff8 <SEGGER_SYSVIEW_IsStarted>
 80049c2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80049ca:	f001 fd89 	bl	80064e0 <SEGGER_SYSVIEW_Start>
  }
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
	...

080049d8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <_cbOnUARTRx+0x3c>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d806      	bhi.n	80049f8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <_cbOnUARTRx+0x3c>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <_cbOnUARTRx+0x3c>)
 80049f4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80049f6:	e009      	b.n	8004a0c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80049f8:	f7ff ffde 	bl	80049b8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80049fc:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <_cbOnUARTRx+0x3c>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4618      	mov	r0, r3
 8004a02:	1dfb      	adds	r3, r7, #7
 8004a04:	2201      	movs	r2, #1
 8004a06:	4619      	mov	r1, r3
 8004a08:	f000 fbec 	bl	80051e4 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004a0c:	bf00      	nop
}
 8004a0e:	3708      	adds	r7, #8
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	20000014 	.word	0x20000014

08004a18 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <_cbOnUARTTx+0x5c>)
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d80f      	bhi.n	8004a48 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004a28:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <_cbOnUARTTx+0x5c>)
 8004a2a:	785b      	ldrb	r3, [r3, #1]
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <_cbOnUARTTx+0x60>)
 8004a30:	5c9a      	ldrb	r2, [r3, r2]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004a36:	4b0f      	ldr	r3, [pc, #60]	; (8004a74 <_cbOnUARTTx+0x5c>)
 8004a38:	785b      	ldrb	r3, [r3, #1]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <_cbOnUARTTx+0x5c>)
 8004a40:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004a42:	2301      	movs	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004a46:	e00f      	b.n	8004a68 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <_cbOnUARTTx+0x5c>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fa1b 	bl	8004e8c <SEGGER_RTT_ReadUpBufferNoLock>
 8004a56:	4603      	mov	r3, r0
 8004a58:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	da02      	bge.n	8004a66 <_cbOnUARTTx+0x4e>
    r = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	e000      	b.n	8004a68 <_cbOnUARTTx+0x50>
  }
Done:
 8004a66:	bf00      	nop
  return r;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000014 	.word	0x20000014
 8004a78:	08008340 	.word	0x08008340

08004a7c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <SEGGER_UART_init+0x1c>)
 8004a86:	4905      	ldr	r1, [pc, #20]	; (8004a9c <SEGGER_UART_init+0x20>)
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f863 	bl	8004b54 <HIF_UART_Init>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	080049d9 	.word	0x080049d9
 8004a9c:	08004a19 	.word	0x08004a19

08004aa0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <USART2_IRQHandler+0x80>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d011      	beq.n	8004ada <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	; (8004b24 <USART2_IRQHandler+0x84>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 030b 	and.w	r3, r3, #11
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <USART2_IRQHandler+0x88>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d004      	beq.n	8004ada <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004ad0:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <USART2_IRQHandler+0x88>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	79fa      	ldrb	r2, [r7, #7]
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01a      	beq.n	8004b1a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <USART2_IRQHandler+0x8c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d015      	beq.n	8004b18 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004aec:	4b0f      	ldr	r3, [pc, #60]	; (8004b2c <USART2_IRQHandler+0x8c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	1dfa      	adds	r2, r7, #7
 8004af2:	4610      	mov	r0, r2
 8004af4:	4798      	blx	r3
 8004af6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <USART2_IRQHandler+0x90>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0b      	ldr	r2, [pc, #44]	; (8004b30 <USART2_IRQHandler+0x90>)
 8004b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e006      	b.n	8004b1a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004b0c:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <USART2_IRQHandler+0x80>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004b10:	79fa      	ldrb	r2, [r7, #7]
 8004b12:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <USART2_IRQHandler+0x84>)
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e000      	b.n	8004b1a <USART2_IRQHandler+0x7a>
      return;
 8004b18:	bf00      	nop
    }
  }
}
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40004400 	.word	0x40004400
 8004b24:	40004404 	.word	0x40004404
 8004b28:	20012f30 	.word	0x20012f30
 8004b2c:	20012f34 	.word	0x20012f34
 8004b30:	4000440c 	.word	0x4000440c

08004b34 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b42:	6013      	str	r3, [r2, #0]
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	4000440c 	.word	0x4000440c

08004b54 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004b60:	4b2e      	ldr	r3, [pc, #184]	; (8004c1c <HIF_UART_Init+0xc8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2d      	ldr	r2, [pc, #180]	; (8004c1c <HIF_UART_Init+0xc8>)
 8004b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b6a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004b6c:	4b2c      	ldr	r3, [pc, #176]	; (8004c20 <HIF_UART_Init+0xcc>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2b      	ldr	r2, [pc, #172]	; (8004c20 <HIF_UART_Init+0xcc>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <HIF_UART_Init+0xd0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b84:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004b8c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004b8e:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <HIF_UART_Init+0xd0>)
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <HIF_UART_Init+0xd4>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004ba8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004baa:	4a1f      	ldr	r2, [pc, #124]	; (8004c28 <HIF_UART_Init+0xd4>)
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004bb0:	4b1e      	ldr	r3, [pc, #120]	; (8004c2c <HIF_UART_Init+0xd8>)
 8004bb2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8004bb6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	; (8004c30 <HIF_UART_Init+0xdc>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HIF_UART_Init+0xe0>)
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004bca:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <HIF_UART_Init+0xe4>)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be2:	d302      	bcc.n	8004bea <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8004be4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004be8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <HIF_UART_Init+0xe8>)
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004bfa:	4a11      	ldr	r2, [pc, #68]	; (8004c40 <HIF_UART_Init+0xec>)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004c00:	4a10      	ldr	r2, [pc, #64]	; (8004c44 <HIF_UART_Init+0xf0>)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8004c06:	2106      	movs	r1, #6
 8004c08:	2026      	movs	r0, #38	; 0x26
 8004c0a:	f7ff feab 	bl	8004964 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004c0e:	2026      	movs	r0, #38	; 0x26
 8004c10:	f7ff fe8a 	bl	8004928 <__NVIC_EnableIRQ>
}
 8004c14:	bf00      	nop
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	40023840 	.word	0x40023840
 8004c20:	40023830 	.word	0x40023830
 8004c24:	40020020 	.word	0x40020020
 8004c28:	40020000 	.word	0x40020000
 8004c2c:	4000440c 	.word	0x4000440c
 8004c30:	40004410 	.word	0x40004410
 8004c34:	40004414 	.word	0x40004414
 8004c38:	0501bd00 	.word	0x0501bd00
 8004c3c:	40004408 	.word	0x40004408
 8004c40:	20012f30 	.word	0x20012f30
 8004c44:	20012f34 	.word	0x20012f34

08004c48 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c4e:	4b26      	ldr	r3, [pc, #152]	; (8004ce8 <_DoInit+0xa0>)
 8004c50:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004c52:	22a8      	movs	r2, #168	; 0xa8
 8004c54:	2100      	movs	r1, #0
 8004c56:	6838      	ldr	r0, [r7, #0]
 8004c58:	f002 fa50 	bl	80070fc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2203      	movs	r2, #3
 8004c66:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	4a20      	ldr	r2, [pc, #128]	; (8004cec <_DoInit+0xa4>)
 8004c6c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <_DoInit+0xa8>)
 8004c72:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c7a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2200      	movs	r2, #0
 8004c86:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	4a16      	ldr	r2, [pc, #88]	; (8004cec <_DoInit+0xa4>)
 8004c92:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4a17      	ldr	r2, [pc, #92]	; (8004cf4 <_DoInit+0xac>)
 8004c98:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cb2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	607b      	str	r3, [r7, #4]
 8004cba:	e00c      	b.n	8004cd6 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1c3 030f 	rsb	r3, r3, #15
 8004cc2:	4a0d      	ldr	r2, [pc, #52]	; (8004cf8 <_DoInit+0xb0>)
 8004cc4:	5cd1      	ldrb	r1, [r2, r3]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4413      	add	r3, r2
 8004ccc:	460a      	mov	r2, r1
 8004cce:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b0f      	cmp	r3, #15
 8004cda:	d9ef      	bls.n	8004cbc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004cdc:	f3bf 8f5f 	dmb	sy
}
 8004ce0:	bf00      	nop
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20012f38 	.word	0x20012f38
 8004cec:	08008304 	.word	0x08008304
 8004cf0:	20012fe0 	.word	0x20012fe0
 8004cf4:	200133e0 	.word	0x200133e0
 8004cf8:	08008344 	.word	0x08008344

08004cfc <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d905      	bls.n	8004d2c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	3b01      	subs	r3, #1
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	e007      	b.n	8004d3c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	69b9      	ldr	r1, [r7, #24]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1acb      	subs	r3, r1, r3
 8004d36:	4413      	add	r3, r2
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bf28      	it	cs
 8004d4a:	4613      	movcs	r3, r2
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bf28      	it	cs
 8004d56:	4613      	movcs	r3, r2
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f002 f9b9 	bl	80070e0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	4413      	add	r3, r2
 8004d74:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	4413      	add	r3, r2
 8004d7c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d101      	bne.n	8004d9c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d9c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	69fa      	ldr	r2, [r7, #28]
 8004da4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1b2      	bne.n	8004d12 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004dac:	6a3b      	ldr	r3, [r7, #32]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b088      	sub	sp, #32
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d911      	bls.n	8004dfe <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	6938      	ldr	r0, [r7, #16]
 8004dea:	f002 f979 	bl	80070e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dee:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004dfc:	e01f      	b.n	8004e3e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	6938      	ldr	r0, [r7, #16]
 8004e12:	f002 f965 	bl	80070e0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	4413      	add	r3, r2
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f002 f956 	bl	80070e0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e34:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	60da      	str	r2, [r3, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e46:	b480      	push	{r7}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d808      	bhi.n	8004e74 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	e004      	b.n	8004e7e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e74:	693a      	ldr	r2, [r7, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e7e:	697b      	ldr	r3, [r7, #20]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b53      	cmp	r3, #83	; 0x53
 8004ea4:	d001      	beq.n	8004eaa <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004ea6:	f7ff fecf 	bl	8004c48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	4613      	mov	r3, r2
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	4413      	add	r3, r2
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4a37      	ldr	r2, [pc, #220]	; (8004f94 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004eb8:	4413      	add	r3, r2
 8004eba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d92b      	bls.n	8004f30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bf28      	it	cs
 8004eea:	4613      	movcs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	685a      	ldr	r2, [r3, #4]
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	4413      	add	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	6939      	ldr	r1, [r7, #16]
 8004efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004efe:	f002 f8ef 	bl	80070e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4413      	add	r3, r2
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	4413      	add	r3, r2
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	4413      	add	r3, r2
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d101      	bne.n	8004f30 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bf28      	it	cs
 8004f40:	4613      	movcs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d019      	beq.n	8004f7e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	4413      	add	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	6939      	ldr	r1, [r7, #16]
 8004f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f5a:	f002 f8c1 	bl	80070e0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4413      	add	r3, r2
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	4413      	add	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f88:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3730      	adds	r7, #48	; 0x30
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20012f38 	.word	0x20012f38

08004f98 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004fa4:	4b3e      	ldr	r3, [pc, #248]	; (80050a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fa6:	623b      	str	r3, [r7, #32]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b53      	cmp	r3, #83	; 0x53
 8004fb0:	d001      	beq.n	8004fb6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004fb2:	f7ff fe49 	bl	8004c48 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	3360      	adds	r3, #96	; 0x60
 8004fc2:	4a37      	ldr	r2, [pc, #220]	; (80050a0 <SEGGER_RTT_ReadNoLock+0x108>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d92b      	bls.n	800503c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	bf28      	it	cs
 8004ff6:	4613      	movcs	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	4413      	add	r3, r2
 8005002:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	6939      	ldr	r1, [r7, #16]
 8005008:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800500a:	f002 f869 	bl	80070e0 <memcpy>
    NumBytesRead += NumBytesRem;
 800500e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	4413      	add	r3, r2
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005034:	429a      	cmp	r2, r3
 8005036:	d101      	bne.n	800503c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005038:	2300      	movs	r3, #0
 800503a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4293      	cmp	r3, r2
 800504a:	bf28      	it	cs
 800504c:	4613      	movcs	r3, r2
 800504e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d019      	beq.n	800508a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	4413      	add	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	6939      	ldr	r1, [r7, #16]
 8005064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005066:	f002 f83b 	bl	80070e0 <memcpy>
    NumBytesRead += NumBytesRem;
 800506a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005094:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005098:	4618      	mov	r0, r3
 800509a:	3730      	adds	r7, #48	; 0x30
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20012f38 	.word	0x20012f38

080050a4 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b088      	sub	sp, #32
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	3360      	adds	r3, #96	; 0x60
 80050c0:	4a1f      	ldr	r2, [pc, #124]	; (8005140 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80050c2:	4413      	add	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d029      	beq.n	8005122 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d82e      	bhi.n	8005130 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d013      	beq.n	8005102 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80050da:	e029      	b.n	8005130 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80050dc:	6978      	ldr	r0, [r7, #20]
 80050de:	f7ff feb2 	bl	8004e46 <_GetAvailWriteSpace>
 80050e2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d202      	bcs.n	80050f2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80050f0:	e021      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	69b9      	ldr	r1, [r7, #24]
 80050fa:	6978      	ldr	r0, [r7, #20]
 80050fc:	f7ff fe5b 	bl	8004db6 <_WriteNoCheck>
    break;
 8005100:	e019      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f7ff fe9f 	bl	8004e46 <_GetAvailWriteSpace>
 8005108:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4293      	cmp	r3, r2
 8005110:	bf28      	it	cs
 8005112:	4613      	movcs	r3, r2
 8005114:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	69b9      	ldr	r1, [r7, #24]
 800511a:	6978      	ldr	r0, [r7, #20]
 800511c:	f7ff fe4b 	bl	8004db6 <_WriteNoCheck>
    break;
 8005120:	e009      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	69b9      	ldr	r1, [r7, #24]
 8005126:	6978      	ldr	r0, [r7, #20]
 8005128:	f7ff fde8 	bl	8004cfc <_WriteBlocking>
 800512c:	61f8      	str	r0, [r7, #28]
    break;
 800512e:	e002      	b.n	8005136 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005130:	2300      	movs	r3, #0
 8005132:	61fb      	str	r3, [r7, #28]
    break;
 8005134:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005136:	69fb      	ldr	r3, [r7, #28]
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	20012f38 	.word	0x20012f38

08005144 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4a1f      	ldr	r2, [pc, #124]	; (80051e0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005162:	4413      	add	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b02      	cmp	r3, #2
 800516c:	d029      	beq.n	80051c2 <SEGGER_RTT_WriteNoLock+0x7e>
 800516e:	2b02      	cmp	r3, #2
 8005170:	d82e      	bhi.n	80051d0 <SEGGER_RTT_WriteNoLock+0x8c>
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <SEGGER_RTT_WriteNoLock+0x38>
 8005176:	2b01      	cmp	r3, #1
 8005178:	d013      	beq.n	80051a2 <SEGGER_RTT_WriteNoLock+0x5e>
 800517a:	e029      	b.n	80051d0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800517c:	6978      	ldr	r0, [r7, #20]
 800517e:	f7ff fe62 	bl	8004e46 <_GetAvailWriteSpace>
 8005182:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d202      	bcs.n	8005192 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005190:	e021      	b.n	80051d6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69b9      	ldr	r1, [r7, #24]
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f7ff fe0b 	bl	8004db6 <_WriteNoCheck>
    break;
 80051a0:	e019      	b.n	80051d6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80051a2:	6978      	ldr	r0, [r7, #20]
 80051a4:	f7ff fe4f 	bl	8004e46 <_GetAvailWriteSpace>
 80051a8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	4293      	cmp	r3, r2
 80051b0:	bf28      	it	cs
 80051b2:	4613      	movcs	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	6978      	ldr	r0, [r7, #20]
 80051bc:	f7ff fdfb 	bl	8004db6 <_WriteNoCheck>
    break;
 80051c0:	e009      	b.n	80051d6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	69b9      	ldr	r1, [r7, #24]
 80051c6:	6978      	ldr	r0, [r7, #20]
 80051c8:	f7ff fd98 	bl	8004cfc <_WriteBlocking>
 80051cc:	61f8      	str	r0, [r7, #28]
    break;
 80051ce:	e002      	b.n	80051d6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61fb      	str	r3, [r7, #28]
    break;
 80051d4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80051d6:	69fb      	ldr	r3, [r7, #28]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20012f38 	.word	0x20012f38

080051e4 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer,
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80051f0:	4b0e      	ldr	r3, [pc, #56]	; (800522c <SEGGER_RTT_WriteDownBuffer+0x48>)
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b53      	cmp	r3, #83	; 0x53
 80051fc:	d001      	beq.n	8005202 <SEGGER_RTT_WriteDownBuffer+0x1e>
 80051fe:	f7ff fd23 	bl	8004c48 <_DoInit>
  SEGGER_RTT_LOCK();
 8005202:	f3ef 8311 	mrs	r3, BASEPRI
 8005206:	f04f 0120 	mov.w	r1, #32
 800520a:	f381 8811 	msr	BASEPRI, r1
 800520e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff ff45 	bl	80050a4 <SEGGER_RTT_WriteDownBufferNoLock>
 800521a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005222:	697b      	ldr	r3, [r7, #20]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20012f38 	.word	0x20012f38

08005230 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800523c:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <SEGGER_RTT_Write+0x48>)
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b53      	cmp	r3, #83	; 0x53
 8005248:	d001      	beq.n	800524e <SEGGER_RTT_Write+0x1e>
 800524a:	f7ff fcfd 	bl	8004c48 <_DoInit>
  SEGGER_RTT_LOCK();
 800524e:	f3ef 8311 	mrs	r3, BASEPRI
 8005252:	f04f 0120 	mov.w	r1, #32
 8005256:	f381 8811 	msr	BASEPRI, r1
 800525a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f7ff ff6f 	bl	8005144 <SEGGER_RTT_WriteNoLock>
 8005266:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800526e:	697b      	ldr	r3, [r7, #20]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	20012f38 	.word	0x20012f38

0800527c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800528a:	4b3d      	ldr	r3, [pc, #244]	; (8005380 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b53      	cmp	r3, #83	; 0x53
 8005296:	d001      	beq.n	800529c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005298:	f7ff fcd6 	bl	8004c48 <_DoInit>
  SEGGER_RTT_LOCK();
 800529c:	f3ef 8311 	mrs	r3, BASEPRI
 80052a0:	f04f 0120 	mov.w	r1, #32
 80052a4:	f381 8811 	msr	BASEPRI, r1
 80052a8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052aa:	4b35      	ldr	r3, [pc, #212]	; (8005380 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80052ac:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80052ae:	2300      	movs	r3, #0
 80052b0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80052b2:	6939      	ldr	r1, [r7, #16]
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	4613      	mov	r3, r2
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	440b      	add	r3, r1
 80052c2:	3304      	adds	r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3301      	adds	r3, #1
 80052ce:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	dbeb      	blt.n	80052b2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80052da:	e000      	b.n	80052de <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80052dc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	da3f      	bge.n	8005368 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80052e8:	6939      	ldr	r1, [r7, #16]
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	440b      	add	r3, r1
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80052fc:	6939      	ldr	r1, [r7, #16]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	440b      	add	r3, r1
 800530c:	3304      	adds	r3, #4
 800530e:	68ba      	ldr	r2, [r7, #8]
 8005310:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005312:	6939      	ldr	r1, [r7, #16]
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	4613      	mov	r3, r2
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	4413      	add	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	440b      	add	r3, r1
 8005320:	3320      	adds	r3, #32
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005326:	6939      	ldr	r1, [r7, #16]
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	4613      	mov	r3, r2
 800532c:	005b      	lsls	r3, r3, #1
 800532e:	4413      	add	r3, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	440b      	add	r3, r1
 8005334:	3328      	adds	r3, #40	; 0x28
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800533a:	6939      	ldr	r1, [r7, #16]
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	440b      	add	r3, r1
 8005348:	3324      	adds	r3, #36	; 0x24
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800534e:	6939      	ldr	r1, [r7, #16]
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	332c      	adds	r3, #44	; 0x2c
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005362:	f3bf 8f5f 	dmb	sy
 8005366:	e002      	b.n	800536e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005368:	f04f 33ff 	mov.w	r3, #4294967295
 800536c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005374:	69fb      	ldr	r3, [r7, #28]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20012f38 	.word	0x20012f38

08005384 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005392:	4b21      	ldr	r3, [pc, #132]	; (8005418 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b53      	cmp	r3, #83	; 0x53
 800539e:	d001      	beq.n	80053a4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80053a0:	f7ff fc52 	bl	8004c48 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80053a4:	4b1c      	ldr	r3, [pc, #112]	; (8005418 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80053a6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d82c      	bhi.n	8005408 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4613      	mov	r3, r2
 80053c0:	005b      	lsls	r3, r3, #1
 80053c2:	4413      	add	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	3360      	adds	r3, #96	; 0x60
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	4413      	add	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00e      	beq.n	80053f2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053f6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005402:	2300      	movs	r3, #0
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
 8005406:	e002      	b.n	800540e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005408:	f04f 33ff 	mov.w	r3, #4294967295
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005410:	4618      	mov	r0, r3
 8005412:	3728      	adds	r7, #40	; 0x28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20012f38 	.word	0x20012f38

0800541c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	60fa      	str	r2, [r7, #12]
 8005432:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b80      	cmp	r3, #128	; 0x80
 8005438:	d90a      	bls.n	8005450 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800543a:	2380      	movs	r3, #128	; 0x80
 800543c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800543e:	e007      	b.n	8005450 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	1c53      	adds	r3, r2, #1
 8005444:	60bb      	str	r3, [r7, #8]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1c59      	adds	r1, r3, #1
 800544a:	60f9      	str	r1, [r7, #12]
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	607a      	str	r2, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <_EncodeStr+0x46>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ee      	bne.n	8005440 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	b2da      	uxtb	r2, r3
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800546e:	68fb      	ldr	r3, [r7, #12]
}
 8005470:	4618      	mov	r0, r3
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3307      	adds	r3, #7
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800549a:	4b35      	ldr	r3, [pc, #212]	; (8005570 <_HandleIncomingPacket+0xdc>)
 800549c:	7e1b      	ldrb	r3, [r3, #24]
 800549e:	4618      	mov	r0, r3
 80054a0:	1cfb      	adds	r3, r7, #3
 80054a2:	2201      	movs	r2, #1
 80054a4:	4619      	mov	r1, r3
 80054a6:	f7ff fd77 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
 80054aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d052      	beq.n	8005558 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	2b80      	cmp	r3, #128	; 0x80
 80054b6:	d031      	beq.n	800551c <_HandleIncomingPacket+0x88>
 80054b8:	2b80      	cmp	r3, #128	; 0x80
 80054ba:	dc40      	bgt.n	800553e <_HandleIncomingPacket+0xaa>
 80054bc:	2b07      	cmp	r3, #7
 80054be:	dc15      	bgt.n	80054ec <_HandleIncomingPacket+0x58>
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dd3c      	ble.n	800553e <_HandleIncomingPacket+0xaa>
 80054c4:	3b01      	subs	r3, #1
 80054c6:	2b06      	cmp	r3, #6
 80054c8:	d839      	bhi.n	800553e <_HandleIncomingPacket+0xaa>
 80054ca:	a201      	add	r2, pc, #4	; (adr r2, 80054d0 <_HandleIncomingPacket+0x3c>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054f3 	.word	0x080054f3
 80054d4:	080054f9 	.word	0x080054f9
 80054d8:	080054ff 	.word	0x080054ff
 80054dc:	08005505 	.word	0x08005505
 80054e0:	0800550b 	.word	0x0800550b
 80054e4:	08005511 	.word	0x08005511
 80054e8:	08005517 	.word	0x08005517
 80054ec:	2b7f      	cmp	r3, #127	; 0x7f
 80054ee:	d035      	beq.n	800555c <_HandleIncomingPacket+0xc8>
 80054f0:	e025      	b.n	800553e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80054f2:	f000 fff5 	bl	80064e0 <SEGGER_SYSVIEW_Start>
      break;
 80054f6:	e036      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80054f8:	f001 f8ae 	bl	8006658 <SEGGER_SYSVIEW_Stop>
      break;
 80054fc:	e033      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80054fe:	f001 fa87 	bl	8006a10 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005502:	e030      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005504:	f001 fa4c 	bl	80069a0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005508:	e02d      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800550a:	f001 f8cb 	bl	80066a4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800550e:	e02a      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005510:	f001 fcc4 	bl	8006e9c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005514:	e027      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005516:	f001 fca3 	bl	8006e60 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800551a:	e024      	b.n	8005566 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800551c:	4b14      	ldr	r3, [pc, #80]	; (8005570 <_HandleIncomingPacket+0xdc>)
 800551e:	7e1b      	ldrb	r3, [r3, #24]
 8005520:	4618      	mov	r0, r3
 8005522:	1cfb      	adds	r3, r7, #3
 8005524:	2201      	movs	r2, #1
 8005526:	4619      	mov	r1, r3
 8005528:	f7ff fd36 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
 800552c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d015      	beq.n	8005560 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	4618      	mov	r0, r3
 8005538:	f001 fc08 	bl	8006d4c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800553c:	e010      	b.n	8005560 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800553e:	78fb      	ldrb	r3, [r7, #3]
 8005540:	b25b      	sxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	da0e      	bge.n	8005564 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005546:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <_HandleIncomingPacket+0xdc>)
 8005548:	7e1b      	ldrb	r3, [r3, #24]
 800554a:	4618      	mov	r0, r3
 800554c:	1cfb      	adds	r3, r7, #3
 800554e:	2201      	movs	r2, #1
 8005550:	4619      	mov	r1, r3
 8005552:	f7ff fd21 	bl	8004f98 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005556:	e005      	b.n	8005564 <_HandleIncomingPacket+0xd0>
    }
  }
 8005558:	bf00      	nop
 800555a:	e004      	b.n	8005566 <_HandleIncomingPacket+0xd2>
      break;
 800555c:	bf00      	nop
 800555e:	e002      	b.n	8005566 <_HandleIncomingPacket+0xd2>
      break;
 8005560:	bf00      	nop
 8005562:	e000      	b.n	8005566 <_HandleIncomingPacket+0xd2>
      break;
 8005564:	bf00      	nop
}
 8005566:	bf00      	nop
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	200143f8 	.word	0x200143f8

08005574 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b08c      	sub	sp, #48	; 0x30
 8005578:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800557a:	2301      	movs	r3, #1
 800557c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800557e:	1d3b      	adds	r3, r7, #4
 8005580:	3301      	adds	r3, #1
 8005582:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005588:	4b32      	ldr	r3, [pc, #200]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
 800558e:	e00b      	b.n	80055a8 <_TrySendOverflowPacket+0x34>
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	b2da      	uxtb	r2, r3
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	1c59      	adds	r1, r3, #1
 8005598:	62f9      	str	r1, [r7, #44]	; 0x2c
 800559a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	09db      	lsrs	r3, r3, #7
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	2b7f      	cmp	r3, #127	; 0x7f
 80055ac:	d8f0      	bhi.n	8005590 <_TrySendOverflowPacket+0x1c>
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	1c5a      	adds	r2, r3, #1
 80055b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b6:	b2d2      	uxtb	r2, r2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055be:	4b26      	ldr	r3, [pc, #152]	; (8005658 <_TrySendOverflowPacket+0xe4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055c4:	4b23      	ldr	r3, [pc, #140]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	627b      	str	r3, [r7, #36]	; 0x24
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	e00b      	b.n	80055f0 <_TrySendOverflowPacket+0x7c>
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	1c59      	adds	r1, r3, #1
 80055e0:	6279      	str	r1, [r7, #36]	; 0x24
 80055e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	701a      	strb	r2, [r3, #0]
 80055ea:	6a3b      	ldr	r3, [r7, #32]
 80055ec:	09db      	lsrs	r3, r3, #7
 80055ee:	623b      	str	r3, [r7, #32]
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b7f      	cmp	r3, #127	; 0x7f
 80055f4:	d8f0      	bhi.n	80055d8 <_TrySendOverflowPacket+0x64>
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	627a      	str	r2, [r7, #36]	; 0x24
 80055fc:	6a3a      	ldr	r2, [r7, #32]
 80055fe:	b2d2      	uxtb	r2, r2
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	4618      	mov	r0, r3
 800560c:	1d3b      	adds	r3, r7, #4
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	461a      	mov	r2, r3
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	4619      	mov	r1, r3
 8005618:	f7fa fdda 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800561c:	4603      	mov	r3, r0
 800561e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005620:	f7ff fa88 	bl	8004b34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800562a:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	3b01      	subs	r3, #1
 8005636:	b2da      	uxtb	r2, r3
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 800563a:	701a      	strb	r2, [r3, #0]
 800563c:	e004      	b.n	8005648 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	3301      	adds	r3, #1
 8005644:	4a03      	ldr	r2, [pc, #12]	; (8005654 <_TrySendOverflowPacket+0xe0>)
 8005646:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005648:	693b      	ldr	r3, [r7, #16]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3730      	adds	r7, #48	; 0x30
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	200143f8 	.word	0x200143f8
 8005658:	e0001004 	.word	0xe0001004

0800565c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005668:	4b96      	ldr	r3, [pc, #600]	; (80058c4 <_SendPacket+0x268>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d010      	beq.n	8005692 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005670:	4b94      	ldr	r3, [pc, #592]	; (80058c4 <_SendPacket+0x268>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8130 	beq.w	80058da <_SendPacket+0x27e>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800567a:	4b92      	ldr	r3, [pc, #584]	; (80058c4 <_SendPacket+0x268>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d109      	bne.n	8005696 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005682:	f7ff ff77 	bl	8005574 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005686:	4b8f      	ldr	r3, [pc, #572]	; (80058c4 <_SendPacket+0x268>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b01      	cmp	r3, #1
 800568c:	f040 8127 	bne.w	80058de <_SendPacket+0x282>
      goto SendDone;
    }
  }
Send:
 8005690:	e001      	b.n	8005696 <_SendPacket+0x3a>
    goto Send;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <_SendPacket+0x3c>
Send:
 8005696:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b1f      	cmp	r3, #31
 800569c:	d809      	bhi.n	80056b2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800569e:	4b89      	ldr	r3, [pc, #548]	; (80058c4 <_SendPacket+0x268>)
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f040 8118 	bne.w	80058e2 <_SendPacket+0x286>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b17      	cmp	r3, #23
 80056b6:	d807      	bhi.n	80056c8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	701a      	strb	r2, [r3, #0]
 80056c6:	e0c4      	b.n	8005852 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	2b7f      	cmp	r3, #127	; 0x7f
 80056d4:	d912      	bls.n	80056fc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	09da      	lsrs	r2, r3, #7
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3b01      	subs	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	3a01      	subs	r2, #1
 80056ee:	60fa      	str	r2, [r7, #12]
 80056f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e006      	b.n	800570a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3b01      	subs	r3, #1
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b7e      	cmp	r3, #126	; 0x7e
 800570e:	d807      	bhi.n	8005720 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3b01      	subs	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	701a      	strb	r2, [r3, #0]
 800571e:	e098      	b.n	8005852 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005726:	d212      	bcs.n	800574e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	09da      	lsrs	r2, r3, #7
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b01      	subs	r3, #1
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	3a01      	subs	r2, #1
 8005740:	60fa      	str	r2, [r7, #12]
 8005742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	e081      	b.n	8005852 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005754:	d21d      	bcs.n	8005792 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0b9a      	lsrs	r2, r3, #14
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3b01      	subs	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	09db      	lsrs	r3, r3, #7
 800576a:	b2db      	uxtb	r3, r3
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	3a01      	subs	r2, #1
 8005770:	60fa      	str	r2, [r7, #12]
 8005772:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	3a01      	subs	r2, #1
 8005784:	60fa      	str	r2, [r7, #12]
 8005786:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	701a      	strb	r2, [r3, #0]
 8005790:	e05f      	b.n	8005852 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005798:	d228      	bcs.n	80057ec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	0d5a      	lsrs	r2, r3, #21
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	0b9b      	lsrs	r3, r3, #14
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	3a01      	subs	r2, #1
 80057b4:	60fa      	str	r2, [r7, #12]
 80057b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	09db      	lsrs	r3, r3, #7
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	3a01      	subs	r2, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057d0:	b2da      	uxtb	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	3a01      	subs	r2, #1
 80057de:	60fa      	str	r2, [r7, #12]
 80057e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	701a      	strb	r2, [r3, #0]
 80057ea:	e032      	b.n	8005852 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	0f1a      	lsrs	r2, r3, #28
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b01      	subs	r3, #1
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	0d5b      	lsrs	r3, r3, #21
 8005800:	b2db      	uxtb	r3, r3
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	3a01      	subs	r2, #1
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800580c:	b2da      	uxtb	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	0b9b      	lsrs	r3, r3, #14
 8005816:	b2db      	uxtb	r3, r3
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	3a01      	subs	r2, #1
 800581c:	60fa      	str	r2, [r7, #12]
 800581e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005822:	b2da      	uxtb	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	09db      	lsrs	r3, r3, #7
 800582c:	b2db      	uxtb	r3, r3
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	3a01      	subs	r2, #1
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	b2db      	uxtb	r3, r3
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	3a01      	subs	r2, #1
 8005846:	60fa      	str	r2, [r7, #12]
 8005848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005852:	4b1d      	ldr	r3, [pc, #116]	; (80058c8 <_SendPacket+0x26c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005858:	4b1a      	ldr	r3, [pc, #104]	; (80058c4 <_SendPacket+0x268>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	627b      	str	r3, [r7, #36]	; 0x24
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	623b      	str	r3, [r7, #32]
 800586a:	e00b      	b.n	8005884 <_SendPacket+0x228>
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	b2da      	uxtb	r2, r3
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1c59      	adds	r1, r3, #1
 8005874:	6279      	str	r1, [r7, #36]	; 0x24
 8005876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800587a:	b2d2      	uxtb	r2, r2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	09db      	lsrs	r3, r3, #7
 8005882:	623b      	str	r3, [r7, #32]
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	2b7f      	cmp	r3, #127	; 0x7f
 8005888:	d8f0      	bhi.n	800586c <_SendPacket+0x210>
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	627a      	str	r2, [r7, #36]	; 0x24
 8005890:	6a3a      	ldr	r2, [r7, #32]
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800589a:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <_SendPacket+0x268>)
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	4618      	mov	r0, r3
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	68f9      	ldr	r1, [r7, #12]
 80058aa:	f7fa fc91 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058ae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80058b0:	f7ff f940 	bl	8004b34 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <_SendPacket+0x270>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058ba:	4a02      	ldr	r2, [pc, #8]	; (80058c4 <_SendPacket+0x268>)
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	60d3      	str	r3, [r2, #12]
 80058c0:	e010      	b.n	80058e4 <_SendPacket+0x288>
 80058c2:	bf00      	nop
 80058c4:	200143f8 	.word	0x200143f8
 80058c8:	e0001004 	.word	0xe0001004
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058cc:	4b19      	ldr	r3, [pc, #100]	; (8005934 <_SendPacket+0x2d8>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	4b17      	ldr	r3, [pc, #92]	; (8005934 <_SendPacket+0x2d8>)
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e004      	b.n	80058e4 <_SendPacket+0x288>
    goto SendDone;
 80058da:	bf00      	nop
 80058dc:	e002      	b.n	80058e4 <_SendPacket+0x288>
      goto SendDone;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <_SendPacket+0x288>
      goto SendDone;
 80058e2:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <_SendPacket+0x2d8>)
 80058e6:	7e1b      	ldrb	r3, [r3, #24]
 80058e8:	4619      	mov	r1, r3
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <_SendPacket+0x2dc>)
 80058ec:	460b      	mov	r3, r1
 80058ee:	005b      	lsls	r3, r3, #1
 80058f0:	440b      	add	r3, r1
 80058f2:	00db      	lsls	r3, r3, #3
 80058f4:	4413      	add	r3, r2
 80058f6:	336c      	adds	r3, #108	; 0x6c
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <_SendPacket+0x2d8>)
 80058fc:	7e1b      	ldrb	r3, [r3, #24]
 80058fe:	4618      	mov	r0, r3
 8005900:	490d      	ldr	r1, [pc, #52]	; (8005938 <_SendPacket+0x2dc>)
 8005902:	4603      	mov	r3, r0
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4403      	add	r3, r0
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	3370      	adds	r3, #112	; 0x70
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d00b      	beq.n	800592c <_SendPacket+0x2d0>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005914:	4b07      	ldr	r3, [pc, #28]	; (8005934 <_SendPacket+0x2d8>)
 8005916:	789b      	ldrb	r3, [r3, #2]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d107      	bne.n	800592c <_SendPacket+0x2d0>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800591c:	4b05      	ldr	r3, [pc, #20]	; (8005934 <_SendPacket+0x2d8>)
 800591e:	2201      	movs	r2, #1
 8005920:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005922:	f7ff fdb7 	bl	8005494 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005926:	4b03      	ldr	r3, [pc, #12]	; (8005934 <_SendPacket+0x2d8>)
 8005928:	2200      	movs	r2, #0
 800592a:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800592c:	bf00      	nop
 800592e:	3728      	adds	r7, #40	; 0x28
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	200143f8 	.word	0x200143f8
 8005938:	20012f38 	.word	0x20012f38

0800593c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b08a      	sub	sp, #40	; 0x28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	3301      	adds	r3, #1
 8005952:	2b80      	cmp	r3, #128	; 0x80
 8005954:	d80a      	bhi.n	800596c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	1c59      	adds	r1, r3, #1
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6051      	str	r1, [r2, #4]
 8005960:	78fa      	ldrb	r2, [r7, #3]
 8005962:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2b80      	cmp	r3, #128	; 0x80
 8005972:	d15a      	bne.n	8005a2a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	e00b      	b.n	80059ae <_StoreChar+0x72>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6279      	str	r1, [r7, #36]	; 0x24
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <_StoreChar+0x5a>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	2300      	movs	r3, #0
 80059ca:	61bb      	str	r3, [r7, #24]
 80059cc:	e00b      	b.n	80059e6 <_StoreChar+0xaa>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	1c59      	adds	r1, r3, #1
 80059d6:	61f9      	str	r1, [r7, #28]
 80059d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	09db      	lsrs	r3, r3, #7
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b7f      	cmp	r3, #127	; 0x7f
 80059ea:	d8f0      	bhi.n	80059ce <_StoreChar+0x92>
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	61fa      	str	r2, [r7, #28]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	221a      	movs	r2, #26
 8005a02:	6939      	ldr	r1, [r7, #16]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff fe29 	bl	800565c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fd34 	bl	800547c <_PreparePacket>
 8005a14:	4602      	mov	r2, r0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	611a      	str	r2, [r3, #16]
  }
}
 8005a2a:	bf00      	nop
 8005a2c:	3728      	adds	r7, #40	; 0x28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a46:	2301      	movs	r3, #1
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a4e:	e007      	b.n	8005a60 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a58:	623b      	str	r3, [r7, #32]
    Width++;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a60:	6a3a      	ldr	r2, [r7, #32]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d2f3      	bcs.n	8005a50 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d901      	bls.n	8005a74 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d11f      	bne.n	8005abe <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <_PrintUnsigned+0x66>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d102      	bne.n	8005a9a <_PrintUnsigned+0x66>
        c = '0';
 8005a94:	2330      	movs	r3, #48	; 0x30
 8005a96:	76fb      	strb	r3, [r7, #27]
 8005a98:	e001      	b.n	8005a9e <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005a9a:	2320      	movs	r3, #32
 8005a9c:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a9e:	e007      	b.n	8005ab0 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005aa6:	7efb      	ldrb	r3, [r7, #27]
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff ff46 	bl	800593c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <_PrintUnsigned+0x8a>
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3f0      	bcc.n	8005aa0 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d903      	bls.n	8005acc <_PrintUnsigned+0x98>
      NumDigits--;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	e009      	b.n	8005ae0 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d200      	bcs.n	8005ae0 <_PrintUnsigned+0xac>
        break;
 8005ade:	e005      	b.n	8005aec <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	fb02 f303 	mul.w	r3, r2, r3
 8005ae8:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005aea:	e7e8      	b.n	8005abe <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b04:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <_PrintUnsigned+0x128>)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	4413      	add	r3, r2
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff ff14 	bl	800593c <_StoreChar>
    Digit /= Base;
 8005b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e3      	bne.n	8005aec <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d011      	beq.n	8005b52 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b34:	e006      	b.n	8005b44 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff fefc 	bl	800593c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <_PrintUnsigned+0x11e>
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d3f1      	bcc.n	8005b36 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005b52:	bf00      	nop
 8005b54:	3728      	adds	r7, #40	; 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08008364 	.word	0x08008364

08005b60 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	bfb8      	it	lt
 8005b74:	425b      	neglt	r3, r3
 8005b76:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b7c:	e007      	b.n	8005b8e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b86:	613b      	str	r3, [r7, #16]
    Width++;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	daf3      	bge.n	8005b7e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d901      	bls.n	8005ba2 <_PrintInt+0x42>
    Width = NumDigits;
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <_PrintInt+0x5e>
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	db04      	blt.n	8005bb8 <_PrintInt+0x58>
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <_PrintInt+0x5e>
    FieldWidth--;
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <_PrintInt+0x6e>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d016      	beq.n	8005bfc <_PrintInt+0x9c>
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d111      	bne.n	8005bfc <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00e      	beq.n	8005bfc <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bde:	e006      	b.n	8005bee <_PrintInt+0x8e>
        FieldWidth--;
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005be6:	2120      	movs	r1, #32
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff fea7 	bl	800593c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <_PrintInt+0x9c>
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d3f1      	bcc.n	8005be0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	da07      	bge.n	8005c12 <_PrintInt+0xb2>
    v = -v;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	425b      	negs	r3, r3
 8005c06:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c08:	212d      	movs	r1, #45	; 0x2d
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff fe96 	bl	800593c <_StoreChar>
 8005c10:	e008      	b.n	8005c24 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	f003 0304 	and.w	r3, r3, #4
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c1c:	212b      	movs	r1, #43	; 0x2b
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff fe8c 	bl	800593c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d019      	beq.n	8005c62 <_PrintInt+0x102>
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d114      	bne.n	8005c62 <_PrintInt+0x102>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d111      	bne.n	8005c62 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c44:	e006      	b.n	8005c54 <_PrintInt+0xf4>
        FieldWidth--;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c4c:	2130      	movs	r1, #48	; 0x30
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f7ff fe74 	bl	800593c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <_PrintInt+0x102>
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d3f1      	bcc.n	8005c46 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff fedf 	bl	8005a34 <_PrintUnsigned>
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b098      	sub	sp, #96	; 0x60
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c90:	f04f 0120 	mov.w	r1, #32
 8005c94:	f381 8811 	msr	BASEPRI, r1
 8005c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9a:	48b7      	ldr	r0, [pc, #732]	; (8005f78 <_VPrintTarget+0x2f8>)
 8005c9c:	f7ff fbee 	bl	800547c <_PreparePacket>
 8005ca0:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ca2:	4bb5      	ldr	r3, [pc, #724]	; (8005f78 <_VPrintTarget+0x2f8>)
 8005ca4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f000 81a8 	beq.w	8006020 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cd4:	2b25      	cmp	r3, #37	; 0x25
 8005cd6:	f040 8195 	bne.w	8006004 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cee:	3b23      	subs	r3, #35	; 0x23
 8005cf0:	2b0d      	cmp	r3, #13
 8005cf2:	d83f      	bhi.n	8005d74 <_VPrintTarget+0xf4>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <_VPrintTarget+0x7c>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d65 	.word	0x08005d65
 8005d00:	08005d75 	.word	0x08005d75
 8005d04:	08005d75 	.word	0x08005d75
 8005d08:	08005d75 	.word	0x08005d75
 8005d0c:	08005d75 	.word	0x08005d75
 8005d10:	08005d75 	.word	0x08005d75
 8005d14:	08005d75 	.word	0x08005d75
 8005d18:	08005d75 	.word	0x08005d75
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d75 	.word	0x08005d75
 8005d2c:	08005d75 	.word	0x08005d75
 8005d30:	08005d45 	.word	0x08005d45
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	e01a      	b.n	8005d7a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d46:	f043 0302 	orr.w	r3, r3, #2
 8005d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e012      	b.n	8005d7a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d56:	f043 0304 	orr.w	r3, r3, #4
 8005d5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	e00a      	b.n	8005d7a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d66:	f043 0308 	orr.w	r3, r3, #8
 8005d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	e002      	b.n	8005d7a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005d74:	2300      	movs	r3, #0
 8005d76:	653b      	str	r3, [r7, #80]	; 0x50
 8005d78:	bf00      	nop
        }
      } while (v);
 8005d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1b0      	bne.n	8005ce2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005d80:	2300      	movs	r3, #0
 8005d82:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005d8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d90:	2b2f      	cmp	r3, #47	; 0x2f
 8005d92:	d912      	bls.n	8005dba <_VPrintTarget+0x13a>
 8005d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d98:	2b39      	cmp	r3, #57	; 0x39
 8005d9a:	d80e      	bhi.n	8005dba <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005da2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	461a      	mov	r2, r3
 8005dae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005db2:	4413      	add	r3, r2
 8005db4:	3b30      	subs	r3, #48	; 0x30
 8005db6:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005db8:	e7e4      	b.n	8005d84 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005dca:	2b2e      	cmp	r3, #46	; 0x2e
 8005dcc:	d11d      	bne.n	8005e0a <_VPrintTarget+0x18a>
        sFormat++;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de0:	2b2f      	cmp	r3, #47	; 0x2f
 8005de2:	d912      	bls.n	8005e0a <_VPrintTarget+0x18a>
 8005de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005de8:	2b39      	cmp	r3, #57	; 0x39
 8005dea:	d80e      	bhi.n	8005e0a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3301      	adds	r3, #1
 8005df0:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e02:	4413      	add	r3, r2
 8005e04:	3b30      	subs	r3, #48	; 0x30
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005e08:	e7e4      	b.n	8005dd4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e16:	2b6c      	cmp	r3, #108	; 0x6c
 8005e18:	d003      	beq.n	8005e22 <_VPrintTarget+0x1a2>
 8005e1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e1e:	2b68      	cmp	r3, #104	; 0x68
 8005e20:	d107      	bne.n	8005e32 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e30:	e7ef      	b.n	8005e12 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e36:	2b25      	cmp	r3, #37	; 0x25
 8005e38:	f000 80d8 	beq.w	8005fec <_VPrintTarget+0x36c>
 8005e3c:	2b25      	cmp	r3, #37	; 0x25
 8005e3e:	f2c0 80dc 	blt.w	8005ffa <_VPrintTarget+0x37a>
 8005e42:	2b78      	cmp	r3, #120	; 0x78
 8005e44:	f300 80d9 	bgt.w	8005ffa <_VPrintTarget+0x37a>
 8005e48:	2b58      	cmp	r3, #88	; 0x58
 8005e4a:	f2c0 80d6 	blt.w	8005ffa <_VPrintTarget+0x37a>
 8005e4e:	3b58      	subs	r3, #88	; 0x58
 8005e50:	2b20      	cmp	r3, #32
 8005e52:	f200 80d2 	bhi.w	8005ffa <_VPrintTarget+0x37a>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <_VPrintTarget+0x1dc>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005f53 	.word	0x08005f53
 8005e60:	08005ffb 	.word	0x08005ffb
 8005e64:	08005ffb 	.word	0x08005ffb
 8005e68:	08005ffb 	.word	0x08005ffb
 8005e6c:	08005ffb 	.word	0x08005ffb
 8005e70:	08005ffb 	.word	0x08005ffb
 8005e74:	08005ffb 	.word	0x08005ffb
 8005e78:	08005ffb 	.word	0x08005ffb
 8005e7c:	08005ffb 	.word	0x08005ffb
 8005e80:	08005ffb 	.word	0x08005ffb
 8005e84:	08005ffb 	.word	0x08005ffb
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005f07 	.word	0x08005f07
 8005e90:	08005ffb 	.word	0x08005ffb
 8005e94:	08005ffb 	.word	0x08005ffb
 8005e98:	08005ffb 	.word	0x08005ffb
 8005e9c:	08005ffb 	.word	0x08005ffb
 8005ea0:	08005ffb 	.word	0x08005ffb
 8005ea4:	08005ffb 	.word	0x08005ffb
 8005ea8:	08005ffb 	.word	0x08005ffb
 8005eac:	08005ffb 	.word	0x08005ffb
 8005eb0:	08005ffb 	.word	0x08005ffb
 8005eb4:	08005ffb 	.word	0x08005ffb
 8005eb8:	08005ffb 	.word	0x08005ffb
 8005ebc:	08005fc7 	.word	0x08005fc7
 8005ec0:	08005ffb 	.word	0x08005ffb
 8005ec4:	08005ffb 	.word	0x08005ffb
 8005ec8:	08005f7d 	.word	0x08005f7d
 8005ecc:	08005ffb 	.word	0x08005ffb
 8005ed0:	08005f2d 	.word	0x08005f2d
 8005ed4:	08005ffb 	.word	0x08005ffb
 8005ed8:	08005ffb 	.word	0x08005ffb
 8005edc:	08005f53 	.word	0x08005f53
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	1d19      	adds	r1, r3, #4
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6011      	str	r1, [r2, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005ef4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005ef8:	f107 0310 	add.w	r3, r7, #16
 8005efc:	4611      	mov	r1, r2
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fd1c 	bl	800593c <_StoreChar>
        break;
 8005f04:	e07a      	b.n	8005ffc <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	1d19      	adds	r1, r3, #4
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6011      	str	r1, [r2, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f14:	f107 0010 	add.w	r0, r7, #16
 8005f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f1a:	9301      	str	r3, [sp, #4]
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f22:	220a      	movs	r2, #10
 8005f24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f26:	f7ff fe1b 	bl	8005b60 <_PrintInt>
        break;
 8005f2a:	e067      	b.n	8005ffc <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f3c:	f107 0010 	add.w	r0, r7, #16
 8005f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	f7ff fd72 	bl	8005a34 <_PrintUnsigned>
        break;
 8005f50:	e054      	b.n	8005ffc <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	1d19      	adds	r1, r3, #4
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6011      	str	r1, [r2, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f62:	f107 0010 	add.w	r0, r7, #16
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f68:	9301      	str	r3, [sp, #4]
 8005f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f70:	2210      	movs	r2, #16
 8005f72:	f7ff fd5f 	bl	8005a34 <_PrintUnsigned>
        break;
 8005f76:	e041      	b.n	8005ffc <_VPrintTarget+0x37c>
 8005f78:	20014428 	.word	0x20014428
      case 's':
        s = va_arg(*pParamList, const char*);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1d19      	adds	r1, r3, #4
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005f8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <_VPrintTarget+0x314>
          s = "(null)";
 8005f90:	4b4a      	ldr	r3, [pc, #296]	; (80060bc <_VPrintTarget+0x43c>)
 8005f92:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005fa2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005faa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005fae:	f107 0310 	add.w	r3, r7, #16
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fcc1 	bl	800593c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005fbe:	d9e9      	bls.n	8005f94 <_VPrintTarget+0x314>
        break;
 8005fc0:	e01c      	b.n	8005ffc <_VPrintTarget+0x37c>
            break;
 8005fc2:	bf00      	nop
        break;
 8005fc4:	e01a      	b.n	8005ffc <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	1d19      	adds	r1, r3, #4
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6011      	str	r1, [r2, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005fd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fd6:	f107 0010 	add.w	r0, r7, #16
 8005fda:	2300      	movs	r3, #0
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	2308      	movs	r3, #8
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	2210      	movs	r2, #16
 8005fe6:	f7ff fd25 	bl	8005a34 <_PrintUnsigned>
        break;
 8005fea:	e007      	b.n	8005ffc <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005fec:	f107 0310 	add.w	r3, r7, #16
 8005ff0:	2125      	movs	r1, #37	; 0x25
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7ff fca2 	bl	800593c <_StoreChar>
        break;
 8005ff8:	e000      	b.n	8005ffc <_VPrintTarget+0x37c>
      default:
        break;
 8005ffa:	bf00      	nop
      }
      sFormat++;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e007      	b.n	8006014 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8006004:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	4611      	mov	r1, r2
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fc94 	bl	800593c <_StoreChar>
    }
  } while (*sFormat);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	f47f ae4d 	bne.w	8005cb8 <_VPrintTarget+0x38>
 800601e:	e000      	b.n	8006022 <_VPrintTarget+0x3a2>
      break;
 8006020:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d041      	beq.n	80060ac <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8006028:	6a3a      	ldr	r2, [r7, #32]
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	63bb      	str	r3, [r7, #56]	; 0x38
 8006038:	e00b      	b.n	8006052 <_VPrintTarget+0x3d2>
 800603a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006044:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	2b7f      	cmp	r3, #127	; 0x7f
 8006056:	d8f0      	bhi.n	800603a <_VPrintTarget+0x3ba>
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800605e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006066:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	637b      	str	r3, [r7, #52]	; 0x34
 800606c:	2300      	movs	r3, #0
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
 8006070:	e00b      	b.n	800608a <_VPrintTarget+0x40a>
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	b2da      	uxtb	r2, r3
 8006076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006078:	1c59      	adds	r1, r3, #1
 800607a:	6379      	str	r1, [r7, #52]	; 0x34
 800607c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006080:	b2d2      	uxtb	r2, r2
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	09db      	lsrs	r3, r3, #7
 8006088:	633b      	str	r3, [r7, #48]	; 0x30
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d8f0      	bhi.n	8006072 <_VPrintTarget+0x3f2>
 8006090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	637a      	str	r2, [r7, #52]	; 0x34
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	6979      	ldr	r1, [r7, #20]
 80060a4:	221a      	movs	r2, #26
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fad8 	bl	800565c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80060b2:	bf00      	nop
 80060b4:	3758      	adds	r7, #88	; 0x58
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	08008310 	.word	0x08008310

080060c0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060ce:	2300      	movs	r3, #0
 80060d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060d4:	4917      	ldr	r1, [pc, #92]	; (8006134 <SEGGER_SYSVIEW_Init+0x74>)
 80060d6:	4818      	ldr	r0, [pc, #96]	; (8006138 <SEGGER_SYSVIEW_Init+0x78>)
 80060d8:	f7ff f8d0 	bl	800527c <SEGGER_RTT_AllocUpBuffer>
 80060dc:	4603      	mov	r3, r0
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	4b16      	ldr	r3, [pc, #88]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060e2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060e4:	4b15      	ldr	r3, [pc, #84]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060e6:	785a      	ldrb	r2, [r3, #1]
 80060e8:	4b14      	ldr	r3, [pc, #80]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060ea:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060ec:	4b13      	ldr	r3, [pc, #76]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 80060ee:	7e1b      	ldrb	r3, [r3, #24]
 80060f0:	4618      	mov	r0, r3
 80060f2:	2300      	movs	r3, #0
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	2308      	movs	r3, #8
 80060f8:	4a11      	ldr	r2, [pc, #68]	; (8006140 <SEGGER_SYSVIEW_Init+0x80>)
 80060fa:	490f      	ldr	r1, [pc, #60]	; (8006138 <SEGGER_SYSVIEW_Init+0x78>)
 80060fc:	f7ff f942 	bl	8005384 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006100:	4b0e      	ldr	r3, [pc, #56]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006102:	2200      	movs	r2, #0
 8006104:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006106:	4b0f      	ldr	r3, [pc, #60]	; (8006144 <SEGGER_SYSVIEW_Init+0x84>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a0c      	ldr	r2, [pc, #48]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 800610c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800610e:	4a0b      	ldr	r2, [pc, #44]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800611a:	4a08      	ldr	r2, [pc, #32]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006120:	4a06      	ldr	r2, [pc, #24]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006126:	4b05      	ldr	r3, [pc, #20]	; (800613c <SEGGER_SYSVIEW_Init+0x7c>)
 8006128:	2200      	movs	r2, #0
 800612a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800612c:	bf00      	nop
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	200133f0 	.word	0x200133f0
 8006138:	08008318 	.word	0x08008318
 800613c:	200143f8 	.word	0x200143f8
 8006140:	200143f0 	.word	0x200143f0
 8006144:	e0001004 	.word	0xe0001004

08006148 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006150:	4a04      	ldr	r2, [pc, #16]	; (8006164 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6113      	str	r3, [r2, #16]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	200143f8 	.word	0x200143f8

08006168 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006170:	f3ef 8311 	mrs	r3, BASEPRI
 8006174:	f04f 0120 	mov.w	r1, #32
 8006178:	f381 8811 	msr	BASEPRI, r1
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4808      	ldr	r0, [pc, #32]	; (80061a0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006180:	f7ff f97c 	bl	800547c <_PreparePacket>
 8006184:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	68b9      	ldr	r1, [r7, #8]
 800618a:	68b8      	ldr	r0, [r7, #8]
 800618c:	f7ff fa66 	bl	800565c <_SendPacket>
  RECORD_END();
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f383 8811 	msr	BASEPRI, r3
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20014428 	.word	0x20014428

080061a4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b088      	sub	sp, #32
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061ae:	f3ef 8311 	mrs	r3, BASEPRI
 80061b2:	f04f 0120 	mov.w	r1, #32
 80061b6:	f381 8811 	msr	BASEPRI, r1
 80061ba:	617b      	str	r3, [r7, #20]
 80061bc:	4816      	ldr	r0, [pc, #88]	; (8006218 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80061be:	f7ff f95d 	bl	800547c <_PreparePacket>
 80061c2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	61bb      	str	r3, [r7, #24]
 80061d0:	e00b      	b.n	80061ea <SEGGER_SYSVIEW_RecordU32+0x46>
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	b2da      	uxtb	r2, r3
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	1c59      	adds	r1, r3, #1
 80061da:	61f9      	str	r1, [r7, #28]
 80061dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	09db      	lsrs	r3, r3, #7
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b7f      	cmp	r3, #127	; 0x7f
 80061ee:	d8f0      	bhi.n	80061d2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	61fa      	str	r2, [r7, #28]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	6938      	ldr	r0, [r7, #16]
 8006206:	f7ff fa29 	bl	800565c <_SendPacket>
  RECORD_END();
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f383 8811 	msr	BASEPRI, r3
}
 8006210:	bf00      	nop
 8006212:	3720      	adds	r7, #32
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	20014428 	.word	0x20014428

0800621c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800621c:	b580      	push	{r7, lr}
 800621e:	b08c      	sub	sp, #48	; 0x30
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006228:	f3ef 8311 	mrs	r3, BASEPRI
 800622c:	f04f 0120 	mov.w	r1, #32
 8006230:	f381 8811 	msr	BASEPRI, r1
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	4825      	ldr	r0, [pc, #148]	; (80062cc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006238:	f7ff f920 	bl	800547c <_PreparePacket>
 800623c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800624c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
 8006264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006278:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	623b      	str	r3, [r7, #32]
 8006282:	e00b      	b.n	800629c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	b2da      	uxtb	r2, r3
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1c59      	adds	r1, r3, #1
 800628c:	6279      	str	r1, [r7, #36]	; 0x24
 800628e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	701a      	strb	r2, [r3, #0]
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	09db      	lsrs	r3, r3, #7
 800629a:	623b      	str	r3, [r7, #32]
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2b7f      	cmp	r3, #127	; 0x7f
 80062a0:	d8f0      	bhi.n	8006284 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	627a      	str	r2, [r7, #36]	; 0x24
 80062a8:	6a3a      	ldr	r2, [r7, #32]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	6979      	ldr	r1, [r7, #20]
 80062b6:	69b8      	ldr	r0, [r7, #24]
 80062b8:	f7ff f9d0 	bl	800565c <_SendPacket>
  RECORD_END();
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f383 8811 	msr	BASEPRI, r3
}
 80062c2:	bf00      	nop
 80062c4:	3730      	adds	r7, #48	; 0x30
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20014428 	.word	0x20014428

080062d0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08e      	sub	sp, #56	; 0x38
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062de:	f3ef 8311 	mrs	r3, BASEPRI
 80062e2:	f04f 0120 	mov.w	r1, #32
 80062e6:	f381 8811 	msr	BASEPRI, r1
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	4832      	ldr	r0, [pc, #200]	; (80063b8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062ee:	f7ff f8c5 	bl	800547c <_PreparePacket>
 80062f2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	633b      	str	r3, [r7, #48]	; 0x30
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	6379      	str	r1, [r7, #52]	; 0x34
 800630c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	633b      	str	r3, [r7, #48]	; 0x30
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	2b7f      	cmp	r3, #127	; 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	637a      	str	r2, [r7, #52]	; 0x34
 8006326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800632e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	62bb      	str	r3, [r7, #40]	; 0x28
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006344:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	2b7f      	cmp	r3, #127	; 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800635e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	623b      	str	r3, [r7, #32]
 8006370:	e00b      	b.n	800638a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	1c59      	adds	r1, r3, #1
 800637a:	6279      	str	r1, [r7, #36]	; 0x24
 800637c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006380:	b2d2      	uxtb	r2, r2
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	09db      	lsrs	r3, r3, #7
 8006388:	623b      	str	r3, [r7, #32]
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b7f      	cmp	r3, #127	; 0x7f
 800638e:	d8f0      	bhi.n	8006372 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	627a      	str	r2, [r7, #36]	; 0x24
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	6979      	ldr	r1, [r7, #20]
 80063a4:	69b8      	ldr	r0, [r7, #24]
 80063a6:	f7ff f959 	bl	800565c <_SendPacket>
  RECORD_END();
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	f383 8811 	msr	BASEPRI, r3
}
 80063b0:	bf00      	nop
 80063b2:	3738      	adds	r7, #56	; 0x38
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	20014428 	.word	0x20014428

080063bc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80063bc:	b580      	push	{r7, lr}
 80063be:	b090      	sub	sp, #64	; 0x40
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ca:	f3ef 8311 	mrs	r3, BASEPRI
 80063ce:	f04f 0120 	mov.w	r1, #32
 80063d2:	f381 8811 	msr	BASEPRI, r1
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	4840      	ldr	r0, [pc, #256]	; (80064dc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063da:	f7ff f84f 	bl	800547c <_PreparePacket>
 80063de:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	63bb      	str	r3, [r7, #56]	; 0x38
 8006406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800640c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800641a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	633b      	str	r3, [r7, #48]	; 0x30
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	6379      	str	r1, [r7, #52]	; 0x34
 8006430:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	633b      	str	r3, [r7, #48]	; 0x30
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b7f      	cmp	r3, #127	; 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	637a      	str	r2, [r7, #52]	; 0x34
 800644a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006452:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
 800645c:	e00b      	b.n	8006476 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006464:	1c59      	adds	r1, r3, #1
 8006466:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006468:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	09db      	lsrs	r3, r3, #7
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	2b7f      	cmp	r3, #127	; 0x7f
 800647a:	d8f0      	bhi.n	800645e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	627b      	str	r3, [r7, #36]	; 0x24
 8006490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006492:	623b      	str	r3, [r7, #32]
 8006494:	e00b      	b.n	80064ae <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	1c59      	adds	r1, r3, #1
 800649e:	6279      	str	r1, [r7, #36]	; 0x24
 80064a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	09db      	lsrs	r3, r3, #7
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	2b7f      	cmp	r3, #127	; 0x7f
 80064b2:	d8f0      	bhi.n	8006496 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	1c5a      	adds	r2, r3, #1
 80064b8:	627a      	str	r2, [r7, #36]	; 0x24
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	6979      	ldr	r1, [r7, #20]
 80064c8:	69b8      	ldr	r0, [r7, #24]
 80064ca:	f7ff f8c7 	bl	800565c <_SendPacket>
  RECORD_END();
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f383 8811 	msr	BASEPRI, r3
}
 80064d4:	bf00      	nop
 80064d6:	3740      	adds	r7, #64	; 0x40
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	20014428 	.word	0x20014428

080064e0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08c      	sub	sp, #48	; 0x30
 80064e4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064e6:	4b59      	ldr	r3, [pc, #356]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064ec:	f3ef 8311 	mrs	r3, BASEPRI
 80064f0:	f04f 0120 	mov.w	r1, #32
 80064f4:	f381 8811 	msr	BASEPRI, r1
 80064f8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064fa:	4b54      	ldr	r3, [pc, #336]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	220a      	movs	r2, #10
 8006500:	4953      	ldr	r1, [pc, #332]	; (8006650 <SEGGER_SYSVIEW_Start+0x170>)
 8006502:	4618      	mov	r0, r3
 8006504:	f7f9 fe64 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800650e:	f7fe fb11 	bl	8004b34 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006512:	200a      	movs	r0, #10
 8006514:	f7ff fe28 	bl	8006168 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	f04f 0120 	mov.w	r1, #32
 8006520:	f381 8811 	msr	BASEPRI, r1
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	484b      	ldr	r0, [pc, #300]	; (8006654 <SEGGER_SYSVIEW_Start+0x174>)
 8006528:	f7fe ffa8 	bl	800547c <_PreparePacket>
 800652c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006536:	4b45      	ldr	r3, [pc, #276]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28
 800653c:	e00b      	b.n	8006556 <SEGGER_SYSVIEW_Start+0x76>
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	b2da      	uxtb	r2, r3
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	1c59      	adds	r1, r3, #1
 8006546:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	09db      	lsrs	r3, r3, #7
 8006554:	62bb      	str	r3, [r7, #40]	; 0x28
 8006556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006558:	2b7f      	cmp	r3, #127	; 0x7f
 800655a:	d8f0      	bhi.n	800653e <SEGGER_SYSVIEW_Start+0x5e>
 800655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
 8006570:	4b36      	ldr	r3, [pc, #216]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	e00b      	b.n	8006590 <SEGGER_SYSVIEW_Start+0xb0>
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	6279      	str	r1, [r7, #36]	; 0x24
 8006582:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	09db      	lsrs	r3, r3, #7
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b7f      	cmp	r3, #127	; 0x7f
 8006594:	d8f0      	bhi.n	8006578 <SEGGER_SYSVIEW_Start+0x98>
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	627a      	str	r2, [r7, #36]	; 0x24
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	4b28      	ldr	r3, [pc, #160]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e00b      	b.n	80065ca <SEGGER_SYSVIEW_Start+0xea>
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	61f9      	str	r1, [r7, #28]
 80065bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	09db      	lsrs	r3, r3, #7
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b7f      	cmp	r3, #127	; 0x7f
 80065ce:	d8f0      	bhi.n	80065b2 <SEGGER_SYSVIEW_Start+0xd2>
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	61fa      	str	r2, [r7, #28]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e00b      	b.n	8006602 <SEGGER_SYSVIEW_Start+0x122>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	6179      	str	r1, [r7, #20]
 80065f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b7f      	cmp	r3, #127	; 0x7f
 8006606:	d8f0      	bhi.n	80065ea <SEGGER_SYSVIEW_Start+0x10a>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	617a      	str	r2, [r7, #20]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006618:	2218      	movs	r2, #24
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff f81d 	bl	800565c <_SendPacket>
      RECORD_END();
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006628:	4b08      	ldr	r3, [pc, #32]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <SEGGER_SYSVIEW_Start+0x16c>)
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006636:	f000 f9eb 	bl	8006a10 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800663a:	f000 f9b1 	bl	80069a0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800663e:	f000 fc2d 	bl	8006e9c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006642:	bf00      	nop
 8006644:	3730      	adds	r7, #48	; 0x30
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200143f8 	.word	0x200143f8
 8006650:	08008358 	.word	0x08008358
 8006654:	20014428 	.word	0x20014428

08006658 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800665e:	f3ef 8311 	mrs	r3, BASEPRI
 8006662:	f04f 0120 	mov.w	r1, #32
 8006666:	f381 8811 	msr	BASEPRI, r1
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	480b      	ldr	r0, [pc, #44]	; (800669c <SEGGER_SYSVIEW_Stop+0x44>)
 800666e:	f7fe ff05 	bl	800547c <_PreparePacket>
 8006672:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006674:	4b0a      	ldr	r3, [pc, #40]	; (80066a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800667c:	220b      	movs	r2, #11
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6838      	ldr	r0, [r7, #0]
 8006682:	f7fe ffeb 	bl	800565c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006686:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f383 8811 	msr	BASEPRI, r3
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20014428 	.word	0x20014428
 80066a0:	200143f8 	.word	0x200143f8

080066a4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	; 0x30
 80066a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066aa:	f3ef 8311 	mrs	r3, BASEPRI
 80066ae:	f04f 0120 	mov.w	r1, #32
 80066b2:	f381 8811 	msr	BASEPRI, r1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	4845      	ldr	r0, [pc, #276]	; (80067d0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ba:	f7fe fedf 	bl	800547c <_PreparePacket>
 80066be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066c8:	4b42      	ldr	r3, [pc, #264]	; (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80066ce:	e00b      	b.n	80066e8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	09db      	lsrs	r3, r3, #7
 80066e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	2b7f      	cmp	r3, #127	; 0x7f
 80066ec:	d8f0      	bhi.n	80066d0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
 8006702:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	623b      	str	r3, [r7, #32]
 8006708:	e00b      	b.n	8006722 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	1c59      	adds	r1, r3, #1
 8006712:	6279      	str	r1, [r7, #36]	; 0x24
 8006714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	2b7f      	cmp	r3, #127	; 0x7f
 8006726:	d8f0      	bhi.n	800670a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	627a      	str	r2, [r7, #36]	; 0x24
 800672e:	6a3a      	ldr	r2, [r7, #32]
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	4b25      	ldr	r3, [pc, #148]	; (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e00b      	b.n	800675c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	61f9      	str	r1, [r7, #28]
 800674e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d8f0      	bhi.n	8006744 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	61fa      	str	r2, [r7, #28]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	e00b      	b.n	8006794 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	6179      	str	r1, [r7, #20]
 8006786:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	09db      	lsrs	r3, r3, #7
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b7f      	cmp	r3, #127	; 0x7f
 8006798:	d8f0      	bhi.n	800677c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	617a      	str	r2, [r7, #20]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067aa:	2218      	movs	r2, #24
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	68b8      	ldr	r0, [r7, #8]
 80067b0:	f7fe ff54 	bl	800565c <_SendPacket>
  RECORD_END();
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ba:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067c2:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c6:	4798      	blx	r3
  }
}
 80067c8:	bf00      	nop
 80067ca:	3730      	adds	r7, #48	; 0x30
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20014428 	.word	0x20014428
 80067d4:	200143f8 	.word	0x200143f8

080067d8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b092      	sub	sp, #72	; 0x48
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067e0:	f3ef 8311 	mrs	r3, BASEPRI
 80067e4:	f04f 0120 	mov.w	r1, #32
 80067e8:	f381 8811 	msr	BASEPRI, r1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	486a      	ldr	r0, [pc, #424]	; (8006998 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067f0:	f7fe fe44 	bl	800547c <_PreparePacket>
 80067f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b66      	ldr	r3, [pc, #408]	; (800699c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	643b      	str	r3, [r7, #64]	; 0x40
 800680a:	e00b      	b.n	8006824 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800680c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680e:	b2da      	uxtb	r2, r3
 8006810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006812:	1c59      	adds	r1, r3, #1
 8006814:	6479      	str	r1, [r7, #68]	; 0x44
 8006816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006820:	09db      	lsrs	r3, r3, #7
 8006822:	643b      	str	r3, [r7, #64]	; 0x40
 8006824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006826:	2b7f      	cmp	r3, #127	; 0x7f
 8006828:	d8f0      	bhi.n	800680c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800682a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	647a      	str	r2, [r7, #68]	; 0x44
 8006830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006838:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	63bb      	str	r3, [r7, #56]	; 0x38
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
 800685e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006860:	2b7f      	cmp	r3, #127	; 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	63fa      	str	r2, [r7, #60]	; 0x3c
 800686a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006872:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7fe fdcd 	bl	800541c <_EncodeStr>
 8006882:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006884:	2209      	movs	r2, #9
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7fe fee7 	bl	800565c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	637b      	str	r3, [r7, #52]	; 0x34
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b40      	ldr	r3, [pc, #256]	; (800699c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	633b      	str	r3, [r7, #48]	; 0x30
 80068a2:	e00b      	b.n	80068bc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6379      	str	r1, [r7, #52]	; 0x34
 80068ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	633b      	str	r3, [r7, #48]	; 0x30
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	2b7f      	cmp	r3, #127	; 0x7f
 80068c0:	d8f0      	bhi.n	80068a4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	637a      	str	r2, [r7, #52]	; 0x34
 80068c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	62bb      	str	r3, [r7, #40]	; 0x28
 80068dc:	e00b      	b.n	80068f6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f8:	2b7f      	cmp	r3, #127	; 0x7f
 80068fa:	d8f0      	bhi.n	80068de <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	627b      	str	r3, [r7, #36]	; 0x24
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	e00b      	b.n	8006930 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	6279      	str	r1, [r7, #36]	; 0x24
 8006922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	09db      	lsrs	r3, r3, #7
 800692e:	623b      	str	r3, [r7, #32]
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b7f      	cmp	r3, #127	; 0x7f
 8006934:	d8f0      	bhi.n	8006918 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	627a      	str	r2, [r7, #36]	; 0x24
 800693c:	6a3a      	ldr	r2, [r7, #32]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	e00b      	b.n	8006968 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	61f9      	str	r1, [r7, #28]
 800695a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b7f      	cmp	r3, #127	; 0x7f
 800696c:	d8f0      	bhi.n	8006950 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	61fa      	str	r2, [r7, #28]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800697e:	2215      	movs	r2, #21
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f7fe fe6a 	bl	800565c <_SendPacket>
  RECORD_END();
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
 8006990:	3748      	adds	r7, #72	; 0x48
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20014428 	.word	0x20014428
 800699c:	200143f8 	.word	0x200143f8

080069a0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4798      	blx	r3
  }
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	200143f8 	.word	0x200143f8

080069c8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069d0:	f3ef 8311 	mrs	r3, BASEPRI
 80069d4:	f04f 0120 	mov.w	r1, #32
 80069d8:	f381 8811 	msr	BASEPRI, r1
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	480b      	ldr	r0, [pc, #44]	; (8006a0c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069e0:	f7fe fd4c 	bl	800547c <_PreparePacket>
 80069e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e6:	2280      	movs	r2, #128	; 0x80
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7fe fd16 	bl	800541c <_EncodeStr>
 80069f0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80069f2:	220e      	movs	r2, #14
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	6938      	ldr	r0, [r7, #16]
 80069f8:	f7fe fe30 	bl	800565c <_SendPacket>
  RECORD_END();
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f383 8811 	msr	BASEPRI, r3
}
 8006a02:	bf00      	nop
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20014428 	.word	0x20014428

08006a10 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a10:	b590      	push	{r4, r7, lr}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a16:	4b15      	ldr	r3, [pc, #84]	; (8006a6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01a      	beq.n	8006a54 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a1e:	4b13      	ldr	r3, [pc, #76]	; (8006a6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d015      	beq.n	8006a54 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a28:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4798      	blx	r3
 8006a30:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a34:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	000a      	movs	r2, r1
 8006a44:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a46:	4613      	mov	r3, r2
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	200d      	movs	r0, #13
 8006a4e:	f7ff fbe5 	bl	800621c <SEGGER_SYSVIEW_RecordU32x2>
 8006a52:	e006      	b.n	8006a62 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	200c      	movs	r0, #12
 8006a5c:	f7ff fba2 	bl	80061a4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd90      	pop	{r4, r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200143f8 	.word	0x200143f8
 8006a70:	e0001004 	.word	0xe0001004

08006a74 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7e:	f04f 0120 	mov.w	r1, #32
 8006a82:	f381 8811 	msr	BASEPRI, r1
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	4819      	ldr	r0, [pc, #100]	; (8006af0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a8a:	f7fe fcf7 	bl	800547c <_PreparePacket>
 8006a8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a94:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	e00b      	b.n	8006ac0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	6179      	str	r1, [r7, #20]
 8006ab2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	09db      	lsrs	r3, r3, #7
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac4:	d8f0      	bhi.n	8006aa8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f7fe fdbe 	bl	800565c <_SendPacket>
  RECORD_END();
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f383 8811 	msr	BASEPRI, r3
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20014428 	.word	0x20014428
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006afe:	f3ef 8311 	mrs	r3, BASEPRI
 8006b02:	f04f 0120 	mov.w	r1, #32
 8006b06:	f381 8811 	msr	BASEPRI, r1
 8006b0a:	607b      	str	r3, [r7, #4]
 8006b0c:	4807      	ldr	r0, [pc, #28]	; (8006b2c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b0e:	f7fe fcb5 	bl	800547c <_PreparePacket>
 8006b12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b14:	2203      	movs	r2, #3
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6838      	ldr	r0, [r7, #0]
 8006b1a:	f7fe fd9f 	bl	800565c <_SendPacket>
  RECORD_END();
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f383 8811 	msr	BASEPRI, r3
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20014428 	.word	0x20014428

08006b30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b36:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3a:	f04f 0120 	mov.w	r1, #32
 8006b3e:	f381 8811 	msr	BASEPRI, r1
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	4807      	ldr	r0, [pc, #28]	; (8006b64 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b46:	f7fe fc99 	bl	800547c <_PreparePacket>
 8006b4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b4c:	2212      	movs	r2, #18
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	f7fe fd83 	bl	800565c <_SendPacket>
  RECORD_END();
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f383 8811 	msr	BASEPRI, r3
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	20014428 	.word	0x20014428

08006b68 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b72:	f04f 0120 	mov.w	r1, #32
 8006b76:	f381 8811 	msr	BASEPRI, r1
 8006b7a:	607b      	str	r3, [r7, #4]
 8006b7c:	4807      	ldr	r0, [pc, #28]	; (8006b9c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b7e:	f7fe fc7d 	bl	800547c <_PreparePacket>
 8006b82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b84:	2211      	movs	r2, #17
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6838      	ldr	r0, [r7, #0]
 8006b8a:	f7fe fd67 	bl	800565c <_SendPacket>
  RECORD_END();
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f383 8811 	msr	BASEPRI, r3
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20014428 	.word	0x20014428

08006ba0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bac:	f04f 0120 	mov.w	r1, #32
 8006bb0:	f381 8811 	msr	BASEPRI, r1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	4819      	ldr	r0, [pc, #100]	; (8006c1c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006bb8:	f7fe fc60 	bl	800547c <_PreparePacket>
 8006bbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e00b      	b.n	8006bee <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	61f9      	str	r1, [r7, #28]
 8006be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf2:	d8f0      	bhi.n	8006bd6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	61fa      	str	r2, [r7, #28]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c04:	2208      	movs	r2, #8
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6938      	ldr	r0, [r7, #16]
 8006c0a:	f7fe fd27 	bl	800565c <_SendPacket>
  RECORD_END();
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f383 8811 	msr	BASEPRI, r3
}
 8006c14:	bf00      	nop
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20014428 	.word	0x20014428
 8006c20:	200143f8 	.word	0x200143f8

08006c24 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c30:	f04f 0120 	mov.w	r1, #32
 8006c34:	f381 8811 	msr	BASEPRI, r1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4819      	ldr	r0, [pc, #100]	; (8006ca0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c3c:	f7fe fc1e 	bl	800547c <_PreparePacket>
 8006c40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c46:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e00b      	b.n	8006c72 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	1c59      	adds	r1, r3, #1
 8006c62:	61f9      	str	r1, [r7, #28]
 8006c64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	09db      	lsrs	r3, r3, #7
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b7f      	cmp	r3, #127	; 0x7f
 8006c76:	d8f0      	bhi.n	8006c5a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	61fa      	str	r2, [r7, #28]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c88:	2204      	movs	r2, #4
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6938      	ldr	r0, [r7, #16]
 8006c8e:	f7fe fce5 	bl	800565c <_SendPacket>
  RECORD_END();
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	20014428 	.word	0x20014428
 8006ca4:	200143f8 	.word	0x200143f8

08006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb4:	f04f 0120 	mov.w	r1, #32
 8006cb8:	f381 8811 	msr	BASEPRI, r1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	4819      	ldr	r0, [pc, #100]	; (8006d24 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006cc0:	f7fe fbdc 	bl	800547c <_PreparePacket>
 8006cc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cca:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	61f9      	str	r1, [r7, #28]
 8006ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d0c:	2206      	movs	r2, #6
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6938      	ldr	r0, [r7, #16]
 8006d12:	f7fe fca3 	bl	800565c <_SendPacket>
  RECORD_END();
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20014428 	.word	0x20014428
 8006d28:	200143f8 	.word	0x200143f8

08006d2c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d34:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	200143f8 	.word	0x200143f8

08006d4c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	; 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d56:	4b40      	ldr	r3, [pc, #256]	; (8006e58 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d077      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006d5e:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d64:	2300      	movs	r3, #0
 8006d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d68:	e008      	b.n	8006d7c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	3301      	adds	r3, #1
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3f2      	bcc.n	8006d6a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d84:	e000      	b.n	8006d88 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d86:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d055      	beq.n	8006e3a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d92:	f04f 0120 	mov.w	r1, #32
 8006d96:	f381 8811 	msr	BASEPRI, r1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	482f      	ldr	r0, [pc, #188]	; (8006e5c <SEGGER_SYSVIEW_SendModule+0x110>)
 8006d9e:	f7fe fb6d 	bl	800547c <_PreparePacket>
 8006da2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	e00b      	b.n	8006dca <SEGGER_SYSVIEW_SendModule+0x7e>
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	6279      	str	r1, [r7, #36]	; 0x24
 8006dbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8006dce:	d8f0      	bhi.n	8006db2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	627a      	str	r2, [r7, #36]	; 0x24
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e00b      	b.n	8006e04 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	61f9      	str	r1, [r7, #28]
 8006df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	09db      	lsrs	r3, r3, #7
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b7f      	cmp	r3, #127	; 0x7f
 8006e08:	d8f0      	bhi.n	8006dec <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2280      	movs	r2, #128	; 0x80
 8006e20:	4619      	mov	r1, r3
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7fe fafa 	bl	800541c <_EncodeStr>
 8006e28:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e2a:	2216      	movs	r2, #22
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7fe fc14 	bl	800565c <_SendPacket>
      RECORD_END();
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d006      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x102>
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4798      	blx	r3
    }
  }
}
 8006e4e:	bf00      	nop
 8006e50:	3730      	adds	r7, #48	; 0x30
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20014420 	.word	0x20014420
 8006e5c:	20014428 	.word	0x20014428

08006e60 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e66:	4b0c      	ldr	r3, [pc, #48]	; (8006e98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00f      	beq.n	8006e8e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f2      	bne.n	8006e74 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006e8e:	bf00      	nop
 8006e90:	3708      	adds	r7, #8
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	20014420 	.word	0x20014420

08006e9c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ea6:	f04f 0120 	mov.w	r1, #32
 8006eaa:	f381 8811 	msr	BASEPRI, r1
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	4817      	ldr	r0, [pc, #92]	; (8006f10 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006eb2:	f7fe fae3 	bl	800547c <_PreparePacket>
 8006eb6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	4b14      	ldr	r3, [pc, #80]	; (8006f14 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	613b      	str	r3, [r7, #16]
 8006ec6:	e00b      	b.n	8006ee0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	b2da      	uxtb	r2, r3
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	1c59      	adds	r1, r3, #1
 8006ed0:	6179      	str	r1, [r7, #20]
 8006ed2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	09db      	lsrs	r3, r3, #7
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ee4:	d8f0      	bhi.n	8006ec8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	617a      	str	r2, [r7, #20]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ef6:	221b      	movs	r2, #27
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	68b8      	ldr	r0, [r7, #8]
 8006efc:	f7fe fbae 	bl	800565c <_SendPacket>
  RECORD_END();
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f383 8811 	msr	BASEPRI, r3
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20014428 	.word	0x20014428
 8006f14:	20014424 	.word	0x20014424

08006f18 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f18:	b40f      	push	{r0, r1, r2, r3}
 8006f1a:	b580      	push	{r7, lr}
 8006f1c:	b082      	sub	sp, #8
 8006f1e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f20:	f107 0314 	add.w	r3, r7, #20
 8006f24:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f26:	1d3b      	adds	r3, r7, #4
 8006f28:	461a      	mov	r2, r3
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f7fe fea7 	bl	8005c80 <_VPrintTarget>
  va_end(ParamList);
}
 8006f32:	bf00      	nop
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr

08006f40 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b08a      	sub	sp, #40	; 0x28
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f48:	f3ef 8311 	mrs	r3, BASEPRI
 8006f4c:	f04f 0120 	mov.w	r1, #32
 8006f50:	f381 8811 	msr	BASEPRI, r1
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	4827      	ldr	r0, [pc, #156]	; (8006ff4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f58:	f7fe fa90 	bl	800547c <_PreparePacket>
 8006f5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f5e:	2280      	movs	r2, #128	; 0x80
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	6938      	ldr	r0, [r7, #16]
 8006f64:	f7fe fa5a 	bl	800541c <_EncodeStr>
 8006f68:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f6e:	2301      	movs	r3, #1
 8006f70:	623b      	str	r3, [r7, #32]
 8006f72:	e00b      	b.n	8006f8c <SEGGER_SYSVIEW_Warn+0x4c>
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	1c59      	adds	r1, r3, #1
 8006f7c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	09db      	lsrs	r3, r3, #7
 8006f8a:	623b      	str	r3, [r7, #32]
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f90:	d8f0      	bhi.n	8006f74 <SEGGER_SYSVIEW_Warn+0x34>
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	627a      	str	r2, [r7, #36]	; 0x24
 8006f98:	6a3a      	ldr	r2, [r7, #32]
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	61fb      	str	r3, [r7, #28]
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e00b      	b.n	8006fc4 <SEGGER_SYSVIEW_Warn+0x84>
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	1c59      	adds	r1, r3, #1
 8006fb4:	61f9      	str	r1, [r7, #28]
 8006fb6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	09db      	lsrs	r3, r3, #7
 8006fc2:	61bb      	str	r3, [r7, #24]
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc8:	d8f0      	bhi.n	8006fac <SEGGER_SYSVIEW_Warn+0x6c>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	61fa      	str	r2, [r7, #28]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006fda:	221a      	movs	r2, #26
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	6938      	ldr	r0, [r7, #16]
 8006fe0:	f7fe fb3c 	bl	800565c <_SendPacket>
  RECORD_END();
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f383 8811 	msr	BASEPRI, r3
}
 8006fea:	bf00      	nop
 8006fec:	3728      	adds	r7, #40	; 0x28
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20014428 	.word	0x20014428

08006ff8 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006ffc:	4b13      	ldr	r3, [pc, #76]	; (800704c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ffe:	7e1b      	ldrb	r3, [r3, #24]
 8007000:	4619      	mov	r1, r3
 8007002:	4a13      	ldr	r2, [pc, #76]	; (8007050 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007004:	460b      	mov	r3, r1
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	440b      	add	r3, r1
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4413      	add	r3, r2
 800700e:	336c      	adds	r3, #108	; 0x6c
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	4b0e      	ldr	r3, [pc, #56]	; (800704c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007014:	7e1b      	ldrb	r3, [r3, #24]
 8007016:	4618      	mov	r0, r3
 8007018:	490d      	ldr	r1, [pc, #52]	; (8007050 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800701a:	4603      	mov	r3, r0
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4403      	add	r3, r0
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	440b      	add	r3, r1
 8007024:	3370      	adds	r3, #112	; 0x70
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d00b      	beq.n	8007044 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800702c:	4b07      	ldr	r3, [pc, #28]	; (800704c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800702e:	789b      	ldrb	r3, [r3, #2]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d107      	bne.n	8007044 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007034:	4b05      	ldr	r3, [pc, #20]	; (800704c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007036:	2201      	movs	r2, #1
 8007038:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800703a:	f7fe fa2b 	bl	8005494 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800703e:	4b03      	ldr	r3, [pc, #12]	; (800704c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007040:	2200      	movs	r2, #0
 8007042:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007046:	781b      	ldrb	r3, [r3, #0]
}
 8007048:	4618      	mov	r0, r3
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200143f8 	.word	0x200143f8
 8007050:	20012f38 	.word	0x20012f38

08007054 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	2000      	movs	r0, #0
 8007068:	f7fe f8e2 	bl	8005230 <SEGGER_RTT_Write>
  return len;
 800706c:	683b      	ldr	r3, [r7, #0]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <__libc_init_array>:
 8007078:	b570      	push	{r4, r5, r6, lr}
 800707a:	4d0d      	ldr	r5, [pc, #52]	; (80070b0 <__libc_init_array+0x38>)
 800707c:	4c0d      	ldr	r4, [pc, #52]	; (80070b4 <__libc_init_array+0x3c>)
 800707e:	1b64      	subs	r4, r4, r5
 8007080:	10a4      	asrs	r4, r4, #2
 8007082:	2600      	movs	r6, #0
 8007084:	42a6      	cmp	r6, r4
 8007086:	d109      	bne.n	800709c <__libc_init_array+0x24>
 8007088:	4d0b      	ldr	r5, [pc, #44]	; (80070b8 <__libc_init_array+0x40>)
 800708a:	4c0c      	ldr	r4, [pc, #48]	; (80070bc <__libc_init_array+0x44>)
 800708c:	f001 f8ae 	bl	80081ec <_init>
 8007090:	1b64      	subs	r4, r4, r5
 8007092:	10a4      	asrs	r4, r4, #2
 8007094:	2600      	movs	r6, #0
 8007096:	42a6      	cmp	r6, r4
 8007098:	d105      	bne.n	80070a6 <__libc_init_array+0x2e>
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a0:	4798      	blx	r3
 80070a2:	3601      	adds	r6, #1
 80070a4:	e7ee      	b.n	8007084 <__libc_init_array+0xc>
 80070a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070aa:	4798      	blx	r3
 80070ac:	3601      	adds	r6, #1
 80070ae:	e7f2      	b.n	8007096 <__libc_init_array+0x1e>
 80070b0:	08008414 	.word	0x08008414
 80070b4:	08008414 	.word	0x08008414
 80070b8:	08008414 	.word	0x08008414
 80070bc:	08008418 	.word	0x08008418

080070c0 <memcmp>:
 80070c0:	b510      	push	{r4, lr}
 80070c2:	3901      	subs	r1, #1
 80070c4:	4402      	add	r2, r0
 80070c6:	4290      	cmp	r0, r2
 80070c8:	d101      	bne.n	80070ce <memcmp+0xe>
 80070ca:	2000      	movs	r0, #0
 80070cc:	e005      	b.n	80070da <memcmp+0x1a>
 80070ce:	7803      	ldrb	r3, [r0, #0]
 80070d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	d001      	beq.n	80070dc <memcmp+0x1c>
 80070d8:	1b18      	subs	r0, r3, r4
 80070da:	bd10      	pop	{r4, pc}
 80070dc:	3001      	adds	r0, #1
 80070de:	e7f2      	b.n	80070c6 <memcmp+0x6>

080070e0 <memcpy>:
 80070e0:	440a      	add	r2, r1
 80070e2:	4291      	cmp	r1, r2
 80070e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e8:	d100      	bne.n	80070ec <memcpy+0xc>
 80070ea:	4770      	bx	lr
 80070ec:	b510      	push	{r4, lr}
 80070ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f6:	4291      	cmp	r1, r2
 80070f8:	d1f9      	bne.n	80070ee <memcpy+0xe>
 80070fa:	bd10      	pop	{r4, pc}

080070fc <memset>:
 80070fc:	4402      	add	r2, r0
 80070fe:	4603      	mov	r3, r0
 8007100:	4293      	cmp	r3, r2
 8007102:	d100      	bne.n	8007106 <memset+0xa>
 8007104:	4770      	bx	lr
 8007106:	f803 1b01 	strb.w	r1, [r3], #1
 800710a:	e7f9      	b.n	8007100 <memset+0x4>

0800710c <_puts_r>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	460e      	mov	r6, r1
 8007110:	4605      	mov	r5, r0
 8007112:	b118      	cbz	r0, 800711c <_puts_r+0x10>
 8007114:	6983      	ldr	r3, [r0, #24]
 8007116:	b90b      	cbnz	r3, 800711c <_puts_r+0x10>
 8007118:	f000 fa7c 	bl	8007614 <__sinit>
 800711c:	69ab      	ldr	r3, [r5, #24]
 800711e:	68ac      	ldr	r4, [r5, #8]
 8007120:	b913      	cbnz	r3, 8007128 <_puts_r+0x1c>
 8007122:	4628      	mov	r0, r5
 8007124:	f000 fa76 	bl	8007614 <__sinit>
 8007128:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <_puts_r+0xd0>)
 800712a:	429c      	cmp	r4, r3
 800712c:	d120      	bne.n	8007170 <_puts_r+0x64>
 800712e:	686c      	ldr	r4, [r5, #4]
 8007130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007132:	07db      	lsls	r3, r3, #31
 8007134:	d405      	bmi.n	8007142 <_puts_r+0x36>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	0598      	lsls	r0, r3, #22
 800713a:	d402      	bmi.n	8007142 <_puts_r+0x36>
 800713c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800713e:	f000 fb07 	bl	8007750 <__retarget_lock_acquire_recursive>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	0719      	lsls	r1, r3, #28
 8007146:	d51d      	bpl.n	8007184 <_puts_r+0x78>
 8007148:	6923      	ldr	r3, [r4, #16]
 800714a:	b1db      	cbz	r3, 8007184 <_puts_r+0x78>
 800714c:	3e01      	subs	r6, #1
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007154:	3b01      	subs	r3, #1
 8007156:	60a3      	str	r3, [r4, #8]
 8007158:	bb39      	cbnz	r1, 80071aa <_puts_r+0x9e>
 800715a:	2b00      	cmp	r3, #0
 800715c:	da38      	bge.n	80071d0 <_puts_r+0xc4>
 800715e:	4622      	mov	r2, r4
 8007160:	210a      	movs	r1, #10
 8007162:	4628      	mov	r0, r5
 8007164:	f000 f87c 	bl	8007260 <__swbuf_r>
 8007168:	3001      	adds	r0, #1
 800716a:	d011      	beq.n	8007190 <_puts_r+0x84>
 800716c:	250a      	movs	r5, #10
 800716e:	e011      	b.n	8007194 <_puts_r+0x88>
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <_puts_r+0xd4>)
 8007172:	429c      	cmp	r4, r3
 8007174:	d101      	bne.n	800717a <_puts_r+0x6e>
 8007176:	68ac      	ldr	r4, [r5, #8]
 8007178:	e7da      	b.n	8007130 <_puts_r+0x24>
 800717a:	4b1a      	ldr	r3, [pc, #104]	; (80071e4 <_puts_r+0xd8>)
 800717c:	429c      	cmp	r4, r3
 800717e:	bf08      	it	eq
 8007180:	68ec      	ldreq	r4, [r5, #12]
 8007182:	e7d5      	b.n	8007130 <_puts_r+0x24>
 8007184:	4621      	mov	r1, r4
 8007186:	4628      	mov	r0, r5
 8007188:	f000 f8bc 	bl	8007304 <__swsetup_r>
 800718c:	2800      	cmp	r0, #0
 800718e:	d0dd      	beq.n	800714c <_puts_r+0x40>
 8007190:	f04f 35ff 	mov.w	r5, #4294967295
 8007194:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d405      	bmi.n	80071a6 <_puts_r+0x9a>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	059b      	lsls	r3, r3, #22
 800719e:	d402      	bmi.n	80071a6 <_puts_r+0x9a>
 80071a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071a2:	f000 fad6 	bl	8007752 <__retarget_lock_release_recursive>
 80071a6:	4628      	mov	r0, r5
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	da04      	bge.n	80071b8 <_puts_r+0xac>
 80071ae:	69a2      	ldr	r2, [r4, #24]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	dc06      	bgt.n	80071c2 <_puts_r+0xb6>
 80071b4:	290a      	cmp	r1, #10
 80071b6:	d004      	beq.n	80071c2 <_puts_r+0xb6>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	6022      	str	r2, [r4, #0]
 80071be:	7019      	strb	r1, [r3, #0]
 80071c0:	e7c5      	b.n	800714e <_puts_r+0x42>
 80071c2:	4622      	mov	r2, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f84b 	bl	8007260 <__swbuf_r>
 80071ca:	3001      	adds	r0, #1
 80071cc:	d1bf      	bne.n	800714e <_puts_r+0x42>
 80071ce:	e7df      	b.n	8007190 <_puts_r+0x84>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	250a      	movs	r5, #10
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	701d      	strb	r5, [r3, #0]
 80071da:	e7db      	b.n	8007194 <_puts_r+0x88>
 80071dc:	08008398 	.word	0x08008398
 80071e0:	080083b8 	.word	0x080083b8
 80071e4:	08008378 	.word	0x08008378

080071e8 <puts>:
 80071e8:	4b02      	ldr	r3, [pc, #8]	; (80071f4 <puts+0xc>)
 80071ea:	4601      	mov	r1, r0
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	f7ff bf8d 	b.w	800710c <_puts_r>
 80071f2:	bf00      	nop
 80071f4:	2000001c 	.word	0x2000001c

080071f8 <sniprintf>:
 80071f8:	b40c      	push	{r2, r3}
 80071fa:	b530      	push	{r4, r5, lr}
 80071fc:	4b17      	ldr	r3, [pc, #92]	; (800725c <sniprintf+0x64>)
 80071fe:	1e0c      	subs	r4, r1, #0
 8007200:	681d      	ldr	r5, [r3, #0]
 8007202:	b09d      	sub	sp, #116	; 0x74
 8007204:	da08      	bge.n	8007218 <sniprintf+0x20>
 8007206:	238b      	movs	r3, #139	; 0x8b
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	b01d      	add	sp, #116	; 0x74
 8007210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007214:	b002      	add	sp, #8
 8007216:	4770      	bx	lr
 8007218:	f44f 7302 	mov.w	r3, #520	; 0x208
 800721c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007220:	bf14      	ite	ne
 8007222:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007226:	4623      	moveq	r3, r4
 8007228:	9304      	str	r3, [sp, #16]
 800722a:	9307      	str	r3, [sp, #28]
 800722c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007230:	9002      	str	r0, [sp, #8]
 8007232:	9006      	str	r0, [sp, #24]
 8007234:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007238:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800723a:	ab21      	add	r3, sp, #132	; 0x84
 800723c:	a902      	add	r1, sp, #8
 800723e:	4628      	mov	r0, r5
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	f000 fc29 	bl	8007a98 <_svfiprintf_r>
 8007246:	1c43      	adds	r3, r0, #1
 8007248:	bfbc      	itt	lt
 800724a:	238b      	movlt	r3, #139	; 0x8b
 800724c:	602b      	strlt	r3, [r5, #0]
 800724e:	2c00      	cmp	r4, #0
 8007250:	d0dd      	beq.n	800720e <sniprintf+0x16>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	2200      	movs	r2, #0
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	e7d9      	b.n	800720e <sniprintf+0x16>
 800725a:	bf00      	nop
 800725c:	2000001c 	.word	0x2000001c

08007260 <__swbuf_r>:
 8007260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007262:	460e      	mov	r6, r1
 8007264:	4614      	mov	r4, r2
 8007266:	4605      	mov	r5, r0
 8007268:	b118      	cbz	r0, 8007272 <__swbuf_r+0x12>
 800726a:	6983      	ldr	r3, [r0, #24]
 800726c:	b90b      	cbnz	r3, 8007272 <__swbuf_r+0x12>
 800726e:	f000 f9d1 	bl	8007614 <__sinit>
 8007272:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <__swbuf_r+0x98>)
 8007274:	429c      	cmp	r4, r3
 8007276:	d12b      	bne.n	80072d0 <__swbuf_r+0x70>
 8007278:	686c      	ldr	r4, [r5, #4]
 800727a:	69a3      	ldr	r3, [r4, #24]
 800727c:	60a3      	str	r3, [r4, #8]
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	071a      	lsls	r2, r3, #28
 8007282:	d52f      	bpl.n	80072e4 <__swbuf_r+0x84>
 8007284:	6923      	ldr	r3, [r4, #16]
 8007286:	b36b      	cbz	r3, 80072e4 <__swbuf_r+0x84>
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	6820      	ldr	r0, [r4, #0]
 800728c:	1ac0      	subs	r0, r0, r3
 800728e:	6963      	ldr	r3, [r4, #20]
 8007290:	b2f6      	uxtb	r6, r6
 8007292:	4283      	cmp	r3, r0
 8007294:	4637      	mov	r7, r6
 8007296:	dc04      	bgt.n	80072a2 <__swbuf_r+0x42>
 8007298:	4621      	mov	r1, r4
 800729a:	4628      	mov	r0, r5
 800729c:	f000 f926 	bl	80074ec <_fflush_r>
 80072a0:	bb30      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	60a3      	str	r3, [r4, #8]
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	701e      	strb	r6, [r3, #0]
 80072b0:	6963      	ldr	r3, [r4, #20]
 80072b2:	3001      	adds	r0, #1
 80072b4:	4283      	cmp	r3, r0
 80072b6:	d004      	beq.n	80072c2 <__swbuf_r+0x62>
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	07db      	lsls	r3, r3, #31
 80072bc:	d506      	bpl.n	80072cc <__swbuf_r+0x6c>
 80072be:	2e0a      	cmp	r6, #10
 80072c0:	d104      	bne.n	80072cc <__swbuf_r+0x6c>
 80072c2:	4621      	mov	r1, r4
 80072c4:	4628      	mov	r0, r5
 80072c6:	f000 f911 	bl	80074ec <_fflush_r>
 80072ca:	b988      	cbnz	r0, 80072f0 <__swbuf_r+0x90>
 80072cc:	4638      	mov	r0, r7
 80072ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <__swbuf_r+0x9c>)
 80072d2:	429c      	cmp	r4, r3
 80072d4:	d101      	bne.n	80072da <__swbuf_r+0x7a>
 80072d6:	68ac      	ldr	r4, [r5, #8]
 80072d8:	e7cf      	b.n	800727a <__swbuf_r+0x1a>
 80072da:	4b09      	ldr	r3, [pc, #36]	; (8007300 <__swbuf_r+0xa0>)
 80072dc:	429c      	cmp	r4, r3
 80072de:	bf08      	it	eq
 80072e0:	68ec      	ldreq	r4, [r5, #12]
 80072e2:	e7ca      	b.n	800727a <__swbuf_r+0x1a>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f80c 	bl	8007304 <__swsetup_r>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d0cb      	beq.n	8007288 <__swbuf_r+0x28>
 80072f0:	f04f 37ff 	mov.w	r7, #4294967295
 80072f4:	e7ea      	b.n	80072cc <__swbuf_r+0x6c>
 80072f6:	bf00      	nop
 80072f8:	08008398 	.word	0x08008398
 80072fc:	080083b8 	.word	0x080083b8
 8007300:	08008378 	.word	0x08008378

08007304 <__swsetup_r>:
 8007304:	4b32      	ldr	r3, [pc, #200]	; (80073d0 <__swsetup_r+0xcc>)
 8007306:	b570      	push	{r4, r5, r6, lr}
 8007308:	681d      	ldr	r5, [r3, #0]
 800730a:	4606      	mov	r6, r0
 800730c:	460c      	mov	r4, r1
 800730e:	b125      	cbz	r5, 800731a <__swsetup_r+0x16>
 8007310:	69ab      	ldr	r3, [r5, #24]
 8007312:	b913      	cbnz	r3, 800731a <__swsetup_r+0x16>
 8007314:	4628      	mov	r0, r5
 8007316:	f000 f97d 	bl	8007614 <__sinit>
 800731a:	4b2e      	ldr	r3, [pc, #184]	; (80073d4 <__swsetup_r+0xd0>)
 800731c:	429c      	cmp	r4, r3
 800731e:	d10f      	bne.n	8007340 <__swsetup_r+0x3c>
 8007320:	686c      	ldr	r4, [r5, #4]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007328:	0719      	lsls	r1, r3, #28
 800732a:	d42c      	bmi.n	8007386 <__swsetup_r+0x82>
 800732c:	06dd      	lsls	r5, r3, #27
 800732e:	d411      	bmi.n	8007354 <__swsetup_r+0x50>
 8007330:	2309      	movs	r3, #9
 8007332:	6033      	str	r3, [r6, #0]
 8007334:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	f04f 30ff 	mov.w	r0, #4294967295
 800733e:	e03e      	b.n	80073be <__swsetup_r+0xba>
 8007340:	4b25      	ldr	r3, [pc, #148]	; (80073d8 <__swsetup_r+0xd4>)
 8007342:	429c      	cmp	r4, r3
 8007344:	d101      	bne.n	800734a <__swsetup_r+0x46>
 8007346:	68ac      	ldr	r4, [r5, #8]
 8007348:	e7eb      	b.n	8007322 <__swsetup_r+0x1e>
 800734a:	4b24      	ldr	r3, [pc, #144]	; (80073dc <__swsetup_r+0xd8>)
 800734c:	429c      	cmp	r4, r3
 800734e:	bf08      	it	eq
 8007350:	68ec      	ldreq	r4, [r5, #12]
 8007352:	e7e6      	b.n	8007322 <__swsetup_r+0x1e>
 8007354:	0758      	lsls	r0, r3, #29
 8007356:	d512      	bpl.n	800737e <__swsetup_r+0x7a>
 8007358:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800735a:	b141      	cbz	r1, 800736e <__swsetup_r+0x6a>
 800735c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007360:	4299      	cmp	r1, r3
 8007362:	d002      	beq.n	800736a <__swsetup_r+0x66>
 8007364:	4630      	mov	r0, r6
 8007366:	f000 fa5b 	bl	8007820 <_free_r>
 800736a:	2300      	movs	r3, #0
 800736c:	6363      	str	r3, [r4, #52]	; 0x34
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	2300      	movs	r3, #0
 8007378:	6063      	str	r3, [r4, #4]
 800737a:	6923      	ldr	r3, [r4, #16]
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	89a3      	ldrh	r3, [r4, #12]
 8007380:	f043 0308 	orr.w	r3, r3, #8
 8007384:	81a3      	strh	r3, [r4, #12]
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	b94b      	cbnz	r3, 800739e <__swsetup_r+0x9a>
 800738a:	89a3      	ldrh	r3, [r4, #12]
 800738c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007394:	d003      	beq.n	800739e <__swsetup_r+0x9a>
 8007396:	4621      	mov	r1, r4
 8007398:	4630      	mov	r0, r6
 800739a:	f000 fa01 	bl	80077a0 <__smakebuf_r>
 800739e:	89a0      	ldrh	r0, [r4, #12]
 80073a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073a4:	f010 0301 	ands.w	r3, r0, #1
 80073a8:	d00a      	beq.n	80073c0 <__swsetup_r+0xbc>
 80073aa:	2300      	movs	r3, #0
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	6963      	ldr	r3, [r4, #20]
 80073b0:	425b      	negs	r3, r3
 80073b2:	61a3      	str	r3, [r4, #24]
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	b943      	cbnz	r3, 80073ca <__swsetup_r+0xc6>
 80073b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073bc:	d1ba      	bne.n	8007334 <__swsetup_r+0x30>
 80073be:	bd70      	pop	{r4, r5, r6, pc}
 80073c0:	0781      	lsls	r1, r0, #30
 80073c2:	bf58      	it	pl
 80073c4:	6963      	ldrpl	r3, [r4, #20]
 80073c6:	60a3      	str	r3, [r4, #8]
 80073c8:	e7f4      	b.n	80073b4 <__swsetup_r+0xb0>
 80073ca:	2000      	movs	r0, #0
 80073cc:	e7f7      	b.n	80073be <__swsetup_r+0xba>
 80073ce:	bf00      	nop
 80073d0:	2000001c 	.word	0x2000001c
 80073d4:	08008398 	.word	0x08008398
 80073d8:	080083b8 	.word	0x080083b8
 80073dc:	08008378 	.word	0x08008378

080073e0 <__sflush_r>:
 80073e0:	898a      	ldrh	r2, [r1, #12]
 80073e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e6:	4605      	mov	r5, r0
 80073e8:	0710      	lsls	r0, r2, #28
 80073ea:	460c      	mov	r4, r1
 80073ec:	d458      	bmi.n	80074a0 <__sflush_r+0xc0>
 80073ee:	684b      	ldr	r3, [r1, #4]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc05      	bgt.n	8007400 <__sflush_r+0x20>
 80073f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dc02      	bgt.n	8007400 <__sflush_r+0x20>
 80073fa:	2000      	movs	r0, #0
 80073fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007402:	2e00      	cmp	r6, #0
 8007404:	d0f9      	beq.n	80073fa <__sflush_r+0x1a>
 8007406:	2300      	movs	r3, #0
 8007408:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800740c:	682f      	ldr	r7, [r5, #0]
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	d032      	beq.n	8007478 <__sflush_r+0x98>
 8007412:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	075a      	lsls	r2, r3, #29
 8007418:	d505      	bpl.n	8007426 <__sflush_r+0x46>
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	1ac0      	subs	r0, r0, r3
 800741e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007420:	b10b      	cbz	r3, 8007426 <__sflush_r+0x46>
 8007422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007424:	1ac0      	subs	r0, r0, r3
 8007426:	2300      	movs	r3, #0
 8007428:	4602      	mov	r2, r0
 800742a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800742c:	6a21      	ldr	r1, [r4, #32]
 800742e:	4628      	mov	r0, r5
 8007430:	47b0      	blx	r6
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	d106      	bne.n	8007446 <__sflush_r+0x66>
 8007438:	6829      	ldr	r1, [r5, #0]
 800743a:	291d      	cmp	r1, #29
 800743c:	d82c      	bhi.n	8007498 <__sflush_r+0xb8>
 800743e:	4a2a      	ldr	r2, [pc, #168]	; (80074e8 <__sflush_r+0x108>)
 8007440:	40ca      	lsrs	r2, r1
 8007442:	07d6      	lsls	r6, r2, #31
 8007444:	d528      	bpl.n	8007498 <__sflush_r+0xb8>
 8007446:	2200      	movs	r2, #0
 8007448:	6062      	str	r2, [r4, #4]
 800744a:	04d9      	lsls	r1, r3, #19
 800744c:	6922      	ldr	r2, [r4, #16]
 800744e:	6022      	str	r2, [r4, #0]
 8007450:	d504      	bpl.n	800745c <__sflush_r+0x7c>
 8007452:	1c42      	adds	r2, r0, #1
 8007454:	d101      	bne.n	800745a <__sflush_r+0x7a>
 8007456:	682b      	ldr	r3, [r5, #0]
 8007458:	b903      	cbnz	r3, 800745c <__sflush_r+0x7c>
 800745a:	6560      	str	r0, [r4, #84]	; 0x54
 800745c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800745e:	602f      	str	r7, [r5, #0]
 8007460:	2900      	cmp	r1, #0
 8007462:	d0ca      	beq.n	80073fa <__sflush_r+0x1a>
 8007464:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007468:	4299      	cmp	r1, r3
 800746a:	d002      	beq.n	8007472 <__sflush_r+0x92>
 800746c:	4628      	mov	r0, r5
 800746e:	f000 f9d7 	bl	8007820 <_free_r>
 8007472:	2000      	movs	r0, #0
 8007474:	6360      	str	r0, [r4, #52]	; 0x34
 8007476:	e7c1      	b.n	80073fc <__sflush_r+0x1c>
 8007478:	6a21      	ldr	r1, [r4, #32]
 800747a:	2301      	movs	r3, #1
 800747c:	4628      	mov	r0, r5
 800747e:	47b0      	blx	r6
 8007480:	1c41      	adds	r1, r0, #1
 8007482:	d1c7      	bne.n	8007414 <__sflush_r+0x34>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0c4      	beq.n	8007414 <__sflush_r+0x34>
 800748a:	2b1d      	cmp	r3, #29
 800748c:	d001      	beq.n	8007492 <__sflush_r+0xb2>
 800748e:	2b16      	cmp	r3, #22
 8007490:	d101      	bne.n	8007496 <__sflush_r+0xb6>
 8007492:	602f      	str	r7, [r5, #0]
 8007494:	e7b1      	b.n	80073fa <__sflush_r+0x1a>
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	e7ad      	b.n	80073fc <__sflush_r+0x1c>
 80074a0:	690f      	ldr	r7, [r1, #16]
 80074a2:	2f00      	cmp	r7, #0
 80074a4:	d0a9      	beq.n	80073fa <__sflush_r+0x1a>
 80074a6:	0793      	lsls	r3, r2, #30
 80074a8:	680e      	ldr	r6, [r1, #0]
 80074aa:	bf08      	it	eq
 80074ac:	694b      	ldreq	r3, [r1, #20]
 80074ae:	600f      	str	r7, [r1, #0]
 80074b0:	bf18      	it	ne
 80074b2:	2300      	movne	r3, #0
 80074b4:	eba6 0807 	sub.w	r8, r6, r7
 80074b8:	608b      	str	r3, [r1, #8]
 80074ba:	f1b8 0f00 	cmp.w	r8, #0
 80074be:	dd9c      	ble.n	80073fa <__sflush_r+0x1a>
 80074c0:	6a21      	ldr	r1, [r4, #32]
 80074c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074c4:	4643      	mov	r3, r8
 80074c6:	463a      	mov	r2, r7
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b0      	blx	r6
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dc06      	bgt.n	80074de <__sflush_r+0xfe>
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	e78e      	b.n	80073fc <__sflush_r+0x1c>
 80074de:	4407      	add	r7, r0
 80074e0:	eba8 0800 	sub.w	r8, r8, r0
 80074e4:	e7e9      	b.n	80074ba <__sflush_r+0xda>
 80074e6:	bf00      	nop
 80074e8:	20400001 	.word	0x20400001

080074ec <_fflush_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	b913      	cbnz	r3, 80074fc <_fflush_r+0x10>
 80074f6:	2500      	movs	r5, #0
 80074f8:	4628      	mov	r0, r5
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	b118      	cbz	r0, 8007506 <_fflush_r+0x1a>
 80074fe:	6983      	ldr	r3, [r0, #24]
 8007500:	b90b      	cbnz	r3, 8007506 <_fflush_r+0x1a>
 8007502:	f000 f887 	bl	8007614 <__sinit>
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <_fflush_r+0x6c>)
 8007508:	429c      	cmp	r4, r3
 800750a:	d11b      	bne.n	8007544 <_fflush_r+0x58>
 800750c:	686c      	ldr	r4, [r5, #4]
 800750e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0ef      	beq.n	80074f6 <_fflush_r+0xa>
 8007516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007518:	07d0      	lsls	r0, r2, #31
 800751a:	d404      	bmi.n	8007526 <_fflush_r+0x3a>
 800751c:	0599      	lsls	r1, r3, #22
 800751e:	d402      	bmi.n	8007526 <_fflush_r+0x3a>
 8007520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007522:	f000 f915 	bl	8007750 <__retarget_lock_acquire_recursive>
 8007526:	4628      	mov	r0, r5
 8007528:	4621      	mov	r1, r4
 800752a:	f7ff ff59 	bl	80073e0 <__sflush_r>
 800752e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007530:	07da      	lsls	r2, r3, #31
 8007532:	4605      	mov	r5, r0
 8007534:	d4e0      	bmi.n	80074f8 <_fflush_r+0xc>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	059b      	lsls	r3, r3, #22
 800753a:	d4dd      	bmi.n	80074f8 <_fflush_r+0xc>
 800753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753e:	f000 f908 	bl	8007752 <__retarget_lock_release_recursive>
 8007542:	e7d9      	b.n	80074f8 <_fflush_r+0xc>
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <_fflush_r+0x70>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <_fflush_r+0x62>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7df      	b.n	800750e <_fflush_r+0x22>
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <_fflush_r+0x74>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7da      	b.n	800750e <_fflush_r+0x22>
 8007558:	08008398 	.word	0x08008398
 800755c:	080083b8 	.word	0x080083b8
 8007560:	08008378 	.word	0x08008378

08007564 <std>:
 8007564:	2300      	movs	r3, #0
 8007566:	b510      	push	{r4, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	e9c0 3300 	strd	r3, r3, [r0]
 800756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	8181      	strh	r1, [r0, #12]
 8007576:	6643      	str	r3, [r0, #100]	; 0x64
 8007578:	81c2      	strh	r2, [r0, #14]
 800757a:	6183      	str	r3, [r0, #24]
 800757c:	4619      	mov	r1, r3
 800757e:	2208      	movs	r2, #8
 8007580:	305c      	adds	r0, #92	; 0x5c
 8007582:	f7ff fdbb 	bl	80070fc <memset>
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <std+0x38>)
 8007588:	6263      	str	r3, [r4, #36]	; 0x24
 800758a:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <std+0x3c>)
 800758c:	62a3      	str	r3, [r4, #40]	; 0x28
 800758e:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <std+0x40>)
 8007590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007592:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <std+0x44>)
 8007594:	6224      	str	r4, [r4, #32]
 8007596:	6323      	str	r3, [r4, #48]	; 0x30
 8007598:	bd10      	pop	{r4, pc}
 800759a:	bf00      	nop
 800759c:	08007fe1 	.word	0x08007fe1
 80075a0:	08008003 	.word	0x08008003
 80075a4:	0800803b 	.word	0x0800803b
 80075a8:	0800805f 	.word	0x0800805f

080075ac <_cleanup_r>:
 80075ac:	4901      	ldr	r1, [pc, #4]	; (80075b4 <_cleanup_r+0x8>)
 80075ae:	f000 b8af 	b.w	8007710 <_fwalk_reent>
 80075b2:	bf00      	nop
 80075b4:	080074ed 	.word	0x080074ed

080075b8 <__sfmoreglue>:
 80075b8:	b570      	push	{r4, r5, r6, lr}
 80075ba:	2268      	movs	r2, #104	; 0x68
 80075bc:	1e4d      	subs	r5, r1, #1
 80075be:	4355      	muls	r5, r2
 80075c0:	460e      	mov	r6, r1
 80075c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075c6:	f000 f997 	bl	80078f8 <_malloc_r>
 80075ca:	4604      	mov	r4, r0
 80075cc:	b140      	cbz	r0, 80075e0 <__sfmoreglue+0x28>
 80075ce:	2100      	movs	r1, #0
 80075d0:	e9c0 1600 	strd	r1, r6, [r0]
 80075d4:	300c      	adds	r0, #12
 80075d6:	60a0      	str	r0, [r4, #8]
 80075d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075dc:	f7ff fd8e 	bl	80070fc <memset>
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}

080075e4 <__sfp_lock_acquire>:
 80075e4:	4801      	ldr	r0, [pc, #4]	; (80075ec <__sfp_lock_acquire+0x8>)
 80075e6:	f000 b8b3 	b.w	8007750 <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	2001450c 	.word	0x2001450c

080075f0 <__sfp_lock_release>:
 80075f0:	4801      	ldr	r0, [pc, #4]	; (80075f8 <__sfp_lock_release+0x8>)
 80075f2:	f000 b8ae 	b.w	8007752 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	2001450c 	.word	0x2001450c

080075fc <__sinit_lock_acquire>:
 80075fc:	4801      	ldr	r0, [pc, #4]	; (8007604 <__sinit_lock_acquire+0x8>)
 80075fe:	f000 b8a7 	b.w	8007750 <__retarget_lock_acquire_recursive>
 8007602:	bf00      	nop
 8007604:	2001450d 	.word	0x2001450d

08007608 <__sinit_lock_release>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sinit_lock_release+0x8>)
 800760a:	f000 b8a2 	b.w	8007752 <__retarget_lock_release_recursive>
 800760e:	bf00      	nop
 8007610:	2001450d 	.word	0x2001450d

08007614 <__sinit>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4604      	mov	r4, r0
 8007618:	f7ff fff0 	bl	80075fc <__sinit_lock_acquire>
 800761c:	69a3      	ldr	r3, [r4, #24]
 800761e:	b11b      	cbz	r3, 8007628 <__sinit+0x14>
 8007620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007624:	f7ff bff0 	b.w	8007608 <__sinit_lock_release>
 8007628:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800762c:	6523      	str	r3, [r4, #80]	; 0x50
 800762e:	4b13      	ldr	r3, [pc, #76]	; (800767c <__sinit+0x68>)
 8007630:	4a13      	ldr	r2, [pc, #76]	; (8007680 <__sinit+0x6c>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	62a2      	str	r2, [r4, #40]	; 0x28
 8007636:	42a3      	cmp	r3, r4
 8007638:	bf04      	itt	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	61a3      	streq	r3, [r4, #24]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f820 	bl	8007684 <__sfp>
 8007644:	6060      	str	r0, [r4, #4]
 8007646:	4620      	mov	r0, r4
 8007648:	f000 f81c 	bl	8007684 <__sfp>
 800764c:	60a0      	str	r0, [r4, #8]
 800764e:	4620      	mov	r0, r4
 8007650:	f000 f818 	bl	8007684 <__sfp>
 8007654:	2200      	movs	r2, #0
 8007656:	60e0      	str	r0, [r4, #12]
 8007658:	2104      	movs	r1, #4
 800765a:	6860      	ldr	r0, [r4, #4]
 800765c:	f7ff ff82 	bl	8007564 <std>
 8007660:	68a0      	ldr	r0, [r4, #8]
 8007662:	2201      	movs	r2, #1
 8007664:	2109      	movs	r1, #9
 8007666:	f7ff ff7d 	bl	8007564 <std>
 800766a:	68e0      	ldr	r0, [r4, #12]
 800766c:	2202      	movs	r2, #2
 800766e:	2112      	movs	r1, #18
 8007670:	f7ff ff78 	bl	8007564 <std>
 8007674:	2301      	movs	r3, #1
 8007676:	61a3      	str	r3, [r4, #24]
 8007678:	e7d2      	b.n	8007620 <__sinit+0xc>
 800767a:	bf00      	nop
 800767c:	08008374 	.word	0x08008374
 8007680:	080075ad 	.word	0x080075ad

08007684 <__sfp>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	4607      	mov	r7, r0
 8007688:	f7ff ffac 	bl	80075e4 <__sfp_lock_acquire>
 800768c:	4b1e      	ldr	r3, [pc, #120]	; (8007708 <__sfp+0x84>)
 800768e:	681e      	ldr	r6, [r3, #0]
 8007690:	69b3      	ldr	r3, [r6, #24]
 8007692:	b913      	cbnz	r3, 800769a <__sfp+0x16>
 8007694:	4630      	mov	r0, r6
 8007696:	f7ff ffbd 	bl	8007614 <__sinit>
 800769a:	3648      	adds	r6, #72	; 0x48
 800769c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076a0:	3b01      	subs	r3, #1
 80076a2:	d503      	bpl.n	80076ac <__sfp+0x28>
 80076a4:	6833      	ldr	r3, [r6, #0]
 80076a6:	b30b      	cbz	r3, 80076ec <__sfp+0x68>
 80076a8:	6836      	ldr	r6, [r6, #0]
 80076aa:	e7f7      	b.n	800769c <__sfp+0x18>
 80076ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076b0:	b9d5      	cbnz	r5, 80076e8 <__sfp+0x64>
 80076b2:	4b16      	ldr	r3, [pc, #88]	; (800770c <__sfp+0x88>)
 80076b4:	60e3      	str	r3, [r4, #12]
 80076b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076ba:	6665      	str	r5, [r4, #100]	; 0x64
 80076bc:	f000 f847 	bl	800774e <__retarget_lock_init_recursive>
 80076c0:	f7ff ff96 	bl	80075f0 <__sfp_lock_release>
 80076c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076cc:	6025      	str	r5, [r4, #0]
 80076ce:	61a5      	str	r5, [r4, #24]
 80076d0:	2208      	movs	r2, #8
 80076d2:	4629      	mov	r1, r5
 80076d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076d8:	f7ff fd10 	bl	80070fc <memset>
 80076dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076e4:	4620      	mov	r0, r4
 80076e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076e8:	3468      	adds	r4, #104	; 0x68
 80076ea:	e7d9      	b.n	80076a0 <__sfp+0x1c>
 80076ec:	2104      	movs	r1, #4
 80076ee:	4638      	mov	r0, r7
 80076f0:	f7ff ff62 	bl	80075b8 <__sfmoreglue>
 80076f4:	4604      	mov	r4, r0
 80076f6:	6030      	str	r0, [r6, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d1d5      	bne.n	80076a8 <__sfp+0x24>
 80076fc:	f7ff ff78 	bl	80075f0 <__sfp_lock_release>
 8007700:	230c      	movs	r3, #12
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	e7ee      	b.n	80076e4 <__sfp+0x60>
 8007706:	bf00      	nop
 8007708:	08008374 	.word	0x08008374
 800770c:	ffff0001 	.word	0xffff0001

08007710 <_fwalk_reent>:
 8007710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007714:	4606      	mov	r6, r0
 8007716:	4688      	mov	r8, r1
 8007718:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800771c:	2700      	movs	r7, #0
 800771e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007722:	f1b9 0901 	subs.w	r9, r9, #1
 8007726:	d505      	bpl.n	8007734 <_fwalk_reent+0x24>
 8007728:	6824      	ldr	r4, [r4, #0]
 800772a:	2c00      	cmp	r4, #0
 800772c:	d1f7      	bne.n	800771e <_fwalk_reent+0xe>
 800772e:	4638      	mov	r0, r7
 8007730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d907      	bls.n	800774a <_fwalk_reent+0x3a>
 800773a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800773e:	3301      	adds	r3, #1
 8007740:	d003      	beq.n	800774a <_fwalk_reent+0x3a>
 8007742:	4629      	mov	r1, r5
 8007744:	4630      	mov	r0, r6
 8007746:	47c0      	blx	r8
 8007748:	4307      	orrs	r7, r0
 800774a:	3568      	adds	r5, #104	; 0x68
 800774c:	e7e9      	b.n	8007722 <_fwalk_reent+0x12>

0800774e <__retarget_lock_init_recursive>:
 800774e:	4770      	bx	lr

08007750 <__retarget_lock_acquire_recursive>:
 8007750:	4770      	bx	lr

08007752 <__retarget_lock_release_recursive>:
 8007752:	4770      	bx	lr

08007754 <__swhatbuf_r>:
 8007754:	b570      	push	{r4, r5, r6, lr}
 8007756:	460e      	mov	r6, r1
 8007758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800775c:	2900      	cmp	r1, #0
 800775e:	b096      	sub	sp, #88	; 0x58
 8007760:	4614      	mov	r4, r2
 8007762:	461d      	mov	r5, r3
 8007764:	da08      	bge.n	8007778 <__swhatbuf_r+0x24>
 8007766:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	602a      	str	r2, [r5, #0]
 800776e:	061a      	lsls	r2, r3, #24
 8007770:	d410      	bmi.n	8007794 <__swhatbuf_r+0x40>
 8007772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007776:	e00e      	b.n	8007796 <__swhatbuf_r+0x42>
 8007778:	466a      	mov	r2, sp
 800777a:	f000 fc85 	bl	8008088 <_fstat_r>
 800777e:	2800      	cmp	r0, #0
 8007780:	dbf1      	blt.n	8007766 <__swhatbuf_r+0x12>
 8007782:	9a01      	ldr	r2, [sp, #4]
 8007784:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007788:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800778c:	425a      	negs	r2, r3
 800778e:	415a      	adcs	r2, r3
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	e7ee      	b.n	8007772 <__swhatbuf_r+0x1e>
 8007794:	2340      	movs	r3, #64	; 0x40
 8007796:	2000      	movs	r0, #0
 8007798:	6023      	str	r3, [r4, #0]
 800779a:	b016      	add	sp, #88	; 0x58
 800779c:	bd70      	pop	{r4, r5, r6, pc}
	...

080077a0 <__smakebuf_r>:
 80077a0:	898b      	ldrh	r3, [r1, #12]
 80077a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077a4:	079d      	lsls	r5, r3, #30
 80077a6:	4606      	mov	r6, r0
 80077a8:	460c      	mov	r4, r1
 80077aa:	d507      	bpl.n	80077bc <__smakebuf_r+0x1c>
 80077ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077b0:	6023      	str	r3, [r4, #0]
 80077b2:	6123      	str	r3, [r4, #16]
 80077b4:	2301      	movs	r3, #1
 80077b6:	6163      	str	r3, [r4, #20]
 80077b8:	b002      	add	sp, #8
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	ab01      	add	r3, sp, #4
 80077be:	466a      	mov	r2, sp
 80077c0:	f7ff ffc8 	bl	8007754 <__swhatbuf_r>
 80077c4:	9900      	ldr	r1, [sp, #0]
 80077c6:	4605      	mov	r5, r0
 80077c8:	4630      	mov	r0, r6
 80077ca:	f000 f895 	bl	80078f8 <_malloc_r>
 80077ce:	b948      	cbnz	r0, 80077e4 <__smakebuf_r+0x44>
 80077d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d4:	059a      	lsls	r2, r3, #22
 80077d6:	d4ef      	bmi.n	80077b8 <__smakebuf_r+0x18>
 80077d8:	f023 0303 	bic.w	r3, r3, #3
 80077dc:	f043 0302 	orr.w	r3, r3, #2
 80077e0:	81a3      	strh	r3, [r4, #12]
 80077e2:	e7e3      	b.n	80077ac <__smakebuf_r+0xc>
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <__smakebuf_r+0x7c>)
 80077e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	6020      	str	r0, [r4, #0]
 80077ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f0:	81a3      	strh	r3, [r4, #12]
 80077f2:	9b00      	ldr	r3, [sp, #0]
 80077f4:	6163      	str	r3, [r4, #20]
 80077f6:	9b01      	ldr	r3, [sp, #4]
 80077f8:	6120      	str	r0, [r4, #16]
 80077fa:	b15b      	cbz	r3, 8007814 <__smakebuf_r+0x74>
 80077fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007800:	4630      	mov	r0, r6
 8007802:	f000 fc53 	bl	80080ac <_isatty_r>
 8007806:	b128      	cbz	r0, 8007814 <__smakebuf_r+0x74>
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	f023 0303 	bic.w	r3, r3, #3
 800780e:	f043 0301 	orr.w	r3, r3, #1
 8007812:	81a3      	strh	r3, [r4, #12]
 8007814:	89a0      	ldrh	r0, [r4, #12]
 8007816:	4305      	orrs	r5, r0
 8007818:	81a5      	strh	r5, [r4, #12]
 800781a:	e7cd      	b.n	80077b8 <__smakebuf_r+0x18>
 800781c:	080075ad 	.word	0x080075ad

08007820 <_free_r>:
 8007820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007822:	2900      	cmp	r1, #0
 8007824:	d044      	beq.n	80078b0 <_free_r+0x90>
 8007826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782a:	9001      	str	r0, [sp, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f1a1 0404 	sub.w	r4, r1, #4
 8007832:	bfb8      	it	lt
 8007834:	18e4      	addlt	r4, r4, r3
 8007836:	f000 fc75 	bl	8008124 <__malloc_lock>
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <_free_r+0x94>)
 800783c:	9801      	ldr	r0, [sp, #4]
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	b933      	cbnz	r3, 8007850 <_free_r+0x30>
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800784c:	f000 bc70 	b.w	8008130 <__malloc_unlock>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d908      	bls.n	8007866 <_free_r+0x46>
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	1961      	adds	r1, r4, r5
 8007858:	428b      	cmp	r3, r1
 800785a:	bf01      	itttt	eq
 800785c:	6819      	ldreq	r1, [r3, #0]
 800785e:	685b      	ldreq	r3, [r3, #4]
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	e7ed      	b.n	8007842 <_free_r+0x22>
 8007866:	461a      	mov	r2, r3
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b10b      	cbz	r3, 8007870 <_free_r+0x50>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d9fa      	bls.n	8007866 <_free_r+0x46>
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	1855      	adds	r5, r2, r1
 8007874:	42a5      	cmp	r5, r4
 8007876:	d10b      	bne.n	8007890 <_free_r+0x70>
 8007878:	6824      	ldr	r4, [r4, #0]
 800787a:	4421      	add	r1, r4
 800787c:	1854      	adds	r4, r2, r1
 800787e:	42a3      	cmp	r3, r4
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	d1e0      	bne.n	8007846 <_free_r+0x26>
 8007884:	681c      	ldr	r4, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	4421      	add	r1, r4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	e7da      	b.n	8007846 <_free_r+0x26>
 8007890:	d902      	bls.n	8007898 <_free_r+0x78>
 8007892:	230c      	movs	r3, #12
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	e7d6      	b.n	8007846 <_free_r+0x26>
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	1961      	adds	r1, r4, r5
 800789c:	428b      	cmp	r3, r1
 800789e:	bf04      	itt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	bf04      	itt	eq
 80078a8:	1949      	addeq	r1, r1, r5
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	6054      	str	r4, [r2, #4]
 80078ae:	e7ca      	b.n	8007846 <_free_r+0x26>
 80078b0:	b003      	add	sp, #12
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	20014510 	.word	0x20014510

080078b8 <sbrk_aligned>:
 80078b8:	b570      	push	{r4, r5, r6, lr}
 80078ba:	4e0e      	ldr	r6, [pc, #56]	; (80078f4 <sbrk_aligned+0x3c>)
 80078bc:	460c      	mov	r4, r1
 80078be:	6831      	ldr	r1, [r6, #0]
 80078c0:	4605      	mov	r5, r0
 80078c2:	b911      	cbnz	r1, 80078ca <sbrk_aligned+0x12>
 80078c4:	f000 fb7c 	bl	8007fc0 <_sbrk_r>
 80078c8:	6030      	str	r0, [r6, #0]
 80078ca:	4621      	mov	r1, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	f000 fb77 	bl	8007fc0 <_sbrk_r>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	d00a      	beq.n	80078ec <sbrk_aligned+0x34>
 80078d6:	1cc4      	adds	r4, r0, #3
 80078d8:	f024 0403 	bic.w	r4, r4, #3
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d007      	beq.n	80078f0 <sbrk_aligned+0x38>
 80078e0:	1a21      	subs	r1, r4, r0
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fb6c 	bl	8007fc0 <_sbrk_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d101      	bne.n	80078f0 <sbrk_aligned+0x38>
 80078ec:	f04f 34ff 	mov.w	r4, #4294967295
 80078f0:	4620      	mov	r0, r4
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	20014514 	.word	0x20014514

080078f8 <_malloc_r>:
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	1ccd      	adds	r5, r1, #3
 80078fe:	f025 0503 	bic.w	r5, r5, #3
 8007902:	3508      	adds	r5, #8
 8007904:	2d0c      	cmp	r5, #12
 8007906:	bf38      	it	cc
 8007908:	250c      	movcc	r5, #12
 800790a:	2d00      	cmp	r5, #0
 800790c:	4607      	mov	r7, r0
 800790e:	db01      	blt.n	8007914 <_malloc_r+0x1c>
 8007910:	42a9      	cmp	r1, r5
 8007912:	d905      	bls.n	8007920 <_malloc_r+0x28>
 8007914:	230c      	movs	r3, #12
 8007916:	603b      	str	r3, [r7, #0]
 8007918:	2600      	movs	r6, #0
 800791a:	4630      	mov	r0, r6
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	4e2e      	ldr	r6, [pc, #184]	; (80079dc <_malloc_r+0xe4>)
 8007922:	f000 fbff 	bl	8008124 <__malloc_lock>
 8007926:	6833      	ldr	r3, [r6, #0]
 8007928:	461c      	mov	r4, r3
 800792a:	bb34      	cbnz	r4, 800797a <_malloc_r+0x82>
 800792c:	4629      	mov	r1, r5
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff ffc2 	bl	80078b8 <sbrk_aligned>
 8007934:	1c43      	adds	r3, r0, #1
 8007936:	4604      	mov	r4, r0
 8007938:	d14d      	bne.n	80079d6 <_malloc_r+0xde>
 800793a:	6834      	ldr	r4, [r6, #0]
 800793c:	4626      	mov	r6, r4
 800793e:	2e00      	cmp	r6, #0
 8007940:	d140      	bne.n	80079c4 <_malloc_r+0xcc>
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	4631      	mov	r1, r6
 8007946:	4638      	mov	r0, r7
 8007948:	eb04 0803 	add.w	r8, r4, r3
 800794c:	f000 fb38 	bl	8007fc0 <_sbrk_r>
 8007950:	4580      	cmp	r8, r0
 8007952:	d13a      	bne.n	80079ca <_malloc_r+0xd2>
 8007954:	6821      	ldr	r1, [r4, #0]
 8007956:	3503      	adds	r5, #3
 8007958:	1a6d      	subs	r5, r5, r1
 800795a:	f025 0503 	bic.w	r5, r5, #3
 800795e:	3508      	adds	r5, #8
 8007960:	2d0c      	cmp	r5, #12
 8007962:	bf38      	it	cc
 8007964:	250c      	movcc	r5, #12
 8007966:	4629      	mov	r1, r5
 8007968:	4638      	mov	r0, r7
 800796a:	f7ff ffa5 	bl	80078b8 <sbrk_aligned>
 800796e:	3001      	adds	r0, #1
 8007970:	d02b      	beq.n	80079ca <_malloc_r+0xd2>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	442b      	add	r3, r5
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	e00e      	b.n	8007998 <_malloc_r+0xa0>
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	1b52      	subs	r2, r2, r5
 800797e:	d41e      	bmi.n	80079be <_malloc_r+0xc6>
 8007980:	2a0b      	cmp	r2, #11
 8007982:	d916      	bls.n	80079b2 <_malloc_r+0xba>
 8007984:	1961      	adds	r1, r4, r5
 8007986:	42a3      	cmp	r3, r4
 8007988:	6025      	str	r5, [r4, #0]
 800798a:	bf18      	it	ne
 800798c:	6059      	strne	r1, [r3, #4]
 800798e:	6863      	ldr	r3, [r4, #4]
 8007990:	bf08      	it	eq
 8007992:	6031      	streq	r1, [r6, #0]
 8007994:	5162      	str	r2, [r4, r5]
 8007996:	604b      	str	r3, [r1, #4]
 8007998:	4638      	mov	r0, r7
 800799a:	f104 060b 	add.w	r6, r4, #11
 800799e:	f000 fbc7 	bl	8008130 <__malloc_unlock>
 80079a2:	f026 0607 	bic.w	r6, r6, #7
 80079a6:	1d23      	adds	r3, r4, #4
 80079a8:	1af2      	subs	r2, r6, r3
 80079aa:	d0b6      	beq.n	800791a <_malloc_r+0x22>
 80079ac:	1b9b      	subs	r3, r3, r6
 80079ae:	50a3      	str	r3, [r4, r2]
 80079b0:	e7b3      	b.n	800791a <_malloc_r+0x22>
 80079b2:	6862      	ldr	r2, [r4, #4]
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	bf0c      	ite	eq
 80079b8:	6032      	streq	r2, [r6, #0]
 80079ba:	605a      	strne	r2, [r3, #4]
 80079bc:	e7ec      	b.n	8007998 <_malloc_r+0xa0>
 80079be:	4623      	mov	r3, r4
 80079c0:	6864      	ldr	r4, [r4, #4]
 80079c2:	e7b2      	b.n	800792a <_malloc_r+0x32>
 80079c4:	4634      	mov	r4, r6
 80079c6:	6876      	ldr	r6, [r6, #4]
 80079c8:	e7b9      	b.n	800793e <_malloc_r+0x46>
 80079ca:	230c      	movs	r3, #12
 80079cc:	603b      	str	r3, [r7, #0]
 80079ce:	4638      	mov	r0, r7
 80079d0:	f000 fbae 	bl	8008130 <__malloc_unlock>
 80079d4:	e7a1      	b.n	800791a <_malloc_r+0x22>
 80079d6:	6025      	str	r5, [r4, #0]
 80079d8:	e7de      	b.n	8007998 <_malloc_r+0xa0>
 80079da:	bf00      	nop
 80079dc:	20014510 	.word	0x20014510

080079e0 <__ssputs_r>:
 80079e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079e4:	688e      	ldr	r6, [r1, #8]
 80079e6:	429e      	cmp	r6, r3
 80079e8:	4682      	mov	sl, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4690      	mov	r8, r2
 80079ee:	461f      	mov	r7, r3
 80079f0:	d838      	bhi.n	8007a64 <__ssputs_r+0x84>
 80079f2:	898a      	ldrh	r2, [r1, #12]
 80079f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80079f8:	d032      	beq.n	8007a60 <__ssputs_r+0x80>
 80079fa:	6825      	ldr	r5, [r4, #0]
 80079fc:	6909      	ldr	r1, [r1, #16]
 80079fe:	eba5 0901 	sub.w	r9, r5, r1
 8007a02:	6965      	ldr	r5, [r4, #20]
 8007a04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	444b      	add	r3, r9
 8007a10:	106d      	asrs	r5, r5, #1
 8007a12:	429d      	cmp	r5, r3
 8007a14:	bf38      	it	cc
 8007a16:	461d      	movcc	r5, r3
 8007a18:	0553      	lsls	r3, r2, #21
 8007a1a:	d531      	bpl.n	8007a80 <__ssputs_r+0xa0>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	f7ff ff6b 	bl	80078f8 <_malloc_r>
 8007a22:	4606      	mov	r6, r0
 8007a24:	b950      	cbnz	r0, 8007a3c <__ssputs_r+0x5c>
 8007a26:	230c      	movs	r3, #12
 8007a28:	f8ca 3000 	str.w	r3, [sl]
 8007a2c:	89a3      	ldrh	r3, [r4, #12]
 8007a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a32:	81a3      	strh	r3, [r4, #12]
 8007a34:	f04f 30ff 	mov.w	r0, #4294967295
 8007a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3c:	6921      	ldr	r1, [r4, #16]
 8007a3e:	464a      	mov	r2, r9
 8007a40:	f7ff fb4e 	bl	80070e0 <memcpy>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	6126      	str	r6, [r4, #16]
 8007a52:	6165      	str	r5, [r4, #20]
 8007a54:	444e      	add	r6, r9
 8007a56:	eba5 0509 	sub.w	r5, r5, r9
 8007a5a:	6026      	str	r6, [r4, #0]
 8007a5c:	60a5      	str	r5, [r4, #8]
 8007a5e:	463e      	mov	r6, r7
 8007a60:	42be      	cmp	r6, r7
 8007a62:	d900      	bls.n	8007a66 <__ssputs_r+0x86>
 8007a64:	463e      	mov	r6, r7
 8007a66:	6820      	ldr	r0, [r4, #0]
 8007a68:	4632      	mov	r2, r6
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	f000 fb40 	bl	80080f0 <memmove>
 8007a70:	68a3      	ldr	r3, [r4, #8]
 8007a72:	1b9b      	subs	r3, r3, r6
 8007a74:	60a3      	str	r3, [r4, #8]
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	4433      	add	r3, r6
 8007a7a:	6023      	str	r3, [r4, #0]
 8007a7c:	2000      	movs	r0, #0
 8007a7e:	e7db      	b.n	8007a38 <__ssputs_r+0x58>
 8007a80:	462a      	mov	r2, r5
 8007a82:	f000 fb5b 	bl	800813c <_realloc_r>
 8007a86:	4606      	mov	r6, r0
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d1e1      	bne.n	8007a50 <__ssputs_r+0x70>
 8007a8c:	6921      	ldr	r1, [r4, #16]
 8007a8e:	4650      	mov	r0, sl
 8007a90:	f7ff fec6 	bl	8007820 <_free_r>
 8007a94:	e7c7      	b.n	8007a26 <__ssputs_r+0x46>
	...

08007a98 <_svfiprintf_r>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	4698      	mov	r8, r3
 8007a9e:	898b      	ldrh	r3, [r1, #12]
 8007aa0:	061b      	lsls	r3, r3, #24
 8007aa2:	b09d      	sub	sp, #116	; 0x74
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	460d      	mov	r5, r1
 8007aa8:	4614      	mov	r4, r2
 8007aaa:	d50e      	bpl.n	8007aca <_svfiprintf_r+0x32>
 8007aac:	690b      	ldr	r3, [r1, #16]
 8007aae:	b963      	cbnz	r3, 8007aca <_svfiprintf_r+0x32>
 8007ab0:	2140      	movs	r1, #64	; 0x40
 8007ab2:	f7ff ff21 	bl	80078f8 <_malloc_r>
 8007ab6:	6028      	str	r0, [r5, #0]
 8007ab8:	6128      	str	r0, [r5, #16]
 8007aba:	b920      	cbnz	r0, 8007ac6 <_svfiprintf_r+0x2e>
 8007abc:	230c      	movs	r3, #12
 8007abe:	603b      	str	r3, [r7, #0]
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac4:	e0d1      	b.n	8007c6a <_svfiprintf_r+0x1d2>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	616b      	str	r3, [r5, #20]
 8007aca:	2300      	movs	r3, #0
 8007acc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ace:	2320      	movs	r3, #32
 8007ad0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ad4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ad8:	2330      	movs	r3, #48	; 0x30
 8007ada:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007c84 <_svfiprintf_r+0x1ec>
 8007ade:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae2:	f04f 0901 	mov.w	r9, #1
 8007ae6:	4623      	mov	r3, r4
 8007ae8:	469a      	mov	sl, r3
 8007aea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007aee:	b10a      	cbz	r2, 8007af4 <_svfiprintf_r+0x5c>
 8007af0:	2a25      	cmp	r2, #37	; 0x25
 8007af2:	d1f9      	bne.n	8007ae8 <_svfiprintf_r+0x50>
 8007af4:	ebba 0b04 	subs.w	fp, sl, r4
 8007af8:	d00b      	beq.n	8007b12 <_svfiprintf_r+0x7a>
 8007afa:	465b      	mov	r3, fp
 8007afc:	4622      	mov	r2, r4
 8007afe:	4629      	mov	r1, r5
 8007b00:	4638      	mov	r0, r7
 8007b02:	f7ff ff6d 	bl	80079e0 <__ssputs_r>
 8007b06:	3001      	adds	r0, #1
 8007b08:	f000 80aa 	beq.w	8007c60 <_svfiprintf_r+0x1c8>
 8007b0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b0e:	445a      	add	r2, fp
 8007b10:	9209      	str	r2, [sp, #36]	; 0x24
 8007b12:	f89a 3000 	ldrb.w	r3, [sl]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 80a2 	beq.w	8007c60 <_svfiprintf_r+0x1c8>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b26:	f10a 0a01 	add.w	sl, sl, #1
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	9307      	str	r3, [sp, #28]
 8007b2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b32:	931a      	str	r3, [sp, #104]	; 0x68
 8007b34:	4654      	mov	r4, sl
 8007b36:	2205      	movs	r2, #5
 8007b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b3c:	4851      	ldr	r0, [pc, #324]	; (8007c84 <_svfiprintf_r+0x1ec>)
 8007b3e:	f7f8 fb97 	bl	8000270 <memchr>
 8007b42:	9a04      	ldr	r2, [sp, #16]
 8007b44:	b9d8      	cbnz	r0, 8007b7e <_svfiprintf_r+0xe6>
 8007b46:	06d0      	lsls	r0, r2, #27
 8007b48:	bf44      	itt	mi
 8007b4a:	2320      	movmi	r3, #32
 8007b4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b50:	0711      	lsls	r1, r2, #28
 8007b52:	bf44      	itt	mi
 8007b54:	232b      	movmi	r3, #43	; 0x2b
 8007b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007b60:	d015      	beq.n	8007b8e <_svfiprintf_r+0xf6>
 8007b62:	9a07      	ldr	r2, [sp, #28]
 8007b64:	4654      	mov	r4, sl
 8007b66:	2000      	movs	r0, #0
 8007b68:	f04f 0c0a 	mov.w	ip, #10
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b72:	3b30      	subs	r3, #48	; 0x30
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d94e      	bls.n	8007c16 <_svfiprintf_r+0x17e>
 8007b78:	b1b0      	cbz	r0, 8007ba8 <_svfiprintf_r+0x110>
 8007b7a:	9207      	str	r2, [sp, #28]
 8007b7c:	e014      	b.n	8007ba8 <_svfiprintf_r+0x110>
 8007b7e:	eba0 0308 	sub.w	r3, r0, r8
 8007b82:	fa09 f303 	lsl.w	r3, r9, r3
 8007b86:	4313      	orrs	r3, r2
 8007b88:	9304      	str	r3, [sp, #16]
 8007b8a:	46a2      	mov	sl, r4
 8007b8c:	e7d2      	b.n	8007b34 <_svfiprintf_r+0x9c>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	1d19      	adds	r1, r3, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	9103      	str	r1, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfbb      	ittet	lt
 8007b9a:	425b      	neglt	r3, r3
 8007b9c:	f042 0202 	orrlt.w	r2, r2, #2
 8007ba0:	9307      	strge	r3, [sp, #28]
 8007ba2:	9307      	strlt	r3, [sp, #28]
 8007ba4:	bfb8      	it	lt
 8007ba6:	9204      	strlt	r2, [sp, #16]
 8007ba8:	7823      	ldrb	r3, [r4, #0]
 8007baa:	2b2e      	cmp	r3, #46	; 0x2e
 8007bac:	d10c      	bne.n	8007bc8 <_svfiprintf_r+0x130>
 8007bae:	7863      	ldrb	r3, [r4, #1]
 8007bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8007bb2:	d135      	bne.n	8007c20 <_svfiprintf_r+0x188>
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	1d1a      	adds	r2, r3, #4
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	9203      	str	r2, [sp, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	bfb8      	it	lt
 8007bc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bc4:	3402      	adds	r4, #2
 8007bc6:	9305      	str	r3, [sp, #20]
 8007bc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007c94 <_svfiprintf_r+0x1fc>
 8007bcc:	7821      	ldrb	r1, [r4, #0]
 8007bce:	2203      	movs	r2, #3
 8007bd0:	4650      	mov	r0, sl
 8007bd2:	f7f8 fb4d 	bl	8000270 <memchr>
 8007bd6:	b140      	cbz	r0, 8007bea <_svfiprintf_r+0x152>
 8007bd8:	2340      	movs	r3, #64	; 0x40
 8007bda:	eba0 000a 	sub.w	r0, r0, sl
 8007bde:	fa03 f000 	lsl.w	r0, r3, r0
 8007be2:	9b04      	ldr	r3, [sp, #16]
 8007be4:	4303      	orrs	r3, r0
 8007be6:	3401      	adds	r4, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bee:	4826      	ldr	r0, [pc, #152]	; (8007c88 <_svfiprintf_r+0x1f0>)
 8007bf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bf4:	2206      	movs	r2, #6
 8007bf6:	f7f8 fb3b 	bl	8000270 <memchr>
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	d038      	beq.n	8007c70 <_svfiprintf_r+0x1d8>
 8007bfe:	4b23      	ldr	r3, [pc, #140]	; (8007c8c <_svfiprintf_r+0x1f4>)
 8007c00:	bb1b      	cbnz	r3, 8007c4a <_svfiprintf_r+0x1b2>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	3307      	adds	r3, #7
 8007c06:	f023 0307 	bic.w	r3, r3, #7
 8007c0a:	3308      	adds	r3, #8
 8007c0c:	9303      	str	r3, [sp, #12]
 8007c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c10:	4433      	add	r3, r6
 8007c12:	9309      	str	r3, [sp, #36]	; 0x24
 8007c14:	e767      	b.n	8007ae6 <_svfiprintf_r+0x4e>
 8007c16:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c1a:	460c      	mov	r4, r1
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	e7a5      	b.n	8007b6c <_svfiprintf_r+0xd4>
 8007c20:	2300      	movs	r3, #0
 8007c22:	3401      	adds	r4, #1
 8007c24:	9305      	str	r3, [sp, #20]
 8007c26:	4619      	mov	r1, r3
 8007c28:	f04f 0c0a 	mov.w	ip, #10
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c32:	3a30      	subs	r2, #48	; 0x30
 8007c34:	2a09      	cmp	r2, #9
 8007c36:	d903      	bls.n	8007c40 <_svfiprintf_r+0x1a8>
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0c5      	beq.n	8007bc8 <_svfiprintf_r+0x130>
 8007c3c:	9105      	str	r1, [sp, #20]
 8007c3e:	e7c3      	b.n	8007bc8 <_svfiprintf_r+0x130>
 8007c40:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c44:	4604      	mov	r4, r0
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7f0      	b.n	8007c2c <_svfiprintf_r+0x194>
 8007c4a:	ab03      	add	r3, sp, #12
 8007c4c:	9300      	str	r3, [sp, #0]
 8007c4e:	462a      	mov	r2, r5
 8007c50:	4b0f      	ldr	r3, [pc, #60]	; (8007c90 <_svfiprintf_r+0x1f8>)
 8007c52:	a904      	add	r1, sp, #16
 8007c54:	4638      	mov	r0, r7
 8007c56:	f3af 8000 	nop.w
 8007c5a:	1c42      	adds	r2, r0, #1
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	d1d6      	bne.n	8007c0e <_svfiprintf_r+0x176>
 8007c60:	89ab      	ldrh	r3, [r5, #12]
 8007c62:	065b      	lsls	r3, r3, #25
 8007c64:	f53f af2c 	bmi.w	8007ac0 <_svfiprintf_r+0x28>
 8007c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c6a:	b01d      	add	sp, #116	; 0x74
 8007c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	462a      	mov	r2, r5
 8007c76:	4b06      	ldr	r3, [pc, #24]	; (8007c90 <_svfiprintf_r+0x1f8>)
 8007c78:	a904      	add	r1, sp, #16
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f000 f87a 	bl	8007d74 <_printf_i>
 8007c80:	e7eb      	b.n	8007c5a <_svfiprintf_r+0x1c2>
 8007c82:	bf00      	nop
 8007c84:	080083d8 	.word	0x080083d8
 8007c88:	080083e2 	.word	0x080083e2
 8007c8c:	00000000 	.word	0x00000000
 8007c90:	080079e1 	.word	0x080079e1
 8007c94:	080083de 	.word	0x080083de

08007c98 <_printf_common>:
 8007c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	4699      	mov	r9, r3
 8007ca0:	688a      	ldr	r2, [r1, #8]
 8007ca2:	690b      	ldr	r3, [r1, #16]
 8007ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bfb8      	it	lt
 8007cac:	4613      	movlt	r3, r2
 8007cae:	6033      	str	r3, [r6, #0]
 8007cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	b10a      	cbz	r2, 8007cbe <_printf_common+0x26>
 8007cba:	3301      	adds	r3, #1
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	0699      	lsls	r1, r3, #26
 8007cc2:	bf42      	ittt	mi
 8007cc4:	6833      	ldrmi	r3, [r6, #0]
 8007cc6:	3302      	addmi	r3, #2
 8007cc8:	6033      	strmi	r3, [r6, #0]
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	f015 0506 	ands.w	r5, r5, #6
 8007cd0:	d106      	bne.n	8007ce0 <_printf_common+0x48>
 8007cd2:	f104 0a19 	add.w	sl, r4, #25
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	6832      	ldr	r2, [r6, #0]
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	dc26      	bgt.n	8007d2e <_printf_common+0x96>
 8007ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce4:	1e13      	subs	r3, r2, #0
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	bf18      	it	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	0692      	lsls	r2, r2, #26
 8007cee:	d42b      	bmi.n	8007d48 <_printf_common+0xb0>
 8007cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	47c0      	blx	r8
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d01e      	beq.n	8007d3c <_printf_common+0xa4>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	68e5      	ldr	r5, [r4, #12]
 8007d02:	6832      	ldr	r2, [r6, #0]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	2600      	movs	r6, #0
 8007d24:	341a      	adds	r4, #26
 8007d26:	42b5      	cmp	r5, r6
 8007d28:	d11a      	bne.n	8007d60 <_printf_common+0xc8>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e008      	b.n	8007d40 <_printf_common+0xa8>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	4649      	mov	r1, r9
 8007d34:	4638      	mov	r0, r7
 8007d36:	47c0      	blx	r8
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d103      	bne.n	8007d44 <_printf_common+0xac>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	3501      	adds	r5, #1
 8007d46:	e7c6      	b.n	8007cd6 <_printf_common+0x3e>
 8007d48:	18e1      	adds	r1, r4, r3
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	2030      	movs	r0, #48	; 0x30
 8007d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d52:	4422      	add	r2, r4
 8007d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	e7c7      	b.n	8007cf0 <_printf_common+0x58>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4622      	mov	r2, r4
 8007d64:	4649      	mov	r1, r9
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c0      	blx	r8
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d0e6      	beq.n	8007d3c <_printf_common+0xa4>
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7d9      	b.n	8007d26 <_printf_common+0x8e>
	...

08007d74 <_printf_i>:
 8007d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	7e0f      	ldrb	r7, [r1, #24]
 8007d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d7c:	2f78      	cmp	r7, #120	; 0x78
 8007d7e:	4691      	mov	r9, r2
 8007d80:	4680      	mov	r8, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	469a      	mov	sl, r3
 8007d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d8a:	d807      	bhi.n	8007d9c <_printf_i+0x28>
 8007d8c:	2f62      	cmp	r7, #98	; 0x62
 8007d8e:	d80a      	bhi.n	8007da6 <_printf_i+0x32>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	f000 80d8 	beq.w	8007f46 <_printf_i+0x1d2>
 8007d96:	2f58      	cmp	r7, #88	; 0x58
 8007d98:	f000 80a3 	beq.w	8007ee2 <_printf_i+0x16e>
 8007d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da4:	e03a      	b.n	8007e1c <_printf_i+0xa8>
 8007da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007daa:	2b15      	cmp	r3, #21
 8007dac:	d8f6      	bhi.n	8007d9c <_printf_i+0x28>
 8007dae:	a101      	add	r1, pc, #4	; (adr r1, 8007db4 <_printf_i+0x40>)
 8007db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007db4:	08007e0d 	.word	0x08007e0d
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007d9d 	.word	0x08007d9d
 8007dc0:	08007d9d 	.word	0x08007d9d
 8007dc4:	08007d9d 	.word	0x08007d9d
 8007dc8:	08007d9d 	.word	0x08007d9d
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007d9d 	.word	0x08007d9d
 8007dd4:	08007d9d 	.word	0x08007d9d
 8007dd8:	08007d9d 	.word	0x08007d9d
 8007ddc:	08007d9d 	.word	0x08007d9d
 8007de0:	08007f2d 	.word	0x08007f2d
 8007de4:	08007e51 	.word	0x08007e51
 8007de8:	08007f0f 	.word	0x08007f0f
 8007dec:	08007d9d 	.word	0x08007d9d
 8007df0:	08007d9d 	.word	0x08007d9d
 8007df4:	08007f4f 	.word	0x08007f4f
 8007df8:	08007d9d 	.word	0x08007d9d
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007d9d 	.word	0x08007d9d
 8007e04:	08007d9d 	.word	0x08007d9d
 8007e08:	08007f17 	.word	0x08007f17
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	602a      	str	r2, [r5, #0]
 8007e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0a3      	b.n	8007f68 <_printf_i+0x1f4>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	6829      	ldr	r1, [r5, #0]
 8007e24:	0606      	lsls	r6, r0, #24
 8007e26:	f101 0304 	add.w	r3, r1, #4
 8007e2a:	d50a      	bpl.n	8007e42 <_printf_i+0xce>
 8007e2c:	680e      	ldr	r6, [r1, #0]
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	da03      	bge.n	8007e3c <_printf_i+0xc8>
 8007e34:	232d      	movs	r3, #45	; 0x2d
 8007e36:	4276      	negs	r6, r6
 8007e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e3c:	485e      	ldr	r0, [pc, #376]	; (8007fb8 <_printf_i+0x244>)
 8007e3e:	230a      	movs	r3, #10
 8007e40:	e019      	b.n	8007e76 <_printf_i+0x102>
 8007e42:	680e      	ldr	r6, [r1, #0]
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e4a:	bf18      	it	ne
 8007e4c:	b236      	sxthne	r6, r6
 8007e4e:	e7ef      	b.n	8007e30 <_printf_i+0xbc>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	1d19      	adds	r1, r3, #4
 8007e56:	6029      	str	r1, [r5, #0]
 8007e58:	0601      	lsls	r1, r0, #24
 8007e5a:	d501      	bpl.n	8007e60 <_printf_i+0xec>
 8007e5c:	681e      	ldr	r6, [r3, #0]
 8007e5e:	e002      	b.n	8007e66 <_printf_i+0xf2>
 8007e60:	0646      	lsls	r6, r0, #25
 8007e62:	d5fb      	bpl.n	8007e5c <_printf_i+0xe8>
 8007e64:	881e      	ldrh	r6, [r3, #0]
 8007e66:	4854      	ldr	r0, [pc, #336]	; (8007fb8 <_printf_i+0x244>)
 8007e68:	2f6f      	cmp	r7, #111	; 0x6f
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2308      	moveq	r3, #8
 8007e6e:	230a      	movne	r3, #10
 8007e70:	2100      	movs	r1, #0
 8007e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e76:	6865      	ldr	r5, [r4, #4]
 8007e78:	60a5      	str	r5, [r4, #8]
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	bfa2      	ittt	ge
 8007e7e:	6821      	ldrge	r1, [r4, #0]
 8007e80:	f021 0104 	bicge.w	r1, r1, #4
 8007e84:	6021      	strge	r1, [r4, #0]
 8007e86:	b90e      	cbnz	r6, 8007e8c <_printf_i+0x118>
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	d04d      	beq.n	8007f28 <_printf_i+0x1b4>
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e92:	fb03 6711 	mls	r7, r3, r1, r6
 8007e96:	5dc7      	ldrb	r7, [r0, r7]
 8007e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e9c:	4637      	mov	r7, r6
 8007e9e:	42bb      	cmp	r3, r7
 8007ea0:	460e      	mov	r6, r1
 8007ea2:	d9f4      	bls.n	8007e8e <_printf_i+0x11a>
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d10b      	bne.n	8007ec0 <_printf_i+0x14c>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07de      	lsls	r6, r3, #31
 8007eac:	d508      	bpl.n	8007ec0 <_printf_i+0x14c>
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	6861      	ldr	r1, [r4, #4]
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	bfde      	ittt	le
 8007eb6:	2330      	movle	r3, #48	; 0x30
 8007eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ec0:	1b52      	subs	r2, r2, r5
 8007ec2:	6122      	str	r2, [r4, #16]
 8007ec4:	f8cd a000 	str.w	sl, [sp]
 8007ec8:	464b      	mov	r3, r9
 8007eca:	aa03      	add	r2, sp, #12
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f7ff fee2 	bl	8007c98 <_printf_common>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d14c      	bne.n	8007f72 <_printf_i+0x1fe>
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	b004      	add	sp, #16
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee2:	4835      	ldr	r0, [pc, #212]	; (8007fb8 <_printf_i+0x244>)
 8007ee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ee8:	6829      	ldr	r1, [r5, #0]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ef0:	6029      	str	r1, [r5, #0]
 8007ef2:	061d      	lsls	r5, r3, #24
 8007ef4:	d514      	bpl.n	8007f20 <_printf_i+0x1ac>
 8007ef6:	07df      	lsls	r7, r3, #31
 8007ef8:	bf44      	itt	mi
 8007efa:	f043 0320 	orrmi.w	r3, r3, #32
 8007efe:	6023      	strmi	r3, [r4, #0]
 8007f00:	b91e      	cbnz	r6, 8007f0a <_printf_i+0x196>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	f023 0320 	bic.w	r3, r3, #32
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	2310      	movs	r3, #16
 8007f0c:	e7b0      	b.n	8007e70 <_printf_i+0xfc>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	f043 0320 	orr.w	r3, r3, #32
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	2378      	movs	r3, #120	; 0x78
 8007f18:	4828      	ldr	r0, [pc, #160]	; (8007fbc <_printf_i+0x248>)
 8007f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f1e:	e7e3      	b.n	8007ee8 <_printf_i+0x174>
 8007f20:	0659      	lsls	r1, r3, #25
 8007f22:	bf48      	it	mi
 8007f24:	b2b6      	uxthmi	r6, r6
 8007f26:	e7e6      	b.n	8007ef6 <_printf_i+0x182>
 8007f28:	4615      	mov	r5, r2
 8007f2a:	e7bb      	b.n	8007ea4 <_printf_i+0x130>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	6826      	ldr	r6, [r4, #0]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6028      	str	r0, [r5, #0]
 8007f36:	0635      	lsls	r5, r6, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1cc>
 8007f3c:	6019      	str	r1, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1d2>
 8007f40:	0670      	lsls	r0, r6, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1c8>
 8007f44:	8019      	strh	r1, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4615      	mov	r5, r2
 8007f4c:	e7ba      	b.n	8007ec4 <_printf_i+0x150>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	602a      	str	r2, [r5, #0]
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7f8 f988 	bl	8000270 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1f2>
 8007f62:	1b40      	subs	r0, r0, r5
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	e7a8      	b.n	8007ec4 <_printf_i+0x150>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	462a      	mov	r2, r5
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ab      	beq.n	8007ed8 <_printf_i+0x164>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x23a>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a4      	b.n	8007edc <_printf_i+0x168>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09b      	beq.n	8007ed8 <_printf_i+0x164>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x21e>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x212>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x22e>
 8007fb6:	bf00      	nop
 8007fb8:	080083e9 	.word	0x080083e9
 8007fbc:	080083fa 	.word	0x080083fa

08007fc0 <_sbrk_r>:
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	4d06      	ldr	r5, [pc, #24]	; (8007fdc <_sbrk_r+0x1c>)
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	602b      	str	r3, [r5, #0]
 8007fcc:	f000 f900 	bl	80081d0 <_sbrk>
 8007fd0:	1c43      	adds	r3, r0, #1
 8007fd2:	d102      	bne.n	8007fda <_sbrk_r+0x1a>
 8007fd4:	682b      	ldr	r3, [r5, #0]
 8007fd6:	b103      	cbz	r3, 8007fda <_sbrk_r+0x1a>
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	20014518 	.word	0x20014518

08007fe0 <__sread>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	f000 f8d8 	bl	800819c <_read_r>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	bfab      	itete	ge
 8007ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff4:	181b      	addge	r3, r3, r0
 8007ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ffa:	bfac      	ite	ge
 8007ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ffe:	81a3      	strhlt	r3, [r4, #12]
 8008000:	bd10      	pop	{r4, pc}

08008002 <__swrite>:
 8008002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008006:	461f      	mov	r7, r3
 8008008:	898b      	ldrh	r3, [r1, #12]
 800800a:	05db      	lsls	r3, r3, #23
 800800c:	4605      	mov	r5, r0
 800800e:	460c      	mov	r4, r1
 8008010:	4616      	mov	r6, r2
 8008012:	d505      	bpl.n	8008020 <__swrite+0x1e>
 8008014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008018:	2302      	movs	r3, #2
 800801a:	2200      	movs	r2, #0
 800801c:	f000 f856 	bl	80080cc <_lseek_r>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	4632      	mov	r2, r6
 800802e:	463b      	mov	r3, r7
 8008030:	4628      	mov	r0, r5
 8008032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008036:	f7ff b80d 	b.w	8007054 <_write_r>

0800803a <__sseek>:
 800803a:	b510      	push	{r4, lr}
 800803c:	460c      	mov	r4, r1
 800803e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008042:	f000 f843 	bl	80080cc <_lseek_r>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	89a3      	ldrh	r3, [r4, #12]
 800804a:	bf15      	itete	ne
 800804c:	6560      	strne	r0, [r4, #84]	; 0x54
 800804e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008056:	81a3      	strheq	r3, [r4, #12]
 8008058:	bf18      	it	ne
 800805a:	81a3      	strhne	r3, [r4, #12]
 800805c:	bd10      	pop	{r4, pc}

0800805e <__sclose>:
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	f000 b801 	b.w	8008068 <_close_r>
	...

08008068 <_close_r>:
 8008068:	b538      	push	{r3, r4, r5, lr}
 800806a:	4d06      	ldr	r5, [pc, #24]	; (8008084 <_close_r+0x1c>)
 800806c:	2300      	movs	r3, #0
 800806e:	4604      	mov	r4, r0
 8008070:	4608      	mov	r0, r1
 8008072:	602b      	str	r3, [r5, #0]
 8008074:	f7f8 fe27 	bl	8000cc6 <_close>
 8008078:	1c43      	adds	r3, r0, #1
 800807a:	d102      	bne.n	8008082 <_close_r+0x1a>
 800807c:	682b      	ldr	r3, [r5, #0]
 800807e:	b103      	cbz	r3, 8008082 <_close_r+0x1a>
 8008080:	6023      	str	r3, [r4, #0]
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	20014518 	.word	0x20014518

08008088 <_fstat_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	4d07      	ldr	r5, [pc, #28]	; (80080a8 <_fstat_r+0x20>)
 800808c:	2300      	movs	r3, #0
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	602b      	str	r3, [r5, #0]
 8008096:	f7f8 fe22 	bl	8000cde <_fstat>
 800809a:	1c43      	adds	r3, r0, #1
 800809c:	d102      	bne.n	80080a4 <_fstat_r+0x1c>
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	b103      	cbz	r3, 80080a4 <_fstat_r+0x1c>
 80080a2:	6023      	str	r3, [r4, #0]
 80080a4:	bd38      	pop	{r3, r4, r5, pc}
 80080a6:	bf00      	nop
 80080a8:	20014518 	.word	0x20014518

080080ac <_isatty_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	4d06      	ldr	r5, [pc, #24]	; (80080c8 <_isatty_r+0x1c>)
 80080b0:	2300      	movs	r3, #0
 80080b2:	4604      	mov	r4, r0
 80080b4:	4608      	mov	r0, r1
 80080b6:	602b      	str	r3, [r5, #0]
 80080b8:	f7f8 fe21 	bl	8000cfe <_isatty>
 80080bc:	1c43      	adds	r3, r0, #1
 80080be:	d102      	bne.n	80080c6 <_isatty_r+0x1a>
 80080c0:	682b      	ldr	r3, [r5, #0]
 80080c2:	b103      	cbz	r3, 80080c6 <_isatty_r+0x1a>
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	bd38      	pop	{r3, r4, r5, pc}
 80080c8:	20014518 	.word	0x20014518

080080cc <_lseek_r>:
 80080cc:	b538      	push	{r3, r4, r5, lr}
 80080ce:	4d07      	ldr	r5, [pc, #28]	; (80080ec <_lseek_r+0x20>)
 80080d0:	4604      	mov	r4, r0
 80080d2:	4608      	mov	r0, r1
 80080d4:	4611      	mov	r1, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	602a      	str	r2, [r5, #0]
 80080da:	461a      	mov	r2, r3
 80080dc:	f7f8 fe1a 	bl	8000d14 <_lseek>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_lseek_r+0x1e>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_lseek_r+0x1e>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	20014518 	.word	0x20014518

080080f0 <memmove>:
 80080f0:	4288      	cmp	r0, r1
 80080f2:	b510      	push	{r4, lr}
 80080f4:	eb01 0402 	add.w	r4, r1, r2
 80080f8:	d902      	bls.n	8008100 <memmove+0x10>
 80080fa:	4284      	cmp	r4, r0
 80080fc:	4623      	mov	r3, r4
 80080fe:	d807      	bhi.n	8008110 <memmove+0x20>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	42a1      	cmp	r1, r4
 8008104:	d008      	beq.n	8008118 <memmove+0x28>
 8008106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810e:	e7f8      	b.n	8008102 <memmove+0x12>
 8008110:	4402      	add	r2, r0
 8008112:	4601      	mov	r1, r0
 8008114:	428a      	cmp	r2, r1
 8008116:	d100      	bne.n	800811a <memmove+0x2a>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008122:	e7f7      	b.n	8008114 <memmove+0x24>

08008124 <__malloc_lock>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__malloc_lock+0x8>)
 8008126:	f7ff bb13 	b.w	8007750 <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	2001450b 	.word	0x2001450b

08008130 <__malloc_unlock>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__malloc_unlock+0x8>)
 8008132:	f7ff bb0e 	b.w	8007752 <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	2001450b 	.word	0x2001450b

0800813c <_realloc_r>:
 800813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008140:	4680      	mov	r8, r0
 8008142:	4614      	mov	r4, r2
 8008144:	460e      	mov	r6, r1
 8008146:	b921      	cbnz	r1, 8008152 <_realloc_r+0x16>
 8008148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814c:	4611      	mov	r1, r2
 800814e:	f7ff bbd3 	b.w	80078f8 <_malloc_r>
 8008152:	b92a      	cbnz	r2, 8008160 <_realloc_r+0x24>
 8008154:	f7ff fb64 	bl	8007820 <_free_r>
 8008158:	4625      	mov	r5, r4
 800815a:	4628      	mov	r0, r5
 800815c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008160:	f000 f82e 	bl	80081c0 <_malloc_usable_size_r>
 8008164:	4284      	cmp	r4, r0
 8008166:	4607      	mov	r7, r0
 8008168:	d802      	bhi.n	8008170 <_realloc_r+0x34>
 800816a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800816e:	d812      	bhi.n	8008196 <_realloc_r+0x5a>
 8008170:	4621      	mov	r1, r4
 8008172:	4640      	mov	r0, r8
 8008174:	f7ff fbc0 	bl	80078f8 <_malloc_r>
 8008178:	4605      	mov	r5, r0
 800817a:	2800      	cmp	r0, #0
 800817c:	d0ed      	beq.n	800815a <_realloc_r+0x1e>
 800817e:	42bc      	cmp	r4, r7
 8008180:	4622      	mov	r2, r4
 8008182:	4631      	mov	r1, r6
 8008184:	bf28      	it	cs
 8008186:	463a      	movcs	r2, r7
 8008188:	f7fe ffaa 	bl	80070e0 <memcpy>
 800818c:	4631      	mov	r1, r6
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff fb46 	bl	8007820 <_free_r>
 8008194:	e7e1      	b.n	800815a <_realloc_r+0x1e>
 8008196:	4635      	mov	r5, r6
 8008198:	e7df      	b.n	800815a <_realloc_r+0x1e>
	...

0800819c <_read_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d07      	ldr	r5, [pc, #28]	; (80081bc <_read_r+0x20>)
 80081a0:	4604      	mov	r4, r0
 80081a2:	4608      	mov	r0, r1
 80081a4:	4611      	mov	r1, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	602a      	str	r2, [r5, #0]
 80081aa:	461a      	mov	r2, r3
 80081ac:	f7f8 fd6e 	bl	8000c8c <_read>
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	d102      	bne.n	80081ba <_read_r+0x1e>
 80081b4:	682b      	ldr	r3, [r5, #0]
 80081b6:	b103      	cbz	r3, 80081ba <_read_r+0x1e>
 80081b8:	6023      	str	r3, [r4, #0]
 80081ba:	bd38      	pop	{r3, r4, r5, pc}
 80081bc:	20014518 	.word	0x20014518

080081c0 <_malloc_usable_size_r>:
 80081c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081c4:	1f18      	subs	r0, r3, #4
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfbc      	itt	lt
 80081ca:	580b      	ldrlt	r3, [r1, r0]
 80081cc:	18c0      	addlt	r0, r0, r3
 80081ce:	4770      	bx	lr

080081d0 <_sbrk>:
 80081d0:	4a04      	ldr	r2, [pc, #16]	; (80081e4 <_sbrk+0x14>)
 80081d2:	6811      	ldr	r1, [r2, #0]
 80081d4:	4603      	mov	r3, r0
 80081d6:	b909      	cbnz	r1, 80081dc <_sbrk+0xc>
 80081d8:	4903      	ldr	r1, [pc, #12]	; (80081e8 <_sbrk+0x18>)
 80081da:	6011      	str	r1, [r2, #0]
 80081dc:	6810      	ldr	r0, [r2, #0]
 80081de:	4403      	add	r3, r0
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	4770      	bx	lr
 80081e4:	2001451c 	.word	0x2001451c
 80081e8:	20014520 	.word	0x20014520

080081ec <_init>:
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ee:	bf00      	nop
 80081f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081f2:	bc08      	pop	{r3}
 80081f4:	469e      	mov	lr, r3
 80081f6:	4770      	bx	lr

080081f8 <_fini>:
 80081f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fa:	bf00      	nop
 80081fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	469e      	mov	lr, r3
 8008202:	4770      	bx	lr
